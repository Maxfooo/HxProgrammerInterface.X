

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue May 08 11:27:07 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK5,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK11,global,class=BANK11,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK12,global,class=BANK12,space=1,delta=1,noexec
    20                           	psect	cstackBANK10,global,class=BANK10,space=1,delta=1,noexec
    21                           	psect	cstackBANK9,global,class=BANK9,space=1,delta=1,noexec
    22                           	psect	cstackBANK8,global,class=BANK8,space=1,delta=1,noexec
    23                           	psect	cstackBANK7,global,class=BANK7,space=1,delta=1,noexec
    24                           	psect	cstackBANK6,global,class=BANK6,space=1,delta=1,noexec
    25                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1,noexec
    26                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    27                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    28                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    29                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    31                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	text0,global,reloc=2,class=CODE,delta=1
    33                           	psect	text1,global,reloc=2,class=CODE,delta=1
    34                           	psect	text2,global,reloc=2,class=CODE,delta=1
    35                           	psect	text3,global,reloc=2,class=CODE,delta=1
    36                           	psect	text4,global,reloc=2,class=CODE,delta=1
    37                           	psect	text5,global,reloc=2,class=CODE,delta=1
    38                           	psect	text6,global,reloc=2,class=CODE,delta=1
    39                           	psect	text7,global,reloc=2,class=CODE,delta=1
    40                           	psect	text8,global,reloc=2,class=CODE,delta=1
    41                           	psect	text9,global,reloc=2,class=CODE,delta=1
    42                           	psect	text10,global,reloc=2,class=CODE,delta=1
    43                           	psect	text11,global,reloc=2,class=CODE,delta=1
    44                           	psect	text12,global,reloc=2,class=CODE,delta=1
    45                           	psect	text13,global,reloc=2,class=CODE,delta=1
    46                           	psect	text14,global,reloc=2,class=CODE,delta=1
    47                           	psect	text15,global,reloc=2,class=CODE,delta=1
    48                           	psect	text16,global,reloc=2,class=CODE,delta=1
    49                           	psect	text17,global,reloc=2,class=CODE,delta=1
    50                           	psect	text18,global,reloc=2,class=CODE,delta=1
    51                           	psect	text19,global,reloc=2,class=CODE,delta=1
    52                           	psect	text20,global,reloc=2,class=CODE,delta=1
    53                           	psect	text21,global,reloc=2,class=CODE,delta=1
    54                           	psect	text22,global,reloc=2,class=CODE,delta=1
    55                           	psect	text23,global,reloc=2,class=CODE,delta=1
    56                           	psect	text24,global,reloc=2,class=CODE,delta=1
    57                           	psect	text25,global,reloc=2,class=CODE,delta=1
    58                           	psect	text26,global,reloc=2,class=CODE,delta=1
    59                           	psect	text27,global,reloc=2,class=CODE,delta=1
    60                           	psect	text28,global,reloc=2,class=CODE,delta=1
    61                           	psect	text29,global,reloc=2,class=CODE,delta=1
    62                           	psect	text30,global,reloc=2,class=CODE,delta=1
    63                           	psect	text31,global,reloc=2,class=CODE,delta=1
    64                           	psect	text32,global,reloc=2,class=CODE,delta=1
    65                           	psect	text33,global,reloc=2,class=CODE,delta=1
    66                           	psect	text34,global,reloc=2,class=CODE,delta=1
    67                           	psect	text35,global,reloc=2,class=CODE,delta=1
    68                           	psect	text36,global,reloc=2,class=CODE,delta=1
    69                           	psect	text37,global,reloc=2,class=CODE,delta=1
    70                           	psect	text38,global,reloc=2,class=CODE,delta=1
    71                           	psect	text39,global,reloc=2,class=CODE,delta=1
    72                           	psect	text40,global,reloc=2,class=CODE,delta=1
    73                           	psect	text41,global,reloc=2,class=CODE,delta=1
    74                           	psect	text42,global,reloc=2,class=CODE,delta=1
    75                           	psect	text43,global,reloc=2,class=CODE,delta=1
    76                           	psect	text44,global,reloc=2,class=CODE,delta=1
    77                           	psect	text45,global,reloc=2,class=CODE,delta=1
    78                           	psect	text46,global,reloc=2,class=CODE,delta=1
    79                           	psect	text47,global,reloc=2,class=CODE,delta=1
    80                           	psect	text48,global,reloc=2,class=CODE,delta=1
    81                           	psect	text49,global,reloc=2,class=CODE,delta=1
    82                           	psect	text50,global,reloc=2,class=CODE,delta=1
    83                           	psect	text51,global,reloc=2,class=CODE,delta=1
    84                           	psect	text52,global,reloc=2,class=CODE,delta=1
    85                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text54,global,reloc=2,class=CODE,delta=1
    87                           	psect	text55,global,reloc=2,class=CODE,delta=1
    88                           	psect	text56,global,reloc=2,class=CODE,delta=1
    89                           	psect	text57,global,reloc=2,class=CODE,delta=1
    90                           	psect	text58,global,reloc=2,class=CODE,delta=1
    91                           	psect	text59,global,reloc=2,class=CODE,delta=1
    92                           	psect	text60,global,reloc=2,class=CODE,delta=1
    93                           	psect	text61,global,reloc=2,class=CODE,delta=1
    94                           	psect	text62,global,reloc=2,class=CODE,delta=1
    95                           	psect	text63,global,reloc=2,class=CODE,delta=1
    96                           	psect	text64,global,reloc=2,class=CODE,delta=1
    97                           	psect	text65,global,reloc=2,class=CODE,delta=1
    98                           	psect	text66,global,reloc=2,class=CODE,delta=1
    99                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text68,global,reloc=2,class=CODE,delta=1
   101                           	psect	text69,global,reloc=2,class=CODE,delta=1
   102                           	psect	text70,global,reloc=2,class=CODE,delta=1
   103                           	psect	text71,global,reloc=2,class=CODE,delta=1
   104                           	psect	text72,global,reloc=2,class=CODE,delta=1
   105                           	psect	text73,global,reloc=2,class=CODE,delta=1
   106                           	psect	text74,global,reloc=2,class=CODE,delta=1
   107                           	psect	text75,global,reloc=2,class=CODE,delta=1
   108                           	psect	text76,global,reloc=2,class=CODE,delta=1
   109                           	psect	text77,global,reloc=2,class=CODE,delta=1
   110                           	psect	text78,global,reloc=2,class=CODE,delta=1
   111                           	psect	text79,global,reloc=2,class=CODE,delta=1
   112                           	psect	text80,global,reloc=2,class=CODE,delta=1
   113                           	psect	text81,global,reloc=2,class=CODE,delta=1
   114                           	psect	text82,global,reloc=2,class=CODE,delta=1
   115                           	psect	text83,global,reloc=2,class=CODE,delta=1
   116                           	psect	text84,global,reloc=2,class=CODE,delta=1
   117                           	psect	text85,global,reloc=2,class=CODE,delta=1
   118                           	psect	text86,global,reloc=2,class=CODE,delta=1
   119                           	psect	text87,global,reloc=2,class=CODE,delta=1
   120                           	psect	text88,global,reloc=2,class=CODE,delta=1
   121                           	psect	text89,global,reloc=2,class=CODE,delta=1
   122                           	psect	text90,global,reloc=2,class=CODE,delta=1
   123                           	psect	text91,global,reloc=2,class=CODE,delta=1
   124                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   125                           	psect	text93,global,reloc=2,class=CODE,delta=1
   126                           	psect	text94,global,reloc=2,class=CODE,delta=1
   127                           	psect	text95,global,reloc=2,class=CODE,delta=1
   128                           	psect	text96,global,reloc=2,class=CODE,delta=1
   129                           	psect	text97,global,reloc=2,class=CODE,delta=1
   130                           	psect	text98,global,reloc=2,class=CODE,delta=1
   131                           	psect	text99,global,reloc=2,class=CODE,delta=1
   132                           	psect	text100,global,reloc=2,class=CODE,delta=1
   133                           	psect	text101,global,reloc=2,class=CODE,delta=1
   134                           	psect	text102,global,reloc=2,class=CODE,delta=1
   135                           	psect	text103,global,reloc=2,class=CODE,delta=1
   136                           	psect	text104,global,reloc=2,class=CODE,delta=1
   137                           	psect	text105,global,reloc=2,class=CODE,delta=1
   138                           	psect	text106,global,reloc=2,class=CODE,delta=1
   139                           	psect	text107,global,reloc=2,class=CODE,delta=1
   140                           	psect	text108,global,reloc=2,class=CODE,delta=1
   141                           	psect	text109,global,reloc=2,class=CODE,delta=1
   142                           	psect	text110,global,reloc=2,class=CODE,delta=1
   143                           	psect	text111,global,reloc=2,class=CODE,delta=1
   144                           	psect	text112,global,reloc=2,class=CODE,delta=1
   145                           	psect	text113,global,reloc=2,class=CODE,delta=1
   146                           	psect	text114,global,reloc=2,class=CODE,delta=1
   147                           	psect	text115,global,reloc=2,class=CODE,delta=1
   148                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   149                           	psect	text116,global,reloc=2,class=CODE,delta=1
   150                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   151                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   152  0000                     
   153                           ; Version 1.44
   154                           ; Generated 14/09/2017 GMT
   155                           ; 
   156                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   157                           ; All rights reserved.
   158                           ; 
   159                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   160                           ; 
   161                           ; Redistribution and use in source and binary forms, with or without modification, are
   162                           ; permitted provided that the following conditions are met:
   163                           ; 
   164                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   165                           ;        conditions and the following disclaimer.
   166                           ; 
   167                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   168                           ;        of conditions and the following disclaimer in the documentation and/or other
   169                           ;        materials provided with the distribution.
   170                           ; 
   171                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   172                           ;        software without specific prior written permission.
   173                           ; 
   174                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   175                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   176                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   177                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   178                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   179                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   180                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   181                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   182                           ; 
   183                           ; 
   184                           ; Code-generator required, PIC18F47K40 Definitions
   185                           ; 
   186                           ; SFR Addresses
   187  0000                     
   188                           	psect	idataCOMRAM
   189  0040AE                     __pidataCOMRAM:
   190                           	opt stack 0
   191                           
   192                           ;initializer for _hx_txPacketFlag
   193  0040AE  01                 	db	1
   194                           
   195                           	psect	idataBANK5
   196  00408C                     __pidataBANK5:
   197                           	opt stack 0
   198                           
   199                           ;initializer for _LATCH_OSC0_DATA
   200  00408C  000B               	dw	11
   201  00408E  0000               	dw	0
   202                           
   203                           	psect	nvCOMRAM
   204  000043                     __pnvCOMRAM:
   205                           	opt stack 0
   206  000043                     _timer0ReloadVal16bit:
   207                           	opt stack 0
   208  000043                     	ds	2
   209  000045                     _hx_state:
   210                           	opt stack 0
   211  000045                     	ds	1
   212                           
   213                           	psect	nvBANK3
   214  0003FB                     __pnvBANK3:
   215                           	opt stack 0
   216  0003FB                     _TMR0_InterruptHandler:
   217                           	opt stack 0
   218  0003FB                     	ds	3
   219  0003FE                     _eusart1TxBufferRemaining:
   220                           	opt stack 0
   221  0003FE                     	ds	1
   222  0000                     _SSP1DATPPSbits	set	3768
   223  0000                     _SSP1CLKPPSbits	set	3767
   224  0000                     _RX1PPSbits	set	3765
   225  0000                     _RC2PPS	set	3833
   226  0000                     _RC1PPS	set	3832
   227  0000                     _RB1PPS	set	3824
   228  0000                     _PPSLOCKbits	set	3744
   229  0000                     _PPSLOCK	set	3744
   230  0000                     _OSCTUNE	set	3805
   231  0000                     _OSCFRQ	set	3806
   232  0000                     _OSCEN	set	3804
   233  0000                     _OSCCON3	set	3802
   234  0000                     _OSCCON1	set	3800
   235  0000                     _PIR0bits	set	3786
   236  0000                     _PIE0bits	set	3778
   237  0000                     _PIR3bits	set	3789
   238  0000                     _PIE3bits	set	3781
   239  0000                     _PIR7bits	set	3793
   240  0000                     _ODCOND	set	3876
   241  0000                     _ODCONC	set	3871
   242  0000                     _ODCONB	set	3863
   243  0000                     _ODCONA	set	3855
   244  0000                     _ODCONE	set	3884
   245  0000                     _WPUC	set	3872
   246  0000                     _WPUA	set	3856
   247  0000                     _WPUB	set	3864
   248  0000                     _WPUE	set	3885
   249  0000                     _WPUD	set	3877
   250  0000                     _ANSELA	set	3857
   251  0000                     _ANSELE	set	3886
   252  0000                     _ANSELD	set	3878
   253  0000                     _ANSELB	set	3865
   254  0000                     _ANSELC	set	3873
   255  0000                     _T0CON0bits	set	4053
   256  0000                     _TMR0L	set	4051
   257  0000                     _TMR0H	set	4052
   258  0000                     _T0CON1	set	4054
   259  0000                     _T0CON0	set	4053
   260  0000                     _TRISD	set	3979
   261  0000                     _TRISC	set	3978
   262  0000                     _TRISB	set	3977
   263  0000                     _TRISA	set	3976
   264  0000                     _TRISE	set	3980
   265  0000                     _LATC	set	3973
   266  0000                     _LATB	set	3972
   267  0000                     _LATD	set	3974
   268  0000                     _LATE	set	3975
   269  0000                     _RC1REG	set	3993
   270  0000                     _RC1STAbits	set	3997
   271  0000                     _TX1REG	set	3994
   272  0000                     _SP1BRGH	set	3996
   273  0000                     _SP1BRGL	set	3995
   274  0000                     _TX1STA	set	3998
   275  0000                     _RC1STA	set	3997
   276  0000                     _BAUD1CON	set	3999
   277  0000                     _SSP1BUF	set	3986
   278  0000                     _SSP1CON2bits	set	3991
   279  0000                     _SSP1CON1bits	set	3990
   280  0000                     _SSP1CON3	set	3992
   281  0000                     _SSP1CON1	set	3990
   282  0000                     _SSP1STAT	set	3989
   283  0000                     _SSP1ADD	set	3987
   284  0000                     _PORTBbits	set	3982
   285  0000                     _PORTA	set	3981
   286  0000                     _LATAbits	set	3971
   287  0000                     _PORTAbits	set	3981
   288  0000                     _LATBbits	set	3972
   289  0000                     _LATA	set	3971
   290  0000                     _NVMCON2	set	3970
   291  0000                     _NVMCON1bits	set	3969
   292  0000                     _NVMDAT	set	3968
   293  0000                     _NVMADRH	set	3967
   294  0000                     _NVMADRL	set	3966
   295  0000                     _INTCONbits	set	4082
   296  0000                     _GIE	set	32663
   297                           
   298                           ; #config settings
   299  0000                     
   300                           	psect	cinit
   301  003216                     __pcinit:
   302                           	opt stack 0
   303  003216                     start_initialization:
   304                           	opt stack 0
   305  003216                     __initialization:
   306                           	opt stack 0
   307                           
   308                           ; Initialize objects allocated to BANK5 (4 bytes)
   309                           ; load TBLPTR registers with __pidataBANK5
   310  003216  0E8C               	movlw	low __pidataBANK5
   311  003218  6EF6               	movwf	tblptrl,c
   312  00321A  0E40               	movlw	high __pidataBANK5
   313  00321C  6EF7               	movwf	tblptrh,c
   314  00321E  0E00               	movlw	low (__pidataBANK5 shr (0+16))
   315  003220  6EF8               	movwf	tblptru,c
   316  003222  EE05  F0F9         	lfsr	0,__pdataBANK5
   317  003226  EE10 F004          	lfsr	1,4
   318  00322A                     copy_data0:
   319  00322A  0009               	tblrd		*+
   320  00322C  CFF5 FFEE          	movff	tablat,postinc0
   321  003230  50E5               	movf	postdec1,w,c
   322  003232  50E1               	movf	fsr1l,w,c
   323  003234  E1FA               	bnz	copy_data0
   324                           
   325                           ; Initialize objects allocated to COMRAM (1 bytes)
   326                           ; load TBLPTR registers with __pidataCOMRAM
   327  003236  0EAE               	movlw	low __pidataCOMRAM
   328  003238  6EF6               	movwf	tblptrl,c
   329  00323A  0E40               	movlw	high __pidataCOMRAM
   330  00323C  6EF7               	movwf	tblptrh,c
   331  00323E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   332  003240  6EF8               	movwf	tblptru,c
   333  003242  0009               	tblrd		*+	;fetch initializer
   334  003244  CFF5 F046          	movff	tablat,__pdataCOMRAM
   335                           
   336                           ; Clear objects allocated to BANK11 (253 bytes)
   337  003248  EE0B  F000         	lfsr	0,__pbssBANK11
   338  00324C  0EFD               	movlw	253
   339  00324E                     clear_0:
   340  00324E  6AEE               	clrf	postinc0,c
   341  003250  06E8               	decf	wreg,f,c
   342  003252  E1FD               	bnz	clear_0
   343                           
   344                           ; Clear objects allocated to BANK6 (34 bytes)
   345  003254  EE06  F0D5         	lfsr	0,__pbssBANK6
   346  003258  0E22               	movlw	34
   347  00325A                     clear_1:
   348  00325A  6AEE               	clrf	postinc0,c
   349  00325C  06E8               	decf	wreg,f,c
   350  00325E  E1FD               	bnz	clear_1
   351                           
   352                           ; Clear objects allocated to BANK5 (36 bytes)
   353  003260  EE05  F0D5         	lfsr	0,__pbssBANK5
   354  003264  0E24               	movlw	36
   355  003266                     clear_2:
   356  003266  6AEE               	clrf	postinc0,c
   357  003268  06E8               	decf	wreg,f,c
   358  00326A  E1FD               	bnz	clear_2
   359                           
   360                           ; Clear objects allocated to BANK4 (42 bytes)
   361  00326C  EE04  F0D5         	lfsr	0,__pbssBANK4
   362  003270  0E2A               	movlw	42
   363  003272                     clear_3:
   364  003272  6AEE               	clrf	postinc0,c
   365  003274  06E8               	decf	wreg,f,c
   366  003276  E1FD               	bnz	clear_3
   367                           
   368                           ; Clear objects allocated to BANK3 (38 bytes)
   369  003278  EE03  F0D5         	lfsr	0,__pbssBANK3
   370  00327C  0E26               	movlw	38
   371  00327E                     clear_4:
   372  00327E  6AEE               	clrf	postinc0,c
   373  003280  06E8               	decf	wreg,f,c
   374  003282  E1FD               	bnz	clear_4
   375                           
   376                           ; Clear objects allocated to BANK2 (37 bytes)
   377  003284  EE02  F0DB         	lfsr	0,__pbssBANK2
   378  003288  0E25               	movlw	37
   379  00328A                     clear_5:
   380  00328A  6AEE               	clrf	postinc0,c
   381  00328C  06E8               	decf	wreg,f,c
   382  00328E  E1FD               	bnz	clear_5
   383                           
   384                           ; Clear objects allocated to COMRAM (31 bytes)
   385  003290  EE00  F024         	lfsr	0,__pbssCOMRAM
   386  003294  0E1F               	movlw	31
   387  003296                     clear_6:
   388  003296  6AEE               	clrf	postinc0,c
   389  003298  06E8               	decf	wreg,f,c
   390  00329A  E1FD               	bnz	clear_6
   391  00329C                     end_of_initialization:
   392                           	opt stack 0
   393  00329C                     __end_of__initialization:
   394                           	opt stack 0
   395  00329C  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   396  00329E  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   397  0032A0  0100               	movlb	0
   398  0032A2  EF22  F018         	goto	_main	;jump to C main() function
   399                           tblptru	equ	0xFF8
   400                           tblptrh	equ	0xFF7
   401                           tblptrl	equ	0xFF6
   402                           tablat	equ	0xFF5
   403                           postinc0	equ	0xFEE
   404                           wreg	equ	0xFE8
   405                           postdec1	equ	0xFE5
   406                           fsr1l	equ	0xFE1
   407                           
   408                           	psect	bssCOMRAM
   409  000024                     __pbssCOMRAM:
   410                           	opt stack 0
   411  000024                     _p_i2c1_current:
   412                           	opt stack 0
   413  000024                     	ds	2
   414  000026                     _p_i2c1_trb_current:
   415                           	opt stack 0
   416  000026                     	ds	2
   417  000028                     _eeprom_currAddr:
   418                           	opt stack 0
   419  000028                     	ds	2
   420  00002A                     _eusart1TxTail:
   421                           	opt stack 0
   422  00002A                     	ds	1
   423  00002B                     _eusart1TxHead:
   424                           	opt stack 0
   425  00002B                     	ds	1
   426  00002C                     I2C1_ISR@i2c_10bit_address_restart:
   427                           	opt stack 0
   428  00002C                     	ds	1
   429  00002D                     I2C1_ISR@i2c_bytes_left:
   430                           	opt stack 0
   431  00002D                     	ds	1
   432  00002E                     _i2c1_trb_count:
   433                           	opt stack 0
   434  00002E                     	ds	1
   435  00002F                     _i2c1_state:
   436                           	opt stack 0
   437  00002F                     	ds	1
   438  000030                     _BORON_COMM_TYPE:
   439                           	opt stack 0
   440  000030                     	ds	1
   441  000031                     hxISRHandle@rxHxPktFlag:
   442                           	opt stack 0
   443  000031                     	ds	1
   444  000032                     hxISRHandle@pktSize:
   445                           	opt stack 0
   446  000032                     	ds	1
   447  000033                     hxISRHandle@rxHxCmdFlag:
   448                           	opt stack 0
   449  000033                     	ds	1
   450  000034                     hxISRHandle@rxPktSizeFlag:
   451                           	opt stack 0
   452  000034                     	ds	1
   453  000035                     hxISRHandle@currentByteCounter:
   454                           	opt stack 0
   455  000035                     	ds	1
   456  000036                     _hx_abort:
   457                           	opt stack 0
   458  000036                     	ds	1
   459  000037                     _hx_debugVar:
   460                           	opt stack 0
   461  000037                     	ds	1
   462  000038                     _hx_startMain:
   463                           	opt stack 0
   464  000038                     	ds	1
   465  000039                     _hx_rxFullPktFlag:
   466                           	opt stack 0
   467  000039                     	ds	1
   468  00003A                     _hx_pktState:
   469                           	opt stack 0
   470  00003A                     	ds	1
   471  00003B                     _hx_pktCmd:
   472                           	opt stack 0
   473  00003B                     	ds	1
   474  00003C                     _hx_pcCmd:
   475                           	opt stack 0
   476  00003C                     	ds	1
   477  00003D                     _hx_checksum:
   478                           	opt stack 0
   479  00003D                     	ds	1
   480  00003E                     _hx_inDataIndex:
   481                           	opt stack 0
   482  00003E                     	ds	1
   483  00003F                     _hx_mainDataIndex:
   484                           	opt stack 0
   485  00003F                     	ds	1
   486  000040                     _hx_outDataIndex:
   487                           	opt stack 0
   488  000040                     	ds	1
   489  000041                     I2C1_ISR@i2c_address:
   490                           	opt stack 0
   491  000041                     	ds	2
   492                           tblptru	equ	0xFF8
   493                           tblptrh	equ	0xFF7
   494                           tblptrl	equ	0xFF6
   495                           tablat	equ	0xFF5
   496                           postinc0	equ	0xFEE
   497                           wreg	equ	0xFE8
   498                           postdec1	equ	0xFE5
   499                           fsr1l	equ	0xFE1
   500                           
   501                           	psect	dataCOMRAM
   502  000046                     __pdataCOMRAM:
   503                           	opt stack 0
   504  000046                     _hx_txPacketFlag:
   505                           	opt stack 0
   506  000046                     	ds	1
   507                           tblptru	equ	0xFF8
   508                           tblptrh	equ	0xFF7
   509                           tblptrl	equ	0xFF6
   510                           tablat	equ	0xFF5
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           postdec1	equ	0xFE5
   514                           fsr1l	equ	0xFE1
   515                           
   516                           	psect	bssBANK2
   517  0002DB                     __pbssBANK2:
   518                           	opt stack 0
   519  0002DB                     _i2c1_object:
   520                           	opt stack 0
   521  0002DB                     	ds	7
   522  0002E2                     _LATCH_OVEN_DATA:
   523                           	opt stack 0
   524  0002E2                     	ds	4
   525  0002E6                     _SFR_OTP_WR_ADDR_LOW_DATA:
   526                           	opt stack 0
   527  0002E6                     	ds	1
   528  0002E7                     _SFR_OTP_WR_ADDR_HIGH_DATA:
   529                           	opt stack 0
   530  0002E7                     	ds	1
   531  0002E8                     _SFR_OTP_MRR_HI_DATA:
   532                           	opt stack 0
   533  0002E8                     	ds	1
   534  0002E9                     _SFR_OTP_MRR_LO_DATA:
   535                           	opt stack 0
   536  0002E9                     	ds	1
   537  0002EA                     _SFR_OTP_MPP_DATA:
   538                           	opt stack 0
   539  0002EA                     	ds	1
   540  0002EB                     _SFR_OTP_MR_DATA:
   541                           	opt stack 0
   542  0002EB                     	ds	1
   543  0002EC                     _SFR_ASIC_REV_DATA:
   544                           	opt stack 0
   545  0002EC                     	ds	1
   546  0002ED                     _SFR_ADC_MUX_DATA:
   547                           	opt stack 0
   548  0002ED                     	ds	1
   549  0002EE                     _SFR_ADC_DIV_DATA:
   550                           	opt stack 0
   551  0002EE                     	ds	1
   552  0002EF                     _SFR_CLK_SEL_DATA:
   553                           	opt stack 0
   554  0002EF                     	ds	1
   555  0002F0                     _SFR_OCXO_DIV_DATA:
   556                           	opt stack 0
   557  0002F0                     	ds	1
   558  0002F1                     _SFR_CMOS_OUT_DATA:
   559                           	opt stack 0
   560  0002F1                     	ds	1
   561  0002F2                     _SFR_EXT_DATA:
   562                           	opt stack 0
   563  0002F2                     	ds	1
   564  0002F3                     _SFR_BIAS_DATA:
   565                           	opt stack 0
   566  0002F3                     	ds	1
   567  0002F4                     _SFR_VAR_DATA:
   568                           	opt stack 0
   569  0002F4                     	ds	1
   570  0002F5                     _SFR_HEAT_DATA:
   571                           	opt stack 0
   572  0002F5                     	ds	1
   573  0002F6                     _SFR_OVEN_DATA:
   574                           	opt stack 0
   575  0002F6                     	ds	1
   576  0002F7                     _SFR_ANALOG_DATA:
   577                           	opt stack 0
   578  0002F7                     	ds	1
   579  0002F8                     _SFR_OSC2_DATA:
   580                           	opt stack 0
   581  0002F8                     	ds	1
   582  0002F9                     _SFR_OSC1_DATA:
   583                           	opt stack 0
   584  0002F9                     	ds	1
   585  0002FA                     _SFR_OSC0_DATA:
   586                           	opt stack 0
   587  0002FA                     	ds	1
   588  0002FB                     _SFR_P1_DATA:
   589                           	opt stack 0
   590  0002FB                     	ds	1
   591  0002FC                     _SFR_P0_DATA:
   592                           	opt stack 0
   593  0002FC                     	ds	1
   594  0002FD                     _boronRxPktIndex:
   595                           	opt stack 0
   596  0002FD                     	ds	1
   597  0002FE                     _boronTxPktIndex:
   598                           	opt stack 0
   599  0002FE                     	ds	1
   600  0002FF                     _hx_rxOverflowFlag:
   601                           	opt stack 0
   602  0002FF                     	ds	1
   603                           tblptru	equ	0xFF8
   604                           tblptrh	equ	0xFF7
   605                           tblptrl	equ	0xFF6
   606                           tablat	equ	0xFF5
   607                           postinc0	equ	0xFEE
   608                           wreg	equ	0xFE8
   609                           postdec1	equ	0xFE5
   610                           fsr1l	equ	0xFE1
   611                           
   612                           	psect	bssBANK3
   613  0003D5                     __pbssBANK3:
   614                           	opt stack 0
   615  0003D5                     I2C1_ISR@pi2c_buf_ptr:
   616                           	opt stack 0
   617  0003D5                     	ds	2
   618  0003D7                     _eusart1RxCount:
   619                           	opt stack 0
   620  0003D7                     	ds	1
   621  0003D8                     _eusart1RxTail:
   622                           	opt stack 0
   623  0003D8                     	ds	1
   624  0003D9                     _eusart1RxHead:
   625                           	opt stack 0
   626  0003D9                     	ds	1
   627  0003DA                     _SFR_SW_STOP_DET_ST_DATA:
   628                           	opt stack 0
   629  0003DA                     	ds	1
   630  0003DB                     _SFR_SW_STOP_DET_DATA:
   631                           	opt stack 0
   632  0003DB                     	ds	1
   633  0003DC                     _SFR_SW_BIT_DATA_ST_DATA:
   634                           	opt stack 0
   635  0003DC                     	ds	1
   636  0003DD                     _SFR_SW_BIT_DATA_DATA:
   637                           	opt stack 0
   638  0003DD                     	ds	1
   639  0003DE                     _SFR_SW_DET_BIT_DATA:
   640                           	opt stack 0
   641  0003DE                     	ds	1
   642  0003DF                     _SFR_SW_BYT_INT_DATA:
   643                           	opt stack 0
   644  0003DF                     	ds	1
   645  0003E0                     _SFR_SW_WR_BYT_DATA:
   646                           	opt stack 0
   647  0003E0                     	ds	1
   648  0003E1                     _SFR_SW_BIT_INT_DATA:
   649                           	opt stack 0
   650  0003E1                     	ds	1
   651  0003E2                     _SFR_SW_WR_BIT_DATA:
   652                           	opt stack 0
   653  0003E2                     	ds	1
   654  0003E3                     _SFR_SW_ST_DET_DATA:
   655                           	opt stack 0
   656  0003E3                     	ds	1
   657  0003E4                     _SFR_SW_100US_HIGH_DATA:
   658                           	opt stack 0
   659  0003E4                     	ds	1
   660  0003E5                     _SFR_SW_100US_LOW_DATA:
   661                           	opt stack 0
   662  0003E5                     	ds	1
   663  0003E6                     _SFR_OTP_ST_TIMING_DATA:
   664                           	opt stack 0
   665  0003E6                     	ds	1
   666  0003E7                     _SFR_OTP_DIV_400US_LOW_DATA:
   667                           	opt stack 0
   668  0003E7                     	ds	1
   669  0003E8                     _SFR_OTP_DIV_400US_HIGH_DATA:
   670                           	opt stack 0
   671  0003E8                     	ds	1
   672  0003E9                     _SFR_OTP_DIV_100US_LOW_DATA:
   673                           	opt stack 0
   674  0003E9                     	ds	1
   675  0003EA                     _SFR_OTP_DIV_100US_HIGH_DATA:
   676                           	opt stack 0
   677  0003EA                     	ds	1
   678  0003EB                     _SFR_OTP_WR_DATA_DATA:
   679                           	opt stack 0
   680  0003EB                     	ds	1
   681  0003EC                     I2C1_MasterRead@trBlock:
   682                           	opt stack 0
   683  0003EC                     	ds	5
   684  0003F1                     I2C1_MasterWrite@trBlock:
   685                           	opt stack 0
   686  0003F1                     	ds	5
   687  0003F6                     _i2c1_tr_queue:
   688                           	opt stack 0
   689  0003F6                     	ds	5
   690                           tblptru	equ	0xFF8
   691                           tblptrh	equ	0xFF7
   692                           tblptrl	equ	0xFF6
   693                           tablat	equ	0xFF5
   694                           postinc0	equ	0xFEE
   695                           wreg	equ	0xFE8
   696                           postdec1	equ	0xFE5
   697                           fsr1l	equ	0xFE1
   698                           
   699                           	psect	bssBANK4
   700  0004D5                     __pbssBANK4:
   701                           	opt stack 0
   702  0004D5                     _boronRxPkt:
   703                           	opt stack 0
   704  0004D5                     	ds	16
   705  0004E5                     _boronTxPkt:
   706                           	opt stack 0
   707  0004E5                     	ds	16
   708  0004F5                     ASLB_debug2@F12373:
   709                           	opt stack 0
   710  0004F5                     	ds	10
   711                           tblptru	equ	0xFF8
   712                           tblptrh	equ	0xFF7
   713                           tblptrl	equ	0xFF6
   714                           tablat	equ	0xFF5
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           postdec1	equ	0xFE5
   718                           fsr1l	equ	0xFE1
   719                           
   720                           	psect	bssBANK5
   721  0005D5                     __pbssBANK5:
   722                           	opt stack 0
   723  0005D5                     _LATCH_CLOCK_SELECT_DATA:
   724                           	opt stack 0
   725  0005D5                     	ds	4
   726  0005D9                     _LATCH_ADC_DATA:
   727                           	opt stack 0
   728  0005D9                     	ds	4
   729  0005DD                     _LATCH_CMOS_DATA:
   730                           	opt stack 0
   731  0005DD                     	ds	4
   732  0005E1                     _LATCH_BIAS_DATA:
   733                           	opt stack 0
   734  0005E1                     	ds	4
   735  0005E5                     _LATCH_VARACTOR_DAC_DATA:
   736                           	opt stack 0
   737  0005E5                     	ds	4
   738  0005E9                     _LATCH_HEAT_DAC_DATA:
   739                           	opt stack 0
   740  0005E9                     	ds	4
   741  0005ED                     _LATCH_ANALOG_DATA:
   742                           	opt stack 0
   743  0005ED                     	ds	4
   744  0005F1                     _LATCH_OSC2_DATA:
   745                           	opt stack 0
   746  0005F1                     	ds	4
   747  0005F5                     _LATCH_OSC1_DATA:
   748                           	opt stack 0
   749  0005F5                     	ds	4
   750                           tblptru	equ	0xFF8
   751                           tblptrh	equ	0xFF7
   752                           tblptrl	equ	0xFF6
   753                           tablat	equ	0xFF5
   754                           postinc0	equ	0xFEE
   755                           wreg	equ	0xFE8
   756                           postdec1	equ	0xFE5
   757                           fsr1l	equ	0xFE1
   758                           
   759                           	psect	dataBANK5
   760  0005F9                     __pdataBANK5:
   761                           	opt stack 0
   762  0005F9                     _LATCH_OSC0_DATA:
   763                           	opt stack 0
   764  0005F9                     	ds	4
   765                           tblptru	equ	0xFF8
   766                           tblptrh	equ	0xFF7
   767                           tblptrl	equ	0xFF6
   768                           tablat	equ	0xFF5
   769                           postinc0	equ	0xFEE
   770                           wreg	equ	0xFE8
   771                           postdec1	equ	0xFE5
   772                           fsr1l	equ	0xFE1
   773                           
   774                           	psect	bssBANK6
   775  0006D5                     __pbssBANK6:
   776                           	opt stack 0
   777  0006D5                     _tsld:
   778                           	opt stack 0
   779  0006D5                     	ds	26
   780  0006EF                     _LATCH_OCXO_DIVISOR_DATA:
   781                           	opt stack 0
   782  0006EF                     	ds	4
   783  0006F3                     _LATCH_ADC_MUX_DATA:
   784                           	opt stack 0
   785  0006F3                     	ds	4
   786                           tblptru	equ	0xFF8
   787                           tblptrh	equ	0xFF7
   788                           tblptrl	equ	0xFF6
   789                           tablat	equ	0xFF5
   790                           postinc0	equ	0xFEE
   791                           wreg	equ	0xFE8
   792                           postdec1	equ	0xFE5
   793                           fsr1l	equ	0xFE1
   794                           
   795                           	psect	bssBANK11
   796  000B00                     __pbssBANK11:
   797                           	opt stack 0
   798  000B00                     _eusart1TxBuffer:
   799                           	opt stack 0
   800  000B00                     	ds	64
   801  000B40                     _hx_inData:
   802                           	opt stack 0
   803  000B40                     	ds	64
   804  000B80                     _hx_outData:
   805                           	opt stack 0
   806  000B80                     	ds	64
   807  000BC0                     _hx_mainData:
   808                           	opt stack 0
   809  000BC0                     	ds	61
   810                           tblptru	equ	0xFF8
   811                           tblptrh	equ	0xFF7
   812                           tblptrl	equ	0xFF6
   813                           tablat	equ	0xFF5
   814                           postinc0	equ	0xFEE
   815                           wreg	equ	0xFE8
   816                           postdec1	equ	0xFE5
   817                           fsr1l	equ	0xFE1
   818                           
   819                           	psect	cstackBANK12
   820  000C00                     __pcstackBANK12:
   821                           	opt stack 0
   822  000C00                     run_ASLBoron@cnfg_arr:
   823                           	opt stack 0
   824                           
   825                           ; 256 bytes @ 0x0
   826  000C00                     	ds	256
   827                           tblptru	equ	0xFF8
   828                           tblptrh	equ	0xFF7
   829                           tblptrl	equ	0xFF6
   830                           tablat	equ	0xFF5
   831                           postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           postdec1	equ	0xFE5
   834                           fsr1l	equ	0xFE1
   835                           
   836                           	psect	cstackBANK10
   837  000A00                     __pcstackBANK10:
   838                           	opt stack 0
   839  000A00                     checkAndSendLatchData@clock_select_pkt:
   840                           	opt stack 0
   841                           
   842                           ; 71 bytes @ 0x0
   843  000A00                     	ds	71
   844                           tblptru	equ	0xFF8
   845                           tblptrh	equ	0xFF7
   846                           tblptrl	equ	0xFF6
   847                           tablat	equ	0xFF5
   848                           postinc0	equ	0xFEE
   849                           wreg	equ	0xFE8
   850                           postdec1	equ	0xFE5
   851                           fsr1l	equ	0xFE1
   852                           
   853                           	psect	cstackBANK9
   854  000900                     __pcstackBANK9:
   855                           	opt stack 0
   856  000900                     checkAndSendLatchData@readback_adc_mux_pkt:
   857                           	opt stack 0
   858                           
   859                           ; 71 bytes @ 0x0
   860  000900                     	ds	71
   861  000947                     checkAndSendLatchData@readback_ocxo_divisor_pkt:
   862                           	opt stack 0
   863                           
   864                           ; 71 bytes @ 0x47
   865  000947                     	ds	71
   866  00098E                     checkAndSendLatchData@readback_clock_select_pkt:
   867                           	opt stack 0
   868                           
   869                           ; 71 bytes @ 0x8E
   870  00098E                     	ds	71
   871                           tblptru	equ	0xFF8
   872                           tblptrh	equ	0xFF7
   873                           tblptrl	equ	0xFF6
   874                           tablat	equ	0xFF5
   875                           postinc0	equ	0xFEE
   876                           wreg	equ	0xFE8
   877                           postdec1	equ	0xFE5
   878                           fsr1l	equ	0xFE1
   879                           
   880                           	psect	cstackBANK8
   881  000800                     __pcstackBANK8:
   882                           	opt stack 0
   883  000800                     checkAndSendLatchData@readback_bias_pkt:
   884                           	opt stack 0
   885                           
   886                           ; 71 bytes @ 0x0
   887  000800                     	ds	71
   888  000847                     checkAndSendLatchData@readback_cmos_pkt:
   889                           	opt stack 0
   890                           
   891                           ; 71 bytes @ 0x47
   892  000847                     	ds	71
   893  00088E                     checkAndSendLatchData@readback_adc_pkt:
   894                           	opt stack 0
   895                           
   896                           ; 71 bytes @ 0x8E
   897  00088E                     	ds	71
   898                           tblptru	equ	0xFF8
   899                           tblptrh	equ	0xFF7
   900                           tblptrl	equ	0xFF6
   901                           tablat	equ	0xFF5
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           postdec1	equ	0xFE5
   905                           fsr1l	equ	0xFE1
   906                           
   907                           	psect	cstackBANK7
   908  000700                     __pcstackBANK7:
   909                           	opt stack 0
   910  000700                     checkAndSendLatchData@readback_oven_pkt:
   911                           	opt stack 0
   912                           
   913                           ; 71 bytes @ 0x0
   914  000700                     	ds	71
   915  000747                     checkAndSendLatchData@readback_heat_dac_pkt:
   916                           	opt stack 0
   917                           
   918                           ; 71 bytes @ 0x47
   919  000747                     	ds	71
   920  00078E                     checkAndSendLatchData@readback_varactor_dac_pkt:
   921                           	opt stack 0
   922                           
   923                           ; 71 bytes @ 0x8E
   924  00078E                     	ds	71
   925                           tblptru	equ	0xFF8
   926                           tblptrh	equ	0xFF7
   927                           tblptrl	equ	0xFF6
   928                           tablat	equ	0xFF5
   929                           postinc0	equ	0xFEE
   930                           wreg	equ	0xFE8
   931                           postdec1	equ	0xFE5
   932                           fsr1l	equ	0xFE1
   933                           
   934                           	psect	cstackBANK6
   935  000600                     __pcstackBANK6:
   936                           	opt stack 0
   937  000600                     checkAndSendLatchData@readback_osc1_pkt:
   938                           	opt stack 0
   939                           
   940                           ; 71 bytes @ 0x0
   941  000600                     	ds	71
   942  000647                     checkAndSendLatchData@readback_osc2_pkt:
   943                           	opt stack 0
   944                           
   945                           ; 71 bytes @ 0x47
   946  000647                     	ds	71
   947  00068E                     checkAndSendLatchData@readback_analog_pkt:
   948                           	opt stack 0
   949                           
   950                           ; 71 bytes @ 0x8E
   951  00068E                     	ds	71
   952                           tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           tblptrl	equ	0xFF6
   955                           tablat	equ	0xFF5
   956                           postinc0	equ	0xFEE
   957                           wreg	equ	0xFE8
   958                           postdec1	equ	0xFE5
   959                           fsr1l	equ	0xFE1
   960                           
   961                           	psect	cstackBANK5
   962  000500                     __pcstackBANK5:
   963                           	opt stack 0
   964  000500                     checkAndSendLatchData@readback_osc0_pkt:
   965                           	opt stack 0
   966                           
   967                           ; 71 bytes @ 0x0
   968  000500                     	ds	71
   969  000547                     checkAndSendLatchData@adc_mux_pkt:
   970                           	opt stack 0
   971                           
   972                           ; 71 bytes @ 0x47
   973  000547                     	ds	71
   974  00058E                     checkAndSendLatchData@ocxo_divisor_pkt:
   975                           	opt stack 0
   976                           
   977                           ; 71 bytes @ 0x8E
   978  00058E                     	ds	71
   979                           tblptru	equ	0xFF8
   980                           tblptrh	equ	0xFF7
   981                           tblptrl	equ	0xFF6
   982                           tablat	equ	0xFF5
   983                           postinc0	equ	0xFEE
   984                           wreg	equ	0xFE8
   985                           postdec1	equ	0xFE5
   986                           fsr1l	equ	0xFE1
   987                           
   988                           	psect	cstackBANK4
   989  000400                     __pcstackBANK4:
   990                           	opt stack 0
   991  000400                     checkAndSendLatchData@bias_pkt:
   992                           	opt stack 0
   993                           
   994                           ; 71 bytes @ 0x0
   995  000400                     	ds	71
   996  000447                     checkAndSendLatchData@cmos_pkt:
   997                           	opt stack 0
   998                           
   999                           ; 71 bytes @ 0x47
  1000  000447                     	ds	71
  1001  00048E                     checkAndSendLatchData@adc_pkt:
  1002                           	opt stack 0
  1003                           
  1004                           ; 71 bytes @ 0x8E
  1005  00048E                     	ds	71
  1006                           tblptru	equ	0xFF8
  1007                           tblptrh	equ	0xFF7
  1008                           tblptrl	equ	0xFF6
  1009                           tablat	equ	0xFF5
  1010                           postinc0	equ	0xFEE
  1011                           wreg	equ	0xFE8
  1012                           postdec1	equ	0xFE5
  1013                           fsr1l	equ	0xFE1
  1014                           
  1015                           	psect	cstackBANK3
  1016  000300                     __pcstackBANK3:
  1017                           	opt stack 0
  1018  000300                     checkAndSendLatchData@oven_pkt:
  1019                           	opt stack 0
  1020                           
  1021                           ; 71 bytes @ 0x0
  1022  000300                     	ds	71
  1023  000347                     checkAndSendLatchData@heat_dac_pkt:
  1024                           	opt stack 0
  1025                           
  1026                           ; 71 bytes @ 0x47
  1027  000347                     	ds	71
  1028  00038E                     checkAndSendLatchData@varactor_dac_pkt:
  1029                           	opt stack 0
  1030                           
  1031                           ; 71 bytes @ 0x8E
  1032  00038E                     	ds	71
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           postinc0	equ	0xFEE
  1038                           wreg	equ	0xFE8
  1039                           postdec1	equ	0xFE5
  1040                           fsr1l	equ	0xFE1
  1041                           
  1042                           	psect	cstackBANK2
  1043  000200                     __pcstackBANK2:
  1044                           	opt stack 0
  1045  000200                     ASLB_HeaterFunctionality@rx_index:
  1046                           	opt stack 0
  1047  000200                     ASLB_AnalogMuxReadingSetup@rx_index:
  1048                           	opt stack 0
  1049  000200                     findMaxI2CSpeed@ramAddrHi:
  1050                           	opt stack 0
  1051  000200                     run_I2C@debugArr:
  1052                           	opt stack 0
  1053  000200                     ASLB_debug1@ramRdPkt:
  1054                           	opt stack 0
  1055  000200                     checkAndSendLatchData@osc1_pkt:
  1056                           	opt stack 0
  1057                           
  1058                           ; 71 bytes @ 0x0
  1059  000200                     	ds	1
  1060  000201                     ASLB_HeaterFunctionality@stream_status:
  1061                           	opt stack 0
  1062  000201                     ASLB_AnalogMuxReadingSetup@stream_status:
  1063                           	opt stack 0
  1064  000201                     findMaxI2CSpeed@ramAddrLo:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x1
  1068  000201                     	ds	1
  1069  000202                     run_I2C@slaveAddr:
  1070                           	opt stack 0
  1071  000202                     ASLB_HeaterFunctionality@stream:
  1072                           	opt stack 0
  1073  000202                     ASLB_AnalogMuxReadingSetup@stream:
  1074                           	opt stack 0
  1075  000202                     findMaxI2CSpeed@stream:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x2
  1079  000202                     	ds	2
  1080  000204                     run_I2C@i_2001:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x4
  1084  000204                     	ds	1
  1085  000205                     run_I2C@i_2002:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0x5
  1089  000205                     	ds	1
  1090  000206                     findMaxI2CSpeed@ramData:
  1091                           	opt stack 0
  1092  000206                     run_I2C@checksum:
  1093                           	opt stack 0
  1094  000206                     ASLB_HeaterFunctionality@heatDacWrPkt:
  1095                           	opt stack 0
  1096  000206                     ASLB_AnalogMuxReadingSetup@cmdReadbackPkt:
  1097                           	opt stack 0
  1098                           
  1099                           ; 71 bytes @ 0x6
  1100  000206                     	ds	1
  1101  000207                     run_I2C@calc_checksum:
  1102                           	opt stack 0
  1103  000207                     findMaxI2CSpeed@bRate:
  1104                           	opt stack 0
  1105                           
  1106                           ; 2 bytes @ 0x7
  1107  000207                     	ds	1
  1108  000208                     run_I2C@i:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x8
  1112  000208                     	ds	1
  1113  000209                     findMaxI2CSpeed@i:
  1114                           	opt stack 0
  1115  000209                     run_I2C@stream:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0x9
  1119  000209                     	ds	1
  1120  00020A                     findMaxI2CSpeed@cmdReadbackPkt:
  1121                           	opt stack 0
  1122                           
  1123                           ; 71 bytes @ 0xA
  1124  00020A                     	ds	3
  1125  00020D                     run_I2C@numTx:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0xD
  1129  00020D                     	ds	1
  1130  00020E                     run_I2C@numRx:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0xE
  1134  00020E                     	ds	1
  1135  00020F                     run_I2C@mode:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0xF
  1139  00020F                     	ds	1
  1140  000210                     run_I2C@rx_index:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x10
  1144  000210                     	ds	1
  1145  000211                     run_I2C@data_index:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x11
  1149  000211                     	ds	2
  1150  000213                     run_I2C@txPkt:
  1151                           	opt stack 0
  1152                           
  1153                           ; 71 bytes @ 0x13
  1154  000213                     	ds	52
  1155  000247                     ASLB_debug1@ramWrPkt:
  1156                           	opt stack 0
  1157  000247                     checkAndSendLatchData@osc2_pkt:
  1158                           	opt stack 0
  1159                           
  1160                           ; 71 bytes @ 0x47
  1161  000247                     	ds	6
  1162  00024D                     ASLB_HeaterFunctionality@cmdReadbackPkt:
  1163                           	opt stack 0
  1164  00024D                     ASLB_AnalogMuxReadingSetup@ovenWrPkt:
  1165                           	opt stack 0
  1166                           
  1167                           ; 71 bytes @ 0x4D
  1168  00024D                     	ds	4
  1169  000251                     findMaxI2CSpeed@rx_index:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0x51
  1173  000251                     	ds	1
  1174  000252                     findMaxI2CSpeed@ramWrPkt:
  1175                           	opt stack 0
  1176                           
  1177                           ; 71 bytes @ 0x52
  1178  000252                     	ds	8
  1179  00025A                     run_I2C@rxPkt:
  1180                           	opt stack 0
  1181                           
  1182                           ; 71 bytes @ 0x5A
  1183  00025A                     	ds	52
  1184  00028E                     checkAndSendLatchData@analog_pkt:
  1185                           	opt stack 0
  1186                           
  1187                           ; 71 bytes @ 0x8E
  1188  00028E                     	ds	6
  1189  000294                     ASLB_HeaterFunctionality@ovenWrPkt:
  1190                           	opt stack 0
  1191                           
  1192                           ; 71 bytes @ 0x94
  1193  000294                     	ds	71
  1194                           tblptru	equ	0xFF8
  1195                           tblptrh	equ	0xFF7
  1196                           tblptrl	equ	0xFF6
  1197                           tablat	equ	0xFF5
  1198                           postinc0	equ	0xFEE
  1199                           wreg	equ	0xFE8
  1200                           postdec1	equ	0xFE5
  1201                           fsr1l	equ	0xFE1
  1202                           
  1203                           	psect	cstackBANK1
  1204  000100                     __pcstackBANK1:
  1205                           	opt stack 0
  1206  000100                     streamI2C@trBlock:
  1207                           	opt stack 0
  1208                           
  1209                           ; 160 bytes @ 0x0
  1210  000100                     	ds	160
  1211  0001A0                     streamI2C@status:
  1212                           	opt stack 0
  1213                           
  1214                           ; 1 bytes @ 0xA0
  1215  0001A0                     	ds	1
  1216  0001A1                     streamI2C@i:
  1217                           	opt stack 0
  1218                           
  1219                           ; 1 bytes @ 0xA1
  1220  0001A1                     	ds	1
  1221  0001A2                     ASLB_debug1@ramReadbackPkt:
  1222                           	opt stack 0
  1223  0001A2                     checkAndSendLatchData@osc0_pkt:
  1224                           	opt stack 0
  1225                           
  1226                           ; 71 bytes @ 0xA2
  1227  0001A2                     	ds	71
  1228  0001E9                     _run_ASLBoron$1381:
  1229                           	opt stack 0
  1230                           
  1231                           ; 2 bytes @ 0xE9
  1232  0001E9                     	ds	2
  1233  0001EB                     _run_ASLBoron$1382:
  1234                           	opt stack 0
  1235                           
  1236                           ; 2 bytes @ 0xEB
  1237  0001EB                     	ds	2
  1238  0001ED                     run_ASLBoron@rpt_run:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0xED
  1242  0001ED                     	ds	2
  1243  0001EF                     run_ASLBoron@checksum:
  1244                           	opt stack 0
  1245                           
  1246                           ; 1 bytes @ 0xEF
  1247  0001EF                     	ds	1
  1248  0001F0                     run_ASLBoron@calc_checksum:
  1249                           	opt stack 0
  1250                           
  1251                           ; 1 bytes @ 0xF0
  1252  0001F0                     	ds	1
  1253  0001F1                     run_ASLBoron@test_run:
  1254                           	opt stack 0
  1255                           
  1256                           ; 1 bytes @ 0xF1
  1257  0001F1                     	ds	1
  1258  0001F2                     run_ASLBoron@cnfg_run:
  1259                           	opt stack 0
  1260                           
  1261                           ; 1 bytes @ 0xF2
  1262  0001F2                     	ds	1
  1263  0001F3                     run_ASLBoron@i:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0xF3
  1267  0001F3                     	ds	1
  1268  0001F4                     run_ASLBoron@cnfg_cnt:
  1269                           	opt stack 0
  1270                           
  1271                           ; 1 bytes @ 0xF4
  1272  0001F4                     	ds	1
  1273  0001F5                     run_ASLBoron@mode_run:
  1274                           	opt stack 0
  1275                           
  1276                           ; 1 bytes @ 0xF5
  1277  0001F5                     	ds	1
  1278  0001F6                     run_ASLBoron@data_index:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0xF6
  1282  0001F6                     	ds	2
  1283                           tblptru	equ	0xFF8
  1284                           tblptrh	equ	0xFF7
  1285                           tblptrl	equ	0xFF6
  1286                           tablat	equ	0xFF5
  1287                           postinc0	equ	0xFEE
  1288                           wreg	equ	0xFE8
  1289                           postdec1	equ	0xFE5
  1290                           fsr1l	equ	0xFE1
  1291                           
  1292                           	psect	cstackBANK0
  1293  000060                     __pcstackBANK0:
  1294                           	opt stack 0
  1295  000060                     ??_cycleBoronPower:
  1296  000060                     ?___aldiv:
  1297                           	opt stack 0
  1298  000060                     adjustI2CBaudRate@bd:
  1299                           	opt stack 0
  1300  000060                     EUSART1_Write@txData:
  1301                           	opt stack 0
  1302  000060                     PIN_MANAGER_Initialize@state:
  1303                           	opt stack 0
  1304  000060                     hxClearArray@arr:
  1305                           	opt stack 0
  1306  000060                     streamSW@pktArr:
  1307                           	opt stack 0
  1308  000060                     calcChecksum@data:
  1309                           	opt stack 0
  1310  000060                     hxOddParityCalc@buff:
  1311                           	opt stack 0
  1312  000060                     write_ASLBoron_cstm_cnfg@cnfg_arr:
  1313                           	opt stack 0
  1314  000060                     ASLB_ContinuityESD@rxBuffer:
  1315                           	opt stack 0
  1316  000060                     ASLB_ColpittsOscillator@rxBuffer:
  1317                           	opt stack 0
  1318  000060                     ASLB_PierceOscillator@rxBuffer:
  1319                           	opt stack 0
  1320  000060                     ASLB_RDResistor@rxBuffer:
  1321                           	opt stack 0
  1322  000060                     ASLB_CFCVVaricap@rxBuffer:
  1323                           	opt stack 0
  1324  000060                     ASLB_CommonGate@rxBuffer:
  1325                           	opt stack 0
  1326  000060                     ASLB_ADC@rxBuffer:
  1327                           	opt stack 0
  1328  000060                     ASLB_cnfg0@rxBuffer:
  1329                           	opt stack 0
  1330  000060                     ASLB_cnfg1@rxBuffer:
  1331                           	opt stack 0
  1332  000060                     ASLB_debug0@rxBuffer:
  1333                           	opt stack 0
  1334  000060                     setTempCtrlDAC@value12bit:
  1335                           	opt stack 0
  1336  000060                     setCurrLimitDAC@value7bit:
  1337                           	opt stack 0
  1338  000060                     setupCmdReadbackPkt@pkt:
  1339                           	opt stack 0
  1340  000060                     filterLatchPacketResponses@rxBuffer:
  1341                           	opt stack 0
  1342  000060                     I2C1_MasterTRBInsert@ptrb_list:
  1343                           	opt stack 0
  1344  000060                     I2C1_MasterReadTRBBuild@ptrb:
  1345                           	opt stack 0
  1346  000060                     I2C1_MasterWriteTRBBuild@ptrb:
  1347                           	opt stack 0
  1348  000060                     TMR0_Write16bitTimer@timerVal:
  1349                           	opt stack 0
  1350  000060                     memcpy@d1:
  1351                           	opt stack 0
  1352  000060                     TMR0_SetInterruptHandler@InterruptHandler:
  1353                           	opt stack 0
  1354  000060                     ___aldiv@dividend:
  1355                           	opt stack 0
  1356                           
  1357                           ; 4 bytes @ 0x0
  1358  000060                     	ds	1
  1359  000061                     ASLB_debug3@rxBuffer:
  1360                           	opt stack 0
  1361                           
  1362                           ; 2 bytes @ 0x1
  1363  000061                     	ds	1
  1364  000062                     ??_setCurrLimitDAC:
  1365  000062                     hxClearArray@size:
  1366                           	opt stack 0
  1367  000062                     streamSW@pktSize:
  1368                           	opt stack 0
  1369  000062                     calcChecksum@size:
  1370                           	opt stack 0
  1371  000062                     hxOddParityCalc@size:
  1372                           	opt stack 0
  1373  000062                     ASLB_ColpittsOscillator@rx_index:
  1374                           	opt stack 0
  1375  000062                     ASLB_PierceOscillator@rx_index:
  1376                           	opt stack 0
  1377  000062                     ASLB_RDResistor@rx_index:
  1378                           	opt stack 0
  1379  000062                     ASLB_CFCVVaricap@rx_index:
  1380                           	opt stack 0
  1381  000062                     ASLB_CommonGate@rx_index:
  1382                           	opt stack 0
  1383  000062                     ASLB_ADC@rx_index:
  1384                           	opt stack 0
  1385  000062                     ASLB_debug0@rx_index:
  1386                           	opt stack 0
  1387  000062                     write_ASLBoron_cnfg@rxBuffer:
  1388                           	opt stack 0
  1389  000062                     write_ASLBoron_cstm_cnfg@cnfg_arr_size:
  1390                           	opt stack 0
  1391  000062                     ASLB_CTHERM@rxBuffer:
  1392                           	opt stack 0
  1393  000062                     ASLB_ADCReferenceVoltage@rxBuffer:
  1394                           	opt stack 0
  1395  000062                     ASLB_HeaterFBSignals@rxBuffer:
  1396                           	opt stack 0
  1397  000062                     ASLB_InternalTempSensor@rxBuffer:
  1398                           	opt stack 0
  1399  000062                     ASLB_MuxReadingVDD@rxBuffer:
  1400                           	opt stack 0
  1401  000062                     ASLB_DACReferenceVoltage@rxBuffer:
  1402                           	opt stack 0
  1403  000062                     ASLB_VaricapDACVoltage@rxBuffer:
  1404                           	opt stack 0
  1405  000062                     ASLB_TempSetDACVoltage@rxBuffer:
  1406                           	opt stack 0
  1407  000062                     ASLB_DigitalRegulatorVoltage@rxBuffer:
  1408                           	opt stack 0
  1409  000062                     ASLB_ZTCReferenceCurrent@rxBuffer:
  1410                           	opt stack 0
  1411  000062                     ASLB_MuxOpenCircuit@rxBuffer:
  1412                           	opt stack 0
  1413  000062                     ASLB_OscillatorRegulatorVoltage@rxBuffer:
  1414                           	opt stack 0
  1415  000062                     ASLB_ExternalReferenceVoltage@rxBuffer:
  1416                           	opt stack 0
  1417  000062                     ASLB_VaricapBiasSteering@rxBuffer:
  1418                           	opt stack 0
  1419  000062                     filterLatchPacketResponses@rx_index:
  1420                           	opt stack 0
  1421  000062                     I2C1_MasterTRBInsert@pflag:
  1422                           	opt stack 0
  1423  000062                     I2C1_MasterReadTRBBuild@pdata:
  1424                           	opt stack 0
  1425  000062                     I2C1_MasterWriteTRBBuild@pdata:
  1426                           	opt stack 0
  1427  000062                     memcpy@s1:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x2
  1431  000062                     	ds	1
  1432  000063                     ??_TMR0_Initialize:
  1433  000063                     hxClearArray@i:
  1434                           	opt stack 0
  1435  000063                     calcChecksum@i:
  1436                           	opt stack 0
  1437  000063                     hxOddParityCalc@i:
  1438                           	opt stack 0
  1439  000063                     ASLB_debug3@dataByte:
  1440                           	opt stack 0
  1441                           
  1442                           ; 1 bytes @ 0x3
  1443  000063                     	ds	1
  1444  000064                     ??_hxHandleTxUART:
  1445  000064                     calcChecksum@temp_checksum:
  1446                           	opt stack 0
  1447  000064                     hxOddParityCalc@j:
  1448                           	opt stack 0
  1449  000064                     write_ASLBoron_cnfg@run_cnfg:
  1450                           	opt stack 0
  1451  000064                     ASLB_CTHERM@rx_index:
  1452                           	opt stack 0
  1453  000064                     ASLB_ADCReferenceVoltage@rx_index:
  1454                           	opt stack 0
  1455  000064                     ASLB_HeaterFBSignals@rx_index:
  1456                           	opt stack 0
  1457  000064                     ASLB_InternalTempSensor@rx_index:
  1458                           	opt stack 0
  1459  000064                     ASLB_MuxReadingVDD@rx_index:
  1460                           	opt stack 0
  1461  000064                     ASLB_DACReferenceVoltage@rx_index:
  1462                           	opt stack 0
  1463  000064                     ASLB_VaricapDACVoltage@rx_index:
  1464                           	opt stack 0
  1465  000064                     ASLB_TempSetDACVoltage@rx_index:
  1466                           	opt stack 0
  1467  000064                     ASLB_DigitalRegulatorVoltage@rx_index:
  1468                           	opt stack 0
  1469  000064                     ASLB_ZTCReferenceCurrent@rx_index:
  1470                           	opt stack 0
  1471  000064                     ASLB_MuxOpenCircuit@rx_index:
  1472                           	opt stack 0
  1473  000064                     ASLB_OscillatorRegulatorVoltage@rx_index:
  1474                           	opt stack 0
  1475  000064                     ASLB_ExternalReferenceVoltage@rx_index:
  1476                           	opt stack 0
  1477  000064                     ASLB_VaricapBiasSteering@rx_index:
  1478                           	opt stack 0
  1479  000064                     ASLB_debug3@rx_index:
  1480                           	opt stack 0
  1481  000064                     I2C1_MasterReadTRBBuild@length:
  1482                           	opt stack 0
  1483  000064                     I2C1_MasterWriteTRBBuild@length:
  1484                           	opt stack 0
  1485  000064                     write_ASLBoron_cstm_cnfg@rxBuffer:
  1486                           	opt stack 0
  1487  000064                     filterLatchPacketResponses@readbackPkts:
  1488                           	opt stack 0
  1489  000064                     memcpy@n:
  1490                           	opt stack 0
  1491  000064                     ___aldiv@divisor:
  1492                           	opt stack 0
  1493                           
  1494                           ; 4 bytes @ 0x4
  1495  000064                     	ds	1
  1496  000065                     hxOddParityCalc@parity:
  1497                           	opt stack 0
  1498  000065                     I2C1_MasterTRBInsert@count:
  1499                           	opt stack 0
  1500  000065                     setupLatchPkt@pkt:
  1501                           	opt stack 0
  1502  000065                     I2C1_MasterReadTRBBuild@address:
  1503                           	opt stack 0
  1504  000065                     I2C1_MasterWriteTRBBuild@address:
  1505                           	opt stack 0
  1506  000065                     ASLB_CTHERM@cmdReadbackPkt:
  1507                           	opt stack 0
  1508  000065                     ASLB_ADCReferenceVoltage@cmdReadbackPkt:
  1509                           	opt stack 0
  1510  000065                     ASLB_HeaterFBSignals@cmdReadbackPkt:
  1511                           	opt stack 0
  1512  000065                     ASLB_InternalTempSensor@cmdReadbackPkt:
  1513                           	opt stack 0
  1514  000065                     ASLB_MuxReadingVDD@cmdReadbackPkt:
  1515                           	opt stack 0
  1516  000065                     ASLB_DACReferenceVoltage@cmdReadbackPkt:
  1517                           	opt stack 0
  1518  000065                     ASLB_VaricapDACVoltage@cmdReadbackPkt:
  1519                           	opt stack 0
  1520  000065                     ASLB_TempSetDACVoltage@cmdReadbackPkt:
  1521                           	opt stack 0
  1522  000065                     ASLB_DigitalRegulatorVoltage@cmdReadbackPkt:
  1523                           	opt stack 0
  1524  000065                     ASLB_ZTCReferenceCurrent@cmdReadbackPkt:
  1525                           	opt stack 0
  1526  000065                     ASLB_MuxOpenCircuit@cmdReadbackPkt:
  1527                           	opt stack 0
  1528  000065                     ASLB_OscillatorRegulatorVoltage@cmdReadbackPkt:
  1529                           	opt stack 0
  1530  000065                     ASLB_ExternalReferenceVoltage@cmdReadbackPkt:
  1531                           	opt stack 0
  1532  000065                     ASLB_VaricapBiasSteering@cmdReadbackPkt:
  1533                           	opt stack 0
  1534                           
  1535                           ; 71 bytes @ 0x5
  1536  000065                     	ds	1
  1537  000066                     hxOddParityCalc@temp:
  1538                           	opt stack 0
  1539  000066                     filterLatchPacketResponses@count:
  1540                           	opt stack 0
  1541  000066                     memcpy@tmp:
  1542                           	opt stack 0
  1543                           
  1544                           ; 1 bytes @ 0x6
  1545  000066                     	ds	1
  1546  000067                     ??_I2C1_MasterWriteTRBBuild:
  1547  000067                     ??_I2C1_MasterReadTRBBuild:
  1548  000067                     ??_filterLatchPacketResponses:
  1549  000067                     hxSPPCarbonReadReg_test@numRX:
  1550                           	opt stack 0
  1551  000067                     hxSPPCarbonCheckBusy_test@numRX:
  1552                           	opt stack 0
  1553  000067                     hxHandleTxUART@i:
  1554                           	opt stack 0
  1555  000067                     hxSPPCarbonWriteReg_test@txBuffer:
  1556                           	opt stack 0
  1557  000067                     hxSPPCarbonProgram_test@txBuffer:
  1558                           	opt stack 0
  1559  000067                     setupLatchPkt@latch_data:
  1560                           	opt stack 0
  1561  000067                     memcpy@d:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x7
  1565  000067                     	ds	1
  1566  000068                     ___aldiv@counter:
  1567                           	opt stack 0
  1568  000068                     hxSPPCarbonReadReg_test@txBuffer:
  1569                           	opt stack 0
  1570  000068                     hxSPPCarbonCheckBusy_test@txBuffer:
  1571                           	opt stack 0
  1572  000068                     ASLB_CurrentLimitDACVoltage@rxBuffer:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x8
  1576  000068                     	ds	1
  1577  000069                     hxSPPCarbonWriteReg_test@numTX:
  1578                           	opt stack 0
  1579  000069                     setupLatchPkt@latch_num:
  1580                           	opt stack 0
  1581  000069                     ___aldiv@sign:
  1582                           	opt stack 0
  1583  000069                     streamI2C@pktArr:
  1584                           	opt stack 0
  1585  000069                     hxSPPCarbonProgram_test@rxBuffer:
  1586                           	opt stack 0
  1587  000069                     I2C1_MasterWrite@pdata:
  1588                           	opt stack 0
  1589  000069                     I2C1_MasterRead@pdata:
  1590                           	opt stack 0
  1591  000069                     memcpy@s:
  1592                           	opt stack 0
  1593                           
  1594                           ; 2 bytes @ 0x9
  1595  000069                     	ds	1
  1596  00006A                     ??_setupLatchPkt:
  1597  00006A                     hxSPPCarbonWriteReg_test@tempHxState:
  1598                           	opt stack 0
  1599  00006A                     ASLB_CurrentLimitDACVoltage@rx_index:
  1600                           	opt stack 0
  1601  00006A                     hxSPPCarbonReadReg_test@rxBuffer:
  1602                           	opt stack 0
  1603  00006A                     hxSPPCarbonCheckBusy_test@rxBuffer:
  1604                           	opt stack 0
  1605  00006A                     filterLatchPacketResponses@i:
  1606                           	opt stack 0
  1607  00006A                     ___aldiv@quotient:
  1608                           	opt stack 0
  1609                           
  1610                           ; 4 bytes @ 0xA
  1611  00006A                     	ds	1
  1612  00006B                     streamI2C@pktSize:
  1613                           	opt stack 0
  1614  00006B                     hxSPPCarbonWriteReg_test@oddParityCalc:
  1615                           	opt stack 0
  1616  00006B                     hxSPPCarbonProgram_test@numTX:
  1617                           	opt stack 0
  1618  00006B                     I2C1_MasterWrite@length:
  1619                           	opt stack 0
  1620  00006B                     I2C1_MasterRead@length:
  1621                           	opt stack 0
  1622  00006B                     ASLB_CurrentLimitDACVoltage@cmdReadbackPkt:
  1623                           	opt stack 0
  1624                           
  1625                           ; 71 bytes @ 0xB
  1626  00006B                     	ds	1
  1627  00006C                     ??_streamI2C:
  1628  00006C                     ??_hxSPPCarbonCheckBusy_test:
  1629  00006C                     hxSPPCarbonReadReg_test@portAVal:
  1630                           	opt stack 0
  1631  00006C                     hxSPPCarbonWriteReg_test@j:
  1632                           	opt stack 0
  1633  00006C                     hxSPPCarbonProgram_test@oddParityCalc:
  1634                           	opt stack 0
  1635  00006C                     filterLatchPacketResponses@possibleError:
  1636                           	opt stack 0
  1637  00006C                     I2C1_MasterWrite@address:
  1638                           	opt stack 0
  1639  00006C                     I2C1_MasterRead@address:
  1640                           	opt stack 0
  1641                           
  1642                           ; 2 bytes @ 0xC
  1643  00006C                     	ds	1
  1644  00006D                     hxSPPCarbonReadReg_test@numTX:
  1645                           	opt stack 0
  1646  00006D                     hxSPPCarbonWriteReg_test@i:
  1647                           	opt stack 0
  1648  00006D                     hxSPPCarbonProgram_test@j:
  1649                           	opt stack 0
  1650                           
  1651                           ; 1 bytes @ 0xD
  1652  00006D                     	ds	1
  1653  00006E                     ?_calcBaudRate:
  1654                           	opt stack 0
  1655  00006E                     hxSPPCarbonWriteReg_test@j_916:
  1656                           	opt stack 0
  1657  00006E                     hxSPPCarbonProgram_test@i:
  1658                           	opt stack 0
  1659  00006E                     hxSPPCarbonCheckBusy_test@numTX:
  1660                           	opt stack 0
  1661  00006E                     streamBoronComm@pktArr:
  1662                           	opt stack 0
  1663  00006E                     hxSPPCarbonReadReg_test@readbackTimer:
  1664                           	opt stack 0
  1665  00006E                     I2C1_MasterWrite@pflag:
  1666                           	opt stack 0
  1667  00006E                     I2C1_MasterRead@pflag:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0xE
  1671  00006E                     	ds	1
  1672  00006F                     hxSPPCarbonWriteReg_test@tempByte:
  1673                           	opt stack 0
  1674  00006F                     hxSPPCarbonProgram_test@j_925:
  1675                           	opt stack 0
  1676  00006F                     hxSPPCarbonCheckBusy_test@readbackTimer:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0xF
  1680  00006F                     	ds	1
  1681  000070                     ??_calcBaudRate:
  1682  000070                     streamBoronComm@pktSize:
  1683                           	opt stack 0
  1684  000070                     hxSPPCarbonReadReg_test@oddParityCalc:
  1685                           	opt stack 0
  1686  000070                     hxSPPCarbonProgram_test@tempByte:
  1687                           	opt stack 0
  1688  000070                     writeI2C@txData:
  1689                           	opt stack 0
  1690  000070                     readI2C@rxData:
  1691                           	opt stack 0
  1692  000070                     hxSPPCarbonWrite_test@txBuffer:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x10
  1696  000070                     	ds	1
  1697  000071                     streamBoronComm@boron_comm_type:
  1698                           	opt stack 0
  1699  000071                     hxSPPCarbonReadReg_test@j:
  1700                           	opt stack 0
  1701  000071                     hxSPPCarbonCheckBusy_test@oddParityCalc:
  1702                           	opt stack 0
  1703                           
  1704                           ; 1 bytes @ 0x11
  1705  000071                     	ds	1
  1706  000072                     writeI2C@size:
  1707                           	opt stack 0
  1708  000072                     readI2C@numOfRx:
  1709                           	opt stack 0
  1710  000072                     hxSPPCarbonReadReg_test@i:
  1711                           	opt stack 0
  1712  000072                     hxSPPCarbonCheckBusy_test@j:
  1713                           	opt stack 0
  1714  000072                     calcBaudRate@bd:
  1715                           	opt stack 0
  1716  000072                     hxSPPCarbonWrite_test@rxBuffer:
  1717                           	opt stack 0
  1718  000072                     ASLB_HeaterFunctionality@rxBuffer:
  1719                           	opt stack 0
  1720  000072                     ASLB_AnalogMuxReadingSetup@rxBuffer:
  1721                           	opt stack 0
  1722  000072                     ASLB_debug1@rxBuffer:
  1723                           	opt stack 0
  1724  000072                     checkAndSendLatchData@rxBuffer:
  1725                           	opt stack 0
  1726                           
  1727                           ; 2 bytes @ 0x12
  1728  000072                     	ds	1
  1729  000073                     hxSPPCarbonReadReg_test@j_905:
  1730                           	opt stack 0
  1731  000073                     hxSPPCarbonCheckBusy_test@i:
  1732                           	opt stack 0
  1733  000073                     writeI2C@slaveAddr:
  1734                           	opt stack 0
  1735  000073                     readI2C@slaveAddr:
  1736                           	opt stack 0
  1737  000073                     calcBaudRate@bRate:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x13
  1741  000073                     	ds	1
  1742  000074                     hxSPPCarbonWrite_test@numTX:
  1743                           	opt stack 0
  1744  000074                     hxSPPCarbonReadReg_test@i_906:
  1745                           	opt stack 0
  1746  000074                     hxSPPCarbonCheckBusy_test@j_939:
  1747                           	opt stack 0
  1748  000074                     ASLB_debug1@ramData:
  1749                           	opt stack 0
  1750  000074                     checkAndSendLatchData@rx_index:
  1751                           	opt stack 0
  1752                           
  1753                           ; 2 bytes @ 0x14
  1754  000074                     	ds	1
  1755  000075                     hxSPPCarbonWrite_test@returnValue:
  1756                           	opt stack 0
  1757  000075                     hxSPPCarbonReadReg_test@j_907:
  1758                           	opt stack 0
  1759  000075                     hxSPPCarbonCheckBusy_test@i_940:
  1760                           	opt stack 0
  1761  000075                     ASLB_debug1@stream_status:
  1762                           	opt stack 0
  1763  000075                     writeI2C@timeOut:
  1764                           	opt stack 0
  1765  000075                     readI2C@timeOut:
  1766                           	opt stack 0
  1767  000075                     findMaxI2CSpeed@rxBuffer:
  1768                           	opt stack 0
  1769                           
  1770                           ; 2 bytes @ 0x15
  1771  000075                     	ds	1
  1772  000076                     ??_checkAndSendLatchData:
  1773  000076                     hxSPPCarbonReadReg_test@bitVal:
  1774                           	opt stack 0
  1775  000076                     hxSPPCarbonCheckBusy_test@j_941:
  1776                           	opt stack 0
  1777  000076                     ASLB_debug1@stream:
  1778                           	opt stack 0
  1779                           
  1780                           ; 8 bytes @ 0x16
  1781  000076                     	ds	1
  1782  000077                     writeI2C@status:
  1783                           	opt stack 0
  1784  000077                     readI2C@status:
  1785                           	opt stack 0
  1786  000077                     hxSPPCarbonReadReg_test@tempHxState:
  1787                           	opt stack 0
  1788  000077                     hxSPPCarbonCheckBusy_test@bitVal:
  1789                           	opt stack 0
  1790                           
  1791                           ; 1 bytes @ 0x17
  1792  000077                     	ds	1
  1793  000078                     hxSPPCarbonReadReg_test@readbackCommState:
  1794                           	opt stack 0
  1795  000078                     hxSPPCarbonCheckBusy_test@portAVal:
  1796                           	opt stack 0
  1797  000078                     checkAndSendLatchData@stream_status:
  1798                           	opt stack 0
  1799  000078                     ASLB_debug2@rxBuffer:
  1800                           	opt stack 0
  1801  000078                     run_I2C@hx_inData:
  1802                           	opt stack 0
  1803                           
  1804                           ; 2 bytes @ 0x18
  1805  000078                     	ds	1
  1806  000079                     hxSPPCarbonReadReg_test@tempByte:
  1807                           	opt stack 0
  1808  000079                     hxSPPCarbonCheckBusy_test@readbackCommState:
  1809                           	opt stack 0
  1810  000079                     checkAndSendLatchData@stream:
  1811                           	opt stack 0
  1812                           
  1813                           ; 48 bytes @ 0x19
  1814  000079                     	ds	1
  1815  00007A                     hxSPPCarbonRead_test@numRX:
  1816                           	opt stack 0
  1817  00007A                     hxSPPCarbonCheckBusy_test@tempByte:
  1818                           	opt stack 0
  1819  00007A                     run_I2C@size:
  1820                           	opt stack 0
  1821  00007A                     hxSPPCarbonWriteAndVerity_test@txBuffer:
  1822                           	opt stack 0
  1823  00007A                     ASLB_debug2@zeros:
  1824                           	opt stack 0
  1825                           
  1826                           ; 10 bytes @ 0x1A
  1827  00007A                     	ds	1
  1828  00007B                     ??_run_I2C:
  1829  00007B                     hxSPPCarbonRead_test@txBuffer:
  1830                           	opt stack 0
  1831                           
  1832                           ; 2 bytes @ 0x1B
  1833  00007B                     	ds	1
  1834  00007C                     hxSPPCarbonWriteAndVerity_test@rxBuffer:
  1835                           	opt stack 0
  1836                           
  1837                           ; 2 bytes @ 0x1C
  1838  00007C                     	ds	1
  1839  00007D                     hxSPPCarbonRead_test@rxBuffer:
  1840                           	opt stack 0
  1841                           
  1842                           ; 2 bytes @ 0x1D
  1843  00007D                     	ds	1
  1844  00007E                     ASLB_debug1@ramAddrHi:
  1845                           	opt stack 0
  1846                           
  1847                           ; 1 bytes @ 0x1E
  1848  00007E                     	ds	1
  1849  00007F                     hxSPPCarbonRead_test@numTX:
  1850                           	opt stack 0
  1851  00007F                     ASLB_debug1@ramAddrLo:
  1852                           	opt stack 0
  1853                           
  1854                           ; 1 bytes @ 0x1F
  1855  00007F                     	ds	1
  1856  000080                     hxSPPCarbonWriteAndVerity_test@returnValue:
  1857                           	opt stack 0
  1858  000080                     hxSPPCarbonRead_test@returnValue:
  1859                           	opt stack 0
  1860  000080                     ASLB_debug1@rx_index:
  1861                           	opt stack 0
  1862                           
  1863                           ; 1 bytes @ 0x20
  1864  000080                     	ds	1
  1865  000081                     hxSPPCarbonWriteAndVerity_test@numTX:
  1866                           	opt stack 0
  1867  000081                     ASLB_debug1@cmdReadbackPkt:
  1868                           	opt stack 0
  1869                           
  1870                           ; 71 bytes @ 0x21
  1871  000081                     	ds	1
  1872  000082                     hxSPPCarbonWriteAndVerity_test@i:
  1873                           	opt stack 0
  1874                           
  1875                           ; 1 bytes @ 0x22
  1876  000082                     	ds	1
  1877  000083                     hxSPPCarbonWriteAndVerity_test@tempValue:
  1878                           	opt stack 0
  1879                           
  1880                           ; 1 bytes @ 0x23
  1881  000083                     	ds	1
  1882  000084                     ASLB_debug2@rx_index:
  1883                           	opt stack 0
  1884  000084                     run_SPPCarbon_test@hx_inData:
  1885                           	opt stack 0
  1886                           
  1887                           ; 2 bytes @ 0x24
  1888  000084                     	ds	1
  1889  000085                     ASLB_debug2@wr_status:
  1890                           	opt stack 0
  1891                           
  1892                           ; 1 bytes @ 0x25
  1893  000085                     	ds	1
  1894  000086                     run_SPPCarbon_test@size:
  1895                           	opt stack 0
  1896                           
  1897                           ; 1 bytes @ 0x26
  1898  000086                     	ds	1
  1899  000087                     ??_run_SPPCarbon_test:
  1900                           
  1901                           ; 1 bytes @ 0x27
  1902  000087                     	ds	1
  1903  000088                     run_SPPCarbon_test@returnValue:
  1904                           	opt stack 0
  1905                           
  1906                           ; 1 bytes @ 0x28
  1907  000088                     	ds	1
  1908  000089                     run_SPPCarbon_test@numRxBytes:
  1909                           	opt stack 0
  1910                           
  1911                           ; 1 bytes @ 0x29
  1912  000089                     	ds	1
  1913  00008A                     run_SPPCarbon_test@numTxBytes:
  1914                           	opt stack 0
  1915                           
  1916                           ; 1 bytes @ 0x2A
  1917  00008A                     	ds	31
  1918  0000A9                     checkAndSendLatchData@readbackPkts:
  1919                           	opt stack 0
  1920                           
  1921                           ; 24 bytes @ 0x49
  1922  0000A9                     	ds	3
  1923  0000AC                     ASLB_TempSetDACVoltage@i:
  1924                           	opt stack 0
  1925                           
  1926                           ; 2 bytes @ 0x4C
  1927  0000AC                     	ds	6
  1928  0000B2                     ASLB_CurrentLimitDACVoltage@i:
  1929                           	opt stack 0
  1930                           
  1931                           ; 2 bytes @ 0x52
  1932  0000B2                     	ds	15
  1933  0000C1                     checkAndSendLatchData@noError:
  1934                           	opt stack 0
  1935                           
  1936                           ; 1 bytes @ 0x61
  1937  0000C1                     	ds	1
  1938  0000C2                     checkAndSendLatchData@readbackSendCount:
  1939                           	opt stack 0
  1940                           
  1941                           ; 1 bytes @ 0x62
  1942  0000C2                     	ds	1
  1943  0000C3                     checkAndSendLatchData@latchSendCount:
  1944                           	opt stack 0
  1945                           
  1946                           ; 1 bytes @ 0x63
  1947  0000C3                     	ds	1
  1948  0000C4                     ASLB_SheetResistance@rxBuffer:
  1949                           	opt stack 0
  1950                           
  1951                           ; 2 bytes @ 0x64
  1952  0000C4                     	ds	2
  1953  0000C6                     ASLB_SheetResistance@rx_index:
  1954                           	opt stack 0
  1955                           
  1956                           ; 1 bytes @ 0x66
  1957  0000C6                     	ds	1
  1958  0000C7                     write_ASLBoron_test@run_rpt:
  1959                           	opt stack 0
  1960                           
  1961                           ; 2 bytes @ 0x67
  1962  0000C7                     	ds	1
  1963  0000C8                     write_ASLBoron_debug@run_cnfg:
  1964                           	opt stack 0
  1965                           
  1966                           ; 1 bytes @ 0x68
  1967  0000C8                     	ds	1
  1968  0000C9                     write_ASLBoron_test@rxBuffer:
  1969                           	opt stack 0
  1970  0000C9                     write_ASLBoron_debug@rxBuffer:
  1971                           	opt stack 0
  1972                           
  1973                           ; 2 bytes @ 0x69
  1974  0000C9                     	ds	2
  1975  0000CB                     ??_write_ASLBoron_test:
  1976  0000CB                     write_ASLBoron_debug@run_test:
  1977                           	opt stack 0
  1978                           
  1979                           ; 1 bytes @ 0x6B
  1980  0000CB                     	ds	3
  1981  0000CE                     write_ASLBoron_test@run_test:
  1982                           	opt stack 0
  1983                           
  1984                           ; 1 bytes @ 0x6E
  1985  0000CE                     	ds	1
  1986  0000CF                     write_ASLBoron_test@i:
  1987                           	opt stack 0
  1988                           
  1989                           ; 2 bytes @ 0x6F
  1990  0000CF                     	ds	2
  1991  0000D1                     write_ASLBoron_test@j:
  1992                           	opt stack 0
  1993                           
  1994                           ; 2 bytes @ 0x71
  1995  0000D1                     	ds	2
  1996  0000D3                     run_ASLBoron@hx_inData:
  1997                           	opt stack 0
  1998                           
  1999                           ; 2 bytes @ 0x73
  2000  0000D3                     	ds	2
  2001  0000D5                     run_ASLBoron@size:
  2002                           	opt stack 0
  2003                           
  2004                           ; 1 bytes @ 0x75
  2005  0000D5                     	ds	1
  2006  0000D6                     ??_run_ASLBoron:
  2007                           
  2008                           ; 1 bytes @ 0x76
  2009  0000D6                     	ds	3
  2010  0000D9                     tblptru	equ	0xFF8
  2011                           tblptrh	equ	0xFF7
  2012                           tblptrl	equ	0xFF6
  2013                           tablat	equ	0xFF5
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           postdec1	equ	0xFE5
  2017                           fsr1l	equ	0xFE1
  2018                           
  2019                           ; 1 bytes @ 0x79
  2020                           
  2021                           	psect	cstackCOMRAM
  2022  000001                     __pcstackCOMRAM:
  2023                           	opt stack 0
  2024  000001                     ??_I2C1_Stop:
  2025  000001                     hxCalcChecksum@data:
  2026                           	opt stack 0
  2027  000001                     i2hxClearArray@arr:
  2028                           	opt stack 0
  2029  000001                     i2TMR0_Write16bitTimer@timerVal:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x0
  2033  000001                     	ds	2
  2034  000003                     hxCalcChecksum@size:
  2035                           	opt stack 0
  2036  000003                     I2C1_Stop@completion_code:
  2037                           	opt stack 0
  2038  000003                     i2hxClearArray@size:
  2039                           	opt stack 0
  2040  000003                     hxStartTimer@timerVal:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x2
  2044  000003                     	ds	1
  2045  000004                     ??_I2C1_ISR:
  2046  000004                     hxCalcChecksum@i:
  2047                           	opt stack 0
  2048  000004                     i2hxClearArray@i:
  2049                           	opt stack 0
  2050                           
  2051                           ; 1 bytes @ 0x3
  2052  000004                     	ds	1
  2053  000005                     hxCalcChecksum@temp_checksum:
  2054                           	opt stack 0
  2055                           
  2056                           ; 1 bytes @ 0x4
  2057  000005                     	ds	1
  2058  000006                     ??_hxSetupPacket2:
  2059  000006                     hxSetupPacket1@data:
  2060                           	opt stack 0
  2061                           
  2062                           ; 1 bytes @ 0x5
  2063  000006                     	ds	1
  2064  000007                     ??_hxSetupPacket1:
  2065  000007                     hxSetupPacket2@pc_cmd:
  2066                           	opt stack 0
  2067                           
  2068                           ; 1 bytes @ 0x6
  2069  000007                     	ds	1
  2070  000008                     hxSetupPacket1@pc_cmd:
  2071                           	opt stack 0
  2072  000008                     hxSetupPacket2@i:
  2073                           	opt stack 0
  2074                           
  2075                           ; 1 bytes @ 0x7
  2076  000008                     	ds	1
  2077  000009                     hxCmdFilter@i:
  2078                           	opt stack 0
  2079  000009                     _hxHandleTmr0$364:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x8
  2083  000009                     	ds	1
  2084  00000A                     ??_hxISRHandle:
  2085                           
  2086                           ; 1 bytes @ 0x9
  2087  00000A                     	ds	1
  2088  00000B                     
  2089                           ; 1 bytes @ 0xA
  2090  00000B                     	ds	6
  2091  000011                     hxISRHandle@data:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x10
  2095  000011                     	ds	1
  2096  000012                     ??_INTERRUPT_InterruptManager:
  2097                           
  2098                           ; 1 bytes @ 0x11
  2099  000012                     	ds	18
  2100                           tblptru	equ	0xFF8
  2101                           tblptrh	equ	0xFF7
  2102                           tblptrl	equ	0xFF6
  2103                           tablat	equ	0xFF5
  2104                           postinc0	equ	0xFEE
  2105                           wreg	equ	0xFE8
  2106                           postdec1	equ	0xFE5
  2107                           fsr1l	equ	0xFE1
  2108                           
  2109 ;;
  2110 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2111 ;;
  2112 ;; *************** function _main *****************
  2113 ;; Defined at:
  2114 ;;		line 57 in file "main.c"
  2115 ;; Parameters:    Size  Location     Type
  2116 ;;		None
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;  temp            1    0        unsigned char 
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      void 
  2121 ;; Registers used:
  2122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2132 ;;Total ram usage:        0 bytes
  2133 ;; Hardware stack levels required when called:   14
  2134 ;; This function calls:
  2135 ;;		_HX_Initialize
  2136 ;;		_SYSTEM_Initialize
  2137 ;;		_hxHandleTxUART
  2138 ;;		_run_ASLBoron
  2139 ;;		_run_I2C
  2140 ;;		_run_SPPCarbon_test
  2141 ;; This function is called by:
  2142 ;;		Startup code after reset
  2143 ;; This function uses a non-reentrant model
  2144 ;;
  2145                           
  2146                           	psect	text0
  2147  003044                     __ptext0:
  2148                           	opt stack 0
  2149  003044                     _main:
  2150                           	opt stack 17
  2151                           
  2152                           ;main.c: 59: uint8_t temp;
  2153                           ;main.c: 61: SYSTEM_Initialize();
  2154                           
  2155                           ;incstack = 0
  2156  003044  EC6E  F01F         	call	_SYSTEM_Initialize	;wreg free
  2157                           
  2158                           ;main.c: 80: (INTCONbits.GIE = 1);
  2159  003048  8EF2               	bsf	intcon,7,c	;volatile
  2160                           
  2161                           ;main.c: 83: (INTCONbits.PEIE = 1);
  2162  00304A  8CF2               	bsf	intcon,6,c	;volatile
  2163                           
  2164                           ;main.c: 91: HX_Initialize();
  2165  00304C  ECC4  F01F         	call	_HX_Initialize	;wreg free
  2166                           
  2167                           ;main.c: 93: LATA = 0x03;
  2168  003050  0E03               	movlw	3
  2169  003052  6E83               	movwf	3971,c	;volatile
  2170  003054                     
  2171                           ;main.c: 95: {
  2172                           ;main.c: 96: hxHandleTxUART();
  2173  003054  ECBD  F01A         	call	_hxHandleTxUART	;wreg free
  2174                           
  2175                           ;main.c: 97: if (hx_txPacketFlag == 0 && hx_startMain == 1 && hx_abort == 0)
  2176  003058  5046               	movf	_hx_txPacketFlag,w,c
  2177  00305A  A4D8               	btfss	status,2,c
  2178  00305C  D040               	goto	l2082
  2179  00305E  0438               	decf	_hx_startMain,w,c
  2180  003060  A4D8               	btfss	status,2,c
  2181  003062  D03D               	goto	l2082
  2182  003064  5036               	movf	_hx_abort,w,c
  2183  003066  B4D8               	btfsc	status,2,c
  2184  003068  D01F               	goto	l2083
  2185  00306A  D039               	goto	l2082
  2186  00306C                     
  2187                           ;main.c: 114: run_I2C(hx_inData, hx_inDataIndex);
  2188  00306C  0E40               	movlw	low _hx_inData
  2189  00306E  0100               	movlb	0	; () banked
  2190  003070  6F78               	movwf	run_I2C@hx_inData& (0+255),b
  2191  003072  0E0B               	movlw	high _hx_inData
  2192  003074  6F79               	movwf	(run_I2C@hx_inData+1)& (0+255),b
  2193  003076  C03E  F07A         	movff	_hx_inDataIndex,run_I2C@size
  2194  00307A  ECFA  F004         	call	_run_I2C	;wreg free
  2195                           
  2196                           ;main.c: 123: break;
  2197                           
  2198                           ;main.c: 121: case 0x30:
  2199                           
  2200                           ;main.c: 119: break;
  2201                           
  2202                           ;main.c: 117: case 0x20:
  2203                           
  2204                           ;main.c: 115: break;
  2205  00307E  D02D               	goto	l2085
  2206  003080                     
  2207                           ;main.c: 127: run_ASLBoron(hx_inData, hx_inDataIndex);
  2208  003080  0E40               	movlw	low _hx_inData
  2209  003082  0100               	movlb	0	; () banked
  2210  003084  6FD3               	movwf	run_ASLBoron@hx_inData& (0+255),b
  2211  003086  0E0B               	movlw	high _hx_inData
  2212  003088  6FD4               	movwf	(run_ASLBoron@hx_inData+1)& (0+255),b
  2213  00308A  C03E  F0D5         	movff	_hx_inDataIndex,run_ASLBoron@size
  2214  00308E  ECDC  F009         	call	_run_ASLBoron	;wreg free
  2215                           
  2216                           ;main.c: 128: break;
  2217  003092  D023               	goto	l2085
  2218  003094                     
  2219                           ;main.c: 132: run_SPPCarbon_test(hx_inData, hx_inDataIndex);
  2220  003094  0E40               	movlw	low _hx_inData
  2221  003096  0100               	movlb	0	; () banked
  2222  003098  6F84               	movwf	run_SPPCarbon_test@hx_inData& (0+255),b
  2223  00309A  0E0B               	movlw	high _hx_inData
  2224  00309C  6F85               	movwf	(run_SPPCarbon_test@hx_inData+1)& (0+255),b
  2225  00309E  C03E  F086         	movff	_hx_inDataIndex,run_SPPCarbon_test@size
  2226  0030A2  EC3D  F00B         	call	_run_SPPCarbon_test	;wreg free
  2227                           
  2228                           ;main.c: 137: }
  2229                           
  2230                           ;main.c: 136: break;
  2231                           
  2232                           ;main.c: 135: default:
  2233                           
  2234                           ;main.c: 133: break;
  2235  0030A6  D019               	goto	l2085
  2236  0030A8                     l2083:
  2237  0030A8  503B               	movf	_hx_pktCmd,w,c
  2238                           
  2239                           ; Switch size 1, requested type "space"
  2240                           ; Number of cases is 8, Range of values is 0 to 240
  2241                           ; switch strategies available:
  2242                           ; Name         Instructions Cycles
  2243                           ; simple_byte           25    13 (average)
  2244                           ;	Chosen strategy is simple_byte
  2245  0030AA  0A00               	xorlw	0	; case 0
  2246  0030AC  B4D8               	btfsc	status,2,c
  2247  0030AE  D015               	goto	l2085
  2248  0030B0  0A01               	xorlw	1	; case 1
  2249  0030B2  B4D8               	btfsc	status,2,c
  2250  0030B4  D012               	goto	l2085
  2251  0030B6  0A03               	xorlw	3	; case 2
  2252  0030B8  B4D8               	btfsc	status,2,c
  2253  0030BA  D00F               	goto	l2085
  2254  0030BC  0A12               	xorlw	18	; case 16
  2255  0030BE  B4D8               	btfsc	status,2,c
  2256  0030C0  D7D5               	goto	l2088
  2257  0030C2  0A30               	xorlw	48	; case 32
  2258  0030C4  B4D8               	btfsc	status,2,c
  2259  0030C6  D009               	goto	l2085
  2260  0030C8  0A10               	xorlw	16	; case 48
  2261  0030CA  B4D8               	btfsc	status,2,c
  2262  0030CC  D006               	goto	l2085
  2263  0030CE  0A01               	xorlw	1	; case 49
  2264  0030D0  B4D8               	btfsc	status,2,c
  2265  0030D2  D7D6               	goto	l2091
  2266  0030D4  0AC1               	xorlw	193	; case 240
  2267  0030D6  B4D8               	btfsc	status,2,c
  2268  0030D8  D7DD               	goto	l2092
  2269  0030DA                     l2085:
  2270                           
  2271                           ;main.c: 140: hx_startMain = 0;
  2272  0030DA  0E00               	movlw	0
  2273  0030DC  6E38               	movwf	_hx_startMain,c
  2274  0030DE                     l2082:
  2275                           
  2276                           ;main.c: 141: }
  2277                           ;main.c: 142: hx_abort = 0;
  2278  0030DE  0E00               	movlw	0
  2279  0030E0  6E36               	movwf	_hx_abort,c
  2280  0030E2  D7B8               	goto	l2081
  2281  0030E4                     __end_of_main:
  2282                           	opt stack 0
  2283                           tblptru	equ	0xFF8
  2284                           tblptrh	equ	0xFF7
  2285                           tblptrl	equ	0xFF6
  2286                           tablat	equ	0xFF5
  2287                           intcon	equ	0xFF2
  2288                           postinc0	equ	0xFEE
  2289                           wreg	equ	0xFE8
  2290                           postdec1	equ	0xFE5
  2291                           fsr1l	equ	0xFE1
  2292                           status	equ	0xFD8
  2293                           
  2294 ;; *************** function _run_SPPCarbon_test *****************
  2295 ;; Defined at:
  2296 ;;		line 3 in file "HX_SPP_CARBON.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;  hx_inData       2   36[BANK0 ] PTR unsigned char 
  2299 ;;		 -> hx_inData(64), 
  2300 ;;  size            1   38[BANK0 ] unsigned char 
  2301 ;; Auto vars:     Size  Location     Type
  2302 ;;  numTxBytes      1   42[BANK0 ] unsigned char 
  2303 ;;  numRxBytes      1   41[BANK0 ] unsigned char 
  2304 ;;  returnValue     1   40[BANK0 ] unsigned char 
  2305 ;; Return value:  Size  Location     Type
  2306 ;;                  1    wreg      void 
  2307 ;; Registers used:
  2308 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2314 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2315 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2316 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2317 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2318 ;;Total ram usage:        7 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:   10
  2321 ;; This function calls:
  2322 ;;		_hxSPPCarbonCheckBusy_test
  2323 ;;		_hxSPPCarbonProgram_test
  2324 ;;		_hxSPPCarbonRead_test
  2325 ;;		_hxSPPCarbonWriteAndVerity_test
  2326 ;;		_hxSPPCarbonWriteReg_test
  2327 ;;		_hxSPPCarbonWrite_test
  2328 ;; This function is called by:
  2329 ;;		_main
  2330 ;; This function uses a non-reentrant model
  2331 ;;
  2332                           
  2333                           	psect	text1
  2334  00167A                     __ptext1:
  2335                           	opt stack 0
  2336  00167A                     _run_SPPCarbon_test:
  2337                           	opt stack 20
  2338                           
  2339                           ;HX_SPP_CARBON.c: 5: uint8_t numTxBytes;
  2340                           ;HX_SPP_CARBON.c: 6: uint8_t numRxBytes;
  2341                           ;HX_SPP_CARBON.c: 7: uint8_t returnValue;
  2342                           ;HX_SPP_CARBON.c: 9: (INTCONbits.GIE = 0);
  2343                           
  2344                           ;incstack = 0
  2345  00167A  9EF2               	bcf	intcon,7,c	;volatile
  2346                           
  2347                           ;HX_SPP_CARBON.c: 10: if (size != 3)
  2348  00167C  0E03               	movlw	3
  2349  00167E  0100               	movlb	0	; () banked
  2350  001680  1986               	xorwf	run_SPPCarbon_test@size& (0+255),w,b
  2351  001682  B4D8               	btfsc	status,2,c
  2352  001684  D002               	goto	l569
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;HX_SPP_CARBON.c: 11: {
  2356                           ;HX_SPP_CARBON.c: 12: hx_state = 0x21;
  2357  001686  0E21               	movlw	33
  2358  001688  D0AA               	goto	L1
  2359  00168A                     l569:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;HX_SPP_CARBON.c: 14: else if((hx_inData[0] & 0xF0) == 0x00)
  2363                           
  2364                           ; BSR set to: 0
  2365  00168A  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2366  00168E  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2367  001692  50DF               	movf	indf2,w,c
  2368  001694  6F87               	movwf	??_run_SPPCarbon_test& (0+255),b
  2369  001696  0EF0               	movlw	240
  2370  001698  1787               	andwf	??_run_SPPCarbon_test& (0+255),f,b
  2371  00169A  A4D8               	btfss	status,2,c
  2372  00169C  D010               	goto	l571
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;HX_SPP_CARBON.c: 15: {
  2376                           ;HX_SPP_CARBON.c: 16: numTxBytes = 3;
  2377  00169E  0E03               	movlw	3
  2378  0016A0  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2379                           
  2380                           ;HX_SPP_CARBON.c: 17: hx_mainDataIndex = 1;
  2381  0016A2  0E01               	movlw	1
  2382  0016A4  6E3F               	movwf	_hx_mainDataIndex,c
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;HX_SPP_CARBON.c: 19: hxSPPCarbonWrite_test(numTxBytes, &hx_inData[0], hx_mainData);
  2386  0016A6  C084  F070         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonWrite_test@txBuffer
  2387  0016AA  C085  F071         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonWrite_test@txBuffer+1
  2388  0016AE  0EC0               	movlw	low _hx_mainData
  2389  0016B0  6F72               	movwf	hxSPPCarbonWrite_test@rxBuffer& (0+255),b
  2390  0016B2  0E0B               	movlw	high _hx_mainData
  2391  0016B4  6F73               	movwf	(hxSPPCarbonWrite_test@rxBuffer+1)& (0+255),b
  2392  0016B6  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2393  0016B8  EC30  F01D         	call	_hxSPPCarbonWrite_test
  2394                           
  2395                           ;HX_SPP_CARBON.c: 20: }
  2396  0016BC  D12C               	goto	l592
  2397  0016BE                     l571:
  2398                           
  2399                           ;HX_SPP_CARBON.c: 21: else if((hx_inData[0] & 0xF0) == 0x10)
  2400  0016BE  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2401  0016C2  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2402  0016C6  50DF               	movf	indf2,w,c
  2403  0016C8  0BF0               	andlw	240
  2404  0016CA  0A10               	xorlw	16
  2405  0016CC  A4D8               	btfss	status,2,c
  2406  0016CE  D015               	goto	l573
  2407                           
  2408                           ;HX_SPP_CARBON.c: 22: {
  2409                           ;HX_SPP_CARBON.c: 23: numTxBytes = 3;
  2410  0016D0  0E03               	movlw	3
  2411  0016D2  0100               	movlb	0	; () banked
  2412  0016D4  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2413                           
  2414                           ;HX_SPP_CARBON.c: 24: numRxBytes = 2;
  2415  0016D6  0E02               	movlw	2
  2416  0016D8  6F89               	movwf	run_SPPCarbon_test@numRxBytes& (0+255),b
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;HX_SPP_CARBON.c: 25: hx_mainDataIndex = numRxBytes+1;
  2420  0016DA  2989               	incf	run_SPPCarbon_test@numRxBytes& (0+255),w,b
  2421  0016DC  6E3F               	movwf	_hx_mainDataIndex,c
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;HX_SPP_CARBON.c: 26: hxSPPCarbonRead_test(numTxBytes, numRxBytes, &hx_inData[0], hx_mai
      +                          nData);
  2425  0016DE  C089  F07A         	movff	run_SPPCarbon_test@numRxBytes,hxSPPCarbonRead_test@numRX
  2426  0016E2  C084  F07B         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonRead_test@txBuffer
  2427  0016E6  C085  F07C         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonRead_test@txBuffer+1
  2428  0016EA  0EC0               	movlw	low _hx_mainData
  2429  0016EC  6F7D               	movwf	hxSPPCarbonRead_test@rxBuffer& (0+255),b
  2430  0016EE  0E0B               	movlw	high _hx_mainData
  2431  0016F0  6F7E               	movwf	(hxSPPCarbonRead_test@rxBuffer+1)& (0+255),b
  2432  0016F2  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2433  0016F4  EC07  F01C         	call	_hxSPPCarbonRead_test
  2434                           
  2435                           ;HX_SPP_CARBON.c: 27: }
  2436  0016F8  D10E               	goto	l592
  2437  0016FA                     l573:
  2438                           
  2439                           ;HX_SPP_CARBON.c: 28: else if((hx_inData[0] & 0xF0) == 0x20)
  2440  0016FA  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2441  0016FE  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2442  001702  50DF               	movf	indf2,w,c
  2443  001704  0BF0               	andlw	240
  2444  001706  0A20               	xorlw	32
  2445  001708  A4D8               	btfss	status,2,c
  2446  00170A  D011               	goto	l575
  2447                           
  2448                           ;HX_SPP_CARBON.c: 29: {
  2449                           ;HX_SPP_CARBON.c: 30: numTxBytes = 3;
  2450  00170C  0E03               	movlw	3
  2451  00170E  0100               	movlb	0	; () banked
  2452  001710  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2453                           
  2454                           ;HX_SPP_CARBON.c: 31: hx_mainDataIndex = 1;
  2455  001712  0E01               	movlw	1
  2456  001714  6E3F               	movwf	_hx_mainDataIndex,c
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;HX_SPP_CARBON.c: 32: hxSPPCarbonProgram_test(numTxBytes, &hx_inData[0], hx_mainData);
  2460  001716  C084  F067         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonProgram_test@txBuffer
  2461  00171A  C085  F068         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonProgram_test@txBuffer+1
  2462  00171E  0EC0               	movlw	low _hx_mainData
  2463  001720  6F69               	movwf	hxSPPCarbonProgram_test@rxBuffer& (0+255),b
  2464  001722  0E0B               	movlw	high _hx_mainData
  2465  001724  6F6A               	movwf	(hxSPPCarbonProgram_test@rxBuffer+1)& (0+255),b
  2466  001726  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2467  001728  EC3C  F011         	call	_hxSPPCarbonProgram_test
  2468                           
  2469                           ;HX_SPP_CARBON.c: 33: }
  2470  00172C  D0F4               	goto	l592
  2471  00172E                     l575:
  2472                           
  2473                           ;HX_SPP_CARBON.c: 34: else if((hx_inData[0] & 0xF0) == 0x30)
  2474  00172E  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2475  001732  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2476  001736  50DF               	movf	indf2,w,c
  2477  001738  0BF0               	andlw	240
  2478  00173A  0A30               	xorlw	48
  2479  00173C  A4D8               	btfss	status,2,c
  2480  00173E  D015               	goto	l577
  2481                           
  2482                           ;HX_SPP_CARBON.c: 35: {
  2483                           ;HX_SPP_CARBON.c: 36: numTxBytes = 3;
  2484  001740  0E03               	movlw	3
  2485  001742  0100               	movlb	0	; () banked
  2486  001744  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2487                           
  2488                           ;HX_SPP_CARBON.c: 37: numRxBytes = 2;
  2489  001746  0E02               	movlw	2
  2490  001748  6F89               	movwf	run_SPPCarbon_test@numRxBytes& (0+255),b
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;HX_SPP_CARBON.c: 38: hx_mainDataIndex = numRxBytes+1;
  2494  00174A  2989               	incf	run_SPPCarbon_test@numRxBytes& (0+255),w,b
  2495  00174C  6E3F               	movwf	_hx_mainDataIndex,c
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;HX_SPP_CARBON.c: 39: hxSPPCarbonRead_test(numTxBytes, numRxBytes, &hx_inData[0], hx_mai
      +                          nData);
  2499  00174E  C089  F07A         	movff	run_SPPCarbon_test@numRxBytes,hxSPPCarbonRead_test@numRX
  2500  001752  C084  F07B         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonRead_test@txBuffer
  2501  001756  C085  F07C         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonRead_test@txBuffer+1
  2502  00175A  0EC0               	movlw	low _hx_mainData
  2503  00175C  6F7D               	movwf	hxSPPCarbonRead_test@rxBuffer& (0+255),b
  2504  00175E  0E0B               	movlw	high _hx_mainData
  2505  001760  6F7E               	movwf	(hxSPPCarbonRead_test@rxBuffer+1)& (0+255),b
  2506  001762  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2507  001764  EC07  F01C         	call	_hxSPPCarbonRead_test
  2508                           
  2509                           ;HX_SPP_CARBON.c: 40: }
  2510  001768  D0D6               	goto	l592
  2511  00176A                     l577:
  2512                           
  2513                           ;HX_SPP_CARBON.c: 41: else if((hx_inData[0] & 0xF0) == 0x40)
  2514  00176A  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2515  00176E  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2516  001772  50DF               	movf	indf2,w,c
  2517  001774  0BF0               	andlw	240
  2518  001776  0A40               	xorlw	64
  2519  001778  A4D8               	btfss	status,2,c
  2520  00177A  D015               	goto	l579
  2521                           
  2522                           ;HX_SPP_CARBON.c: 42: {
  2523                           ;HX_SPP_CARBON.c: 43: numTxBytes = 3;
  2524  00177C  0E03               	movlw	3
  2525  00177E  0100               	movlb	0	; () banked
  2526  001780  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2527                           
  2528                           ;HX_SPP_CARBON.c: 44: numRxBytes = 2;
  2529  001782  0E02               	movlw	2
  2530  001784  6F89               	movwf	run_SPPCarbon_test@numRxBytes& (0+255),b
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;HX_SPP_CARBON.c: 45: hx_mainDataIndex = numRxBytes+1;
  2534  001786  2989               	incf	run_SPPCarbon_test@numRxBytes& (0+255),w,b
  2535  001788  6E3F               	movwf	_hx_mainDataIndex,c
  2536                           
  2537                           ; BSR set to: 0
  2538                           ;HX_SPP_CARBON.c: 46: hxSPPCarbonRead_test(numTxBytes, numRxBytes, &hx_inData[0], hx_mai
      +                          nData);
  2539  00178A  C089  F07A         	movff	run_SPPCarbon_test@numRxBytes,hxSPPCarbonRead_test@numRX
  2540  00178E  C084  F07B         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonRead_test@txBuffer
  2541  001792  C085  F07C         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonRead_test@txBuffer+1
  2542  001796  0EC0               	movlw	low _hx_mainData
  2543  001798  6F7D               	movwf	hxSPPCarbonRead_test@rxBuffer& (0+255),b
  2544  00179A  0E0B               	movlw	high _hx_mainData
  2545  00179C  6F7E               	movwf	(hxSPPCarbonRead_test@rxBuffer+1)& (0+255),b
  2546  00179E  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2547  0017A0  EC07  F01C         	call	_hxSPPCarbonRead_test
  2548                           
  2549                           ;HX_SPP_CARBON.c: 47: }
  2550  0017A4  D0B8               	goto	l592
  2551  0017A6                     l579:
  2552                           
  2553                           ;HX_SPP_CARBON.c: 48: else if((hx_inData[0] & 0xF0) == 0x50)
  2554  0017A6  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2555  0017AA  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2556  0017AE  50DF               	movf	indf2,w,c
  2557  0017B0  0BF0               	andlw	240
  2558  0017B2  0A50               	xorlw	80
  2559  0017B4  A4D8               	btfss	status,2,c
  2560  0017B6  D01B               	goto	l581
  2561                           
  2562                           ;HX_SPP_CARBON.c: 49: {
  2563                           ;HX_SPP_CARBON.c: 50: numTxBytes = 3;
  2564  0017B8  0E03               	movlw	3
  2565  0017BA  0100               	movlb	0	; () banked
  2566  0017BC  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2567                           
  2568                           ;HX_SPP_CARBON.c: 51: hx_mainDataIndex = 1;
  2569  0017BE  0E01               	movlw	1
  2570  0017C0  6E3F               	movwf	_hx_mainDataIndex,c
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;HX_SPP_CARBON.c: 52: returnValue = hxSPPCarbonWriteReg_test(numTxBytes, &hx_inData[0]);
  2574  0017C2  C084  F067         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonWriteReg_test@txBuffer
  2575  0017C6  C085  F068         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonWriteReg_test@txBuffer+1
  2576  0017CA  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2577  0017CC  ECB4  F012         	call	_hxSPPCarbonWriteReg_test
  2578  0017D0  0100               	movlb	0	; () banked
  2579  0017D2  6F88               	movwf	run_SPPCarbon_test@returnValue& (0+255),b
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;HX_SPP_CARBON.c: 53: if (returnValue != 0x10)
  2583  0017D4  0E10               	movlw	16
  2584  0017D6  1988               	xorwf	run_SPPCarbon_test@returnValue& (0+255),w,b
  2585  0017D8  B4D8               	btfsc	status,2,c
  2586  0017DA  D003               	goto	l582
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;HX_SPP_CARBON.c: 54: {
  2590                           ;HX_SPP_CARBON.c: 55: hx_state = 0x41;
  2591  0017DC  0E41               	movlw	65
  2592  0017DE                     L1:
  2593  0017DE  6E45               	movwf	_hx_state,c
  2594                           
  2595                           ;HX_SPP_CARBON.c: 56: }
  2596  0017E0  D09A               	goto	l592
  2597  0017E2                     l582:
  2598                           
  2599                           ; BSR set to: 0
  2600                           ;HX_SPP_CARBON.c: 57: else
  2601                           ;HX_SPP_CARBON.c: 58: {
  2602                           ;HX_SPP_CARBON.c: 59: hx_state = 0x10;
  2603                           
  2604                           ; BSR set to: 0
  2605  0017E2  0E10               	movlw	16
  2606  0017E4  6E45               	movwf	_hx_state,c
  2607                           
  2608                           ;HX_SPP_CARBON.c: 60: hx_mainData[0] = 0x10;
  2609  0017E6  0E10               	movlw	16
  2610  0017E8  010B               	movlb	11	; () banked
  2611  0017EA  6FC0               	movwf	_hx_mainData& (0+255),b
  2612                           
  2613                           ; BSR set to: 11
  2614                           ;HX_SPP_CARBON.c: 61: }
  2615                           ;HX_SPP_CARBON.c: 62: }
  2616  0017EC  D094               	goto	l592
  2617  0017EE                     l581:
  2618                           
  2619                           ;HX_SPP_CARBON.c: 63: else if((hx_inData[0] & 0xF0) == 0x60)
  2620                           
  2621                           ; BSR set to: 11
  2622  0017EE  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2623  0017F2  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2624  0017F6  50DF               	movf	indf2,w,c
  2625  0017F8  0BF0               	andlw	240
  2626  0017FA  0A60               	xorlw	96
  2627  0017FC  A4D8               	btfss	status,2,c
  2628  0017FE  D015               	goto	l585
  2629                           
  2630                           ;HX_SPP_CARBON.c: 64: {
  2631                           ;HX_SPP_CARBON.c: 65: numTxBytes = 3;
  2632  001800  0E03               	movlw	3
  2633  001802  0100               	movlb	0	; () banked
  2634  001804  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2635                           
  2636                           ;HX_SPP_CARBON.c: 66: numRxBytes = 2;
  2637  001806  0E02               	movlw	2
  2638  001808  6F89               	movwf	run_SPPCarbon_test@numRxBytes& (0+255),b
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;HX_SPP_CARBON.c: 67: hx_mainDataIndex = numRxBytes+1;
  2642  00180A  2989               	incf	run_SPPCarbon_test@numRxBytes& (0+255),w,b
  2643  00180C  6E3F               	movwf	_hx_mainDataIndex,c
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;HX_SPP_CARBON.c: 68: hxSPPCarbonCheckBusy_test(numTxBytes, numRxBytes, &hx_inData[0], h
      +                          x_mainData);
  2647  00180E  C089  F067         	movff	run_SPPCarbon_test@numRxBytes,hxSPPCarbonCheckBusy_test@numRX
  2648  001812  C084  F068         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonCheckBusy_test@txBuffer
  2649  001816  C085  F069         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonCheckBusy_test@txBuffer+1
  2650  00181A  0EC0               	movlw	low _hx_mainData
  2651  00181C  6F6A               	movwf	hxSPPCarbonCheckBusy_test@rxBuffer& (0+255),b
  2652  00181E  0E0B               	movlw	high _hx_mainData
  2653  001820  6F6B               	movwf	(hxSPPCarbonCheckBusy_test@rxBuffer+1)& (0+255),b
  2654  001822  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2655  001824  EC65  F008         	call	_hxSPPCarbonCheckBusy_test
  2656                           
  2657                           ;HX_SPP_CARBON.c: 69: }
  2658  001828  D076               	goto	l592
  2659  00182A                     l585:
  2660                           
  2661                           ;HX_SPP_CARBON.c: 72: else if ( (hx_inData[0] & 0xF0) == 0x70)
  2662  00182A  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2663  00182E  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2664  001832  50DF               	movf	indf2,w,c
  2665  001834  0BF0               	andlw	240
  2666  001836  0A70               	xorlw	112
  2667  001838  A4D8               	btfss	status,2,c
  2668  00183A  D017               	goto	l587
  2669                           
  2670                           ;HX_SPP_CARBON.c: 73: {
  2671                           ;HX_SPP_CARBON.c: 74: numTxBytes = 2;
  2672  00183C  0E02               	movlw	2
  2673  00183E  0100               	movlb	0	; () banked
  2674  001840  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;HX_SPP_CARBON.c: 76: hx_inData[0] = 0xF0 & 0x00;
  2678  001842  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2679  001846  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2680  00184A  0E00               	movlw	0
  2681  00184C  6EDF               	movwf	indf2,c
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;HX_SPP_CARBON.c: 77: hx_mainDataIndex = 1;
  2685  00184E  0E01               	movlw	1
  2686  001850  6E3F               	movwf	_hx_mainDataIndex,c
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;HX_SPP_CARBON.c: 78: hxSPPCarbonWriteAndVerity_test(numTxBytes, &hx_inData[0], hx_mainD
      +                          ata);
  2690  001852  C084  F07A         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonWriteAndVerity_test@txBuffer
  2691  001856  C085  F07B         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonWriteAndVerity_test@txBuffer+1
  2692  00185A  0EC0               	movlw	low _hx_mainData
  2693  00185C  6F7C               	movwf	hxSPPCarbonWriteAndVerity_test@rxBuffer& (0+255),b
  2694  00185E  0E0B               	movlw	high _hx_mainData
  2695  001860  6F7D               	movwf	(hxSPPCarbonWriteAndVerity_test@rxBuffer+1)& (0+255),b
  2696  001862  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2697  001864  ECFD  F015         	call	_hxSPPCarbonWriteAndVerity_test
  2698                           
  2699                           ;HX_SPP_CARBON.c: 79: }
  2700  001868  D056               	goto	l592
  2701  00186A                     l587:
  2702                           
  2703                           ;HX_SPP_CARBON.c: 80: else if ( (hx_inData[0] & 0xF0) == 0x80)
  2704  00186A  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2705  00186E  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2706  001872  50DF               	movf	indf2,w,c
  2707  001874  0BF0               	andlw	240
  2708  001876  0A80               	xorlw	128
  2709  001878  A4D8               	btfss	status,2,c
  2710  00187A  D01B               	goto	l589
  2711                           
  2712                           ;HX_SPP_CARBON.c: 81: {
  2713                           ;HX_SPP_CARBON.c: 82: numTxBytes = 3;
  2714  00187C  0E03               	movlw	3
  2715  00187E  0100               	movlb	0	; () banked
  2716  001880  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2717                           
  2718                           ;HX_SPP_CARBON.c: 83: numRxBytes = 1;
  2719  001882  0E01               	movlw	1
  2720  001884  6F89               	movwf	run_SPPCarbon_test@numRxBytes& (0+255),b
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;HX_SPP_CARBON.c: 84: hx_inData[0] = 0xF0 & 0x10;
  2724  001886  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2725  00188A  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2726  00188E  0E10               	movlw	16
  2727  001890  6EDF               	movwf	indf2,c
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;HX_SPP_CARBON.c: 85: hx_mainDataIndex = numRxBytes+1;
  2731  001892  2989               	incf	run_SPPCarbon_test@numRxBytes& (0+255),w,b
  2732  001894  6E3F               	movwf	_hx_mainDataIndex,c
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;HX_SPP_CARBON.c: 86: hxSPPCarbonRead_test(numTxBytes, numRxBytes, &hx_inData[0], hx_mai
      +                          nData);
  2736  001896  C089  F07A         	movff	run_SPPCarbon_test@numRxBytes,hxSPPCarbonRead_test@numRX
  2737  00189A  C084  F07B         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonRead_test@txBuffer
  2738  00189E  C085  F07C         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonRead_test@txBuffer+1
  2739  0018A2  0EC0               	movlw	low _hx_mainData
  2740  0018A4  6F7D               	movwf	hxSPPCarbonRead_test@rxBuffer& (0+255),b
  2741  0018A6  0E0B               	movlw	high _hx_mainData
  2742  0018A8  6F7E               	movwf	(hxSPPCarbonRead_test@rxBuffer+1)& (0+255),b
  2743  0018AA  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2744  0018AC  EC07  F01C         	call	_hxSPPCarbonRead_test
  2745                           
  2746                           ;HX_SPP_CARBON.c: 87: }
  2747  0018B0  D032               	goto	l592
  2748  0018B2                     l589:
  2749                           
  2750                           ;HX_SPP_CARBON.c: 88: else if ( (hx_inData[0] & 0xF0) == 0x90)
  2751  0018B2  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2752  0018B6  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2753  0018BA  50DF               	movf	indf2,w,c
  2754  0018BC  0BF0               	andlw	240
  2755  0018BE  0A90               	xorlw	144
  2756  0018C0  A4D8               	btfss	status,2,c
  2757  0018C2  D017               	goto	l591
  2758                           
  2759                           ;HX_SPP_CARBON.c: 89: {
  2760                           ;HX_SPP_CARBON.c: 90: numTxBytes = 3;
  2761  0018C4  0E03               	movlw	3
  2762  0018C6  0100               	movlb	0	; () banked
  2763  0018C8  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2764                           
  2765                           ;HX_SPP_CARBON.c: 91: hx_mainDataIndex = 1;
  2766  0018CA  0E01               	movlw	1
  2767  0018CC  6E3F               	movwf	_hx_mainDataIndex,c
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;HX_SPP_CARBON.c: 92: hx_inData[0] = 0xF0 & 0x00;
  2771  0018CE  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2772  0018D2  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2773  0018D6  0E00               	movlw	0
  2774  0018D8  6EDF               	movwf	indf2,c
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;HX_SPP_CARBON.c: 93: hxSPPCarbonWriteAndVerity_test(numTxBytes, &hx_inData[0], hx_mainD
      +                          ata);
  2778  0018DA  C084  F07A         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonWriteAndVerity_test@txBuffer
  2779  0018DE  C085  F07B         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonWriteAndVerity_test@txBuffer+1
  2780  0018E2  0EC0               	movlw	low _hx_mainData
  2781  0018E4  6F7C               	movwf	hxSPPCarbonWriteAndVerity_test@rxBuffer& (0+255),b
  2782  0018E6  0E0B               	movlw	high _hx_mainData
  2783  0018E8  6F7D               	movwf	(hxSPPCarbonWriteAndVerity_test@rxBuffer+1)& (0+255),b
  2784  0018EA  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2785  0018EC  ECFD  F015         	call	_hxSPPCarbonWriteAndVerity_test
  2786                           
  2787                           ;HX_SPP_CARBON.c: 95: }
  2788  0018F0  D012               	goto	l592
  2789  0018F2                     l591:
  2790                           
  2791                           ;HX_SPP_CARBON.c: 97: else
  2792                           ;HX_SPP_CARBON.c: 98: {
  2793                           ;HX_SPP_CARBON.c: 99: hx_state = 0x21;
  2794  0018F2  0E21               	movlw	33
  2795  0018F4  6E45               	movwf	_hx_state,c
  2796                           
  2797                           ;HX_SPP_CARBON.c: 103: numTxBytes = 3;
  2798  0018F6  0E03               	movlw	3
  2799  0018F8  0100               	movlb	0	; () banked
  2800  0018FA  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2801                           
  2802                           ;HX_SPP_CARBON.c: 104: hx_mainDataIndex = 1;
  2803  0018FC  0E01               	movlw	1
  2804  0018FE  6E3F               	movwf	_hx_mainDataIndex,c
  2805                           
  2806                           ; BSR set to: 0
  2807                           ;HX_SPP_CARBON.c: 105: hxSPPCarbonWriteAndVerity_test(numTxBytes, &hx_inData[0], hx_main
      +                          Data);
  2808  001900  C084  F07A         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonWriteAndVerity_test@txBuffer
  2809  001904  C085  F07B         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonWriteAndVerity_test@txBuffer+1
  2810  001908  0EC0               	movlw	low _hx_mainData
  2811  00190A  6F7C               	movwf	hxSPPCarbonWriteAndVerity_test@rxBuffer& (0+255),b
  2812  00190C  0E0B               	movlw	high _hx_mainData
  2813  00190E  6F7D               	movwf	(hxSPPCarbonWriteAndVerity_test@rxBuffer+1)& (0+255),b
  2814  001910  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2815  001912  ECFD  F015         	call	_hxSPPCarbonWriteAndVerity_test
  2816  001916                     l592:
  2817                           
  2818                           ;HX_SPP_CARBON.c: 107: }
  2819                           ;HX_SPP_CARBON.c: 108: (INTCONbits.GIE = 1);
  2820  001916  8EF2               	bsf	intcon,7,c	;volatile
  2821  001918  0012               	return		;funcret
  2822  00191A                     __end_of_run_SPPCarbon_test:
  2823                           	opt stack 0
  2824                           tblptru	equ	0xFF8
  2825                           tblptrh	equ	0xFF7
  2826                           tblptrl	equ	0xFF6
  2827                           tablat	equ	0xFF5
  2828                           intcon	equ	0xFF2
  2829                           postinc0	equ	0xFEE
  2830                           wreg	equ	0xFE8
  2831                           postdec1	equ	0xFE5
  2832                           fsr1l	equ	0xFE1
  2833                           indf2	equ	0xFDF
  2834                           fsr2h	equ	0xFDA
  2835                           fsr2l	equ	0xFD9
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function _hxSPPCarbonWrite_test *****************
  2839 ;; Defined at:
  2840 ;;		line 146 in file "HX_SPP_CARBON.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;  numTX           1    wreg     unsigned char 
  2843 ;;  txBuffer        2   16[BANK0 ] PTR unsigned char 
  2844 ;;		 -> hx_inData(64), 
  2845 ;;  rxBuffer        2   18[BANK0 ] PTR unsigned char 
  2846 ;;		 -> hx_mainData(61), 
  2847 ;; Auto vars:     Size  Location     Type
  2848 ;;  numTX           1   20[BANK0 ] unsigned char 
  2849 ;;  returnValue     1   21[BANK0 ] unsigned char 
  2850 ;; Return value:  Size  Location     Type
  2851 ;;                  1    wreg      void 
  2852 ;; Registers used:
  2853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2854 ;; Tracked objects:
  2855 ;;		On entry : 0/0
  2856 ;;		On exit  : 0/0
  2857 ;;		Unchanged: 0/0
  2858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2859 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2860 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2862 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2863 ;;Total ram usage:        6 bytes
  2864 ;; Hardware stack levels used:    1
  2865 ;; Hardware stack levels required when called:    9
  2866 ;; This function calls:
  2867 ;;		_hxSPPCarbonWriteReg_test
  2868 ;; This function is called by:
  2869 ;;		_run_SPPCarbon_test
  2870 ;; This function uses a non-reentrant model
  2871 ;;
  2872                           
  2873                           	psect	text2
  2874  003A60                     __ptext2:
  2875                           	opt stack 0
  2876  003A60                     _hxSPPCarbonWrite_test:
  2877                           	opt stack 20
  2878                           
  2879                           ;incstack = 0
  2880                           ;hxSPPCarbonWrite_test@numTX stored from wreg
  2881  003A60  0100               	movlb	0	; () banked
  2882  003A62  6F74               	movwf	hxSPPCarbonWrite_test@numTX& (0+255),b
  2883                           
  2884                           ;HX_SPP_CARBON.c: 148: uint8_t returnValue;
  2885                           ;HX_SPP_CARBON.c: 149: returnValue = hxSPPCarbonWriteReg_test(numTX, txBuffer);
  2886  003A64  C070  F067         	movff	hxSPPCarbonWrite_test@txBuffer,hxSPPCarbonWriteReg_test@txBuffer
  2887  003A68  C071  F068         	movff	hxSPPCarbonWrite_test@txBuffer+1,hxSPPCarbonWriteReg_test@txBuffer+1
  2888  003A6C  0100               	movlb	0	; () banked
  2889  003A6E  5174               	movf	hxSPPCarbonWrite_test@numTX& (0+255),w,b
  2890  003A70  ECB4  F012         	call	_hxSPPCarbonWriteReg_test
  2891  003A74  0100               	movlb	0	; () banked
  2892  003A76  6F75               	movwf	hxSPPCarbonWrite_test@returnValue& (0+255),b
  2893                           
  2894                           ; BSR set to: 0
  2895                           ;HX_SPP_CARBON.c: 150: if (returnValue != 0x10)
  2896  003A78  0E10               	movlw	16
  2897  003A7A  1975               	xorwf	hxSPPCarbonWrite_test@returnValue& (0+255),w,b
  2898  003A7C  B4D8               	btfsc	status,2,c
  2899  003A7E  D003               	goto	l605
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;HX_SPP_CARBON.c: 151: {
  2903                           ;HX_SPP_CARBON.c: 152: hx_state = 0x41;
  2904  003A80  0E41               	movlw	65
  2905  003A82  6E45               	movwf	_hx_state,c
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;HX_SPP_CARBON.c: 153: return;
  2909  003A84  0012               	return	
  2910  003A86                     l605:
  2911                           
  2912                           ; BSR set to: 0
  2913                           ;HX_SPP_CARBON.c: 154: }
  2914                           ;HX_SPP_CARBON.c: 156: rxBuffer[0] = 0x10;
  2915                           
  2916                           ; BSR set to: 0
  2917  003A86  C072  FFD9         	movff	hxSPPCarbonWrite_test@rxBuffer,fsr2l
  2918  003A8A  C073  FFDA         	movff	hxSPPCarbonWrite_test@rxBuffer+1,fsr2h
  2919  003A8E  0E10               	movlw	16
  2920  003A90  6EDF               	movwf	indf2,c
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;HX_SPP_CARBON.c: 157: hx_state = 0x10;
  2924  003A92  0E10               	movlw	16
  2925  003A94  6E45               	movwf	_hx_state,c
  2926                           
  2927                           ; BSR set to: 0
  2928  003A96  0012               	return		;funcret
  2929  003A98                     __end_of_hxSPPCarbonWrite_test:
  2930                           	opt stack 0
  2931                           tblptru	equ	0xFF8
  2932                           tblptrh	equ	0xFF7
  2933                           tblptrl	equ	0xFF6
  2934                           tablat	equ	0xFF5
  2935                           intcon	equ	0xFF2
  2936                           postinc0	equ	0xFEE
  2937                           wreg	equ	0xFE8
  2938                           postdec1	equ	0xFE5
  2939                           fsr1l	equ	0xFE1
  2940                           indf2	equ	0xFDF
  2941                           fsr2h	equ	0xFDA
  2942                           fsr2l	equ	0xFD9
  2943                           status	equ	0xFD8
  2944                           
  2945 ;; *************** function _hxSPPCarbonWriteAndVerity_test *****************
  2946 ;; Defined at:
  2947 ;;		line 112 in file "HX_SPP_CARBON.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  numTX           1    wreg     unsigned char 
  2950 ;;  txBuffer        2   26[BANK0 ] PTR unsigned char 
  2951 ;;		 -> hx_inData(64), 
  2952 ;;  rxBuffer        2   28[BANK0 ] PTR unsigned char 
  2953 ;;		 -> hx_mainData(61), 
  2954 ;; Auto vars:     Size  Location     Type
  2955 ;;  numTX           1   33[BANK0 ] unsigned char 
  2956 ;;  i               1   34[BANK0 ] unsigned char 
  2957 ;;  tempValue       1   35[BANK0 ] unsigned char 
  2958 ;;  returnValue     1   32[BANK0 ] unsigned char 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      void 
  2961 ;; Registers used:
  2962 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2968 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2969 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2970 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2971 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2972 ;;Total ram usage:       10 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    9
  2975 ;; This function calls:
  2976 ;;		_hxSPPCarbonReadReg_test
  2977 ;;		_hxSPPCarbonWriteReg_test
  2978 ;; This function is called by:
  2979 ;;		_run_SPPCarbon_test
  2980 ;; This function uses a non-reentrant model
  2981 ;;
  2982                           
  2983                           	psect	text3
  2984  002BFA                     __ptext3:
  2985                           	opt stack 0
  2986  002BFA                     _hxSPPCarbonWriteAndVerity_test:
  2987                           	opt stack 20
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;incstack = 0
  2991                           ;hxSPPCarbonWriteAndVerity_test@numTX stored from wreg
  2992  002BFA  0100               	movlb	0	; () banked
  2993  002BFC  6F81               	movwf	hxSPPCarbonWriteAndVerity_test@numTX& (0+255),b
  2994                           
  2995                           ;HX_SPP_CARBON.c: 114: uint8_t returnValue;
  2996                           ;HX_SPP_CARBON.c: 115: uint8_t tempValue;
  2997                           ;HX_SPP_CARBON.c: 116: returnValue = hxSPPCarbonWriteReg_test(numTX, txBuffer);
  2998  002BFE  C07A  F067         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer,hxSPPCarbonWriteReg_test@txBuffer
  2999  002C02  C07B  F068         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer+1,hxSPPCarbonWriteReg_test@txBuffer+1
  3000  002C06  0100               	movlb	0	; () banked
  3001  002C08  5181               	movf	hxSPPCarbonWriteAndVerity_test@numTX& (0+255),w,b
  3002  002C0A  ECB4  F012         	call	_hxSPPCarbonWriteReg_test
  3003  002C0E  0100               	movlb	0	; () banked
  3004  002C10  6F80               	movwf	hxSPPCarbonWriteAndVerity_test@returnValue& (0+255),b
  3005                           
  3006                           ; BSR set to: 0
  3007                           ;HX_SPP_CARBON.c: 117: if (returnValue != 0x10)
  3008  002C12  0E10               	movlw	16
  3009  002C14  1980               	xorwf	hxSPPCarbonWriteAndVerity_test@returnValue& (0+255),w,b
  3010  002C16  B4D8               	btfsc	status,2,c
  3011  002C18  D003               	goto	l596
  3012                           
  3013                           ; BSR set to: 0
  3014                           ;HX_SPP_CARBON.c: 118: {
  3015                           ;HX_SPP_CARBON.c: 119: hx_state = 0x41;
  3016  002C1A  0E41               	movlw	65
  3017  002C1C  6E45               	movwf	_hx_state,c
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;HX_SPP_CARBON.c: 120: return;
  3021  002C1E  0012               	return	
  3022  002C20                     l596:
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;HX_SPP_CARBON.c: 121: }
  3026                           ;HX_SPP_CARBON.c: 123: tempValue = txBuffer[0];
  3027                           
  3028                           ; BSR set to: 0
  3029  002C20  C07A  FFD9         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer,fsr2l
  3030  002C24  C07B  FFDA         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer+1,fsr2h
  3031  002C28  50DF               	movf	indf2,w,c
  3032  002C2A  6F83               	movwf	hxSPPCarbonWriteAndVerity_test@tempValue& (0+255),b
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;HX_SPP_CARBON.c: 124: tempValue = tempValue & 0x0F;
  3036  002C2C  5183               	movf	hxSPPCarbonWriteAndVerity_test@tempValue& (0+255),w,b
  3037  002C2E  0B0F               	andlw	15
  3038  002C30  6F83               	movwf	hxSPPCarbonWriteAndVerity_test@tempValue& (0+255),b
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;HX_SPP_CARBON.c: 125: tempValue = tempValue | 0x10;
  3042  002C32  5183               	movf	hxSPPCarbonWriteAndVerity_test@tempValue& (0+255),w,b
  3043  002C34  0910               	iorlw	16
  3044  002C36  6F83               	movwf	hxSPPCarbonWriteAndVerity_test@tempValue& (0+255),b
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;HX_SPP_CARBON.c: 126: txBuffer[0] = tempValue;
  3048  002C38  C07A  FFD9         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer,fsr2l
  3049  002C3C  C07B  FFDA         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer+1,fsr2h
  3050  002C40  C083  FFDF         	movff	hxSPPCarbonWriteAndVerity_test@tempValue,indf2
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;HX_SPP_CARBON.c: 127: returnValue = hxSPPCarbonReadReg_test(numTX, 2, txBuffer, &rxBuff
      +                          er[1]);
  3054  002C44  0E02               	movlw	2
  3055  002C46  6F67               	movwf	hxSPPCarbonReadReg_test@numRX& (0+255),b
  3056  002C48  C07A  F068         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer,hxSPPCarbonReadReg_test@txBuffer
  3057  002C4C  C07B  F069         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer+1,hxSPPCarbonReadReg_test@txBuffer+1
  3058  002C50  0E01               	movlw	1
  3059  002C52  257C               	addwf	hxSPPCarbonWriteAndVerity_test@rxBuffer& (0+255),w,b
  3060  002C54  6F6A               	movwf	hxSPPCarbonReadReg_test@rxBuffer& (0+255),b
  3061  002C56  0E00               	movlw	0
  3062  002C58  217D               	addwfc	(hxSPPCarbonWriteAndVerity_test@rxBuffer+1)& (0+255),w,b
  3063  002C5A  6F6B               	movwf	(hxSPPCarbonReadReg_test@rxBuffer+1)& (0+255),b
  3064  002C5C  5181               	movf	hxSPPCarbonWriteAndVerity_test@numTX& (0+255),w,b
  3065  002C5E  EC8D  F00C         	call	_hxSPPCarbonReadReg_test
  3066  002C62  0100               	movlb	0	; () banked
  3067  002C64  6F80               	movwf	hxSPPCarbonWriteAndVerity_test@returnValue& (0+255),b
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;HX_SPP_CARBON.c: 128: if (returnValue != 0x10)
  3071  002C66  0E10               	movlw	16
  3072  002C68  1980               	xorwf	hxSPPCarbonWriteAndVerity_test@returnValue& (0+255),w,b
  3073  002C6A  B4D8               	btfsc	status,2,c
  3074  002C6C  D003               	goto	l598
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;HX_SPP_CARBON.c: 129: {
  3078                           ;HX_SPP_CARBON.c: 130: hx_state = 0x41;
  3079  002C6E  0E41               	movlw	65
  3080  002C70  6E45               	movwf	_hx_state,c
  3081                           
  3082                           ; BSR set to: 0
  3083                           ;HX_SPP_CARBON.c: 131: return;
  3084  002C72  0012               	return	
  3085  002C74                     l598:
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;HX_SPP_CARBON.c: 132: }
  3089                           ;HX_SPP_CARBON.c: 133: for (uint8_t i = 1; i < numTX; i++)
  3090                           
  3091                           ; BSR set to: 0
  3092  002C74  0E01               	movlw	1
  3093  002C76  6F82               	movwf	hxSPPCarbonWriteAndVerity_test@i& (0+255),b
  3094  002C78  D018               	goto	l599
  3095  002C7A                     
  3096                           ; BSR set to: 0
  3097                           ;HX_SPP_CARBON.c: 134: {
  3098                           ;HX_SPP_CARBON.c: 135: if(rxBuffer[i] != txBuffer[i])
  3099                           
  3100                           ; BSR set to: 0
  3101  002C7A  5182               	movf	hxSPPCarbonWriteAndVerity_test@i& (0+255),w,b
  3102  002C7C  0D01               	mullw	1
  3103  002C7E  50F3               	movf	prodl,w,c
  3104  002C80  257A               	addwf	hxSPPCarbonWriteAndVerity_test@txBuffer& (0+255),w,b
  3105  002C82  6ED9               	movwf	fsr2l,c
  3106  002C84  50F4               	movf	prodh,w,c
  3107  002C86  217B               	addwfc	(hxSPPCarbonWriteAndVerity_test@txBuffer+1)& (0+255),w,b
  3108  002C88  6EDA               	movwf	fsr2h,c
  3109  002C8A  5182               	movf	hxSPPCarbonWriteAndVerity_test@i& (0+255),w,b
  3110  002C8C  0D01               	mullw	1
  3111  002C8E  50F3               	movf	prodl,w,c
  3112  002C90  257C               	addwf	hxSPPCarbonWriteAndVerity_test@rxBuffer& (0+255),w,b
  3113  002C92  6EE1               	movwf	fsr1l,c
  3114  002C94  50F4               	movf	prodh,w,c
  3115  002C96  217D               	addwfc	(hxSPPCarbonWriteAndVerity_test@rxBuffer+1)& (0+255),w,b
  3116  002C98  6EE2               	movwf	fsr1h,c
  3117  002C9A  50DE               	movf	postinc2,w,c
  3118  002C9C  18E6               	xorwf	postinc1,w,c
  3119  002C9E  B4D8               	btfsc	status,2,c
  3120  002CA0  D003               	goto	l601
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;HX_SPP_CARBON.c: 136: {
  3124                           ;HX_SPP_CARBON.c: 137: hx_state = 0x41;
  3125  002CA2  0E41               	movlw	65
  3126  002CA4  6E45               	movwf	_hx_state,c
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;HX_SPP_CARBON.c: 138: return;
  3130  002CA6  0012               	return	
  3131  002CA8                     l601:
  3132                           
  3133                           ; BSR set to: 0
  3134                           
  3135                           ; BSR set to: 0
  3136  002CA8  2B82               	incf	hxSPPCarbonWriteAndVerity_test@i& (0+255),f,b
  3137  002CAA                     l599:
  3138                           
  3139                           ; BSR set to: 0
  3140                           
  3141                           ; BSR set to: 0
  3142  002CAA  5181               	movf	hxSPPCarbonWriteAndVerity_test@numTX& (0+255),w,b
  3143  002CAC  5D82               	subwf	hxSPPCarbonWriteAndVerity_test@i& (0+255),w,b
  3144  002CAE  A0D8               	btfss	status,0,c
  3145  002CB0  D7E4               	goto	l600
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;HX_SPP_CARBON.c: 139: }
  3149                           ;HX_SPP_CARBON.c: 140: }
  3150                           ;HX_SPP_CARBON.c: 141: rxBuffer[0] = 0x10;
  3151                           
  3152                           ; BSR set to: 0
  3153  002CB2  C07C  FFD9         	movff	hxSPPCarbonWriteAndVerity_test@rxBuffer,fsr2l
  3154  002CB6  C07D  FFDA         	movff	hxSPPCarbonWriteAndVerity_test@rxBuffer+1,fsr2h
  3155  002CBA  0E10               	movlw	16
  3156  002CBC  6EDF               	movwf	indf2,c
  3157                           
  3158                           ; BSR set to: 0
  3159                           ;HX_SPP_CARBON.c: 142: hx_state = 0x10;
  3160  002CBE  0E10               	movlw	16
  3161  002CC0  6E45               	movwf	_hx_state,c
  3162                           
  3163                           ; BSR set to: 0
  3164  002CC2  0012               	return		;funcret
  3165  002CC4                     __end_of_hxSPPCarbonWriteAndVerity_test:
  3166                           	opt stack 0
  3167                           tblptru	equ	0xFF8
  3168                           tblptrh	equ	0xFF7
  3169                           tblptrl	equ	0xFF6
  3170                           tablat	equ	0xFF5
  3171                           prodh	equ	0xFF4
  3172                           prodl	equ	0xFF3
  3173                           intcon	equ	0xFF2
  3174                           postinc0	equ	0xFEE
  3175                           wreg	equ	0xFE8
  3176                           postinc1	equ	0xFE6
  3177                           postdec1	equ	0xFE5
  3178                           fsr1h	equ	0xFE2
  3179                           fsr1l	equ	0xFE1
  3180                           indf2	equ	0xFDF
  3181                           postinc2	equ	0xFDE
  3182                           fsr2h	equ	0xFDA
  3183                           fsr2l	equ	0xFD9
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _hxSPPCarbonWriteReg_test *****************
  3187 ;; Defined at:
  3188 ;;		line 377 in file "HX_SPP_CARBON.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  numTX           1    wreg     unsigned char 
  3191 ;;  txBuffer        2    7[BANK0 ] PTR unsigned char 
  3192 ;;		 -> hx_inData(64), 
  3193 ;; Auto vars:     Size  Location     Type
  3194 ;;  numTX           1    9[BANK0 ] unsigned char 
  3195 ;;  j               1   14[BANK0 ] unsigned char 
  3196 ;;  i               1   13[BANK0 ] unsigned char 
  3197 ;;  j               1   12[BANK0 ] unsigned char 
  3198 ;;  tempByte        1   15[BANK0 ] unsigned char 
  3199 ;;  oddParityCal    1   11[BANK0 ] unsigned char 
  3200 ;;  tempHxState     1   10[BANK0 ] unsigned char 
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      unsigned char 
  3203 ;; Registers used:
  3204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3210 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3211 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3213 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3214 ;;Total ram usage:        9 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    8
  3217 ;; This function calls:
  3218 ;;		_hxOddParityCalc
  3219 ;; This function is called by:
  3220 ;;		_run_SPPCarbon_test
  3221 ;;		_hxSPPCarbonWriteAndVerity_test
  3222 ;;		_hxSPPCarbonWrite_test
  3223 ;; This function uses a non-reentrant model
  3224 ;;
  3225                           
  3226                           	psect	text4
  3227  002568                     __ptext4:
  3228                           	opt stack 0
  3229  002568                     _hxSPPCarbonWriteReg_test:
  3230                           	opt stack 20
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;incstack = 0
  3234                           ;hxSPPCarbonWriteReg_test@numTX stored from wreg
  3235  002568  0100               	movlb	0	; () banked
  3236  00256A  6F69               	movwf	hxSPPCarbonWriteReg_test@numTX& (0+255),b
  3237                           
  3238                           ;HX_SPP_CARBON.c: 379: uint8_t tempByte;
  3239                           ;HX_SPP_CARBON.c: 380: uint8_t oddParityCalc = 0;
  3240  00256C  0E00               	movlw	0
  3241  00256E  0100               	movlb	0	; () banked
  3242  002570  6F6B               	movwf	hxSPPCarbonWriteReg_test@oddParityCalc& (0+255),b
  3243                           
  3244                           ;HX_SPP_CARBON.c: 381: uint8_t tempHxState = 0x10;
  3245  002572  0E10               	movlw	16
  3246  002574  6F6A               	movwf	hxSPPCarbonWriteReg_test@tempHxState& (0+255),b
  3247                           
  3248                           ; BSR set to: 0
  3249                           ;HX_SPP_CARBON.c: 382: oddParityCalc = hxOddParityCalc(txBuffer, 3);
  3250  002576  C067  F060         	movff	hxSPPCarbonWriteReg_test@txBuffer,hxOddParityCalc@buff
  3251  00257A  C068  F061         	movff	hxSPPCarbonWriteReg_test@txBuffer+1,hxOddParityCalc@buff+1
  3252  00257E  0E03               	movlw	3
  3253  002580  6F62               	movwf	hxOddParityCalc@size& (0+255),b
  3254  002582  EC17  F01B         	call	_hxOddParityCalc	;wreg free
  3255  002586  0100               	movlb	0	; () banked
  3256  002588  6F6B               	movwf	hxSPPCarbonWriteReg_test@oddParityCalc& (0+255),b
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;HX_SPP_CARBON.c: 391: tempByte = 0xA0;
  3260  00258A  0EA0               	movlw	160
  3261  00258C  6F6F               	movwf	hxSPPCarbonWriteReg_test@tempByte& (0+255),b
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;HX_SPP_CARBON.c: 392: if (tempByte & 0x80){
  3265  00258E  AF6F               	btfss	hxSPPCarbonWriteReg_test@tempByte& (0+255),7,b
  3266  002590  D00C               	goto	l659
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;HX_SPP_CARBON.c: 394: LATA = 0x01;
  3270  002592  0E01               	movlw	1
  3271  002594  6E83               	movwf	3971,c	;volatile
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;HX_SPP_CARBON.c: 395: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3275  002596  0E05               	movlw	5
  3276  002598                     u8987:
  3277  002598  2EE8               	decfsz	wreg,f,c
  3278  00259A  D7FE               	bra	u8987
  3279  00259C  F000               	nop	
  3280                           
  3281                           ;HX_SPP_CARBON.c: 396: LATA = 0x03;
  3282  00259E  0E03               	movlw	3
  3283  0025A0  6E83               	movwf	3971,c	;volatile
  3284                           
  3285                           ;HX_SPP_CARBON.c: 397: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3286  0025A2  0E05               	movlw	5
  3287  0025A4                     u8997:
  3288  0025A4  2EE8               	decfsz	wreg,f,c
  3289  0025A6  D7FE               	bra	u8997
  3290  0025A8  D00B               	goto	L2
  3291  0025AA                     l659:
  3292                           
  3293                           ;HX_SPP_CARBON.c: 400: else{
  3294                           ;HX_SPP_CARBON.c: 401: LATA = 0x01;
  3295  0025AA  0E01               	movlw	1
  3296  0025AC  6E83               	movwf	3971,c	;volatile
  3297                           
  3298                           ;HX_SPP_CARBON.c: 402: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3299  0025AE  0E05               	movlw	5
  3300  0025B0                     u9007:
  3301  0025B0  2EE8               	decfsz	wreg,f,c
  3302  0025B2  D7FE               	bra	u9007
  3303  0025B4  F000               	nop	
  3304                           
  3305                           ;HX_SPP_CARBON.c: 403: LATA = 0x00;
  3306  0025B6  0E00               	movlw	0
  3307  0025B8  6E83               	movwf	3971,c	;volatile
  3308                           
  3309                           ;HX_SPP_CARBON.c: 404: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3310  0025BA  0E05               	movlw	5
  3311  0025BC                     u9017:
  3312  0025BC  2EE8               	decfsz	wreg,f,c
  3313  0025BE  D7FE               	bra	u9017
  3314  0025C0                     L2:
  3315  0025C0  F000               	nop	
  3316                           
  3317                           ;HX_SPP_CARBON.c: 405: LATA = 0x01;
  3318  0025C2  0E01               	movlw	1
  3319  0025C4  6E83               	movwf	3971,c	;volatile
  3320                           
  3321                           ;HX_SPP_CARBON.c: 406: }
  3322                           ;HX_SPP_CARBON.c: 407: for (uint8_t j = 1; j < 4; j++){
  3323  0025C6  0E01               	movlw	1
  3324  0025C8  0100               	movlb	0	; () banked
  3325  0025CA  6F6C               	movwf	hxSPPCarbonWriteReg_test@j& (0+255),b
  3326  0025CC                     l10136:
  3327                           
  3328                           ; BSR set to: 0
  3329  0025CC  0E03               	movlw	3
  3330  0025CE  656C               	cpfsgt	hxSPPCarbonWriteReg_test@j& (0+255),b
  3331  0025D0  D001               	goto	l661
  3332  0025D2  D016               	goto	u7110
  3333  0025D4                     l661:
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;HX_SPP_CARBON.c: 408: tempByte = tempByte << 1;
  3337                           
  3338                           ; BSR set to: 0
  3339  0025D4  516F               	movf	hxSPPCarbonWriteReg_test@tempByte& (0+255),w,b
  3340  0025D6  256F               	addwf	hxSPPCarbonWriteReg_test@tempByte& (0+255),w,b
  3341  0025D8  6F6F               	movwf	hxSPPCarbonWriteReg_test@tempByte& (0+255),b
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;HX_SPP_CARBON.c: 409: if (tempByte & 0x80){
  3345  0025DA  AF6F               	btfss	hxSPPCarbonWriteReg_test@tempByte& (0+255),7,b
  3346  0025DC  D006               	goto	l663
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;HX_SPP_CARBON.c: 411: LATA = 0x03;
  3350  0025DE  0E03               	movlw	3
  3351  0025E0  6E83               	movwf	3971,c	;volatile
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;HX_SPP_CARBON.c: 412: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3355  0025E2  0E05               	movlw	5
  3356  0025E4                     u9027:
  3357  0025E4  2EE8               	decfsz	wreg,f,c
  3358  0025E6  D7FE               	bra	u9027
  3359  0025E8  D005               	goto	L3
  3360  0025EA                     l663:
  3361                           
  3362                           ;HX_SPP_CARBON.c: 415: else{
  3363                           ;HX_SPP_CARBON.c: 416: LATA = 0x00;
  3364  0025EA  0E00               	movlw	0
  3365  0025EC  6E83               	movwf	3971,c	;volatile
  3366                           
  3367                           ;HX_SPP_CARBON.c: 417: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3368  0025EE  0E05               	movlw	5
  3369  0025F0                     u9037:
  3370  0025F0  2EE8               	decfsz	wreg,f,c
  3371  0025F2  D7FE               	bra	u9037
  3372  0025F4                     L3:
  3373  0025F4  F000               	nop	
  3374                           
  3375                           ;HX_SPP_CARBON.c: 418: LATA = 0x01;
  3376  0025F6  0E01               	movlw	1
  3377  0025F8  6E83               	movwf	3971,c	;volatile
  3378  0025FA  0100               	movlb	0	; () banked
  3379  0025FC  2B6C               	incf	hxSPPCarbonWriteReg_test@j& (0+255),f,b
  3380  0025FE  D7E6               	goto	l10136
  3381  002600                     u7110:
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;HX_SPP_CARBON.c: 419: }
  3385                           ;HX_SPP_CARBON.c: 420: }
  3386                           ;HX_SPP_CARBON.c: 422: for (uint8_t i = 0; i < numTX; i++){
  3387                           
  3388                           ; BSR set to: 0
  3389  002600  0E00               	movlw	0
  3390  002602  6F6D               	movwf	hxSPPCarbonWriteReg_test@i& (0+255),b
  3391  002604  D044               	goto	l665
  3392  002606                     
  3393                           ; BSR set to: 0
  3394                           ;HX_SPP_CARBON.c: 424: tempByte = txBuffer[i];
  3395                           
  3396                           ; BSR set to: 0
  3397  002606  516D               	movf	hxSPPCarbonWriteReg_test@i& (0+255),w,b
  3398  002608  0D01               	mullw	1
  3399  00260A  50F3               	movf	prodl,w,c
  3400  00260C  2567               	addwf	hxSPPCarbonWriteReg_test@txBuffer& (0+255),w,b
  3401  00260E  6ED9               	movwf	fsr2l,c
  3402  002610  50F4               	movf	prodh,w,c
  3403  002612  2168               	addwfc	(hxSPPCarbonWriteReg_test@txBuffer+1)& (0+255),w,b
  3404  002614  6EDA               	movwf	fsr2h,c
  3405  002616  50DF               	movf	indf2,w,c
  3406  002618  6F6F               	movwf	hxSPPCarbonWriteReg_test@tempByte& (0+255),b
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;HX_SPP_CARBON.c: 425: if (tempByte & 0x80){
  3410  00261A  AF6F               	btfss	hxSPPCarbonWriteReg_test@tempByte& (0+255),7,b
  3411  00261C  D00C               	goto	l667
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;HX_SPP_CARBON.c: 427: LATA = 0x01;
  3415  00261E  0E01               	movlw	1
  3416  002620  6E83               	movwf	3971,c	;volatile
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;HX_SPP_CARBON.c: 428: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3420  002622  0E05               	movlw	5
  3421  002624                     u9047:
  3422  002624  2EE8               	decfsz	wreg,f,c
  3423  002626  D7FE               	bra	u9047
  3424  002628  F000               	nop	
  3425                           
  3426                           ;HX_SPP_CARBON.c: 429: LATA = 0x03;
  3427  00262A  0E03               	movlw	3
  3428  00262C  6E83               	movwf	3971,c	;volatile
  3429                           
  3430                           ;HX_SPP_CARBON.c: 430: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3431  00262E  0E05               	movlw	5
  3432  002630                     u9057:
  3433  002630  2EE8               	decfsz	wreg,f,c
  3434  002632  D7FE               	bra	u9057
  3435  002634  D00B               	goto	L4
  3436  002636                     l667:
  3437                           
  3438                           ;HX_SPP_CARBON.c: 433: else{
  3439                           ;HX_SPP_CARBON.c: 434: LATA = 0x01;
  3440  002636  0E01               	movlw	1
  3441  002638  6E83               	movwf	3971,c	;volatile
  3442                           
  3443                           ;HX_SPP_CARBON.c: 435: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3444  00263A  0E05               	movlw	5
  3445  00263C                     u9067:
  3446  00263C  2EE8               	decfsz	wreg,f,c
  3447  00263E  D7FE               	bra	u9067
  3448  002640  F000               	nop	
  3449                           
  3450                           ;HX_SPP_CARBON.c: 436: LATA = 0x00;
  3451  002642  0E00               	movlw	0
  3452  002644  6E83               	movwf	3971,c	;volatile
  3453                           
  3454                           ;HX_SPP_CARBON.c: 437: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3455  002646  0E05               	movlw	5
  3456  002648                     u9077:
  3457  002648  2EE8               	decfsz	wreg,f,c
  3458  00264A  D7FE               	bra	u9077
  3459  00264C                     L4:
  3460  00264C  F000               	nop	
  3461                           
  3462                           ;HX_SPP_CARBON.c: 438: LATA = 0x01;
  3463  00264E  0E01               	movlw	1
  3464  002650  6E83               	movwf	3971,c	;volatile
  3465                           
  3466                           ;HX_SPP_CARBON.c: 439: }
  3467                           ;HX_SPP_CARBON.c: 440: for (uint8_t j = 1; j < 8; j++){
  3468  002652  0E01               	movlw	1
  3469  002654  0100               	movlb	0	; () banked
  3470  002656  6F6E               	movwf	hxSPPCarbonWriteReg_test@j_916& (0+255),b
  3471  002658                     l10182:
  3472                           
  3473                           ; BSR set to: 0
  3474  002658  0E07               	movlw	7
  3475  00265A  656E               	cpfsgt	hxSPPCarbonWriteReg_test@j_916& (0+255),b
  3476  00265C  D001               	goto	l669
  3477  00265E  D016               	goto	u7150
  3478  002660                     l669:
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;HX_SPP_CARBON.c: 441: tempByte = tempByte << 1;
  3482                           
  3483                           ; BSR set to: 0
  3484  002660  516F               	movf	hxSPPCarbonWriteReg_test@tempByte& (0+255),w,b
  3485  002662  256F               	addwf	hxSPPCarbonWriteReg_test@tempByte& (0+255),w,b
  3486  002664  6F6F               	movwf	hxSPPCarbonWriteReg_test@tempByte& (0+255),b
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;HX_SPP_CARBON.c: 442: if (tempByte & 0x80){
  3490  002666  AF6F               	btfss	hxSPPCarbonWriteReg_test@tempByte& (0+255),7,b
  3491  002668  D006               	goto	l671
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;HX_SPP_CARBON.c: 444: LATA = 0x03;
  3495  00266A  0E03               	movlw	3
  3496  00266C  6E83               	movwf	3971,c	;volatile
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;HX_SPP_CARBON.c: 445: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3500  00266E  0E05               	movlw	5
  3501  002670                     u9087:
  3502  002670  2EE8               	decfsz	wreg,f,c
  3503  002672  D7FE               	bra	u9087
  3504  002674  D005               	goto	L5
  3505  002676                     l671:
  3506                           
  3507                           ;HX_SPP_CARBON.c: 448: else{
  3508                           ;HX_SPP_CARBON.c: 449: LATA = 0x00;
  3509  002676  0E00               	movlw	0
  3510  002678  6E83               	movwf	3971,c	;volatile
  3511                           
  3512                           ;HX_SPP_CARBON.c: 450: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3513  00267A  0E05               	movlw	5
  3514  00267C                     u9097:
  3515  00267C  2EE8               	decfsz	wreg,f,c
  3516  00267E  D7FE               	bra	u9097
  3517  002680                     L5:
  3518  002680  F000               	nop	
  3519                           
  3520                           ;HX_SPP_CARBON.c: 451: LATA = 0x01;
  3521  002682  0E01               	movlw	1
  3522  002684  6E83               	movwf	3971,c	;volatile
  3523  002686  0100               	movlb	0	; () banked
  3524  002688  2B6E               	incf	hxSPPCarbonWriteReg_test@j_916& (0+255),f,b
  3525  00268A  D7E6               	goto	l10182
  3526  00268C                     u7150:
  3527                           
  3528                           ; BSR set to: 0
  3529                           
  3530                           ; BSR set to: 0
  3531  00268C  2B6D               	incf	hxSPPCarbonWriteReg_test@i& (0+255),f,b
  3532  00268E                     l665:
  3533                           
  3534                           ; BSR set to: 0
  3535                           
  3536                           ; BSR set to: 0
  3537  00268E  5169               	movf	hxSPPCarbonWriteReg_test@numTX& (0+255),w,b
  3538  002690  5D6D               	subwf	hxSPPCarbonWriteReg_test@i& (0+255),w,b
  3539  002692  A0D8               	btfss	status,0,c
  3540  002694  D7B8               	goto	l666
  3541                           
  3542                           ; BSR set to: 0
  3543                           ;HX_SPP_CARBON.c: 452: }
  3544                           ;HX_SPP_CARBON.c: 453: }
  3545                           ;HX_SPP_CARBON.c: 454: }
  3546                           ;HX_SPP_CARBON.c: 457: if (oddParityCalc)
  3547                           
  3548                           ; BSR set to: 0
  3549  002696  516B               	movf	hxSPPCarbonWriteReg_test@oddParityCalc& (0+255),w,b
  3550  002698  B4D8               	btfsc	status,2,c
  3551  00269A  D006               	goto	l674
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;HX_SPP_CARBON.c: 458: {
  3555                           ;HX_SPP_CARBON.c: 459: LATA = 0x03;
  3556  00269C  0E03               	movlw	3
  3557  00269E  6E83               	movwf	3971,c	;volatile
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;HX_SPP_CARBON.c: 460: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3561  0026A0  0E05               	movlw	5
  3562  0026A2                     u9107:
  3563  0026A2  2EE8               	decfsz	wreg,f,c
  3564  0026A4  D7FE               	bra	u9107
  3565  0026A6  D005               	goto	L32
  3566  0026A8                     l674:
  3567                           
  3568                           ;HX_SPP_CARBON.c: 463: else
  3569                           ;HX_SPP_CARBON.c: 464: {
  3570                           ;HX_SPP_CARBON.c: 465: LATA = 0x00;
  3571  0026A8  0E00               	movlw	0
  3572  0026AA  6E83               	movwf	3971,c	;volatile
  3573                           
  3574                           ;HX_SPP_CARBON.c: 466: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3575  0026AC  0E05               	movlw	5
  3576  0026AE                     u9117:
  3577  0026AE  2EE8               	decfsz	wreg,f,c
  3578  0026B0  D7FE               	bra	u9117
  3579  0026B2                     L32:
  3580  0026B2  F000               	nop	
  3581                           
  3582                           ;HX_SPP_CARBON.c: 467: LATA = 0x01;
  3583  0026B4  0E01               	movlw	1
  3584  0026B6  6E83               	movwf	3971,c	;volatile
  3585                           
  3586                           ;HX_SPP_CARBON.c: 468: }
  3587                           ;HX_SPP_CARBON.c: 471: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3588  0026B8  0E05               	movlw	5
  3589  0026BA                     u9127:
  3590  0026BA  2EE8               	decfsz	wreg,f,c
  3591  0026BC  D7FE               	bra	u9127
  3592  0026BE  F000               	nop	
  3593                           
  3594                           ;HX_SPP_CARBON.c: 472: LATA = 0x00;
  3595  0026C0  0E00               	movlw	0
  3596  0026C2  6E83               	movwf	3971,c	;volatile
  3597                           
  3598                           ;HX_SPP_CARBON.c: 473: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3599  0026C4  0E05               	movlw	5
  3600  0026C6                     u9137:
  3601  0026C6  2EE8               	decfsz	wreg,f,c
  3602  0026C8  D7FE               	bra	u9137
  3603  0026CA  F000               	nop	
  3604                           
  3605                           ;HX_SPP_CARBON.c: 478: return tempHxState;
  3606  0026CC  0100               	movlb	0	; () banked
  3607  0026CE  516A               	movf	hxSPPCarbonWriteReg_test@tempHxState& (0+255),w,b
  3608  0026D0  0012               	return	
  3609  0026D2                     __end_of_hxSPPCarbonWriteReg_test:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           intcon	equ	0xFF2
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           postinc1	equ	0xFE6
  3621                           postdec1	equ	0xFE5
  3622                           fsr1h	equ	0xFE2
  3623                           fsr1l	equ	0xFE1
  3624                           indf2	equ	0xFDF
  3625                           postinc2	equ	0xFDE
  3626                           fsr2h	equ	0xFDA
  3627                           fsr2l	equ	0xFD9
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _hxSPPCarbonRead_test *****************
  3631 ;; Defined at:
  3632 ;;		line 161 in file "HX_SPP_CARBON.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;  numTX           1    wreg     unsigned char 
  3635 ;;  numRX           1   26[BANK0 ] unsigned char 
  3636 ;;  txBuffer        2   27[BANK0 ] PTR unsigned char 
  3637 ;;		 -> hx_inData(64), 
  3638 ;;  rxBuffer        2   29[BANK0 ] PTR unsigned char 
  3639 ;;		 -> hx_mainData(61), 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  numTX           1   31[BANK0 ] unsigned char 
  3642 ;;  returnValue     1   32[BANK0 ] unsigned char 
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  1    wreg      void 
  3645 ;; Registers used:
  3646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3652 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3653 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3655 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3656 ;;Total ram usage:        7 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    9
  3659 ;; This function calls:
  3660 ;;		_hxSPPCarbonReadReg_test
  3661 ;; This function is called by:
  3662 ;;		_run_SPPCarbon_test
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text5
  3667  00380E                     __ptext5:
  3668                           	opt stack 0
  3669  00380E                     _hxSPPCarbonRead_test:
  3670                           	opt stack 20
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;incstack = 0
  3674                           ;hxSPPCarbonRead_test@numTX stored from wreg
  3675  00380E  0100               	movlb	0	; () banked
  3676  003810  6F7F               	movwf	hxSPPCarbonRead_test@numTX& (0+255),b
  3677                           
  3678                           ;HX_SPP_CARBON.c: 163: uint8_t returnValue;
  3679                           ;HX_SPP_CARBON.c: 164: returnValue = hxSPPCarbonReadReg_test(numTX, numRX, txBuffer, &rx
      +                          Buffer[1]);
  3680  003812  C07A  F067         	movff	hxSPPCarbonRead_test@numRX,hxSPPCarbonReadReg_test@numRX
  3681  003816  C07B  F068         	movff	hxSPPCarbonRead_test@txBuffer,hxSPPCarbonReadReg_test@txBuffer
  3682  00381A  C07C  F069         	movff	hxSPPCarbonRead_test@txBuffer+1,hxSPPCarbonReadReg_test@txBuffer+1
  3683  00381E  0E01               	movlw	1
  3684  003820  0100               	movlb	0	; () banked
  3685  003822  257D               	addwf	hxSPPCarbonRead_test@rxBuffer& (0+255),w,b
  3686  003824  6F6A               	movwf	hxSPPCarbonReadReg_test@rxBuffer& (0+255),b
  3687  003826  0E00               	movlw	0
  3688  003828  217E               	addwfc	(hxSPPCarbonRead_test@rxBuffer+1)& (0+255),w,b
  3689  00382A  6F6B               	movwf	(hxSPPCarbonReadReg_test@rxBuffer+1)& (0+255),b
  3690  00382C  517F               	movf	hxSPPCarbonRead_test@numTX& (0+255),w,b
  3691  00382E  EC8D  F00C         	call	_hxSPPCarbonReadReg_test
  3692  003832  0100               	movlb	0	; () banked
  3693  003834  6F80               	movwf	hxSPPCarbonRead_test@returnValue& (0+255),b
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;HX_SPP_CARBON.c: 165: if (returnValue != 0x10)
  3697  003836  0E10               	movlw	16
  3698  003838  1980               	xorwf	hxSPPCarbonRead_test@returnValue& (0+255),w,b
  3699  00383A  B4D8               	btfsc	status,2,c
  3700  00383C  D003               	goto	l609
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;HX_SPP_CARBON.c: 166: {
  3704                           ;HX_SPP_CARBON.c: 167: hx_state = 0x41;
  3705  00383E  0E41               	movlw	65
  3706  003840  6E45               	movwf	_hx_state,c
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;HX_SPP_CARBON.c: 168: return;
  3710  003842  0012               	return	
  3711  003844                     l609:
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;HX_SPP_CARBON.c: 169: }
  3715                           ;HX_SPP_CARBON.c: 170: rxBuffer[0] = 0x10;
  3716                           
  3717                           ; BSR set to: 0
  3718  003844  C07D  FFD9         	movff	hxSPPCarbonRead_test@rxBuffer,fsr2l
  3719  003848  C07E  FFDA         	movff	hxSPPCarbonRead_test@rxBuffer+1,fsr2h
  3720  00384C  0E10               	movlw	16
  3721  00384E  6EDF               	movwf	indf2,c
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;HX_SPP_CARBON.c: 171: hx_state = 0x10;
  3725  003850  0E10               	movlw	16
  3726  003852  6E45               	movwf	_hx_state,c
  3727                           
  3728                           ; BSR set to: 0
  3729  003854  0012               	return		;funcret
  3730  003856                     __end_of_hxSPPCarbonRead_test:
  3731                           	opt stack 0
  3732                           tblptru	equ	0xFF8
  3733                           tblptrh	equ	0xFF7
  3734                           tblptrl	equ	0xFF6
  3735                           tablat	equ	0xFF5
  3736                           prodh	equ	0xFF4
  3737                           prodl	equ	0xFF3
  3738                           intcon	equ	0xFF2
  3739                           postinc0	equ	0xFEE
  3740                           wreg	equ	0xFE8
  3741                           postinc1	equ	0xFE6
  3742                           postdec1	equ	0xFE5
  3743                           fsr1h	equ	0xFE2
  3744                           fsr1l	equ	0xFE1
  3745                           indf2	equ	0xFDF
  3746                           postinc2	equ	0xFDE
  3747                           fsr2h	equ	0xFDA
  3748                           fsr2l	equ	0xFD9
  3749                           status	equ	0xFD8
  3750                           
  3751 ;; *************** function _hxSPPCarbonReadReg_test *****************
  3752 ;; Defined at:
  3753 ;;		line 175 in file "HX_SPP_CARBON.c"
  3754 ;; Parameters:    Size  Location     Type
  3755 ;;  numTX           1    wreg     unsigned char 
  3756 ;;  numRX           1    7[BANK0 ] unsigned char 
  3757 ;;  txBuffer        2    8[BANK0 ] PTR unsigned char 
  3758 ;;		 -> hx_inData(64), 
  3759 ;;  rxBuffer        2   10[BANK0 ] PTR unsigned char 
  3760 ;;		 -> hx_mainData(61), 
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;  numTX           1   13[BANK0 ] unsigned char 
  3763 ;;  j               1   21[BANK0 ] unsigned char 
  3764 ;;  j               1   19[BANK0 ] unsigned char 
  3765 ;;  i               1   20[BANK0 ] unsigned char 
  3766 ;;  i               1   18[BANK0 ] unsigned char 
  3767 ;;  j               1   17[BANK0 ] unsigned char 
  3768 ;;  readbackTime    2   14[BANK0 ] unsigned int 
  3769 ;;  tempByte        1   25[BANK0 ] unsigned char 
  3770 ;;  readbackComm    1   24[BANK0 ] unsigned char 
  3771 ;;  tempHxState     1   23[BANK0 ] unsigned char 
  3772 ;;  bitVal          1   22[BANK0 ] unsigned char 
  3773 ;;  oddParityCal    1   16[BANK0 ] unsigned char 
  3774 ;;  portAVal        1   12[BANK0 ] unsigned char 
  3775 ;; Return value:  Size  Location     Type
  3776 ;;                  1    wreg      unsigned char 
  3777 ;; Registers used:
  3778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3779 ;; Tracked objects:
  3780 ;;		On entry : 0/0
  3781 ;;		On exit  : 0/0
  3782 ;;		Unchanged: 0/0
  3783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3784 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3785 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3787 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3788 ;;Total ram usage:       19 bytes
  3789 ;; Hardware stack levels used:    1
  3790 ;; Hardware stack levels required when called:    8
  3791 ;; This function calls:
  3792 ;;		_hxOddParityCalc
  3793 ;; This function is called by:
  3794 ;;		_hxSPPCarbonWriteAndVerity_test
  3795 ;;		_hxSPPCarbonRead_test
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	text6
  3800  00191A                     __ptext6:
  3801                           	opt stack 0
  3802  00191A                     _hxSPPCarbonReadReg_test:
  3803                           	opt stack 20
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;incstack = 0
  3807                           ;hxSPPCarbonReadReg_test@numTX stored from wreg
  3808  00191A  0100               	movlb	0	; () banked
  3809  00191C  6F6D               	movwf	hxSPPCarbonReadReg_test@numTX& (0+255),b
  3810                           
  3811                           ;HX_SPP_CARBON.c: 177: uint8_t tempByte;
  3812                           ;HX_SPP_CARBON.c: 178: uint8_t readbackCommState;
  3813                           ;HX_SPP_CARBON.c: 179: uint8_t bitVal;
  3814                           ;HX_SPP_CARBON.c: 180: uint16_t readbackTimer;
  3815                           ;HX_SPP_CARBON.c: 181: uint8_t oddParityCalc = 0;
  3816  00191E  0E00               	movlw	0
  3817  001920  0100               	movlb	0	; () banked
  3818  001922  6F70               	movwf	hxSPPCarbonReadReg_test@oddParityCalc& (0+255),b
  3819                           
  3820                           ;HX_SPP_CARBON.c: 182: uint8_t portAVal = 0;
  3821  001924  0E00               	movlw	0
  3822  001926  6F6C               	movwf	hxSPPCarbonReadReg_test@portAVal& (0+255),b
  3823                           
  3824                           ;HX_SPP_CARBON.c: 183: uint8_t tempHxState = 0x10;
  3825  001928  0E10               	movlw	16
  3826  00192A  6F77               	movwf	hxSPPCarbonReadReg_test@tempHxState& (0+255),b
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;HX_SPP_CARBON.c: 185: oddParityCalc = hxOddParityCalc(txBuffer, 3);
  3830  00192C  C068  F060         	movff	hxSPPCarbonReadReg_test@txBuffer,hxOddParityCalc@buff
  3831  001930  C069  F061         	movff	hxSPPCarbonReadReg_test@txBuffer+1,hxOddParityCalc@buff+1
  3832  001934  0E03               	movlw	3
  3833  001936  6F62               	movwf	hxOddParityCalc@size& (0+255),b
  3834  001938  EC17  F01B         	call	_hxOddParityCalc	;wreg free
  3835  00193C  0100               	movlb	0	; () banked
  3836  00193E  6F70               	movwf	hxSPPCarbonReadReg_test@oddParityCalc& (0+255),b
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;HX_SPP_CARBON.c: 195: tempByte = 0xA0;
  3840  001940  0EA0               	movlw	160
  3841  001942  6F79               	movwf	hxSPPCarbonReadReg_test@tempByte& (0+255),b
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;HX_SPP_CARBON.c: 196: if (tempByte & 0x80){
  3845  001944  AF79               	btfss	hxSPPCarbonReadReg_test@tempByte& (0+255),7,b
  3846  001946  D00C               	goto	l613
  3847                           
  3848                           ; BSR set to: 0
  3849                           ;HX_SPP_CARBON.c: 198: LATA = 0x01;
  3850  001948  0E01               	movlw	1
  3851  00194A  6E83               	movwf	3971,c	;volatile
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;HX_SPP_CARBON.c: 199: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3855  00194C  0E05               	movlw	5
  3856  00194E                     u9147:
  3857  00194E  2EE8               	decfsz	wreg,f,c
  3858  001950  D7FE               	bra	u9147
  3859  001952  F000               	nop	
  3860                           
  3861                           ;HX_SPP_CARBON.c: 200: LATA = 0x03;
  3862  001954  0E03               	movlw	3
  3863  001956  6E83               	movwf	3971,c	;volatile
  3864                           
  3865                           ;HX_SPP_CARBON.c: 201: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3866  001958  0E05               	movlw	5
  3867  00195A                     u9157:
  3868  00195A  2EE8               	decfsz	wreg,f,c
  3869  00195C  D7FE               	bra	u9157
  3870  00195E  D00B               	goto	L7
  3871  001960                     l613:
  3872                           
  3873                           ;HX_SPP_CARBON.c: 204: else{
  3874                           ;HX_SPP_CARBON.c: 205: LATA = 0x01;
  3875  001960  0E01               	movlw	1
  3876  001962  6E83               	movwf	3971,c	;volatile
  3877                           
  3878                           ;HX_SPP_CARBON.c: 206: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3879  001964  0E05               	movlw	5
  3880  001966                     u9167:
  3881  001966  2EE8               	decfsz	wreg,f,c
  3882  001968  D7FE               	bra	u9167
  3883  00196A  F000               	nop	
  3884                           
  3885                           ;HX_SPP_CARBON.c: 207: LATA = 0x00;
  3886  00196C  0E00               	movlw	0
  3887  00196E  6E83               	movwf	3971,c	;volatile
  3888                           
  3889                           ;HX_SPP_CARBON.c: 208: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3890  001970  0E05               	movlw	5
  3891  001972                     u9177:
  3892  001972  2EE8               	decfsz	wreg,f,c
  3893  001974  D7FE               	bra	u9177
  3894  001976                     L7:
  3895  001976  F000               	nop	
  3896                           
  3897                           ;HX_SPP_CARBON.c: 209: LATA = 0x01;
  3898  001978  0E01               	movlw	1
  3899  00197A  6E83               	movwf	3971,c	;volatile
  3900                           
  3901                           ;HX_SPP_CARBON.c: 210: }
  3902                           ;HX_SPP_CARBON.c: 211: for (uint8_t j = 1; j < 4; j++){
  3903  00197C  0E01               	movlw	1
  3904  00197E  0100               	movlb	0	; () banked
  3905  001980  6F71               	movwf	hxSPPCarbonReadReg_test@j& (0+255),b
  3906  001982                     l10254:
  3907                           
  3908                           ; BSR set to: 0
  3909  001982  0E03               	movlw	3
  3910  001984  6571               	cpfsgt	hxSPPCarbonReadReg_test@j& (0+255),b
  3911  001986  D001               	goto	l615
  3912  001988  D016               	goto	u7210
  3913  00198A                     l615:
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;HX_SPP_CARBON.c: 212: tempByte = tempByte << 1;
  3917                           
  3918                           ; BSR set to: 0
  3919  00198A  5179               	movf	hxSPPCarbonReadReg_test@tempByte& (0+255),w,b
  3920  00198C  2579               	addwf	hxSPPCarbonReadReg_test@tempByte& (0+255),w,b
  3921  00198E  6F79               	movwf	hxSPPCarbonReadReg_test@tempByte& (0+255),b
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;HX_SPP_CARBON.c: 213: if (tempByte & 0x80){
  3925  001990  AF79               	btfss	hxSPPCarbonReadReg_test@tempByte& (0+255),7,b
  3926  001992  D006               	goto	l617
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;HX_SPP_CARBON.c: 215: LATA = 0x03;
  3930  001994  0E03               	movlw	3
  3931  001996  6E83               	movwf	3971,c	;volatile
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;HX_SPP_CARBON.c: 216: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3935  001998  0E05               	movlw	5
  3936  00199A                     u9187:
  3937  00199A  2EE8               	decfsz	wreg,f,c
  3938  00199C  D7FE               	bra	u9187
  3939  00199E  D005               	goto	L8
  3940  0019A0                     l617:
  3941                           
  3942                           ;HX_SPP_CARBON.c: 219: else{
  3943                           ;HX_SPP_CARBON.c: 220: LATA = 0x00;
  3944  0019A0  0E00               	movlw	0
  3945  0019A2  6E83               	movwf	3971,c	;volatile
  3946                           
  3947                           ;HX_SPP_CARBON.c: 221: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3948  0019A4  0E05               	movlw	5
  3949  0019A6                     u9197:
  3950  0019A6  2EE8               	decfsz	wreg,f,c
  3951  0019A8  D7FE               	bra	u9197
  3952  0019AA                     L8:
  3953  0019AA  F000               	nop	
  3954                           
  3955                           ;HX_SPP_CARBON.c: 222: LATA = 0x01;
  3956  0019AC  0E01               	movlw	1
  3957  0019AE  6E83               	movwf	3971,c	;volatile
  3958  0019B0  0100               	movlb	0	; () banked
  3959  0019B2  2B71               	incf	hxSPPCarbonReadReg_test@j& (0+255),f,b
  3960  0019B4  D7E6               	goto	l10254
  3961  0019B6                     u7210:
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;HX_SPP_CARBON.c: 223: }
  3965                           ;HX_SPP_CARBON.c: 224: }
  3966                           ;HX_SPP_CARBON.c: 226: for (uint8_t i = 0; i < numTX; i++){
  3967                           
  3968                           ; BSR set to: 0
  3969  0019B6  0E00               	movlw	0
  3970  0019B8  6F72               	movwf	hxSPPCarbonReadReg_test@i& (0+255),b
  3971  0019BA  D044               	goto	l619
  3972  0019BC                     
  3973                           ; BSR set to: 0
  3974                           ;HX_SPP_CARBON.c: 228: tempByte = txBuffer[i];
  3975                           
  3976                           ; BSR set to: 0
  3977  0019BC  5172               	movf	hxSPPCarbonReadReg_test@i& (0+255),w,b
  3978  0019BE  0D01               	mullw	1
  3979  0019C0  50F3               	movf	prodl,w,c
  3980  0019C2  2568               	addwf	hxSPPCarbonReadReg_test@txBuffer& (0+255),w,b
  3981  0019C4  6ED9               	movwf	fsr2l,c
  3982  0019C6  50F4               	movf	prodh,w,c
  3983  0019C8  2169               	addwfc	(hxSPPCarbonReadReg_test@txBuffer+1)& (0+255),w,b
  3984  0019CA  6EDA               	movwf	fsr2h,c
  3985  0019CC  50DF               	movf	indf2,w,c
  3986  0019CE  6F79               	movwf	hxSPPCarbonReadReg_test@tempByte& (0+255),b
  3987                           
  3988                           ; BSR set to: 0
  3989                           ;HX_SPP_CARBON.c: 229: if (tempByte & 0x80){
  3990  0019D0  AF79               	btfss	hxSPPCarbonReadReg_test@tempByte& (0+255),7,b
  3991  0019D2  D00C               	goto	l621
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;HX_SPP_CARBON.c: 231: LATA = 0x01;
  3995  0019D4  0E01               	movlw	1
  3996  0019D6  6E83               	movwf	3971,c	;volatile
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;HX_SPP_CARBON.c: 232: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4000  0019D8  0E05               	movlw	5
  4001  0019DA                     u9207:
  4002  0019DA  2EE8               	decfsz	wreg,f,c
  4003  0019DC  D7FE               	bra	u9207
  4004  0019DE  F000               	nop	
  4005                           
  4006                           ;HX_SPP_CARBON.c: 233: LATA = 0x03;
  4007  0019E0  0E03               	movlw	3
  4008  0019E2  6E83               	movwf	3971,c	;volatile
  4009                           
  4010                           ;HX_SPP_CARBON.c: 234: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4011  0019E4  0E05               	movlw	5
  4012  0019E6                     u9217:
  4013  0019E6  2EE8               	decfsz	wreg,f,c
  4014  0019E8  D7FE               	bra	u9217
  4015  0019EA  D00B               	goto	L9
  4016  0019EC                     l621:
  4017                           
  4018                           ;HX_SPP_CARBON.c: 237: else{
  4019                           ;HX_SPP_CARBON.c: 238: LATA = 0x01;
  4020  0019EC  0E01               	movlw	1
  4021  0019EE  6E83               	movwf	3971,c	;volatile
  4022                           
  4023                           ;HX_SPP_CARBON.c: 239: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4024  0019F0  0E05               	movlw	5
  4025  0019F2                     u9227:
  4026  0019F2  2EE8               	decfsz	wreg,f,c
  4027  0019F4  D7FE               	bra	u9227
  4028  0019F6  F000               	nop	
  4029                           
  4030                           ;HX_SPP_CARBON.c: 240: LATA = 0x00;
  4031  0019F8  0E00               	movlw	0
  4032  0019FA  6E83               	movwf	3971,c	;volatile
  4033                           
  4034                           ;HX_SPP_CARBON.c: 241: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4035  0019FC  0E05               	movlw	5
  4036  0019FE                     u9237:
  4037  0019FE  2EE8               	decfsz	wreg,f,c
  4038  001A00  D7FE               	bra	u9237
  4039  001A02                     L9:
  4040  001A02  F000               	nop	
  4041                           
  4042                           ;HX_SPP_CARBON.c: 242: LATA = 0x01;
  4043  001A04  0E01               	movlw	1
  4044  001A06  6E83               	movwf	3971,c	;volatile
  4045                           
  4046                           ;HX_SPP_CARBON.c: 243: }
  4047                           ;HX_SPP_CARBON.c: 244: for (uint8_t j = 1; j < 8; j++){
  4048  001A08  0E01               	movlw	1
  4049  001A0A  0100               	movlb	0	; () banked
  4050  001A0C  6F73               	movwf	hxSPPCarbonReadReg_test@j_905& (0+255),b
  4051  001A0E                     l10300:
  4052                           
  4053                           ; BSR set to: 0
  4054  001A0E  0E07               	movlw	7
  4055  001A10  6573               	cpfsgt	hxSPPCarbonReadReg_test@j_905& (0+255),b
  4056  001A12  D001               	goto	l623
  4057  001A14  D016               	goto	u7250
  4058  001A16                     l623:
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;HX_SPP_CARBON.c: 245: tempByte = tempByte << 1;
  4062                           
  4063                           ; BSR set to: 0
  4064  001A16  5179               	movf	hxSPPCarbonReadReg_test@tempByte& (0+255),w,b
  4065  001A18  2579               	addwf	hxSPPCarbonReadReg_test@tempByte& (0+255),w,b
  4066  001A1A  6F79               	movwf	hxSPPCarbonReadReg_test@tempByte& (0+255),b
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;HX_SPP_CARBON.c: 246: if (tempByte & 0x80){
  4070  001A1C  AF79               	btfss	hxSPPCarbonReadReg_test@tempByte& (0+255),7,b
  4071  001A1E  D006               	goto	l625
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;HX_SPP_CARBON.c: 248: LATA = 0x03;
  4075  001A20  0E03               	movlw	3
  4076  001A22  6E83               	movwf	3971,c	;volatile
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;HX_SPP_CARBON.c: 249: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4080  001A24  0E05               	movlw	5
  4081  001A26                     u9247:
  4082  001A26  2EE8               	decfsz	wreg,f,c
  4083  001A28  D7FE               	bra	u9247
  4084  001A2A  D005               	goto	L10
  4085  001A2C                     l625:
  4086                           
  4087                           ;HX_SPP_CARBON.c: 252: else{
  4088                           ;HX_SPP_CARBON.c: 253: LATA = 0x00;
  4089  001A2C  0E00               	movlw	0
  4090  001A2E  6E83               	movwf	3971,c	;volatile
  4091                           
  4092                           ;HX_SPP_CARBON.c: 254: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4093  001A30  0E05               	movlw	5
  4094  001A32                     u9257:
  4095  001A32  2EE8               	decfsz	wreg,f,c
  4096  001A34  D7FE               	bra	u9257
  4097  001A36                     L10:
  4098  001A36  F000               	nop	
  4099                           
  4100                           ;HX_SPP_CARBON.c: 255: LATA = 0x01;
  4101  001A38  0E01               	movlw	1
  4102  001A3A  6E83               	movwf	3971,c	;volatile
  4103  001A3C  0100               	movlb	0	; () banked
  4104  001A3E  2B73               	incf	hxSPPCarbonReadReg_test@j_905& (0+255),f,b
  4105  001A40  D7E6               	goto	l10300
  4106  001A42                     u7250:
  4107                           
  4108                           ; BSR set to: 0
  4109                           
  4110                           ; BSR set to: 0
  4111  001A42  2B72               	incf	hxSPPCarbonReadReg_test@i& (0+255),f,b
  4112  001A44                     l619:
  4113                           
  4114                           ; BSR set to: 0
  4115                           
  4116                           ; BSR set to: 0
  4117  001A44  516D               	movf	hxSPPCarbonReadReg_test@numTX& (0+255),w,b
  4118  001A46  5D72               	subwf	hxSPPCarbonReadReg_test@i& (0+255),w,b
  4119  001A48  A0D8               	btfss	status,0,c
  4120  001A4A  D7B8               	goto	l620
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;HX_SPP_CARBON.c: 256: }
  4124                           ;HX_SPP_CARBON.c: 257: }
  4125                           ;HX_SPP_CARBON.c: 258: }
  4126                           ;HX_SPP_CARBON.c: 261: if (oddParityCalc)
  4127                           
  4128                           ; BSR set to: 0
  4129  001A4C  5170               	movf	hxSPPCarbonReadReg_test@oddParityCalc& (0+255),w,b
  4130  001A4E  B4D8               	btfsc	status,2,c
  4131  001A50  D006               	goto	l628
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;HX_SPP_CARBON.c: 262: {
  4135                           ;HX_SPP_CARBON.c: 263: LATA = 0x03;
  4136  001A52  0E03               	movlw	3
  4137  001A54  6E83               	movwf	3971,c	;volatile
  4138                           
  4139                           ; BSR set to: 0
  4140                           ;HX_SPP_CARBON.c: 264: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4141  001A56  0E05               	movlw	5
  4142  001A58                     u9267:
  4143  001A58  2EE8               	decfsz	wreg,f,c
  4144  001A5A  D7FE               	bra	u9267
  4145  001A5C  D005               	goto	L33
  4146  001A5E                     l628:
  4147                           
  4148                           ;HX_SPP_CARBON.c: 267: else
  4149                           ;HX_SPP_CARBON.c: 268: {
  4150                           ;HX_SPP_CARBON.c: 269: LATA = 0x00;
  4151  001A5E  0E00               	movlw	0
  4152  001A60  6E83               	movwf	3971,c	;volatile
  4153                           
  4154                           ;HX_SPP_CARBON.c: 270: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4155  001A62  0E05               	movlw	5
  4156  001A64                     u9277:
  4157  001A64  2EE8               	decfsz	wreg,f,c
  4158  001A66  D7FE               	bra	u9277
  4159  001A68                     L33:
  4160  001A68  F000               	nop	
  4161                           
  4162                           ;HX_SPP_CARBON.c: 271: LATA = 0x01;
  4163  001A6A  0E01               	movlw	1
  4164  001A6C  6E83               	movwf	3971,c	;volatile
  4165                           
  4166                           ;HX_SPP_CARBON.c: 272: }
  4167                           ;HX_SPP_CARBON.c: 275: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4168  001A6E  0E05               	movlw	5
  4169  001A70                     u9287:
  4170  001A70  2EE8               	decfsz	wreg,f,c
  4171  001A72  D7FE               	bra	u9287
  4172  001A74  F000               	nop	
  4173                           
  4174                           ;HX_SPP_CARBON.c: 276: LATA = 0x00;
  4175  001A76  0E00               	movlw	0
  4176  001A78  6E83               	movwf	3971,c	;volatile
  4177                           
  4178                           ;HX_SPP_CARBON.c: 277: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4179  001A7A  0E05               	movlw	5
  4180  001A7C                     u9297:
  4181  001A7C  2EE8               	decfsz	wreg,f,c
  4182  001A7E  D7FE               	bra	u9297
  4183  001A80  F000               	nop	
  4184                           
  4185                           ;HX_SPP_CARBON.c: 284: for (uint8_t i = 0; i < numRX; i++)
  4186  001A82  0E00               	movlw	0
  4187  001A84  0100               	movlb	0	; () banked
  4188  001A86  6F74               	movwf	hxSPPCarbonReadReg_test@i_906& (0+255),b
  4189  001A88  D072               	goto	l630
  4190  001A8A                     
  4191                           ; BSR set to: 0
  4192                           ;HX_SPP_CARBON.c: 285: {
  4193                           ;HX_SPP_CARBON.c: 286: tempByte = 0;
  4194                           
  4195                           ; BSR set to: 0
  4196  001A8A  0E00               	movlw	0
  4197  001A8C  6F79               	movwf	hxSPPCarbonReadReg_test@tempByte& (0+255),b
  4198                           
  4199                           ;HX_SPP_CARBON.c: 288: for(uint8_t j = 0; j < 8; j++)
  4200  001A8E  0E00               	movlw	0
  4201  001A90  6F75               	movwf	hxSPPCarbonReadReg_test@j_907& (0+255),b
  4202  001A92                     l10346:
  4203                           
  4204                           ; BSR set to: 0
  4205  001A92  0E07               	movlw	7
  4206  001A94  6575               	cpfsgt	hxSPPCarbonReadReg_test@j_907& (0+255),b
  4207  001A96  D001               	goto	l632
  4208  001A98  D05B               	goto	u7400
  4209  001A9A                     l632:
  4210                           
  4211                           ; BSR set to: 0
  4212                           ;HX_SPP_CARBON.c: 289: {
  4213                           ;HX_SPP_CARBON.c: 290: LATA = 0x01;
  4214                           
  4215                           ; BSR set to: 0
  4216  001A9A  0E01               	movlw	1
  4217  001A9C  6E83               	movwf	3971,c	;volatile
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;HX_SPP_CARBON.c: 291: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4221  001A9E  0E05               	movlw	5
  4222  001AA0                     u9307:
  4223  001AA0  2EE8               	decfsz	wreg,f,c
  4224  001AA2  D7FE               	bra	u9307
  4225  001AA4  F000               	nop	
  4226                           
  4227                           ;HX_SPP_CARBON.c: 292: LATA = 0x03;
  4228  001AA6  0E03               	movlw	3
  4229  001AA8  6E83               	movwf	3971,c	;volatile
  4230                           
  4231                           ;HX_SPP_CARBON.c: 293: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4232  001AAA  0E05               	movlw	5
  4233  001AAC                     u9317:
  4234  001AAC  2EE8               	decfsz	wreg,f,c
  4235  001AAE  D7FE               	bra	u9317
  4236  001AB0  F000               	nop	
  4237                           
  4238                           ;HX_SPP_CARBON.c: 294: LATA = 0x00;
  4239  001AB2  0E00               	movlw	0
  4240  001AB4  6E83               	movwf	3971,c	;volatile
  4241                           
  4242                           ;HX_SPP_CARBON.c: 295: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4243  001AB6  0E05               	movlw	5
  4244  001AB8                     u9327:
  4245  001AB8  2EE8               	decfsz	wreg,f,c
  4246  001ABA  D7FE               	bra	u9327
  4247  001ABC  F000               	nop	
  4248                           
  4249                           ;HX_SPP_CARBON.c: 299: tempByte = tempByte << 1;
  4250  001ABE  0100               	movlb	0	; () banked
  4251  001AC0  5179               	movf	hxSPPCarbonReadReg_test@tempByte& (0+255),w,b
  4252  001AC2  2579               	addwf	hxSPPCarbonReadReg_test@tempByte& (0+255),w,b
  4253  001AC4  6F79               	movwf	hxSPPCarbonReadReg_test@tempByte& (0+255),b
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;HX_SPP_CARBON.c: 300: readbackCommState = 0;
  4257  001AC6  0E00               	movlw	0
  4258  001AC8  6F78               	movwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),b
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;HX_SPP_CARBON.c: 301: bitVal = 2;
  4262  001ACA  0E02               	movlw	2
  4263  001ACC  6F76               	movwf	hxSPPCarbonReadReg_test@bitVal& (0+255),b
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;HX_SPP_CARBON.c: 303: readbackTimer = 40;
  4267  001ACE  0E00               	movlw	0
  4268  001AD0  6F6F               	movwf	(hxSPPCarbonReadReg_test@readbackTimer+1)& (0+255),b
  4269  001AD2  0E28               	movlw	40
  4270  001AD4  6F6E               	movwf	hxSPPCarbonReadReg_test@readbackTimer& (0+255),b
  4271                           
  4272                           ;HX_SPP_CARBON.c: 304: while(readbackTimer--)
  4273  001AD6  D027               	goto	l646
  4274  001AD8                     l635:
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;HX_SPP_CARBON.c: 305: {
  4278                           ;HX_SPP_CARBON.c: 306: portAVal = PORTA;
  4279  001AD8  CF8D F06C          	movff	3981,hxSPPCarbonReadReg_test@portAVal	;volatile
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;HX_SPP_CARBON.c: 307: if (readbackCommState == 0)
  4283  001ADC  5178               	movf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),w,b
  4284  001ADE  A4D8               	btfss	status,2,c
  4285  001AE0  D006               	goto	l636
  4286                           
  4287                           ; BSR set to: 0
  4288                           ;HX_SPP_CARBON.c: 308: {
  4289                           ;HX_SPP_CARBON.c: 310: if (PORTAbits.RA4 == 1)
  4290  001AE2  A88D               	btfss	3981,4,c	;volatile
  4291  001AE4  D020               	goto	l646
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;HX_SPP_CARBON.c: 312: {
  4295                           ;HX_SPP_CARBON.c: 313: readbackCommState = 1;
  4296  001AE6  0E01               	movlw	1
  4297  001AE8  6F78               	movwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),b
  4298                           
  4299                           ;HX_SPP_CARBON.c: 314: bitVal = 3;
  4300  001AEA  0E03               	movlw	3
  4301  001AEC  D01B               	goto	L13
  4302  001AEE                     l636:
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;HX_SPP_CARBON.c: 317: else if (readbackCommState == 1)
  4306                           
  4307                           ; BSR set to: 0
  4308  001AEE  0578               	decf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),w,b
  4309  001AF0  A4D8               	btfss	status,2,c
  4310  001AF2  D006               	goto	l639
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;HX_SPP_CARBON.c: 318: {
  4314                           ;HX_SPP_CARBON.c: 319: if (PORTAbits.RA4 == 0)
  4315  001AF4  B88D               	btfsc	3981,4,c	;volatile
  4316  001AF6  D017               	goto	l646
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;HX_SPP_CARBON.c: 321: {
  4320                           ;HX_SPP_CARBON.c: 322: readbackCommState = 2;
  4321  001AF8  0E02               	movlw	2
  4322  001AFA  6F78               	movwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),b
  4323                           
  4324                           ;HX_SPP_CARBON.c: 323: bitVal = 0;
  4325  001AFC  0E00               	movlw	0
  4326  001AFE  D012               	goto	L13
  4327  001B00                     l639:
  4328                           
  4329                           ; BSR set to: 0
  4330                           ;HX_SPP_CARBON.c: 326: else if (readbackCommState == 2)
  4331                           
  4332                           ; BSR set to: 0
  4333  001B00  0E02               	movlw	2
  4334  001B02  1978               	xorwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),w,b
  4335  001B04  A4D8               	btfss	status,2,c
  4336  001B06  D006               	goto	l642
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;HX_SPP_CARBON.c: 327: {
  4340                           ;HX_SPP_CARBON.c: 328: if (PORTAbits.RA4 == 1)
  4341  001B08  A88D               	btfss	3981,4,c	;volatile
  4342  001B0A  D00D               	goto	l646
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;HX_SPP_CARBON.c: 330: {
  4346                           ;HX_SPP_CARBON.c: 331: readbackCommState = 3;
  4347  001B0C  0E03               	movlw	3
  4348  001B0E  6F78               	movwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),b
  4349                           
  4350                           ;HX_SPP_CARBON.c: 332: bitVal = 4;
  4351  001B10  0E04               	movlw	4
  4352  001B12  D008               	goto	L13
  4353  001B14                     l642:
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;HX_SPP_CARBON.c: 335: else if (readbackCommState == 3)
  4357                           
  4358                           ; BSR set to: 0
  4359  001B14  0E03               	movlw	3
  4360  001B16  1978               	xorwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),w,b
  4361  001B18  B4D8               	btfsc	status,2,c
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;HX_SPP_CARBON.c: 336: {
  4365                           ;HX_SPP_CARBON.c: 337: if (PORTAbits.RA4 == 0)
  4366  001B1A  B88D               	btfsc	3981,4,c	;volatile
  4367  001B1C  D004               	goto	l646
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;HX_SPP_CARBON.c: 339: {
  4371                           ;HX_SPP_CARBON.c: 340: readbackCommState = 3;
  4372  001B1E  0E03               	movlw	3
  4373  001B20  6F78               	movwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),b
  4374                           
  4375                           ;HX_SPP_CARBON.c: 341: bitVal = 1;
  4376  001B22  0E01               	movlw	1
  4377  001B24                     L13:
  4378  001B24  6F76               	movwf	hxSPPCarbonReadReg_test@bitVal& (0+255),b
  4379  001B26                     l646:
  4380                           
  4381                           ; BSR set to: 0
  4382                           
  4383                           ; BSR set to: 0
  4384                           
  4385                           ; BSR set to: 0
  4386                           
  4387                           ; BSR set to: 0
  4388                           
  4389                           ; BSR set to: 0
  4390                           
  4391                           ; BSR set to: 0
  4392                           
  4393                           ; BSR set to: 0
  4394  001B26  076E               	decf	hxSPPCarbonReadReg_test@readbackTimer& (0+255),f,b
  4395  001B28  A0D8               	btfss	status,0,c
  4396  001B2A  076F               	decf	(hxSPPCarbonReadReg_test@readbackTimer+1)& (0+255),f,b
  4397  001B2C  296E               	incf	hxSPPCarbonReadReg_test@readbackTimer& (0+255),w,b
  4398  001B2E  E1D4               	bnz	l635
  4399  001B30  296F               	incf	(hxSPPCarbonReadReg_test@readbackTimer+1)& (0+255),w,b
  4400  001B32  A4D8               	btfss	status,2,c
  4401  001B34  D7D1               	goto	l635
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;HX_SPP_CARBON.c: 342: }
  4405                           ;HX_SPP_CARBON.c: 343: }
  4406                           ;HX_SPP_CARBON.c: 344: }
  4407                           ;HX_SPP_CARBON.c: 345: if(bitVal == 0)
  4408                           
  4409                           ; BSR set to: 0
  4410  001B36  5176               	movf	hxSPPCarbonReadReg_test@bitVal& (0+255),w,b
  4411  001B38  B4D8               	btfsc	status,2,c
  4412  001B3A  D008               	goto	l651
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;HX_SPP_CARBON.c: 350: {
  4416                           ;HX_SPP_CARBON.c: 351: tempByte = tempByte++;
  4417                           
  4418                           ; BSR set to: 0
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;HX_SPP_CARBON.c: 346: {
  4422                           ;HX_SPP_CARBON.c: 348: }
  4423  001B3C  0576               	decf	hxSPPCarbonReadReg_test@bitVal& (0+255),w,b
  4424  001B3E  A4D8               	btfss	status,2,c
  4425  001B40  D002               	goto	l650
  4426                           
  4427                           ; BSR set to: 0
  4428  001B42  2B79               	incf	hxSPPCarbonReadReg_test@tempByte& (0+255),f,b
  4429                           
  4430                           ;HX_SPP_CARBON.c: 352: }
  4431  001B44  D003               	goto	l651
  4432  001B46                     l650:
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;HX_SPP_CARBON.c: 353: else
  4436                           ;HX_SPP_CARBON.c: 354: {
  4437                           ;HX_SPP_CARBON.c: 355: tempHxState = 0x41;
  4438                           
  4439                           ; BSR set to: 0
  4440  001B46  0E41               	movlw	65
  4441  001B48  6F77               	movwf	hxSPPCarbonReadReg_test@tempHxState& (0+255),b
  4442                           
  4443                           ;HX_SPP_CARBON.c: 356: break;
  4444  001B4A  D002               	goto	u7400
  4445  001B4C                     l651:
  4446                           
  4447                           ; BSR set to: 0
  4448                           
  4449                           ; BSR set to: 0
  4450                           
  4451                           ; BSR set to: 0
  4452  001B4C  2B75               	incf	hxSPPCarbonReadReg_test@j_907& (0+255),f,b
  4453  001B4E  D7A1               	goto	l10346
  4454  001B50                     u7400:
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;HX_SPP_CARBON.c: 357: }
  4458                           ;HX_SPP_CARBON.c: 358: }
  4459                           ;HX_SPP_CARBON.c: 359: if (tempHxState == 0x41)
  4460                           
  4461                           ; BSR set to: 0
  4462  001B50  0E41               	movlw	65
  4463  001B52  1977               	xorwf	hxSPPCarbonReadReg_test@tempHxState& (0+255),w,b
  4464  001B54  B4D8               	btfsc	status,2,c
  4465  001B56  D00F               	goto	u7420
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;HX_SPP_CARBON.c: 362: }
  4469                           ;HX_SPP_CARBON.c: 363: rxBuffer[i] = tempByte;
  4470                           
  4471                           ; BSR set to: 0
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;HX_SPP_CARBON.c: 360: {
  4475                           ;HX_SPP_CARBON.c: 361: break;
  4476  001B58  5174               	movf	hxSPPCarbonReadReg_test@i_906& (0+255),w,b
  4477  001B5A  0D01               	mullw	1
  4478  001B5C  50F3               	movf	prodl,w,c
  4479  001B5E  256A               	addwf	hxSPPCarbonReadReg_test@rxBuffer& (0+255),w,b
  4480  001B60  6ED9               	movwf	fsr2l,c
  4481  001B62  50F4               	movf	prodh,w,c
  4482  001B64  216B               	addwfc	(hxSPPCarbonReadReg_test@rxBuffer+1)& (0+255),w,b
  4483  001B66  6EDA               	movwf	fsr2h,c
  4484  001B68  C079  FFDF         	movff	hxSPPCarbonReadReg_test@tempByte,indf2
  4485                           
  4486                           ; BSR set to: 0
  4487  001B6C  2B74               	incf	hxSPPCarbonReadReg_test@i_906& (0+255),f,b
  4488  001B6E                     l630:
  4489                           
  4490                           ; BSR set to: 0
  4491                           
  4492                           ; BSR set to: 0
  4493  001B6E  5167               	movf	hxSPPCarbonReadReg_test@numRX& (0+255),w,b
  4494  001B70  5D74               	subwf	hxSPPCarbonReadReg_test@i_906& (0+255),w,b
  4495  001B72  A0D8               	btfss	status,0,c
  4496  001B74  D78A               	goto	l631
  4497  001B76                     u7420:
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;HX_SPP_CARBON.c: 364: }
  4501                           ;HX_SPP_CARBON.c: 365: if(tempHxState == 0x41)
  4502                           
  4503                           ; BSR set to: 0
  4504  001B76  0E41               	movlw	65
  4505  001B78  1977               	xorwf	hxSPPCarbonReadReg_test@tempHxState& (0+255),w,b
  4506  001B7A  A4D8               	btfss	status,2,c
  4507  001B7C  D002               	goto	l654
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;HX_SPP_CARBON.c: 366: {
  4511                           ;HX_SPP_CARBON.c: 367: tempHxState = 0x41;
  4512  001B7E  0E41               	movlw	65
  4513  001B80  D001               	goto	L6
  4514  001B82                     l654:
  4515                           
  4516                           ; BSR set to: 0
  4517                           ;HX_SPP_CARBON.c: 369: else
  4518                           ;HX_SPP_CARBON.c: 370: {
  4519                           ;HX_SPP_CARBON.c: 371: tempHxState = 0x10;
  4520                           
  4521                           ; BSR set to: 0
  4522  001B82  0E10               	movlw	16
  4523  001B84                     L6:
  4524  001B84  6F77               	movwf	hxSPPCarbonReadReg_test@tempHxState& (0+255),b
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;HX_SPP_CARBON.c: 372: }
  4528                           ;HX_SPP_CARBON.c: 373: return tempHxState;
  4529  001B86  5177               	movf	hxSPPCarbonReadReg_test@tempHxState& (0+255),w,b
  4530  001B88  0012               	return	
  4531  001B8A                     __end_of_hxSPPCarbonReadReg_test:
  4532                           	opt stack 0
  4533                           tblptru	equ	0xFF8
  4534                           tblptrh	equ	0xFF7
  4535                           tblptrl	equ	0xFF6
  4536                           tablat	equ	0xFF5
  4537                           prodh	equ	0xFF4
  4538                           prodl	equ	0xFF3
  4539                           intcon	equ	0xFF2
  4540                           postinc0	equ	0xFEE
  4541                           wreg	equ	0xFE8
  4542                           postinc1	equ	0xFE6
  4543                           postdec1	equ	0xFE5
  4544                           fsr1h	equ	0xFE2
  4545                           fsr1l	equ	0xFE1
  4546                           indf2	equ	0xFDF
  4547                           postinc2	equ	0xFDE
  4548                           fsr2h	equ	0xFDA
  4549                           fsr2l	equ	0xFD9
  4550                           status	equ	0xFD8
  4551                           
  4552 ;; *************** function _hxSPPCarbonProgram_test *****************
  4553 ;; Defined at:
  4554 ;;		line 483 in file "HX_SPP_CARBON.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;  numTX           1    wreg     unsigned char 
  4557 ;;  txBuffer        2    7[BANK0 ] PTR unsigned char 
  4558 ;;		 -> hx_inData(64), 
  4559 ;;  rxBuffer        2    9[BANK0 ] PTR unsigned char 
  4560 ;;		 -> hx_mainData(61), 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  numTX           1   11[BANK0 ] unsigned char 
  4563 ;;  j               1   15[BANK0 ] unsigned char 
  4564 ;;  i               1   14[BANK0 ] unsigned char 
  4565 ;;  j               1   13[BANK0 ] unsigned char 
  4566 ;;  tempByte        1   16[BANK0 ] unsigned char 
  4567 ;;  oddParityCal    1   12[BANK0 ] unsigned char 
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  1    wreg      void 
  4570 ;; Registers used:
  4571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4577 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4578 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4580 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4581 ;;Total ram usage:       10 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    8
  4584 ;; This function calls:
  4585 ;;		_hxOddParityCalc
  4586 ;; This function is called by:
  4587 ;;		_run_SPPCarbon_test
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           	psect	text7
  4592  002278                     __ptext7:
  4593                           	opt stack 0
  4594  002278                     _hxSPPCarbonProgram_test:
  4595                           	opt stack 21
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;incstack = 0
  4599                           ;hxSPPCarbonProgram_test@numTX stored from wreg
  4600  002278  0100               	movlb	0	; () banked
  4601  00227A  6F6B               	movwf	hxSPPCarbonProgram_test@numTX& (0+255),b
  4602                           
  4603                           ;HX_SPP_CARBON.c: 485: uint8_t tempByte;
  4604                           ;HX_SPP_CARBON.c: 486: uint8_t oddParityCalc = 0;
  4605  00227C  0E00               	movlw	0
  4606  00227E  0100               	movlb	0	; () banked
  4607  002280  6F6C               	movwf	hxSPPCarbonProgram_test@oddParityCalc& (0+255),b
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;HX_SPP_CARBON.c: 488: oddParityCalc = hxOddParityCalc(txBuffer, 3);
  4611  002282  C067  F060         	movff	hxSPPCarbonProgram_test@txBuffer,hxOddParityCalc@buff
  4612  002286  C068  F061         	movff	hxSPPCarbonProgram_test@txBuffer+1,hxOddParityCalc@buff+1
  4613  00228A  0E03               	movlw	3
  4614  00228C  6F62               	movwf	hxOddParityCalc@size& (0+255),b
  4615  00228E  EC17  F01B         	call	_hxOddParityCalc	;wreg free
  4616  002292  0100               	movlb	0	; () banked
  4617  002294  6F6C               	movwf	hxSPPCarbonProgram_test@oddParityCalc& (0+255),b
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;HX_SPP_CARBON.c: 495: tempByte = 0xA0;
  4621  002296  0EA0               	movlw	160
  4622  002298  6F70               	movwf	hxSPPCarbonProgram_test@tempByte& (0+255),b
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;HX_SPP_CARBON.c: 496: if (tempByte & 0x80){
  4626  00229A  AF70               	btfss	hxSPPCarbonProgram_test@tempByte& (0+255),7,b
  4627  00229C  D00C               	goto	l679
  4628                           
  4629                           ; BSR set to: 0
  4630                           ;HX_SPP_CARBON.c: 498: LATA = 0x01;
  4631  00229E  0E01               	movlw	1
  4632  0022A0  6E83               	movwf	3971,c	;volatile
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;HX_SPP_CARBON.c: 499: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4636  0022A2  0E05               	movlw	5
  4637  0022A4                     u9337:
  4638  0022A4  2EE8               	decfsz	wreg,f,c
  4639  0022A6  D7FE               	bra	u9337
  4640  0022A8  F000               	nop	
  4641                           
  4642                           ;HX_SPP_CARBON.c: 500: LATA = 0x03;
  4643  0022AA  0E03               	movlw	3
  4644  0022AC  6E83               	movwf	3971,c	;volatile
  4645                           
  4646                           ;HX_SPP_CARBON.c: 501: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4647  0022AE  0E05               	movlw	5
  4648  0022B0                     u9347:
  4649  0022B0  2EE8               	decfsz	wreg,f,c
  4650  0022B2  D7FE               	bra	u9347
  4651  0022B4  D00B               	goto	L14
  4652  0022B6                     l679:
  4653                           
  4654                           ;HX_SPP_CARBON.c: 504: else{
  4655                           ;HX_SPP_CARBON.c: 505: LATA = 0x01;
  4656  0022B6  0E01               	movlw	1
  4657  0022B8  6E83               	movwf	3971,c	;volatile
  4658                           
  4659                           ;HX_SPP_CARBON.c: 506: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4660  0022BA  0E05               	movlw	5
  4661  0022BC                     u9357:
  4662  0022BC  2EE8               	decfsz	wreg,f,c
  4663  0022BE  D7FE               	bra	u9357
  4664  0022C0  F000               	nop	
  4665                           
  4666                           ;HX_SPP_CARBON.c: 507: LATA = 0x00;
  4667  0022C2  0E00               	movlw	0
  4668  0022C4  6E83               	movwf	3971,c	;volatile
  4669                           
  4670                           ;HX_SPP_CARBON.c: 508: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4671  0022C6  0E05               	movlw	5
  4672  0022C8                     u9367:
  4673  0022C8  2EE8               	decfsz	wreg,f,c
  4674  0022CA  D7FE               	bra	u9367
  4675  0022CC                     L14:
  4676  0022CC  F000               	nop	
  4677                           
  4678                           ;HX_SPP_CARBON.c: 509: LATA = 0x01;
  4679  0022CE  0E01               	movlw	1
  4680  0022D0  6E83               	movwf	3971,c	;volatile
  4681                           
  4682                           ;HX_SPP_CARBON.c: 510: }
  4683                           ;HX_SPP_CARBON.c: 511: for (uint8_t j = 1; j < 4; j++){
  4684  0022D2  0E01               	movlw	1
  4685  0022D4  0100               	movlb	0	; () banked
  4686  0022D6  6F6D               	movwf	hxSPPCarbonProgram_test@j& (0+255),b
  4687  0022D8                     l10900:
  4688                           
  4689                           ; BSR set to: 0
  4690  0022D8  0E03               	movlw	3
  4691  0022DA  656D               	cpfsgt	hxSPPCarbonProgram_test@j& (0+255),b
  4692  0022DC  D001               	goto	l681
  4693  0022DE  D016               	goto	u7710
  4694  0022E0                     l681:
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;HX_SPP_CARBON.c: 512: tempByte = tempByte << 1;
  4698                           
  4699                           ; BSR set to: 0
  4700  0022E0  5170               	movf	hxSPPCarbonProgram_test@tempByte& (0+255),w,b
  4701  0022E2  2570               	addwf	hxSPPCarbonProgram_test@tempByte& (0+255),w,b
  4702  0022E4  6F70               	movwf	hxSPPCarbonProgram_test@tempByte& (0+255),b
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;HX_SPP_CARBON.c: 513: if (tempByte & 0x80){
  4706  0022E6  AF70               	btfss	hxSPPCarbonProgram_test@tempByte& (0+255),7,b
  4707  0022E8  D006               	goto	l683
  4708                           
  4709                           ; BSR set to: 0
  4710                           ;HX_SPP_CARBON.c: 515: LATA = 0x03;
  4711  0022EA  0E03               	movlw	3
  4712  0022EC  6E83               	movwf	3971,c	;volatile
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;HX_SPP_CARBON.c: 516: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4716  0022EE  0E05               	movlw	5
  4717  0022F0                     u9377:
  4718  0022F0  2EE8               	decfsz	wreg,f,c
  4719  0022F2  D7FE               	bra	u9377
  4720  0022F4  D005               	goto	L15
  4721  0022F6                     l683:
  4722                           
  4723                           ;HX_SPP_CARBON.c: 519: else{
  4724                           ;HX_SPP_CARBON.c: 520: LATA = 0x00;
  4725  0022F6  0E00               	movlw	0
  4726  0022F8  6E83               	movwf	3971,c	;volatile
  4727                           
  4728                           ;HX_SPP_CARBON.c: 521: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4729  0022FA  0E05               	movlw	5
  4730  0022FC                     u9387:
  4731  0022FC  2EE8               	decfsz	wreg,f,c
  4732  0022FE  D7FE               	bra	u9387
  4733  002300                     L15:
  4734  002300  F000               	nop	
  4735                           
  4736                           ;HX_SPP_CARBON.c: 522: LATA = 0x01;
  4737  002302  0E01               	movlw	1
  4738  002304  6E83               	movwf	3971,c	;volatile
  4739  002306  0100               	movlb	0	; () banked
  4740  002308  2B6D               	incf	hxSPPCarbonProgram_test@j& (0+255),f,b
  4741  00230A  D7E6               	goto	l10900
  4742  00230C                     u7710:
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;HX_SPP_CARBON.c: 523: }
  4746                           ;HX_SPP_CARBON.c: 524: }
  4747                           ;HX_SPP_CARBON.c: 526: for (uint8_t i = 0; i < numTX; i++){
  4748                           
  4749                           ; BSR set to: 0
  4750  00230C  0E00               	movlw	0
  4751  00230E  6F6E               	movwf	hxSPPCarbonProgram_test@i& (0+255),b
  4752  002310  D044               	goto	l685
  4753  002312                     
  4754                           ; BSR set to: 0
  4755                           ;HX_SPP_CARBON.c: 528: tempByte = txBuffer[i];
  4756                           
  4757                           ; BSR set to: 0
  4758  002312  516E               	movf	hxSPPCarbonProgram_test@i& (0+255),w,b
  4759  002314  0D01               	mullw	1
  4760  002316  50F3               	movf	prodl,w,c
  4761  002318  2567               	addwf	hxSPPCarbonProgram_test@txBuffer& (0+255),w,b
  4762  00231A  6ED9               	movwf	fsr2l,c
  4763  00231C  50F4               	movf	prodh,w,c
  4764  00231E  2168               	addwfc	(hxSPPCarbonProgram_test@txBuffer+1)& (0+255),w,b
  4765  002320  6EDA               	movwf	fsr2h,c
  4766  002322  50DF               	movf	indf2,w,c
  4767  002324  6F70               	movwf	hxSPPCarbonProgram_test@tempByte& (0+255),b
  4768                           
  4769                           ; BSR set to: 0
  4770                           ;HX_SPP_CARBON.c: 529: if (tempByte & 0x80){
  4771  002326  AF70               	btfss	hxSPPCarbonProgram_test@tempByte& (0+255),7,b
  4772  002328  D00C               	goto	l687
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;HX_SPP_CARBON.c: 531: LATA = 0x01;
  4776  00232A  0E01               	movlw	1
  4777  00232C  6E83               	movwf	3971,c	;volatile
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;HX_SPP_CARBON.c: 532: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4781  00232E  0E05               	movlw	5
  4782  002330                     u9397:
  4783  002330  2EE8               	decfsz	wreg,f,c
  4784  002332  D7FE               	bra	u9397
  4785  002334  F000               	nop	
  4786                           
  4787                           ;HX_SPP_CARBON.c: 533: LATA = 0x03;
  4788  002336  0E03               	movlw	3
  4789  002338  6E83               	movwf	3971,c	;volatile
  4790                           
  4791                           ;HX_SPP_CARBON.c: 534: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4792  00233A  0E05               	movlw	5
  4793  00233C                     u9407:
  4794  00233C  2EE8               	decfsz	wreg,f,c
  4795  00233E  D7FE               	bra	u9407
  4796  002340  D00B               	goto	L16
  4797  002342                     l687:
  4798                           
  4799                           ;HX_SPP_CARBON.c: 537: else{
  4800                           ;HX_SPP_CARBON.c: 538: LATA = 0x01;
  4801  002342  0E01               	movlw	1
  4802  002344  6E83               	movwf	3971,c	;volatile
  4803                           
  4804                           ;HX_SPP_CARBON.c: 539: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4805  002346  0E05               	movlw	5
  4806  002348                     u9417:
  4807  002348  2EE8               	decfsz	wreg,f,c
  4808  00234A  D7FE               	bra	u9417
  4809  00234C  F000               	nop	
  4810                           
  4811                           ;HX_SPP_CARBON.c: 540: LATA = 0x00;
  4812  00234E  0E00               	movlw	0
  4813  002350  6E83               	movwf	3971,c	;volatile
  4814                           
  4815                           ;HX_SPP_CARBON.c: 541: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4816  002352  0E05               	movlw	5
  4817  002354                     u9427:
  4818  002354  2EE8               	decfsz	wreg,f,c
  4819  002356  D7FE               	bra	u9427
  4820  002358                     L16:
  4821  002358  F000               	nop	
  4822                           
  4823                           ;HX_SPP_CARBON.c: 542: LATA = 0x01;
  4824  00235A  0E01               	movlw	1
  4825  00235C  6E83               	movwf	3971,c	;volatile
  4826                           
  4827                           ;HX_SPP_CARBON.c: 543: }
  4828                           ;HX_SPP_CARBON.c: 544: for (uint8_t j = 1; j < 8; j++){
  4829  00235E  0E01               	movlw	1
  4830  002360  0100               	movlb	0	; () banked
  4831  002362  6F6F               	movwf	hxSPPCarbonProgram_test@j_925& (0+255),b
  4832  002364                     l10946:
  4833                           
  4834                           ; BSR set to: 0
  4835  002364  0E07               	movlw	7
  4836  002366  656F               	cpfsgt	hxSPPCarbonProgram_test@j_925& (0+255),b
  4837  002368  D001               	goto	l689
  4838  00236A  D016               	goto	u7750
  4839  00236C                     l689:
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;HX_SPP_CARBON.c: 545: tempByte = tempByte << 1;
  4843                           
  4844                           ; BSR set to: 0
  4845  00236C  5170               	movf	hxSPPCarbonProgram_test@tempByte& (0+255),w,b
  4846  00236E  2570               	addwf	hxSPPCarbonProgram_test@tempByte& (0+255),w,b
  4847  002370  6F70               	movwf	hxSPPCarbonProgram_test@tempByte& (0+255),b
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;HX_SPP_CARBON.c: 546: if (tempByte & 0x80){
  4851  002372  AF70               	btfss	hxSPPCarbonProgram_test@tempByte& (0+255),7,b
  4852  002374  D006               	goto	l691
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;HX_SPP_CARBON.c: 548: LATA = 0x03;
  4856  002376  0E03               	movlw	3
  4857  002378  6E83               	movwf	3971,c	;volatile
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;HX_SPP_CARBON.c: 549: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4861  00237A  0E05               	movlw	5
  4862  00237C                     u9437:
  4863  00237C  2EE8               	decfsz	wreg,f,c
  4864  00237E  D7FE               	bra	u9437
  4865  002380  D005               	goto	L17
  4866  002382                     l691:
  4867                           
  4868                           ;HX_SPP_CARBON.c: 552: else{
  4869                           ;HX_SPP_CARBON.c: 553: LATA = 0x00;
  4870  002382  0E00               	movlw	0
  4871  002384  6E83               	movwf	3971,c	;volatile
  4872                           
  4873                           ;HX_SPP_CARBON.c: 554: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4874  002386  0E05               	movlw	5
  4875  002388                     u9447:
  4876  002388  2EE8               	decfsz	wreg,f,c
  4877  00238A  D7FE               	bra	u9447
  4878  00238C                     L17:
  4879  00238C  F000               	nop	
  4880                           
  4881                           ;HX_SPP_CARBON.c: 555: LATA = 0x01;
  4882  00238E  0E01               	movlw	1
  4883  002390  6E83               	movwf	3971,c	;volatile
  4884  002392  0100               	movlb	0	; () banked
  4885  002394  2B6F               	incf	hxSPPCarbonProgram_test@j_925& (0+255),f,b
  4886  002396  D7E6               	goto	l10946
  4887  002398                     u7750:
  4888                           
  4889                           ; BSR set to: 0
  4890                           
  4891                           ; BSR set to: 0
  4892  002398  2B6E               	incf	hxSPPCarbonProgram_test@i& (0+255),f,b
  4893  00239A                     l685:
  4894                           
  4895                           ; BSR set to: 0
  4896                           
  4897                           ; BSR set to: 0
  4898  00239A  516B               	movf	hxSPPCarbonProgram_test@numTX& (0+255),w,b
  4899  00239C  5D6E               	subwf	hxSPPCarbonProgram_test@i& (0+255),w,b
  4900  00239E  A0D8               	btfss	status,0,c
  4901  0023A0  D7B8               	goto	l686
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;HX_SPP_CARBON.c: 556: }
  4905                           ;HX_SPP_CARBON.c: 557: }
  4906                           ;HX_SPP_CARBON.c: 558: }
  4907                           ;HX_SPP_CARBON.c: 561: if (oddParityCalc)
  4908                           
  4909                           ; BSR set to: 0
  4910  0023A2  516C               	movf	hxSPPCarbonProgram_test@oddParityCalc& (0+255),w,b
  4911  0023A4  B4D8               	btfsc	status,2,c
  4912  0023A6  D006               	goto	l694
  4913                           
  4914                           ; BSR set to: 0
  4915                           ;HX_SPP_CARBON.c: 562: {
  4916                           ;HX_SPP_CARBON.c: 563: LATA = 0x03;
  4917  0023A8  0E03               	movlw	3
  4918  0023AA  6E83               	movwf	3971,c	;volatile
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;HX_SPP_CARBON.c: 564: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4922  0023AC  0E05               	movlw	5
  4923  0023AE                     u9457:
  4924  0023AE  2EE8               	decfsz	wreg,f,c
  4925  0023B0  D7FE               	bra	u9457
  4926  0023B2  D005               	goto	L34
  4927  0023B4                     l694:
  4928                           
  4929                           ;HX_SPP_CARBON.c: 567: else
  4930                           ;HX_SPP_CARBON.c: 568: {
  4931                           ;HX_SPP_CARBON.c: 569: LATA = 0x00;
  4932  0023B4  0E00               	movlw	0
  4933  0023B6  6E83               	movwf	3971,c	;volatile
  4934                           
  4935                           ;HX_SPP_CARBON.c: 570: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4936  0023B8  0E05               	movlw	5
  4937  0023BA                     u9467:
  4938  0023BA  2EE8               	decfsz	wreg,f,c
  4939  0023BC  D7FE               	bra	u9467
  4940  0023BE                     L34:
  4941  0023BE  F000               	nop	
  4942                           
  4943                           ;HX_SPP_CARBON.c: 571: LATA = 0x01;
  4944  0023C0  0E01               	movlw	1
  4945  0023C2  6E83               	movwf	3971,c	;volatile
  4946                           
  4947                           ;HX_SPP_CARBON.c: 572: }
  4948                           ;HX_SPP_CARBON.c: 575: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4949  0023C4  0E05               	movlw	5
  4950  0023C6                     u9477:
  4951  0023C6  2EE8               	decfsz	wreg,f,c
  4952  0023C8  D7FE               	bra	u9477
  4953  0023CA  F000               	nop	
  4954                           
  4955                           ;HX_SPP_CARBON.c: 576: LATA = 0x00;
  4956  0023CC  0E00               	movlw	0
  4957  0023CE  6E83               	movwf	3971,c	;volatile
  4958                           
  4959                           ;HX_SPP_CARBON.c: 577: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4960  0023D0  0E05               	movlw	5
  4961  0023D2                     u9487:
  4962  0023D2  2EE8               	decfsz	wreg,f,c
  4963  0023D4  D7FE               	bra	u9487
  4964  0023D6  F000               	nop	
  4965                           
  4966                           ;HX_SPP_CARBON.c: 582: rxBuffer[0] = 0x11;
  4967  0023D8  C069  FFD9         	movff	hxSPPCarbonProgram_test@rxBuffer,fsr2l
  4968  0023DC  C06A  FFDA         	movff	hxSPPCarbonProgram_test@rxBuffer+1,fsr2h
  4969  0023E0  0E11               	movlw	17
  4970  0023E2  6EDF               	movwf	indf2,c
  4971                           
  4972                           ;HX_SPP_CARBON.c: 585: if(hx_state != 0x41)
  4973  0023E4  0E41               	movlw	65
  4974  0023E6  1845               	xorwf	_hx_state,w,c
  4975  0023E8  B4D8               	btfsc	status,2,c
  4976  0023EA  D002               	goto	l696
  4977                           
  4978                           ;HX_SPP_CARBON.c: 586: {
  4979                           ;HX_SPP_CARBON.c: 587: hx_state = 0x10;
  4980  0023EC  0E10               	movlw	16
  4981  0023EE  6E45               	movwf	_hx_state,c
  4982  0023F0                     l696:
  4983                           
  4984                           ;HX_SPP_CARBON.c: 588: }
  4985                           ;HX_SPP_CARBON.c: 589: LATA = 0x03;
  4986  0023F0  0E03               	movlw	3
  4987  0023F2  6E83               	movwf	3971,c	;volatile
  4988  0023F4  0012               	return		;funcret
  4989  0023F6                     __end_of_hxSPPCarbonProgram_test:
  4990                           	opt stack 0
  4991                           tblptru	equ	0xFF8
  4992                           tblptrh	equ	0xFF7
  4993                           tblptrl	equ	0xFF6
  4994                           tablat	equ	0xFF5
  4995                           prodh	equ	0xFF4
  4996                           prodl	equ	0xFF3
  4997                           intcon	equ	0xFF2
  4998                           postinc0	equ	0xFEE
  4999                           wreg	equ	0xFE8
  5000                           postinc1	equ	0xFE6
  5001                           postdec1	equ	0xFE5
  5002                           fsr1h	equ	0xFE2
  5003                           fsr1l	equ	0xFE1
  5004                           indf2	equ	0xFDF
  5005                           postinc2	equ	0xFDE
  5006                           fsr2h	equ	0xFDA
  5007                           fsr2l	equ	0xFD9
  5008                           status	equ	0xFD8
  5009                           
  5010 ;; *************** function _hxSPPCarbonCheckBusy_test *****************
  5011 ;; Defined at:
  5012 ;;		line 593 in file "HX_SPP_CARBON.c"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;  numTX           1    wreg     unsigned char 
  5015 ;;  numRX           1    7[BANK0 ] unsigned char 
  5016 ;;  txBuffer        2    8[BANK0 ] PTR unsigned char 
  5017 ;;		 -> hx_inData(64), 
  5018 ;;  rxBuffer        2   10[BANK0 ] PTR unsigned char 
  5019 ;;		 -> hx_mainData(61), 
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  numTX           1   14[BANK0 ] unsigned char 
  5022 ;;  j               1   22[BANK0 ] unsigned char 
  5023 ;;  j               1   20[BANK0 ] unsigned char 
  5024 ;;  i               1   21[BANK0 ] unsigned char 
  5025 ;;  i               1   19[BANK0 ] unsigned char 
  5026 ;;  j               1   18[BANK0 ] unsigned char 
  5027 ;;  readbackTime    2   15[BANK0 ] unsigned int 
  5028 ;;  tempByte        1   26[BANK0 ] unsigned char 
  5029 ;;  readbackComm    1   25[BANK0 ] unsigned char 
  5030 ;;  portAVal        1   24[BANK0 ] unsigned char 
  5031 ;;  bitVal          1   23[BANK0 ] unsigned char 
  5032 ;;  oddParityCal    1   17[BANK0 ] unsigned char 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      void 
  5035 ;; Registers used:
  5036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5042 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5043 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5044 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5045 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5046 ;;Total ram usage:       20 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:    8
  5049 ;; This function calls:
  5050 ;;		_hxOddParityCalc
  5051 ;; This function is called by:
  5052 ;;		_run_SPPCarbon_test
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text8
  5057  0010CA                     __ptext8:
  5058                           	opt stack 0
  5059  0010CA                     _hxSPPCarbonCheckBusy_test:
  5060                           	opt stack 21
  5061                           
  5062                           ;incstack = 0
  5063                           ;hxSPPCarbonCheckBusy_test@numTX stored from wreg
  5064  0010CA  0100               	movlb	0	; () banked
  5065  0010CC  6F6E               	movwf	hxSPPCarbonCheckBusy_test@numTX& (0+255),b
  5066                           
  5067                           ;HX_SPP_CARBON.c: 595: uint8_t tempByte;
  5068                           ;HX_SPP_CARBON.c: 596: uint8_t readbackCommState;
  5069                           ;HX_SPP_CARBON.c: 597: uint8_t bitVal;
  5070                           ;HX_SPP_CARBON.c: 598: uint16_t readbackTimer;
  5071                           ;HX_SPP_CARBON.c: 599: uint8_t oddParityCalc = 0;
  5072  0010CE  0E00               	movlw	0
  5073  0010D0  0100               	movlb	0	; () banked
  5074  0010D2  6F71               	movwf	hxSPPCarbonCheckBusy_test@oddParityCalc& (0+255),b
  5075                           
  5076                           ;HX_SPP_CARBON.c: 600: uint8_t portAVal = 0;
  5077  0010D4  0E00               	movlw	0
  5078  0010D6  6F78               	movwf	hxSPPCarbonCheckBusy_test@portAVal& (0+255),b
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;HX_SPP_CARBON.c: 602: oddParityCalc = hxOddParityCalc(txBuffer, 3);
  5082  0010D8  C068  F060         	movff	hxSPPCarbonCheckBusy_test@txBuffer,hxOddParityCalc@buff
  5083  0010DC  C069  F061         	movff	hxSPPCarbonCheckBusy_test@txBuffer+1,hxOddParityCalc@buff+1
  5084  0010E0  0E03               	movlw	3
  5085  0010E2  6F62               	movwf	hxOddParityCalc@size& (0+255),b
  5086  0010E4  EC17  F01B         	call	_hxOddParityCalc	;wreg free
  5087  0010E8  0100               	movlb	0	; () banked
  5088  0010EA  6F71               	movwf	hxSPPCarbonCheckBusy_test@oddParityCalc& (0+255),b
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;HX_SPP_CARBON.c: 614: tempByte = 0xA0;
  5092  0010EC  0EA0               	movlw	160
  5093  0010EE  6F7A               	movwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),b
  5094                           
  5095                           ; BSR set to: 0
  5096                           ;HX_SPP_CARBON.c: 615: if (tempByte & 0x80){
  5097  0010F0  AF7A               	btfss	hxSPPCarbonCheckBusy_test@tempByte& (0+255),7,b
  5098  0010F2  D00C               	goto	l700
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;HX_SPP_CARBON.c: 617: LATA = 0x01;
  5102  0010F4  0E01               	movlw	1
  5103  0010F6  6E83               	movwf	3971,c	;volatile
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;HX_SPP_CARBON.c: 618: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5107  0010F8  0E05               	movlw	5
  5108  0010FA                     u9497:
  5109  0010FA  2EE8               	decfsz	wreg,f,c
  5110  0010FC  D7FE               	bra	u9497
  5111  0010FE  F000               	nop	
  5112                           
  5113                           ;HX_SPP_CARBON.c: 619: LATA = 0x03;
  5114  001100  0E03               	movlw	3
  5115  001102  6E83               	movwf	3971,c	;volatile
  5116                           
  5117                           ;HX_SPP_CARBON.c: 620: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5118  001104  0E05               	movlw	5
  5119  001106                     u9507:
  5120  001106  2EE8               	decfsz	wreg,f,c
  5121  001108  D7FE               	bra	u9507
  5122  00110A  D00B               	goto	L18
  5123  00110C                     l700:
  5124                           
  5125                           ;HX_SPP_CARBON.c: 623: else{
  5126                           ;HX_SPP_CARBON.c: 624: LATA = 0x01;
  5127  00110C  0E01               	movlw	1
  5128  00110E  6E83               	movwf	3971,c	;volatile
  5129                           
  5130                           ;HX_SPP_CARBON.c: 625: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5131  001110  0E05               	movlw	5
  5132  001112                     u9517:
  5133  001112  2EE8               	decfsz	wreg,f,c
  5134  001114  D7FE               	bra	u9517
  5135  001116  F000               	nop	
  5136                           
  5137                           ;HX_SPP_CARBON.c: 626: LATA = 0x00;
  5138  001118  0E00               	movlw	0
  5139  00111A  6E83               	movwf	3971,c	;volatile
  5140                           
  5141                           ;HX_SPP_CARBON.c: 627: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5142  00111C  0E05               	movlw	5
  5143  00111E                     u9527:
  5144  00111E  2EE8               	decfsz	wreg,f,c
  5145  001120  D7FE               	bra	u9527
  5146  001122                     L18:
  5147  001122  F000               	nop	
  5148                           
  5149                           ;HX_SPP_CARBON.c: 628: LATA = 0x01;
  5150  001124  0E01               	movlw	1
  5151  001126  6E83               	movwf	3971,c	;volatile
  5152                           
  5153                           ;HX_SPP_CARBON.c: 629: }
  5154                           ;HX_SPP_CARBON.c: 630: for (uint8_t j = 1; j < 4; j++){
  5155  001128  0E01               	movlw	1
  5156  00112A  0100               	movlb	0	; () banked
  5157  00112C  6F72               	movwf	hxSPPCarbonCheckBusy_test@j& (0+255),b
  5158  00112E                     l11022:
  5159                           
  5160                           ; BSR set to: 0
  5161  00112E  0E03               	movlw	3
  5162  001130  6572               	cpfsgt	hxSPPCarbonCheckBusy_test@j& (0+255),b
  5163  001132  D001               	goto	l702
  5164  001134  D016               	goto	u7820
  5165  001136                     l702:
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;HX_SPP_CARBON.c: 631: tempByte = tempByte << 1;
  5169                           
  5170                           ; BSR set to: 0
  5171  001136  517A               	movf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),w,b
  5172  001138  257A               	addwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),w,b
  5173  00113A  6F7A               	movwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),b
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;HX_SPP_CARBON.c: 632: if (tempByte & 0x80){
  5177  00113C  AF7A               	btfss	hxSPPCarbonCheckBusy_test@tempByte& (0+255),7,b
  5178  00113E  D006               	goto	l704
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;HX_SPP_CARBON.c: 634: LATA = 0x03;
  5182  001140  0E03               	movlw	3
  5183  001142  6E83               	movwf	3971,c	;volatile
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;HX_SPP_CARBON.c: 635: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5187  001144  0E05               	movlw	5
  5188  001146                     u9537:
  5189  001146  2EE8               	decfsz	wreg,f,c
  5190  001148  D7FE               	bra	u9537
  5191  00114A  D005               	goto	L19
  5192  00114C                     l704:
  5193                           
  5194                           ;HX_SPP_CARBON.c: 638: else{
  5195                           ;HX_SPP_CARBON.c: 639: LATA = 0x00;
  5196  00114C  0E00               	movlw	0
  5197  00114E  6E83               	movwf	3971,c	;volatile
  5198                           
  5199                           ;HX_SPP_CARBON.c: 640: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5200  001150  0E05               	movlw	5
  5201  001152                     u9547:
  5202  001152  2EE8               	decfsz	wreg,f,c
  5203  001154  D7FE               	bra	u9547
  5204  001156                     L19:
  5205  001156  F000               	nop	
  5206                           
  5207                           ;HX_SPP_CARBON.c: 641: LATA = 0x01;
  5208  001158  0E01               	movlw	1
  5209  00115A  6E83               	movwf	3971,c	;volatile
  5210  00115C  0100               	movlb	0	; () banked
  5211  00115E  2B72               	incf	hxSPPCarbonCheckBusy_test@j& (0+255),f,b
  5212  001160  D7E6               	goto	l11022
  5213  001162                     u7820:
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;HX_SPP_CARBON.c: 642: }
  5217                           ;HX_SPP_CARBON.c: 643: }
  5218                           ;HX_SPP_CARBON.c: 645: for (uint8_t i = 0; i < numTX; i++){
  5219                           
  5220                           ; BSR set to: 0
  5221  001162  0E00               	movlw	0
  5222  001164  6F73               	movwf	hxSPPCarbonCheckBusy_test@i& (0+255),b
  5223  001166  D044               	goto	l706
  5224  001168                     
  5225                           ; BSR set to: 0
  5226                           ;HX_SPP_CARBON.c: 647: tempByte = txBuffer[i];
  5227                           
  5228                           ; BSR set to: 0
  5229  001168  5173               	movf	hxSPPCarbonCheckBusy_test@i& (0+255),w,b
  5230  00116A  0D01               	mullw	1
  5231  00116C  50F3               	movf	prodl,w,c
  5232  00116E  2568               	addwf	hxSPPCarbonCheckBusy_test@txBuffer& (0+255),w,b
  5233  001170  6ED9               	movwf	fsr2l,c
  5234  001172  50F4               	movf	prodh,w,c
  5235  001174  2169               	addwfc	(hxSPPCarbonCheckBusy_test@txBuffer+1)& (0+255),w,b
  5236  001176  6EDA               	movwf	fsr2h,c
  5237  001178  50DF               	movf	indf2,w,c
  5238  00117A  6F7A               	movwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),b
  5239                           
  5240                           ; BSR set to: 0
  5241                           ;HX_SPP_CARBON.c: 648: if (tempByte & 0x80){
  5242  00117C  AF7A               	btfss	hxSPPCarbonCheckBusy_test@tempByte& (0+255),7,b
  5243  00117E  D00C               	goto	l708
  5244                           
  5245                           ; BSR set to: 0
  5246                           ;HX_SPP_CARBON.c: 650: LATA = 0x01;
  5247  001180  0E01               	movlw	1
  5248  001182  6E83               	movwf	3971,c	;volatile
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;HX_SPP_CARBON.c: 651: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5252  001184  0E05               	movlw	5
  5253  001186                     u9557:
  5254  001186  2EE8               	decfsz	wreg,f,c
  5255  001188  D7FE               	bra	u9557
  5256  00118A  F000               	nop	
  5257                           
  5258                           ;HX_SPP_CARBON.c: 652: LATA = 0x03;
  5259  00118C  0E03               	movlw	3
  5260  00118E  6E83               	movwf	3971,c	;volatile
  5261                           
  5262                           ;HX_SPP_CARBON.c: 653: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5263  001190  0E05               	movlw	5
  5264  001192                     u9567:
  5265  001192  2EE8               	decfsz	wreg,f,c
  5266  001194  D7FE               	bra	u9567
  5267  001196  D00B               	goto	L20
  5268  001198                     l708:
  5269                           
  5270                           ;HX_SPP_CARBON.c: 656: else{
  5271                           ;HX_SPP_CARBON.c: 657: LATA = 0x01;
  5272  001198  0E01               	movlw	1
  5273  00119A  6E83               	movwf	3971,c	;volatile
  5274                           
  5275                           ;HX_SPP_CARBON.c: 658: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5276  00119C  0E05               	movlw	5
  5277  00119E                     u9577:
  5278  00119E  2EE8               	decfsz	wreg,f,c
  5279  0011A0  D7FE               	bra	u9577
  5280  0011A2  F000               	nop	
  5281                           
  5282                           ;HX_SPP_CARBON.c: 659: LATA = 0x00;
  5283  0011A4  0E00               	movlw	0
  5284  0011A6  6E83               	movwf	3971,c	;volatile
  5285                           
  5286                           ;HX_SPP_CARBON.c: 660: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5287  0011A8  0E05               	movlw	5
  5288  0011AA                     u9587:
  5289  0011AA  2EE8               	decfsz	wreg,f,c
  5290  0011AC  D7FE               	bra	u9587
  5291  0011AE                     L20:
  5292  0011AE  F000               	nop	
  5293                           
  5294                           ;HX_SPP_CARBON.c: 661: LATA = 0x01;
  5295  0011B0  0E01               	movlw	1
  5296  0011B2  6E83               	movwf	3971,c	;volatile
  5297                           
  5298                           ;HX_SPP_CARBON.c: 662: }
  5299                           ;HX_SPP_CARBON.c: 663: for (uint8_t j = 1; j < 8; j++){
  5300  0011B4  0E01               	movlw	1
  5301  0011B6  0100               	movlb	0	; () banked
  5302  0011B8  6F74               	movwf	hxSPPCarbonCheckBusy_test@j_939& (0+255),b
  5303  0011BA                     l11068:
  5304                           
  5305                           ; BSR set to: 0
  5306  0011BA  0E07               	movlw	7
  5307  0011BC  6574               	cpfsgt	hxSPPCarbonCheckBusy_test@j_939& (0+255),b
  5308  0011BE  D001               	goto	l710
  5309  0011C0  D016               	goto	u7860
  5310  0011C2                     l710:
  5311                           
  5312                           ; BSR set to: 0
  5313                           ;HX_SPP_CARBON.c: 664: tempByte = tempByte << 1;
  5314                           
  5315                           ; BSR set to: 0
  5316  0011C2  517A               	movf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),w,b
  5317  0011C4  257A               	addwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),w,b
  5318  0011C6  6F7A               	movwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),b
  5319                           
  5320                           ; BSR set to: 0
  5321                           ;HX_SPP_CARBON.c: 665: if (tempByte & 0x80){
  5322  0011C8  AF7A               	btfss	hxSPPCarbonCheckBusy_test@tempByte& (0+255),7,b
  5323  0011CA  D006               	goto	l712
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;HX_SPP_CARBON.c: 667: LATA = 0x03;
  5327  0011CC  0E03               	movlw	3
  5328  0011CE  6E83               	movwf	3971,c	;volatile
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;HX_SPP_CARBON.c: 668: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5332  0011D0  0E05               	movlw	5
  5333  0011D2                     u9597:
  5334  0011D2  2EE8               	decfsz	wreg,f,c
  5335  0011D4  D7FE               	bra	u9597
  5336  0011D6  D005               	goto	L21
  5337  0011D8                     l712:
  5338                           
  5339                           ;HX_SPP_CARBON.c: 671: else{
  5340                           ;HX_SPP_CARBON.c: 672: LATA = 0x00;
  5341  0011D8  0E00               	movlw	0
  5342  0011DA  6E83               	movwf	3971,c	;volatile
  5343                           
  5344                           ;HX_SPP_CARBON.c: 673: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5345  0011DC  0E05               	movlw	5
  5346  0011DE                     u9607:
  5347  0011DE  2EE8               	decfsz	wreg,f,c
  5348  0011E0  D7FE               	bra	u9607
  5349  0011E2                     L21:
  5350  0011E2  F000               	nop	
  5351                           
  5352                           ;HX_SPP_CARBON.c: 674: LATA = 0x01;
  5353  0011E4  0E01               	movlw	1
  5354  0011E6  6E83               	movwf	3971,c	;volatile
  5355  0011E8  0100               	movlb	0	; () banked
  5356  0011EA  2B74               	incf	hxSPPCarbonCheckBusy_test@j_939& (0+255),f,b
  5357  0011EC  D7E6               	goto	l11068
  5358  0011EE                     u7860:
  5359                           
  5360                           ; BSR set to: 0
  5361                           
  5362                           ; BSR set to: 0
  5363  0011EE  2B73               	incf	hxSPPCarbonCheckBusy_test@i& (0+255),f,b
  5364  0011F0                     l706:
  5365                           
  5366                           ; BSR set to: 0
  5367                           
  5368                           ; BSR set to: 0
  5369  0011F0  516E               	movf	hxSPPCarbonCheckBusy_test@numTX& (0+255),w,b
  5370  0011F2  5D73               	subwf	hxSPPCarbonCheckBusy_test@i& (0+255),w,b
  5371  0011F4  A0D8               	btfss	status,0,c
  5372  0011F6  D7B8               	goto	l707
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;HX_SPP_CARBON.c: 675: }
  5376                           ;HX_SPP_CARBON.c: 676: }
  5377                           ;HX_SPP_CARBON.c: 677: }
  5378                           ;HX_SPP_CARBON.c: 680: if (oddParityCalc)
  5379                           
  5380                           ; BSR set to: 0
  5381  0011F8  5171               	movf	hxSPPCarbonCheckBusy_test@oddParityCalc& (0+255),w,b
  5382  0011FA  B4D8               	btfsc	status,2,c
  5383  0011FC  D006               	goto	l715
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;HX_SPP_CARBON.c: 681: {
  5387                           ;HX_SPP_CARBON.c: 682: LATA = 0x03;
  5388  0011FE  0E03               	movlw	3
  5389  001200  6E83               	movwf	3971,c	;volatile
  5390                           
  5391                           ; BSR set to: 0
  5392                           ;HX_SPP_CARBON.c: 683: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5393  001202  0E05               	movlw	5
  5394  001204                     u9617:
  5395  001204  2EE8               	decfsz	wreg,f,c
  5396  001206  D7FE               	bra	u9617
  5397  001208  D005               	goto	L35
  5398  00120A                     l715:
  5399                           
  5400                           ;HX_SPP_CARBON.c: 686: else
  5401                           ;HX_SPP_CARBON.c: 687: {
  5402                           ;HX_SPP_CARBON.c: 688: LATA = 0x00;
  5403  00120A  0E00               	movlw	0
  5404  00120C  6E83               	movwf	3971,c	;volatile
  5405                           
  5406                           ;HX_SPP_CARBON.c: 689: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5407  00120E  0E05               	movlw	5
  5408  001210                     u9627:
  5409  001210  2EE8               	decfsz	wreg,f,c
  5410  001212  D7FE               	bra	u9627
  5411  001214                     L35:
  5412  001214  F000               	nop	
  5413                           
  5414                           ;HX_SPP_CARBON.c: 690: LATA = 0x01;
  5415  001216  0E01               	movlw	1
  5416  001218  6E83               	movwf	3971,c	;volatile
  5417                           
  5418                           ;HX_SPP_CARBON.c: 691: }
  5419                           ;HX_SPP_CARBON.c: 694: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5420  00121A  0E05               	movlw	5
  5421  00121C                     u9637:
  5422  00121C  2EE8               	decfsz	wreg,f,c
  5423  00121E  D7FE               	bra	u9637
  5424  001220  F000               	nop	
  5425                           
  5426                           ;HX_SPP_CARBON.c: 695: LATA = 0x00;
  5427  001222  0E00               	movlw	0
  5428  001224  6E83               	movwf	3971,c	;volatile
  5429                           
  5430                           ;HX_SPP_CARBON.c: 696: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5431  001226  0E05               	movlw	5
  5432  001228                     u9647:
  5433  001228  2EE8               	decfsz	wreg,f,c
  5434  00122A  D7FE               	bra	u9647
  5435  00122C  F000               	nop	
  5436                           
  5437                           ;HX_SPP_CARBON.c: 702: hx_state = 0x10;
  5438  00122E  0E10               	movlw	16
  5439  001230  6E45               	movwf	_hx_state,c
  5440                           
  5441                           ;HX_SPP_CARBON.c: 703: rxBuffer[0] = 0x10;
  5442  001232  C06A  FFD9         	movff	hxSPPCarbonCheckBusy_test@rxBuffer,fsr2l
  5443  001236  C06B  FFDA         	movff	hxSPPCarbonCheckBusy_test@rxBuffer+1,fsr2h
  5444  00123A  0E10               	movlw	16
  5445  00123C  6EDF               	movwf	indf2,c
  5446                           
  5447                           ;HX_SPP_CARBON.c: 704: rxBuffer[1] = 0x00;
  5448  00123E  0100               	movlb	0	; () banked
  5449  001240  EE20 F001          	lfsr	2,1
  5450  001244  516A               	movf	hxSPPCarbonCheckBusy_test@rxBuffer& (0+255),w,b
  5451  001246  26D9               	addwf	fsr2l,f,c
  5452  001248  516B               	movf	(hxSPPCarbonCheckBusy_test@rxBuffer+1)& (0+255),w,b
  5453  00124A  22DA               	addwfc	fsr2h,f,c
  5454  00124C  0E00               	movlw	0
  5455  00124E  6EDF               	movwf	indf2,c
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;HX_SPP_CARBON.c: 706: for (uint8_t i = 0; i < numRX; i++)
  5459  001250  0E00               	movlw	0
  5460  001252  6F75               	movwf	hxSPPCarbonCheckBusy_test@i_940& (0+255),b
  5461  001254  D0A8               	goto	l717
  5462  001256                     
  5463                           ; BSR set to: 0
  5464                           ;HX_SPP_CARBON.c: 707: {
  5465                           ;HX_SPP_CARBON.c: 708: tempByte = 0;
  5466                           
  5467                           ; BSR set to: 0
  5468  001256  0E00               	movlw	0
  5469  001258  6F7A               	movwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),b
  5470                           
  5471                           ;HX_SPP_CARBON.c: 710: for(uint8_t j = 0; j < 8; j++)
  5472  00125A  0E00               	movlw	0
  5473  00125C  6F76               	movwf	hxSPPCarbonCheckBusy_test@j_941& (0+255),b
  5474  00125E                     l11120:
  5475                           
  5476                           ; BSR set to: 0
  5477  00125E  0E07               	movlw	7
  5478  001260  6576               	cpfsgt	hxSPPCarbonCheckBusy_test@j_941& (0+255),b
  5479  001262  D001               	goto	l719
  5480  001264  D088               	goto	u8090
  5481  001266                     l719:
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;HX_SPP_CARBON.c: 711: {
  5485                           ;HX_SPP_CARBON.c: 712: LATA = 0x01;
  5486                           
  5487                           ; BSR set to: 0
  5488  001266  0E01               	movlw	1
  5489  001268  6E83               	movwf	3971,c	;volatile
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;HX_SPP_CARBON.c: 713: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5493  00126A  0E05               	movlw	5
  5494  00126C                     u9657:
  5495  00126C  2EE8               	decfsz	wreg,f,c
  5496  00126E  D7FE               	bra	u9657
  5497  001270  F000               	nop	
  5498                           
  5499                           ;HX_SPP_CARBON.c: 714: LATA = 0x03;
  5500  001272  0E03               	movlw	3
  5501  001274  6E83               	movwf	3971,c	;volatile
  5502                           
  5503                           ;HX_SPP_CARBON.c: 715: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5504  001276  0E05               	movlw	5
  5505  001278                     u9667:
  5506  001278  2EE8               	decfsz	wreg,f,c
  5507  00127A  D7FE               	bra	u9667
  5508  00127C  F000               	nop	
  5509                           
  5510                           ;HX_SPP_CARBON.c: 716: LATA = 0x00;
  5511  00127E  0E00               	movlw	0
  5512  001280  6E83               	movwf	3971,c	;volatile
  5513                           
  5514                           ;HX_SPP_CARBON.c: 717: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5515  001282  0E05               	movlw	5
  5516  001284                     u9677:
  5517  001284  2EE8               	decfsz	wreg,f,c
  5518  001286  D7FE               	bra	u9677
  5519  001288  F000               	nop	
  5520                           
  5521                           ;HX_SPP_CARBON.c: 721: tempByte = tempByte << 1;
  5522  00128A  0100               	movlb	0	; () banked
  5523  00128C  517A               	movf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),w,b
  5524  00128E  257A               	addwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),w,b
  5525  001290  6F7A               	movwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),b
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;HX_SPP_CARBON.c: 722: readbackCommState = 0;
  5529  001292  0E00               	movlw	0
  5530  001294  6F79               	movwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),b
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;HX_SPP_CARBON.c: 723: bitVal = 2;
  5534  001296  0E02               	movlw	2
  5535  001298  6F77               	movwf	hxSPPCarbonCheckBusy_test@bitVal& (0+255),b
  5536                           
  5537                           ; BSR set to: 0
  5538                           ;HX_SPP_CARBON.c: 725: readbackTimer = 40;
  5539  00129A  0E00               	movlw	0
  5540  00129C  6F70               	movwf	(hxSPPCarbonCheckBusy_test@readbackTimer+1)& (0+255),b
  5541  00129E  0E28               	movlw	40
  5542  0012A0  6F6F               	movwf	hxSPPCarbonCheckBusy_test@readbackTimer& (0+255),b
  5543                           
  5544                           ;HX_SPP_CARBON.c: 726: while(readbackTimer--)
  5545  0012A2  D048               	goto	l733
  5546  0012A4                     l722:
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;HX_SPP_CARBON.c: 727: {
  5550                           ;HX_SPP_CARBON.c: 728: portAVal = PORTA;
  5551  0012A4  CF8D F078          	movff	3981,hxSPPCarbonCheckBusy_test@portAVal	;volatile
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;HX_SPP_CARBON.c: 729: if (readbackCommState == 0)
  5555  0012A8  5179               	movf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),w,b
  5556  0012AA  A4D8               	btfss	status,2,c
  5557  0012AC  D00E               	goto	l723
  5558                           
  5559                           ; BSR set to: 0
  5560                           ;HX_SPP_CARBON.c: 730: {
  5561                           ;HX_SPP_CARBON.c: 733: if (1 == portAVal & 0x01)
  5562  0012AE  0578               	decf	hxSPPCarbonCheckBusy_test@portAVal& (0+255),w,b
  5563  0012B0  A4D8               	btfss	status,2,c
  5564  0012B2  D002               	goto	u7910
  5565  0012B4  0E01               	movlw	1
  5566  0012B6  D001               	goto	u7920
  5567  0012B8                     u7910:
  5568  0012B8  0E00               	movlw	0
  5569  0012BA                     u7920:
  5570  0012BA  6F6C               	movwf	??_hxSPPCarbonCheckBusy_test& (0+255),b
  5571  0012BC  6B6D               	clrf	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),b
  5572  0012BE  A16C               	btfss	??_hxSPPCarbonCheckBusy_test& (0+255),0,b
  5573  0012C0  D039               	goto	l733
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;HX_SPP_CARBON.c: 734: {
  5577                           ;HX_SPP_CARBON.c: 735: readbackCommState = 1;
  5578  0012C2  0E01               	movlw	1
  5579  0012C4  6F79               	movwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),b
  5580                           
  5581                           ;HX_SPP_CARBON.c: 736: bitVal = 2;
  5582  0012C6  0E02               	movlw	2
  5583  0012C8  D034               	goto	L24
  5584  0012CA                     l723:
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;HX_SPP_CARBON.c: 739: else if (readbackCommState == 1)
  5588                           
  5589                           ; BSR set to: 0
  5590  0012CA  0579               	decf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),w,b
  5591  0012CC  A4D8               	btfss	status,2,c
  5592  0012CE  D00E               	goto	l726
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;HX_SPP_CARBON.c: 740: {
  5596                           ;HX_SPP_CARBON.c: 742: if (0 == portAVal & 0x01)
  5597  0012D0  5178               	movf	hxSPPCarbonCheckBusy_test@portAVal& (0+255),w,b
  5598  0012D2  A4D8               	btfss	status,2,c
  5599  0012D4  D002               	goto	u7950
  5600  0012D6  0E01               	movlw	1
  5601  0012D8  D001               	goto	u7960
  5602  0012DA                     u7950:
  5603  0012DA  0E00               	movlw	0
  5604  0012DC                     u7960:
  5605  0012DC  6F6C               	movwf	??_hxSPPCarbonCheckBusy_test& (0+255),b
  5606  0012DE  6B6D               	clrf	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),b
  5607  0012E0  A16C               	btfss	??_hxSPPCarbonCheckBusy_test& (0+255),0,b
  5608  0012E2  D028               	goto	l733
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;HX_SPP_CARBON.c: 743: {
  5612                           ;HX_SPP_CARBON.c: 744: readbackCommState = 2;
  5613  0012E4  0E02               	movlw	2
  5614  0012E6  6F79               	movwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),b
  5615                           
  5616                           ;HX_SPP_CARBON.c: 745: bitVal = 0;
  5617  0012E8  0E00               	movlw	0
  5618  0012EA  D023               	goto	L24
  5619  0012EC                     l726:
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;HX_SPP_CARBON.c: 748: else if (readbackCommState == 2)
  5623                           
  5624                           ; BSR set to: 0
  5625  0012EC  0E02               	movlw	2
  5626  0012EE  1979               	xorwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),w,b
  5627  0012F0  A4D8               	btfss	status,2,c
  5628  0012F2  D00E               	goto	l729
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;HX_SPP_CARBON.c: 749: {
  5632                           ;HX_SPP_CARBON.c: 751: if (1 == portAVal & 0x01)
  5633  0012F4  0578               	decf	hxSPPCarbonCheckBusy_test@portAVal& (0+255),w,b
  5634  0012F6  A4D8               	btfss	status,2,c
  5635  0012F8  D002               	goto	u7990
  5636  0012FA  0E01               	movlw	1
  5637  0012FC  D001               	goto	u8000
  5638  0012FE                     u7990:
  5639  0012FE  0E00               	movlw	0
  5640  001300                     u8000:
  5641  001300  6F6C               	movwf	??_hxSPPCarbonCheckBusy_test& (0+255),b
  5642  001302  6B6D               	clrf	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),b
  5643  001304  A16C               	btfss	??_hxSPPCarbonCheckBusy_test& (0+255),0,b
  5644  001306  D016               	goto	l733
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;HX_SPP_CARBON.c: 752: {
  5648                           ;HX_SPP_CARBON.c: 753: readbackCommState = 3;
  5649  001308  0E03               	movlw	3
  5650  00130A  6F79               	movwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),b
  5651                           
  5652                           ;HX_SPP_CARBON.c: 754: bitVal = 4;
  5653  00130C  0E04               	movlw	4
  5654  00130E  D011               	goto	L24
  5655  001310                     l729:
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;HX_SPP_CARBON.c: 757: else if (readbackCommState == 3)
  5659                           
  5660                           ; BSR set to: 0
  5661  001310  0E03               	movlw	3
  5662  001312  1979               	xorwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),w,b
  5663  001314  A4D8               	btfss	status,2,c
  5664  001316  D00E               	goto	l733
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;HX_SPP_CARBON.c: 758: {
  5668                           ;HX_SPP_CARBON.c: 760: if (0 == portAVal & 0x01)
  5669  001318  5178               	movf	hxSPPCarbonCheckBusy_test@portAVal& (0+255),w,b
  5670  00131A  A4D8               	btfss	status,2,c
  5671  00131C  D002               	goto	u8030
  5672  00131E  0E01               	movlw	1
  5673  001320  D001               	goto	u8040
  5674  001322                     u8030:
  5675  001322  0E00               	movlw	0
  5676  001324                     u8040:
  5677  001324  6F6C               	movwf	??_hxSPPCarbonCheckBusy_test& (0+255),b
  5678  001326  6B6D               	clrf	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),b
  5679  001328  A16C               	btfss	??_hxSPPCarbonCheckBusy_test& (0+255),0,b
  5680  00132A  D004               	goto	l733
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;HX_SPP_CARBON.c: 761: {
  5684                           ;HX_SPP_CARBON.c: 762: readbackCommState = 3;
  5685  00132C  0E03               	movlw	3
  5686  00132E  6F79               	movwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),b
  5687                           
  5688                           ;HX_SPP_CARBON.c: 763: bitVal = 1;
  5689  001330  0E01               	movlw	1
  5690  001332                     L24:
  5691  001332  6F77               	movwf	hxSPPCarbonCheckBusy_test@bitVal& (0+255),b
  5692  001334                     l733:
  5693                           
  5694                           ; BSR set to: 0
  5695                           
  5696                           ; BSR set to: 0
  5697                           
  5698                           ; BSR set to: 0
  5699                           
  5700                           ; BSR set to: 0
  5701                           
  5702                           ; BSR set to: 0
  5703                           
  5704                           ; BSR set to: 0
  5705                           
  5706                           ; BSR set to: 0
  5707  001334  076F               	decf	hxSPPCarbonCheckBusy_test@readbackTimer& (0+255),f,b
  5708  001336  A0D8               	btfss	status,0,c
  5709  001338  0770               	decf	(hxSPPCarbonCheckBusy_test@readbackTimer+1)& (0+255),f,b
  5710  00133A  296F               	incf	hxSPPCarbonCheckBusy_test@readbackTimer& (0+255),w,b
  5711  00133C  E1B3               	bnz	l722
  5712  00133E  2970               	incf	(hxSPPCarbonCheckBusy_test@readbackTimer+1)& (0+255),w,b
  5713  001340  A4D8               	btfss	status,2,c
  5714  001342  D7B0               	goto	l722
  5715                           
  5716                           ; BSR set to: 0
  5717                           ;HX_SPP_CARBON.c: 764: }
  5718                           ;HX_SPP_CARBON.c: 765: }
  5719                           ;HX_SPP_CARBON.c: 766: }
  5720                           ;HX_SPP_CARBON.c: 767: if(bitVal == 0)
  5721                           
  5722                           ; BSR set to: 0
  5723  001344  5177               	movf	hxSPPCarbonCheckBusy_test@bitVal& (0+255),w,b
  5724  001346  B4D8               	btfsc	status,2,c
  5725  001348  D014               	goto	l738
  5726                           
  5727                           ; BSR set to: 0
  5728                           ;HX_SPP_CARBON.c: 772: {
  5729                           ;HX_SPP_CARBON.c: 773: tempByte = tempByte++;
  5730                           
  5731                           ; BSR set to: 0
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;HX_SPP_CARBON.c: 768: {
  5735                           ;HX_SPP_CARBON.c: 770: }
  5736  00134A  0577               	decf	hxSPPCarbonCheckBusy_test@bitVal& (0+255),w,b
  5737  00134C  A4D8               	btfss	status,2,c
  5738  00134E  D002               	goto	l737
  5739                           
  5740                           ; BSR set to: 0
  5741  001350  2B7A               	incf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),f,b
  5742                           
  5743                           ;HX_SPP_CARBON.c: 774: }
  5744  001352  D00F               	goto	l738
  5745  001354                     l737:
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;HX_SPP_CARBON.c: 775: else
  5749                           ;HX_SPP_CARBON.c: 776: {
  5750                           ;HX_SPP_CARBON.c: 777: rxBuffer[0] = 0x11;
  5751                           
  5752                           ; BSR set to: 0
  5753  001354  C06A  FFD9         	movff	hxSPPCarbonCheckBusy_test@rxBuffer,fsr2l
  5754  001358  C06B  FFDA         	movff	hxSPPCarbonCheckBusy_test@rxBuffer+1,fsr2h
  5755  00135C  0E11               	movlw	17
  5756  00135E  6EDF               	movwf	indf2,c
  5757                           
  5758                           ; BSR set to: 0
  5759                           ;HX_SPP_CARBON.c: 778: rxBuffer[1] = 0x00;
  5760  001360  EE20 F001          	lfsr	2,1
  5761  001364  516A               	movf	hxSPPCarbonCheckBusy_test@rxBuffer& (0+255),w,b
  5762  001366  26D9               	addwf	fsr2l,f,c
  5763  001368  516B               	movf	(hxSPPCarbonCheckBusy_test@rxBuffer+1)& (0+255),w,b
  5764  00136A  22DA               	addwfc	fsr2h,f,c
  5765  00136C  0E00               	movlw	0
  5766  00136E  6EDF               	movwf	indf2,c
  5767                           
  5768                           ;HX_SPP_CARBON.c: 779: break;
  5769  001370  D002               	goto	u8090
  5770  001372                     l738:
  5771                           
  5772                           ; BSR set to: 0
  5773                           
  5774                           ; BSR set to: 0
  5775                           
  5776                           ; BSR set to: 0
  5777  001372  2B76               	incf	hxSPPCarbonCheckBusy_test@j_941& (0+255),f,b
  5778  001374  D774               	goto	l11120
  5779  001376                     u8090:
  5780                           
  5781                           ; BSR set to: 0
  5782                           ;HX_SPP_CARBON.c: 780: }
  5783                           ;HX_SPP_CARBON.c: 781: }
  5784                           ;HX_SPP_CARBON.c: 782: if (rxBuffer[0] == 0x11)
  5785                           
  5786                           ; BSR set to: 0
  5787  001376  C06A  FFD9         	movff	hxSPPCarbonCheckBusy_test@rxBuffer,fsr2l
  5788  00137A  C06B  FFDA         	movff	hxSPPCarbonCheckBusy_test@rxBuffer+1,fsr2h
  5789  00137E  0E11               	movlw	17
  5790  001380  18DE               	xorwf	postinc2,w,c
  5791  001382  B4D8               	btfsc	status,2,c
  5792  001384  D014               	goto	u8110
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;HX_SPP_CARBON.c: 785: }
  5796                           ;HX_SPP_CARBON.c: 786: rxBuffer[i+1] = tempByte;
  5797                           
  5798                           ; BSR set to: 0
  5799                           
  5800                           ; BSR set to: 0
  5801                           ;HX_SPP_CARBON.c: 783: {
  5802                           ;HX_SPP_CARBON.c: 784: break;
  5803  001386  5175               	movf	hxSPPCarbonCheckBusy_test@i_940& (0+255),w,b
  5804  001388  6F6C               	movwf	??_hxSPPCarbonCheckBusy_test& (0+255),b
  5805  00138A  6B6D               	clrf	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),b
  5806  00138C  0E01               	movlw	1
  5807  00138E  276C               	addwf	??_hxSPPCarbonCheckBusy_test& (0+255),f,b
  5808  001390  0E00               	movlw	0
  5809  001392  236D               	addwfc	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),f,b
  5810  001394  516C               	movf	??_hxSPPCarbonCheckBusy_test& (0+255),w,b
  5811  001396  256A               	addwf	hxSPPCarbonCheckBusy_test@rxBuffer& (0+255),w,b
  5812  001398  6ED9               	movwf	fsr2l,c
  5813  00139A  516D               	movf	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),w,b
  5814  00139C  216B               	addwfc	(hxSPPCarbonCheckBusy_test@rxBuffer+1)& (0+255),w,b
  5815  00139E  6EDA               	movwf	fsr2h,c
  5816  0013A0  C07A  FFDF         	movff	hxSPPCarbonCheckBusy_test@tempByte,indf2
  5817                           
  5818                           ; BSR set to: 0
  5819  0013A4  2B75               	incf	hxSPPCarbonCheckBusy_test@i_940& (0+255),f,b
  5820  0013A6                     l717:
  5821                           
  5822                           ; BSR set to: 0
  5823                           
  5824                           ; BSR set to: 0
  5825  0013A6  5167               	movf	hxSPPCarbonCheckBusy_test@numRX& (0+255),w,b
  5826  0013A8  5D75               	subwf	hxSPPCarbonCheckBusy_test@i_940& (0+255),w,b
  5827  0013AA  A0D8               	btfss	status,0,c
  5828  0013AC  D754               	goto	l718
  5829  0013AE                     u8110:
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;HX_SPP_CARBON.c: 787: }
  5833                           ;HX_SPP_CARBON.c: 790: hx_state = 0x10;
  5834                           
  5835                           ; BSR set to: 0
  5836  0013AE  0E10               	movlw	16
  5837  0013B0  6E45               	movwf	_hx_state,c
  5838                           
  5839                           ;HX_SPP_CARBON.c: 791: LATA = 0x03;
  5840  0013B2  0E03               	movlw	3
  5841  0013B4  6E83               	movwf	3971,c	;volatile
  5842                           
  5843                           ; BSR set to: 0
  5844  0013B6  0012               	return		;funcret
  5845  0013B8                     __end_of_hxSPPCarbonCheckBusy_test:
  5846                           	opt stack 0
  5847                           tblptru	equ	0xFF8
  5848                           tblptrh	equ	0xFF7
  5849                           tblptrl	equ	0xFF6
  5850                           tablat	equ	0xFF5
  5851                           prodh	equ	0xFF4
  5852                           prodl	equ	0xFF3
  5853                           intcon	equ	0xFF2
  5854                           postinc0	equ	0xFEE
  5855                           wreg	equ	0xFE8
  5856                           postinc1	equ	0xFE6
  5857                           postdec1	equ	0xFE5
  5858                           fsr1h	equ	0xFE2
  5859                           fsr1l	equ	0xFE1
  5860                           indf2	equ	0xFDF
  5861                           postinc2	equ	0xFDE
  5862                           fsr2h	equ	0xFDA
  5863                           fsr2l	equ	0xFD9
  5864                           status	equ	0xFD8
  5865                           
  5866 ;; *************** function _hxOddParityCalc *****************
  5867 ;; Defined at:
  5868 ;;		line 795 in file "HX_SPP_CARBON.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;  buff            2    0[BANK0 ] PTR unsigned char 
  5871 ;;		 -> hx_inData(64), 
  5872 ;;  size            1    2[BANK0 ] unsigned char 
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;  j               1    4[BANK0 ] unsigned char 
  5875 ;;  i               1    3[BANK0 ] unsigned char 
  5876 ;;  temp            1    6[BANK0 ] unsigned char 
  5877 ;;  parity          1    5[BANK0 ] unsigned char 
  5878 ;; Return value:  Size  Location     Type
  5879 ;;                  1    wreg      unsigned char 
  5880 ;; Registers used:
  5881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5882 ;; Tracked objects:
  5883 ;;		On entry : 0/0
  5884 ;;		On exit  : 0/0
  5885 ;;		Unchanged: 0/0
  5886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5887 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5888 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5890 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5891 ;;Total ram usage:        7 bytes
  5892 ;; Hardware stack levels used:    1
  5893 ;; Hardware stack levels required when called:    7
  5894 ;; This function calls:
  5895 ;;		Nothing
  5896 ;; This function is called by:
  5897 ;;		_hxSPPCarbonReadReg_test
  5898 ;;		_hxSPPCarbonWriteReg_test
  5899 ;;		_hxSPPCarbonProgram_test
  5900 ;;		_hxSPPCarbonCheckBusy_test
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           	psect	text9
  5905  00362E                     __ptext9:
  5906                           	opt stack 0
  5907  00362E                     _hxOddParityCalc:
  5908                           	opt stack 20
  5909                           
  5910                           ;HX_SPP_CARBON.c: 797: uint8_t parity = 1;
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;incstack = 0
  5914  00362E  0E01               	movlw	1
  5915  003630  0100               	movlb	0	; () banked
  5916  003632  6F65               	movwf	hxOddParityCalc@parity& (0+255),b
  5917                           
  5918                           ;HX_SPP_CARBON.c: 798: uint8_t temp = 0;
  5919  003634  0E00               	movlw	0
  5920  003636  6F66               	movwf	hxOddParityCalc@temp& (0+255),b
  5921                           
  5922                           ;HX_SPP_CARBON.c: 799: for (uint8_t i = 0; i < size; i++)
  5923  003638  0E00               	movlw	0
  5924  00363A  6F63               	movwf	hxOddParityCalc@i& (0+255),b
  5925  00363C  D018               	goto	l744
  5926  00363E                     
  5927                           ; BSR set to: 0
  5928                           ;HX_SPP_CARBON.c: 800: {
  5929                           ;HX_SPP_CARBON.c: 801: temp = buff[i];
  5930                           
  5931                           ; BSR set to: 0
  5932  00363E  5163               	movf	hxOddParityCalc@i& (0+255),w,b
  5933  003640  0D01               	mullw	1
  5934  003642  50F3               	movf	prodl,w,c
  5935  003644  2560               	addwf	hxOddParityCalc@buff& (0+255),w,b
  5936  003646  6ED9               	movwf	fsr2l,c
  5937  003648  50F4               	movf	prodh,w,c
  5938  00364A  2161               	addwfc	(hxOddParityCalc@buff+1)& (0+255),w,b
  5939  00364C  6EDA               	movwf	fsr2h,c
  5940  00364E  50DF               	movf	indf2,w,c
  5941  003650  6F66               	movwf	hxOddParityCalc@temp& (0+255),b
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;HX_SPP_CARBON.c: 802: for (uint8_t j = 0; j < 8; j++)
  5945  003652  0E00               	movlw	0
  5946  003654  6F64               	movwf	hxOddParityCalc@j& (0+255),b
  5947  003656                     l9728:
  5948                           
  5949                           ; BSR set to: 0
  5950  003656  0E07               	movlw	7
  5951  003658  6564               	cpfsgt	hxOddParityCalc@j& (0+255),b
  5952  00365A  D001               	goto	l746
  5953  00365C  D007               	goto	u6840
  5954  00365E                     l746:
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;HX_SPP_CARBON.c: 803: {
  5958                           ;HX_SPP_CARBON.c: 804: if (temp & 0x80)
  5959  00365E  BF66               	btfsc	hxOddParityCalc@temp& (0+255),7,b
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;HX_SPP_CARBON.c: 805: {
  5963                           ;HX_SPP_CARBON.c: 806: parity++;
  5964  003660  2B65               	incf	hxOddParityCalc@parity& (0+255),f,b
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;HX_SPP_CARBON.c: 807: }
  5968                           ;HX_SPP_CARBON.c: 808: temp = temp << 1;
  5969                           
  5970                           ; BSR set to: 0
  5971  003662  5166               	movf	hxOddParityCalc@temp& (0+255),w,b
  5972  003664  2566               	addwf	hxOddParityCalc@temp& (0+255),w,b
  5973  003666  6F66               	movwf	hxOddParityCalc@temp& (0+255),b
  5974                           
  5975                           ; BSR set to: 0
  5976  003668  2B64               	incf	hxOddParityCalc@j& (0+255),f,b
  5977  00366A  D7F5               	goto	l9728
  5978  00366C                     u6840:
  5979                           
  5980                           ; BSR set to: 0
  5981                           
  5982                           ; BSR set to: 0
  5983  00366C  2B63               	incf	hxOddParityCalc@i& (0+255),f,b
  5984  00366E                     l744:
  5985                           
  5986                           ; BSR set to: 0
  5987                           
  5988                           ; BSR set to: 0
  5989  00366E  5162               	movf	hxOddParityCalc@size& (0+255),w,b
  5990  003670  5D63               	subwf	hxOddParityCalc@i& (0+255),w,b
  5991  003672  A0D8               	btfss	status,0,c
  5992  003674  D7E4               	goto	l745
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;HX_SPP_CARBON.c: 809: }
  5996                           ;HX_SPP_CARBON.c: 811: }
  5997                           ;HX_SPP_CARBON.c: 812: parity = parity & 0x01;
  5998                           
  5999                           ; BSR set to: 0
  6000  003676  5165               	movf	hxOddParityCalc@parity& (0+255),w,b
  6001  003678  0B01               	andlw	1
  6002  00367A  6F65               	movwf	hxOddParityCalc@parity& (0+255),b
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;HX_SPP_CARBON.c: 814: return parity;
  6006  00367C  5165               	movf	hxOddParityCalc@parity& (0+255),w,b
  6007  00367E  0012               	return	
  6008  003680                     __end_of_hxOddParityCalc:
  6009                           	opt stack 0
  6010                           tblptru	equ	0xFF8
  6011                           tblptrh	equ	0xFF7
  6012                           tblptrl	equ	0xFF6
  6013                           tablat	equ	0xFF5
  6014                           prodh	equ	0xFF4
  6015                           prodl	equ	0xFF3
  6016                           intcon	equ	0xFF2
  6017                           postinc0	equ	0xFEE
  6018                           wreg	equ	0xFE8
  6019                           postinc1	equ	0xFE6
  6020                           postdec1	equ	0xFE5
  6021                           fsr1h	equ	0xFE2
  6022                           fsr1l	equ	0xFE1
  6023                           indf2	equ	0xFDF
  6024                           postinc2	equ	0xFDE
  6025                           fsr2h	equ	0xFDA
  6026                           fsr2l	equ	0xFD9
  6027                           status	equ	0xFD8
  6028                           
  6029 ;; *************** function _run_I2C *****************
  6030 ;; Defined at:
  6031 ;;		line 14 in file "HX_I2C.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  hx_inData       2   24[BANK0 ] PTR unsigned char 
  6034 ;;		 -> hx_inData(64), 
  6035 ;;  size            1   26[BANK0 ] unsigned char 
  6036 ;; Auto vars:     Size  Location     Type
  6037 ;;  i               1    5[BANK2 ] unsigned char 
  6038 ;;  i               1    4[BANK2 ] unsigned char 
  6039 ;;  rxPkt          71   90[BANK2 ] struct TxRxPacket
  6040 ;;  txPkt          71   19[BANK2 ] struct TxRxPacket
  6041 ;;  stream          4    9[BANK2 ] PTR struct TxRxPacket[2]
  6042 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
  6043 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
  6044 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
  6045 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
  6046 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
  6047 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
  6048 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
  6049 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
  6050 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
  6051 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
  6052 ;;  data_index      2   17[BANK2 ] unsigned int 
  6053 ;;  slaveAddr       2    2[BANK2 ] unsigned int 
  6054 ;;  debugArr        2    0[BANK2 ] PTR unsigned char 
  6055 ;;  rx_index        1   16[BANK2 ] unsigned char 
  6056 ;;  mode            1   15[BANK2 ] unsigned char 
  6057 ;;  numRx           1   14[BANK2 ] unsigned char 
  6058 ;;  numTx           1   13[BANK2 ] unsigned char 
  6059 ;;  i               1    8[BANK2 ] unsigned char 
  6060 ;;  calc_checksu    1    7[BANK2 ] unsigned char 
  6061 ;;  checksum        1    6[BANK2 ] unsigned char 
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  1    wreg      void 
  6064 ;; Registers used:
  6065 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6071 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6072 ;;      Locals:         0       0       0     161       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6073 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6074 ;;      Totals:         0       4       0     161       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6075 ;;Total ram usage:      165 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:   10
  6078 ;; This function calls:
  6079 ;;		_calcChecksum
  6080 ;;		_readI2C
  6081 ;;		_streamI2C
  6082 ;;		_writeI2C
  6083 ;; This function is called by:
  6084 ;;		_main
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           	psect	text10
  6089  0009F4                     __ptext10:
  6090                           	opt stack 0
  6091  0009F4                     _run_I2C:
  6092                           	opt stack 20
  6093                           
  6094                           ;HX_I2C.c: 16: uint8_t mode = 0;
  6095                           
  6096                           ; BSR set to: 0
  6097                           ;incstack = 0
  6098  0009F4  0E00               	movlw	0
  6099  0009F6  0102               	movlb	2	; () banked
  6100  0009F8  6F0F               	movwf	run_I2C@mode& (0+255),b
  6101                           
  6102                           ;HX_I2C.c: 17: uint8_t numTx = 0;
  6103  0009FA  0E00               	movlw	0
  6104  0009FC  6F0D               	movwf	run_I2C@numTx& (0+255),b
  6105                           
  6106                           ;HX_I2C.c: 18: uint8_t numRx = 0;
  6107  0009FE  0E00               	movlw	0
  6108  000A00  6F0E               	movwf	run_I2C@numRx& (0+255),b
  6109                           
  6110                           ;HX_I2C.c: 19: uint16_t slaveAddr = 0;
  6111  000A02  0E00               	movlw	0
  6112  000A04  6F03               	movwf	(run_I2C@slaveAddr+1)& (0+255),b
  6113  000A06  0E00               	movlw	0
  6114  000A08  6F02               	movwf	run_I2C@slaveAddr& (0+255),b
  6115                           
  6116                           ;HX_I2C.c: 20: uint8_t checksum = 0;
  6117  000A0A  0E00               	movlw	0
  6118  000A0C  6F06               	movwf	run_I2C@checksum& (0+255),b
  6119                           
  6120                           ;HX_I2C.c: 21: uint16_t data_index = 0;
  6121  000A0E  0E00               	movlw	0
  6122  000A10  6F12               	movwf	(run_I2C@data_index+1)& (0+255),b
  6123  000A12  0E00               	movlw	0
  6124  000A14  6F11               	movwf	run_I2C@data_index& (0+255),b
  6125                           
  6126                           ;HX_I2C.c: 22: uint8_t calc_checksum = 0;
  6127  000A16  0E00               	movlw	0
  6128  000A18  6F07               	movwf	run_I2C@calc_checksum& (0+255),b
  6129                           
  6130                           ;HX_I2C.c: 23: uint8_t rx_index = 0;
  6131  000A1A  0E00               	movlw	0
  6132  000A1C  6F10               	movwf	run_I2C@rx_index& (0+255),b
  6133                           
  6134                           ;HX_I2C.c: 26: uint8_t * debugArr;
  6135                           ;HX_I2C.c: 28: uint8_t i = 0;
  6136  000A1E  0E00               	movlw	0
  6137  000A20  6F08               	movwf	run_I2C@i& (0+255),b
  6138                           
  6139                           ; BSR set to: 2
  6140                           ;HX_I2C.c: 30: txRxPkt txPkt;
  6141                           ;HX_I2C.c: 31: txRxPkt rxPkt;
  6142                           ;HX_I2C.c: 32: txRxPkt* stream[2];
  6143                           ;HX_I2C.c: 33: stream[0] = &txPkt;
  6144  000A22  0E13               	movlw	low run_I2C@txPkt
  6145  000A24  6F09               	movwf	run_I2C@stream& (0+255),b
  6146  000A26  0E02               	movlw	high run_I2C@txPkt
  6147  000A28  6F0A               	movwf	(run_I2C@stream+1)& (0+255),b
  6148                           
  6149                           ; BSR set to: 2
  6150                           ;HX_I2C.c: 34: stream[1] = &rxPkt;
  6151  000A2A  0E5A               	movlw	low run_I2C@rxPkt
  6152  000A2C  6F0B               	movwf	(run_I2C@stream+2)& (0+255),b
  6153  000A2E  0E02               	movlw	high run_I2C@rxPkt
  6154  000A30  6F0C               	movwf	(run_I2C@stream+3)& (0+255),b
  6155                           
  6156                           ;HX_I2C.c: 35: txPkt.txOrRx = 0;
  6157  000A32  0E00               	movlw	0
  6158  000A34  6F13               	movwf	run_I2C@txPkt& (0+255),b
  6159                           
  6160                           ;HX_I2C.c: 36: rxPkt.txOrRx = 1;
  6161  000A36  0E01               	movlw	1
  6162  000A38  6F5A               	movwf	run_I2C@rxPkt& (0+255),b
  6163                           
  6164                           ; BSR set to: 2
  6165                           ;HX_I2C.c: 39: mode = hx_inData[data_index++];
  6166  000A3A  5111               	movf	run_I2C@data_index& (0+255),w,b
  6167  000A3C  0100               	movlb	0	; () banked
  6168  000A3E  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6169  000A40  6ED9               	movwf	fsr2l,c
  6170  000A42  0102               	movlb	2	; () banked
  6171  000A44  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6172  000A46  0100               	movlb	0	; () banked
  6173  000A48  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6174  000A4A  6EDA               	movwf	fsr2h,c
  6175  000A4C  50DF               	movf	indf2,w,c
  6176  000A4E  0102               	movlb	2	; () banked
  6177  000A50  6F0F               	movwf	run_I2C@mode& (0+255),b
  6178                           
  6179                           ; BSR set to: 2
  6180  000A52  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6181  000A54  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6182                           
  6183                           ; BSR set to: 2
  6184                           ;HX_I2C.c: 40: slaveAddr = hx_inData[data_index++];
  6185  000A56  5111               	movf	run_I2C@data_index& (0+255),w,b
  6186  000A58  0100               	movlb	0	; () banked
  6187  000A5A  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6188  000A5C  6ED9               	movwf	fsr2l,c
  6189  000A5E  0102               	movlb	2	; () banked
  6190  000A60  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6191  000A62  0100               	movlb	0	; () banked
  6192  000A64  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6193  000A66  6EDA               	movwf	fsr2h,c
  6194  000A68  50DF               	movf	indf2,w,c
  6195  000A6A  6F7B               	movwf	??_run_I2C& (0+255),b
  6196  000A6C  517B               	movf	??_run_I2C& (0+255),w,b
  6197  000A6E  0102               	movlb	2	; () banked
  6198  000A70  6F02               	movwf	run_I2C@slaveAddr& (0+255),b
  6199  000A72  6B03               	clrf	(run_I2C@slaveAddr+1)& (0+255),b
  6200                           
  6201                           ; BSR set to: 2
  6202  000A74  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6203  000A76  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6204                           
  6205                           ; BSR set to: 2
  6206                           ;HX_I2C.c: 41: numTx = hx_inData[data_index++];
  6207  000A78  5111               	movf	run_I2C@data_index& (0+255),w,b
  6208  000A7A  0100               	movlb	0	; () banked
  6209  000A7C  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6210  000A7E  6ED9               	movwf	fsr2l,c
  6211  000A80  0102               	movlb	2	; () banked
  6212  000A82  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6213  000A84  0100               	movlb	0	; () banked
  6214  000A86  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6215  000A88  6EDA               	movwf	fsr2h,c
  6216  000A8A  50DF               	movf	indf2,w,c
  6217  000A8C  0102               	movlb	2	; () banked
  6218  000A8E  6F0D               	movwf	run_I2C@numTx& (0+255),b
  6219                           
  6220                           ; BSR set to: 2
  6221  000A90  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6222  000A92  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6223                           
  6224                           ; BSR set to: 2
  6225                           ;HX_I2C.c: 42: numRx = hx_inData[data_index++];
  6226  000A94  5111               	movf	run_I2C@data_index& (0+255),w,b
  6227  000A96  0100               	movlb	0	; () banked
  6228  000A98  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6229  000A9A  6ED9               	movwf	fsr2l,c
  6230  000A9C  0102               	movlb	2	; () banked
  6231  000A9E  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6232  000AA0  0100               	movlb	0	; () banked
  6233  000AA2  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6234  000AA4  6EDA               	movwf	fsr2h,c
  6235  000AA6  50DF               	movf	indf2,w,c
  6236  000AA8  0102               	movlb	2	; () banked
  6237  000AAA  6F0E               	movwf	run_I2C@numRx& (0+255),b
  6238                           
  6239                           ; BSR set to: 2
  6240  000AAC  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6241  000AAE  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6242                           
  6243                           ; BSR set to: 2
  6244                           ;HX_I2C.c: 44: txPkt.slaveAddr = slaveAddr;
  6245  000AB0  C202  F214         	movff	run_I2C@slaveAddr,run_I2C@txPkt+1
  6246  000AB4  C203  F215         	movff	run_I2C@slaveAddr+1,run_I2C@txPkt+2
  6247                           
  6248                           ; BSR set to: 2
  6249                           ;HX_I2C.c: 45: txPkt.numOfBytes = numTx;
  6250  000AB8  C20D  F256         	movff	run_I2C@numTx,run_I2C@txPkt+67
  6251                           
  6252                           ; BSR set to: 2
  6253                           ;HX_I2C.c: 46: rxPkt.slaveAddr = slaveAddr;
  6254  000ABC  C202  F25B         	movff	run_I2C@slaveAddr,run_I2C@rxPkt+1
  6255  000AC0  C203  F25C         	movff	run_I2C@slaveAddr+1,run_I2C@rxPkt+2
  6256                           
  6257                           ; BSR set to: 2
  6258                           ;HX_I2C.c: 47: rxPkt.numOfBytes = numRx;
  6259  000AC4  C20E  F29D         	movff	run_I2C@numRx,run_I2C@rxPkt+67
  6260                           
  6261                           ; BSR set to: 2
  6262                           ;HX_I2C.c: 49: if (mode < 0x20)
  6263  000AC8  0E20               	movlw	32
  6264  000ACA  610F               	cpfslt	run_I2C@mode& (0+255),b
  6265  000ACC  D048               	goto	l1344
  6266                           
  6267                           ; BSR set to: 2
  6268                           ;HX_I2C.c: 50: {
  6269                           ;HX_I2C.c: 51: if (numTx < 1)
  6270  000ACE  510D               	movf	run_I2C@numTx& (0+255),w,b
  6271  000AD0  A4D8               	btfss	status,2,c
  6272  000AD2  D003               	goto	l1347
  6273                           
  6274                           ; BSR set to: 2
  6275                           ;HX_I2C.c: 52: {
  6276                           ;HX_I2C.c: 53: hx_state = 0x40;
  6277  000AD4  0E40               	movlw	64
  6278  000AD6  6E45               	movwf	_hx_state,c
  6279                           
  6280                           ; BSR set to: 2
  6281                           ;HX_I2C.c: 54: return;
  6282  000AD8  0012               	return	
  6283  000ADA                     l1347:
  6284                           
  6285                           ; BSR set to: 2
  6286                           ;HX_I2C.c: 61: }
  6287                           ;HX_I2C.c: 64: for (i = 0; i < numTx; i++)
  6288                           
  6289                           ; BSR set to: 2
  6290  000ADA  0E00               	movlw	0
  6291  000ADC  6F08               	movwf	run_I2C@i& (0+255),b
  6292  000ADE  D01B               	goto	l1348
  6293  000AE0                     
  6294                           ; BSR set to: 2
  6295                           ;HX_I2C.c: 65: {
  6296                           ;HX_I2C.c: 71: txPkt.data[i] = hx_inData[data_index++];
  6297                           
  6298                           ; BSR set to: 2
  6299  000AE0  5111               	movf	run_I2C@data_index& (0+255),w,b
  6300  000AE2  0100               	movlb	0	; () banked
  6301  000AE4  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6302  000AE6  6ED9               	movwf	fsr2l,c
  6303  000AE8  0102               	movlb	2	; () banked
  6304  000AEA  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6305  000AEC  0100               	movlb	0	; () banked
  6306  000AEE  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6307  000AF0  6EDA               	movwf	fsr2h,c
  6308  000AF2  0102               	movlb	2	; () banked
  6309  000AF4  5108               	movf	run_I2C@i& (0+255),w,b
  6310  000AF6  0D01               	mullw	1
  6311  000AF8  0E03               	movlw	3
  6312  000AFA  26F3               	addwf	prodl,f,c
  6313  000AFC  0E00               	movlw	0
  6314  000AFE  22F4               	addwfc	prodh,f,c
  6315  000B00  0E13               	movlw	low run_I2C@txPkt
  6316  000B02  24F3               	addwf	prodl,w,c
  6317  000B04  6EE1               	movwf	fsr1l,c
  6318  000B06  0E02               	movlw	high run_I2C@txPkt
  6319  000B08  20F4               	addwfc	prodh,w,c
  6320  000B0A  6EE2               	movwf	fsr1h,c
  6321  000B0C  CFDF FFE7          	movff	indf2,indf1
  6322                           
  6323                           ; BSR set to: 2
  6324  000B10  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6325  000B12  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6326                           
  6327                           ; BSR set to: 2
  6328  000B14  2B08               	incf	run_I2C@i& (0+255),f,b
  6329  000B16                     l1348:
  6330                           
  6331                           ; BSR set to: 2
  6332                           
  6333                           ; BSR set to: 2
  6334  000B16  510D               	movf	run_I2C@numTx& (0+255),w,b
  6335  000B18  5D08               	subwf	run_I2C@i& (0+255),w,b
  6336  000B1A  A0D8               	btfss	status,0,c
  6337  000B1C  D7E1               	goto	l1349
  6338                           
  6339                           ; BSR set to: 2
  6340                           ;HX_I2C.c: 72: }
  6341                           ;HX_I2C.c: 76: checksum = hx_inData[data_index++];
  6342                           
  6343                           ; BSR set to: 2
  6344  000B1E  5111               	movf	run_I2C@data_index& (0+255),w,b
  6345  000B20  0100               	movlb	0	; () banked
  6346  000B22  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6347  000B24  6ED9               	movwf	fsr2l,c
  6348  000B26  0102               	movlb	2	; () banked
  6349  000B28  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6350  000B2A  0100               	movlb	0	; () banked
  6351  000B2C  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6352  000B2E  6EDA               	movwf	fsr2h,c
  6353  000B30  50DF               	movf	indf2,w,c
  6354  000B32  0102               	movlb	2	; () banked
  6355  000B34  6F06               	movwf	run_I2C@checksum& (0+255),b
  6356                           
  6357                           ; BSR set to: 2
  6358  000B36  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6359  000B38  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6360                           
  6361                           ; BSR set to: 2
  6362                           ;HX_I2C.c: 77: calc_checksum = calcChecksum(hx_inData, data_index-1);
  6363  000B3A  C078  F060         	movff	run_I2C@hx_inData,calcChecksum@data
  6364  000B3E  C079  F061         	movff	run_I2C@hx_inData+1,calcChecksum@data+1
  6365  000B42  0511               	decf	run_I2C@data_index& (0+255),w,b
  6366  000B44  0100               	movlb	0	; () banked
  6367  000B46  6F62               	movwf	calcChecksum@size& (0+255),b
  6368  000B48  EC67  F01E         	call	_calcChecksum	;wreg free
  6369  000B4C  0102               	movlb	2	; () banked
  6370  000B4E  6F07               	movwf	run_I2C@calc_checksum& (0+255),b
  6371                           
  6372                           ; BSR set to: 2
  6373                           ;HX_I2C.c: 78: if (calc_checksum != checksum)
  6374  000B50  5106               	movf	run_I2C@checksum& (0+255),w,b
  6375  000B52  1907               	xorwf	run_I2C@calc_checksum& (0+255),w,b
  6376  000B54  B4D8               	btfsc	status,2,c
  6377  000B56  D023               	goto	l1353
  6378                           
  6379                           ; BSR set to: 2
  6380                           ;HX_I2C.c: 79: {
  6381                           ;HX_I2C.c: 80: hx_state = 0x20;
  6382  000B58  0E20               	movlw	32
  6383  000B5A  6E45               	movwf	_hx_state,c
  6384                           
  6385                           ; BSR set to: 2
  6386                           ;HX_I2C.c: 81: return;
  6387  000B5C  0012               	return	
  6388  000B5E                     l1344:
  6389                           
  6390                           ; BSR set to: 2
  6391                           ;HX_I2C.c: 85: else
  6392                           ;HX_I2C.c: 86: {
  6393                           ;HX_I2C.c: 87: checksum = hx_inData[data_index++];
  6394                           
  6395                           ; BSR set to: 2
  6396  000B5E  5111               	movf	run_I2C@data_index& (0+255),w,b
  6397  000B60  0100               	movlb	0	; () banked
  6398  000B62  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6399  000B64  6ED9               	movwf	fsr2l,c
  6400  000B66  0102               	movlb	2	; () banked
  6401  000B68  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6402  000B6A  0100               	movlb	0	; () banked
  6403  000B6C  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6404  000B6E  6EDA               	movwf	fsr2h,c
  6405  000B70  50DF               	movf	indf2,w,c
  6406  000B72  0102               	movlb	2	; () banked
  6407  000B74  6F06               	movwf	run_I2C@checksum& (0+255),b
  6408                           
  6409                           ; BSR set to: 2
  6410  000B76  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6411  000B78  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6412                           
  6413                           ; BSR set to: 2
  6414                           ;HX_I2C.c: 88: calc_checksum = calcChecksum(hx_inData, data_index-1);
  6415  000B7A  C078  F060         	movff	run_I2C@hx_inData,calcChecksum@data
  6416  000B7E  C079  F061         	movff	run_I2C@hx_inData+1,calcChecksum@data+1
  6417  000B82  0511               	decf	run_I2C@data_index& (0+255),w,b
  6418  000B84  0100               	movlb	0	; () banked
  6419  000B86  6F62               	movwf	calcChecksum@size& (0+255),b
  6420  000B88  EC67  F01E         	call	_calcChecksum	;wreg free
  6421  000B8C  0102               	movlb	2	; () banked
  6422  000B8E  6F07               	movwf	run_I2C@calc_checksum& (0+255),b
  6423                           
  6424                           ; BSR set to: 2
  6425                           ;HX_I2C.c: 89: if (calc_checksum != checksum)
  6426  000B90  5106               	movf	run_I2C@checksum& (0+255),w,b
  6427  000B92  1907               	xorwf	run_I2C@calc_checksum& (0+255),w,b
  6428  000B94  B4D8               	btfsc	status,2,c
  6429  000B96  D003               	goto	l1353
  6430                           
  6431                           ; BSR set to: 2
  6432                           ;HX_I2C.c: 90: {
  6433                           ;HX_I2C.c: 91: hx_state = 0x20;
  6434  000B98  0E20               	movlw	32
  6435  000B9A  6E45               	movwf	_hx_state,c
  6436                           
  6437                           ; BSR set to: 2
  6438                           ;HX_I2C.c: 92: return;
  6439  000B9C  0012               	return	
  6440  000B9E                     l1353:
  6441                           
  6442                           ; BSR set to: 2
  6443                           ;HX_I2C.c: 93: }
  6444                           ;HX_I2C.c: 94: }
  6445                           ;HX_I2C.c: 97: if (mode == 0x00)
  6446                           
  6447                           ; BSR set to: 2
  6448                           
  6449                           ; BSR set to: 2
  6450  000B9E  510F               	movf	run_I2C@mode& (0+255),w,b
  6451  000BA0  A4D8               	btfss	status,2,c
  6452  000BA2  D01E               	goto	l1354
  6453                           
  6454                           ; BSR set to: 2
  6455                           ;HX_I2C.c: 98: {
  6456                           ;HX_I2C.c: 99: streamI2C(&stream[0], 1);
  6457  000BA4  0E09               	movlw	low run_I2C@stream
  6458  000BA6  0100               	movlb	0	; () banked
  6459  000BA8  6F69               	movwf	streamI2C@pktArr& (0+255),b
  6460  000BAA  0E02               	movlw	high run_I2C@stream
  6461  000BAC  6F6A               	movwf	(streamI2C@pktArr+1)& (0+255),b
  6462  000BAE  0E01               	movlw	1
  6463  000BB0  6F6B               	movwf	streamI2C@pktSize& (0+255),b
  6464  000BB2  ECED  F00E         	call	_streamI2C	;wreg free
  6465                           
  6466                           ;HX_I2C.c: 101: if (*txPkt.status == I2C1_MESSAGE_FAIL)
  6467  000BB6  C257  FFD9         	movff	run_I2C@txPkt+68,fsr2l
  6468  000BBA  C258  FFDA         	movff	run_I2C@txPkt+69,fsr2h
  6469  000BBE  04DE               	decf	postinc2,w,c
  6470  000BC0  A4D8               	btfss	status,2,c
  6471  000BC2  D007               	goto	l1355
  6472                           
  6473                           ;HX_I2C.c: 102: {
  6474                           ;HX_I2C.c: 103: hx_mainData[0] = 0x41;
  6475  000BC4  0E41               	movlw	65
  6476  000BC6  010B               	movlb	11	; () banked
  6477  000BC8  6FC0               	movwf	_hx_mainData& (0+255),b
  6478                           
  6479                           ; BSR set to: 11
  6480                           ;HX_I2C.c: 104: hx_mainDataIndex++;
  6481  000BCA  2A3F               	incf	_hx_mainDataIndex,f,c
  6482                           
  6483                           ; BSR set to: 11
  6484                           ;HX_I2C.c: 105: hx_state = 0x10;
  6485  000BCC  0E10               	movlw	16
  6486  000BCE  6E45               	movwf	_hx_state,c
  6487                           
  6488                           ; BSR set to: 11
  6489                           ;HX_I2C.c: 106: return;
  6490  000BD0  0012               	return	
  6491  000BD2                     l1355:
  6492                           
  6493                           ;HX_I2C.c: 107: }
  6494                           ;HX_I2C.c: 109: hx_mainData[0] = 0x10;
  6495                           
  6496                           ; BSR set to: 11
  6497  000BD2  0E10               	movlw	16
  6498  000BD4  010B               	movlb	11	; () banked
  6499  000BD6  6FC0               	movwf	_hx_mainData& (0+255),b
  6500                           
  6501                           ; BSR set to: 11
  6502                           ;HX_I2C.c: 110: hx_mainDataIndex++;
  6503  000BD8  2A3F               	incf	_hx_mainDataIndex,f,c
  6504                           
  6505                           ; BSR set to: 11
  6506                           ;HX_I2C.c: 111: hx_state = 0x10;
  6507  000BDA  0E10               	movlw	16
  6508  000BDC  6E45               	movwf	_hx_state,c
  6509                           
  6510                           ;HX_I2C.c: 112: }
  6511  000BDE  0012               	return	
  6512  000BE0                     l1354:
  6513                           
  6514                           ;HX_I2C.c: 113: else if (mode == 0x10)
  6515                           
  6516                           ; BSR set to: 11
  6517  000BE0  0E10               	movlw	16
  6518  000BE2  0102               	movlb	2	; () banked
  6519  000BE4  190F               	xorwf	run_I2C@mode& (0+255),w,b
  6520  000BE6  A4D8               	btfss	status,2,c
  6521  000BE8  D050               	goto	l1357
  6522                           
  6523                           ; BSR set to: 2
  6524                           ;HX_I2C.c: 114: {
  6525                           ;HX_I2C.c: 115: streamI2C(stream, 2);
  6526  000BEA  0E09               	movlw	low run_I2C@stream
  6527  000BEC  0100               	movlb	0	; () banked
  6528  000BEE  6F69               	movwf	streamI2C@pktArr& (0+255),b
  6529  000BF0  0E02               	movlw	high run_I2C@stream
  6530  000BF2  6F6A               	movwf	(streamI2C@pktArr+1)& (0+255),b
  6531  000BF4  0E02               	movlw	2
  6532  000BF6  6F6B               	movwf	streamI2C@pktSize& (0+255),b
  6533  000BF8  ECED  F00E         	call	_streamI2C	;wreg free
  6534                           
  6535                           ;HX_I2C.c: 116: if (*txPkt.status == I2C1_MESSAGE_FAIL || *rxPkt.status == I2C1_MESSAGE_
      +                          FAIL)
  6536  000BFC  C257  FFD9         	movff	run_I2C@txPkt+68,fsr2l
  6537  000C00  C258  FFDA         	movff	run_I2C@txPkt+69,fsr2h
  6538  000C04  04DE               	decf	postinc2,w,c
  6539  000C06  B4D8               	btfsc	status,2,c
  6540  000C08  D007               	goto	u8560
  6541  000C0A  C29E  FFD9         	movff	run_I2C@rxPkt+68,fsr2l
  6542  000C0E  C29F  FFDA         	movff	run_I2C@rxPkt+69,fsr2h
  6543  000C12  04DE               	decf	postinc2,w,c
  6544  000C14  A4D8               	btfss	status,2,c
  6545  000C16  D007               	goto	l1358
  6546  000C18                     u8560:
  6547                           
  6548                           ;HX_I2C.c: 117: {
  6549                           ;HX_I2C.c: 118: hx_mainData[0] = 0x41;
  6550  000C18  0E41               	movlw	65
  6551  000C1A  010B               	movlb	11	; () banked
  6552  000C1C  6FC0               	movwf	_hx_mainData& (0+255),b
  6553                           
  6554                           ; BSR set to: 11
  6555                           ;HX_I2C.c: 119: hx_mainDataIndex++;
  6556  000C1E  2A3F               	incf	_hx_mainDataIndex,f,c
  6557                           
  6558                           ; BSR set to: 11
  6559                           ;HX_I2C.c: 120: hx_state = 0x10;
  6560  000C20  0E10               	movlw	16
  6561  000C22  6E45               	movwf	_hx_state,c
  6562                           
  6563                           ; BSR set to: 11
  6564                           ;HX_I2C.c: 121: return;
  6565  000C24  0012               	return	
  6566  000C26                     l1358:
  6567                           
  6568                           ;HX_I2C.c: 122: }
  6569                           ;HX_I2C.c: 124: rx_index = 0;
  6570                           
  6571                           ; BSR set to: 11
  6572  000C26  0E00               	movlw	0
  6573  000C28  0102               	movlb	2	; () banked
  6574  000C2A  6F10               	movwf	run_I2C@rx_index& (0+255),b
  6575                           
  6576                           ; BSR set to: 2
  6577                           ;HX_I2C.c: 125: hx_mainData[rx_index++] = 0x10;
  6578  000C2C  5110               	movf	run_I2C@rx_index& (0+255),w,b
  6579  000C2E  0D01               	mullw	1
  6580  000C30  0EC0               	movlw	low _hx_mainData
  6581  000C32  24F3               	addwf	prodl,w,c
  6582  000C34  6ED9               	movwf	fsr2l,c
  6583  000C36  0E0B               	movlw	high _hx_mainData
  6584  000C38  20F4               	addwfc	prodh,w,c
  6585  000C3A  6EDA               	movwf	fsr2h,c
  6586  000C3C  0E10               	movlw	16
  6587  000C3E  6EDF               	movwf	indf2,c
  6588                           
  6589                           ; BSR set to: 2
  6590  000C40  2B10               	incf	run_I2C@rx_index& (0+255),f,b
  6591                           
  6592                           ; BSR set to: 2
  6593                           ;HX_I2C.c: 126: for (uint8_t i = 0; i < numRx; i++)
  6594  000C42  0E00               	movlw	0
  6595  000C44  6F04               	movwf	run_I2C@i_2001& (0+255),b
  6596  000C46  D018               	goto	l1361
  6597  000C48                     
  6598                           ; BSR set to: 2
  6599                           ;HX_I2C.c: 127: {
  6600                           ;HX_I2C.c: 128: hx_mainData[rx_index++] = rxPkt.data[i];
  6601                           
  6602                           ; BSR set to: 2
  6603  000C48  5104               	movf	run_I2C@i_2001& (0+255),w,b
  6604  000C4A  0D01               	mullw	1
  6605  000C4C  0E03               	movlw	3
  6606  000C4E  26F3               	addwf	prodl,f,c
  6607  000C50  0E00               	movlw	0
  6608  000C52  22F4               	addwfc	prodh,f,c
  6609  000C54  0E5A               	movlw	low run_I2C@rxPkt
  6610  000C56  24F3               	addwf	prodl,w,c
  6611  000C58  6ED9               	movwf	fsr2l,c
  6612  000C5A  0E02               	movlw	high run_I2C@rxPkt
  6613  000C5C  20F4               	addwfc	prodh,w,c
  6614  000C5E  6EDA               	movwf	fsr2h,c
  6615  000C60  5110               	movf	run_I2C@rx_index& (0+255),w,b
  6616  000C62  0D01               	mullw	1
  6617  000C64  0EC0               	movlw	low _hx_mainData
  6618  000C66  24F3               	addwf	prodl,w,c
  6619  000C68  6EE1               	movwf	fsr1l,c
  6620  000C6A  0E0B               	movlw	high _hx_mainData
  6621  000C6C  20F4               	addwfc	prodh,w,c
  6622  000C6E  6EE2               	movwf	fsr1h,c
  6623  000C70  CFDF FFE7          	movff	indf2,indf1
  6624                           
  6625                           ; BSR set to: 2
  6626  000C74  2B10               	incf	run_I2C@rx_index& (0+255),f,b
  6627                           
  6628                           ; BSR set to: 2
  6629  000C76  2B04               	incf	run_I2C@i_2001& (0+255),f,b
  6630  000C78                     l1361:
  6631                           
  6632                           ; BSR set to: 2
  6633                           
  6634                           ; BSR set to: 2
  6635  000C78  510E               	movf	run_I2C@numRx& (0+255),w,b
  6636  000C7A  5D04               	subwf	run_I2C@i_2001& (0+255),w,b
  6637  000C7C  A0D8               	btfss	status,0,c
  6638  000C7E  D7E4               	goto	l1362
  6639                           
  6640                           ; BSR set to: 2
  6641                           ;HX_I2C.c: 129: }
  6642                           ;HX_I2C.c: 131: hx_mainDataIndex = rx_index;
  6643  000C80  C210  F03F         	movff	run_I2C@rx_index,_hx_mainDataIndex
  6644                           
  6645                           ; BSR set to: 2
  6646                           ;HX_I2C.c: 132: hx_state = 0x10;
  6647  000C84  0E10               	movlw	16
  6648  000C86  6E45               	movwf	_hx_state,c
  6649                           
  6650                           ;HX_I2C.c: 133: }
  6651  000C88  0012               	return	
  6652  000C8A                     l1357:
  6653                           
  6654                           ; BSR set to: 2
  6655                           ;HX_I2C.c: 134: else if (mode == 0x20)
  6656                           
  6657                           ; BSR set to: 2
  6658  000C8A  0E20               	movlw	32
  6659  000C8C  190F               	xorwf	run_I2C@mode& (0+255),w,b
  6660  000C8E  A4D8               	btfss	status,2,c
  6661  000C90  D049               	goto	l1365
  6662                           
  6663                           ; BSR set to: 2
  6664                           ;HX_I2C.c: 135: {
  6665                           ;HX_I2C.c: 136: streamI2C(&stream[1], 1);
  6666  000C92  0E0B               	movlw	low (run_I2C@stream+2)
  6667  000C94  0100               	movlb	0	; () banked
  6668  000C96  6F69               	movwf	streamI2C@pktArr& (0+255),b
  6669  000C98  0E02               	movlw	high (run_I2C@stream+2)
  6670  000C9A  6F6A               	movwf	(streamI2C@pktArr+1)& (0+255),b
  6671  000C9C  0E01               	movlw	1
  6672  000C9E  6F6B               	movwf	streamI2C@pktSize& (0+255),b
  6673  000CA0  ECED  F00E         	call	_streamI2C	;wreg free
  6674                           
  6675                           ;HX_I2C.c: 137: if (*rxPkt.status == I2C1_MESSAGE_FAIL)
  6676  000CA4  C29E  FFD9         	movff	run_I2C@rxPkt+68,fsr2l
  6677  000CA8  C29F  FFDA         	movff	run_I2C@rxPkt+69,fsr2h
  6678  000CAC  04DE               	decf	postinc2,w,c
  6679  000CAE  A4D8               	btfss	status,2,c
  6680  000CB0  D007               	goto	l1366
  6681                           
  6682                           ;HX_I2C.c: 138: {
  6683                           ;HX_I2C.c: 139: hx_mainData[0] = 0x41;
  6684  000CB2  0E41               	movlw	65
  6685  000CB4  010B               	movlb	11	; () banked
  6686  000CB6  6FC0               	movwf	_hx_mainData& (0+255),b
  6687                           
  6688                           ; BSR set to: 11
  6689                           ;HX_I2C.c: 140: hx_mainDataIndex++;
  6690  000CB8  2A3F               	incf	_hx_mainDataIndex,f,c
  6691                           
  6692                           ; BSR set to: 11
  6693                           ;HX_I2C.c: 141: hx_state = 0x10;
  6694  000CBA  0E10               	movlw	16
  6695  000CBC  6E45               	movwf	_hx_state,c
  6696                           
  6697                           ; BSR set to: 11
  6698                           ;HX_I2C.c: 142: return;
  6699  000CBE  0012               	return	
  6700  000CC0                     l1366:
  6701                           
  6702                           ;HX_I2C.c: 143: }
  6703                           ;HX_I2C.c: 145: rx_index = 0;
  6704                           
  6705                           ; BSR set to: 11
  6706  000CC0  0E00               	movlw	0
  6707  000CC2  0102               	movlb	2	; () banked
  6708  000CC4  6F10               	movwf	run_I2C@rx_index& (0+255),b
  6709                           
  6710                           ; BSR set to: 2
  6711                           ;HX_I2C.c: 146: hx_mainData[rx_index++] = 0x10;
  6712  000CC6  5110               	movf	run_I2C@rx_index& (0+255),w,b
  6713  000CC8  0D01               	mullw	1
  6714  000CCA  0EC0               	movlw	low _hx_mainData
  6715  000CCC  24F3               	addwf	prodl,w,c
  6716  000CCE  6ED9               	movwf	fsr2l,c
  6717  000CD0  0E0B               	movlw	high _hx_mainData
  6718  000CD2  20F4               	addwfc	prodh,w,c
  6719  000CD4  6EDA               	movwf	fsr2h,c
  6720  000CD6  0E10               	movlw	16
  6721  000CD8  6EDF               	movwf	indf2,c
  6722                           
  6723                           ; BSR set to: 2
  6724  000CDA  2B10               	incf	run_I2C@rx_index& (0+255),f,b
  6725                           
  6726                           ; BSR set to: 2
  6727                           ;HX_I2C.c: 147: for (uint8_t i = 0; i < numRx; i++)
  6728  000CDC  0E00               	movlw	0
  6729  000CDE  6F05               	movwf	run_I2C@i_2002& (0+255),b
  6730  000CE0  D018               	goto	l1367
  6731  000CE2                     
  6732                           ; BSR set to: 2
  6733                           ;HX_I2C.c: 148: {
  6734                           ;HX_I2C.c: 149: hx_mainData[rx_index++] = rxPkt.data[i];
  6735                           
  6736                           ; BSR set to: 2
  6737  000CE2  5105               	movf	run_I2C@i_2002& (0+255),w,b
  6738  000CE4  0D01               	mullw	1
  6739  000CE6  0E03               	movlw	3
  6740  000CE8  26F3               	addwf	prodl,f,c
  6741  000CEA  0E00               	movlw	0
  6742  000CEC  22F4               	addwfc	prodh,f,c
  6743  000CEE  0E5A               	movlw	low run_I2C@rxPkt
  6744  000CF0  24F3               	addwf	prodl,w,c
  6745  000CF2  6ED9               	movwf	fsr2l,c
  6746  000CF4  0E02               	movlw	high run_I2C@rxPkt
  6747  000CF6  20F4               	addwfc	prodh,w,c
  6748  000CF8  6EDA               	movwf	fsr2h,c
  6749  000CFA  5110               	movf	run_I2C@rx_index& (0+255),w,b
  6750  000CFC  0D01               	mullw	1
  6751  000CFE  0EC0               	movlw	low _hx_mainData
  6752  000D00  24F3               	addwf	prodl,w,c
  6753  000D02  6EE1               	movwf	fsr1l,c
  6754  000D04  0E0B               	movlw	high _hx_mainData
  6755  000D06  20F4               	addwfc	prodh,w,c
  6756  000D08  6EE2               	movwf	fsr1h,c
  6757  000D0A  CFDF FFE7          	movff	indf2,indf1
  6758                           
  6759                           ; BSR set to: 2
  6760  000D0E  2B10               	incf	run_I2C@rx_index& (0+255),f,b
  6761                           
  6762                           ; BSR set to: 2
  6763  000D10  2B05               	incf	run_I2C@i_2002& (0+255),f,b
  6764  000D12                     l1367:
  6765                           
  6766                           ; BSR set to: 2
  6767                           
  6768                           ; BSR set to: 2
  6769  000D12  510E               	movf	run_I2C@numRx& (0+255),w,b
  6770  000D14  5D05               	subwf	run_I2C@i_2002& (0+255),w,b
  6771  000D16  A0D8               	btfss	status,0,c
  6772  000D18  D7E4               	goto	l1368
  6773                           
  6774                           ; BSR set to: 2
  6775                           ;HX_I2C.c: 150: }
  6776                           ;HX_I2C.c: 152: hx_mainDataIndex = rx_index;
  6777  000D1A  C210  F03F         	movff	run_I2C@rx_index,_hx_mainDataIndex
  6778                           
  6779                           ; BSR set to: 2
  6780                           ;HX_I2C.c: 153: hx_state = 0x10;
  6781  000D1E  0E10               	movlw	16
  6782  000D20  6E45               	movwf	_hx_state,c
  6783                           
  6784                           ;HX_I2C.c: 154: }
  6785  000D22  0012               	return	
  6786  000D24                     l1365:
  6787                           
  6788                           ; BSR set to: 2
  6789                           ;HX_I2C.c: 155: else if (mode == 0x30)
  6790                           
  6791                           ; BSR set to: 2
  6792  000D24  0E30               	movlw	48
  6793  000D26  190F               	xorwf	run_I2C@mode& (0+255),w,b
  6794  000D28  A4D8               	btfss	status,2,c
  6795  000D2A  D00A               	goto	l1371
  6796                           
  6797                           ; BSR set to: 2
  6798                           ;HX_I2C.c: 156: {
  6799                           ;HX_I2C.c: 157: hx_mainData[0] = 0x10;
  6800  000D2C  0E10               	movlw	16
  6801  000D2E  010B               	movlb	11	; () banked
  6802  000D30  6FC0               	movwf	_hx_mainData& (0+255),b
  6803                           
  6804                           ;HX_I2C.c: 158: hx_mainData[1] = 0xAA;
  6805  000D32  0EAA               	movlw	170
  6806  000D34  6FC1               	movwf	(_hx_mainData+1)& (0+255),b
  6807                           
  6808                           ;HX_I2C.c: 159: hx_mainDataIndex = 2;
  6809  000D36  0E02               	movlw	2
  6810  000D38  6E3F               	movwf	_hx_mainDataIndex,c
  6811                           
  6812                           ;HX_I2C.c: 160: hx_state = 0x10;
  6813  000D3A  0E10               	movlw	16
  6814  000D3C  6E45               	movwf	_hx_state,c
  6815                           
  6816                           ;HX_I2C.c: 161: }
  6817  000D3E  0012               	return	
  6818  000D40                     l1371:
  6819                           
  6820                           ;HX_I2C.c: 163: {
  6821                           ;HX_I2C.c: 164: *debugArr = 0xBB;
  6822                           
  6823                           ; BSR set to: 11
  6824  000D40  0E31               	movlw	49
  6825  000D42  0102               	movlb	2	; () banked
  6826  000D44  190F               	xorwf	run_I2C@mode& (0+255),w,b
  6827  000D46  A4D8               	btfss	status,2,c
  6828  000D48  D017               	goto	l1373
  6829                           
  6830                           ; BSR set to: 2
  6831                           ;HX_I2C.c: 165: writeI2C(debugArr, 1, 0x5a);
  6832  000D4A  C200  F070         	movff	run_I2C@debugArr,writeI2C@txData
  6833  000D4E  C201  F071         	movff	run_I2C@debugArr+1,writeI2C@txData+1
  6834  000D52  0E01               	movlw	1
  6835  000D54  0100               	movlb	0	; () banked
  6836  000D56  6F72               	movwf	writeI2C@size& (0+255),b
  6837  000D58  0E00               	movlw	0
  6838  000D5A  6F74               	movwf	(writeI2C@slaveAddr+1)& (0+255),b
  6839  000D5C  0E5A               	movlw	90
  6840  000D5E  6F73               	movwf	writeI2C@slaveAddr& (0+255),b
  6841  000D60  EC8D  F01A         	call	_writeI2C	;wreg free
  6842                           
  6843                           ;HX_I2C.c: 166: hx_mainData[0] = 0x10;
  6844  000D64  0E10               	movlw	16
  6845  000D66  010B               	movlb	11	; () banked
  6846  000D68  6FC0               	movwf	_hx_mainData& (0+255),b
  6847                           
  6848                           ; BSR set to: 11
  6849                           ;HX_I2C.c: 167: hx_mainData[1] = 0xBB;
  6850  000D6A  0EBB               	movlw	187
  6851  000D6C  6FC1               	movwf	(_hx_mainData+1)& (0+255),b
  6852                           
  6853                           ; BSR set to: 11
  6854                           ;HX_I2C.c: 168: hx_mainDataIndex = 2;
  6855  000D6E  0E02               	movlw	2
  6856  000D70  6E3F               	movwf	_hx_mainDataIndex,c
  6857                           
  6858                           ; BSR set to: 11
  6859                           ;HX_I2C.c: 169: hx_state = 0x10;
  6860  000D72  0E10               	movlw	16
  6861  000D74  6E45               	movwf	_hx_state,c
  6862                           
  6863                           ;HX_I2C.c: 170: }
  6864  000D76  0012               	return	
  6865  000D78                     l1373:
  6866                           
  6867                           ;HX_I2C.c: 171: else if (mode == 0x32)
  6868                           
  6869                           ; BSR set to: 11
  6870  000D78  0E32               	movlw	50
  6871  000D7A  0102               	movlb	2	; () banked
  6872  000D7C  190F               	xorwf	run_I2C@mode& (0+255),w,b
  6873  000D7E  A4D8               	btfss	status,2,c
  6874  000D80  D015               	goto	l1375
  6875                           
  6876                           ; BSR set to: 2
  6877                           ;HX_I2C.c: 172: {
  6878                           ;HX_I2C.c: 173: readI2C(&hx_mainData[1], 1, 0x5a);
  6879  000D82  0EC1               	movlw	low (_hx_mainData+1)
  6880  000D84  0100               	movlb	0	; () banked
  6881  000D86  6F70               	movwf	readI2C@rxData& (0+255),b
  6882  000D88  0E0B               	movlw	high (_hx_mainData+1)
  6883  000D8A  6F71               	movwf	(readI2C@rxData+1)& (0+255),b
  6884  000D8C  0E01               	movlw	1
  6885  000D8E  6F72               	movwf	readI2C@numOfRx& (0+255),b
  6886  000D90  0E00               	movlw	0
  6887  000D92  6F74               	movwf	(readI2C@slaveAddr+1)& (0+255),b
  6888  000D94  0E5A               	movlw	90
  6889  000D96  6F73               	movwf	readI2C@slaveAddr& (0+255),b
  6890  000D98  ECE1  F01B         	call	_readI2C	;wreg free
  6891                           
  6892                           ;HX_I2C.c: 174: hx_mainData[0] = 0x10;
  6893  000D9C  0E10               	movlw	16
  6894  000D9E  010B               	movlb	11	; () banked
  6895  000DA0  6FC0               	movwf	_hx_mainData& (0+255),b
  6896                           
  6897                           ; BSR set to: 11
  6898                           ;HX_I2C.c: 175: hx_mainDataIndex = 2;
  6899  000DA2  0E02               	movlw	2
  6900  000DA4  6E3F               	movwf	_hx_mainDataIndex,c
  6901                           
  6902                           ; BSR set to: 11
  6903                           ;HX_I2C.c: 176: hx_state = 0x10;
  6904  000DA6  0E10               	movlw	16
  6905  000DA8  6E45               	movwf	_hx_state,c
  6906                           
  6907                           ;HX_I2C.c: 177: }
  6908  000DAA  0012               	return	
  6909  000DAC                     l1375:
  6910                           
  6911                           ;HX_I2C.c: 178: else
  6912                           ;HX_I2C.c: 179: {
  6913                           ;HX_I2C.c: 180: hx_state = 0x20;
  6914                           
  6915                           ; BSR set to: 11
  6916  000DAC  0E20               	movlw	32
  6917  000DAE  6E45               	movwf	_hx_state,c
  6918                           
  6919                           ;HX_I2C.c: 181: return;
  6920  000DB0  0012               	return	
  6921  000DB2                     __end_of_run_I2C:
  6922                           	opt stack 0
  6923                           tblptru	equ	0xFF8
  6924                           tblptrh	equ	0xFF7
  6925                           tblptrl	equ	0xFF6
  6926                           tablat	equ	0xFF5
  6927                           prodh	equ	0xFF4
  6928                           prodl	equ	0xFF3
  6929                           intcon	equ	0xFF2
  6930                           postinc0	equ	0xFEE
  6931                           wreg	equ	0xFE8
  6932                           indf1	equ	0xFE7
  6933                           postinc1	equ	0xFE6
  6934                           postdec1	equ	0xFE5
  6935                           fsr1h	equ	0xFE2
  6936                           fsr1l	equ	0xFE1
  6937                           indf2	equ	0xFDF
  6938                           postinc2	equ	0xFDE
  6939                           fsr2h	equ	0xFDA
  6940                           fsr2l	equ	0xFD9
  6941                           status	equ	0xFD8
  6942                           
  6943 ;; *************** function _readI2C *****************
  6944 ;; Defined at:
  6945 ;;		line 44 in file "Utils.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;  rxData          2   16[BANK0 ] PTR unsigned char 
  6948 ;;		 -> hx_mainData(61), 
  6949 ;;  numOfRx         1   18[BANK0 ] unsigned char 
  6950 ;;  slaveAddr       2   19[BANK0 ] unsigned int 
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;  timeOut         2   21[BANK0 ] unsigned int 
  6953 ;;  status          1   23[BANK0 ] enum E11632
  6954 ;; Return value:  Size  Location     Type
  6955 ;;                  1    wreg      unsigned char 
  6956 ;; Registers used:
  6957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6958 ;; Tracked objects:
  6959 ;;		On entry : 0/0
  6960 ;;		On exit  : 0/0
  6961 ;;		Unchanged: 0/0
  6962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6963 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6964 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6966 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6967 ;;Total ram usage:        8 bytes
  6968 ;; Hardware stack levels used:    1
  6969 ;; Hardware stack levels required when called:    9
  6970 ;; This function calls:
  6971 ;;		_I2C1_MasterRead
  6972 ;; This function is called by:
  6973 ;;		_run_I2C
  6974 ;; This function uses a non-reentrant model
  6975 ;;
  6976                           
  6977                           	psect	text11
  6978  0037C2                     __ptext11:
  6979                           	opt stack 0
  6980  0037C2                     _readI2C:
  6981                           	opt stack 20
  6982                           
  6983                           ;Utils.c: 46: I2C1_MESSAGE_STATUS status;
  6984                           ;Utils.c: 47: uint16_t timeOut;
  6985                           ;Utils.c: 48: while(status != I2C1_MESSAGE_FAIL)
  6986                           
  6987                           ;incstack = 0
  6988  0037C2  D020               	goto	l265
  6989  0037C4                     
  6990                           ;Utils.c: 49: {
  6991                           ;Utils.c: 51: I2C1_MasterRead( rxData,
  6992                           ;Utils.c: 52: numOfRx,
  6993                           ;Utils.c: 53: slaveAddr,
  6994                           ;Utils.c: 54: &status);
  6995  0037C4  C070  F069         	movff	readI2C@rxData,I2C1_MasterRead@pdata
  6996  0037C8  C071  F06A         	movff	readI2C@rxData+1,I2C1_MasterRead@pdata+1
  6997  0037CC  C072  F06B         	movff	readI2C@numOfRx,I2C1_MasterRead@length
  6998  0037D0  C073  F06C         	movff	readI2C@slaveAddr,I2C1_MasterRead@address
  6999  0037D4  C074  F06D         	movff	readI2C@slaveAddr+1,I2C1_MasterRead@address+1
  7000  0037D8  0E77               	movlw	low readI2C@status
  7001  0037DA  0100               	movlb	0	; () banked
  7002  0037DC  6F6E               	movwf	I2C1_MasterRead@pflag& (0+255),b
  7003  0037DE  0E00               	movlw	high readI2C@status
  7004  0037E0  6F6F               	movwf	(I2C1_MasterRead@pflag+1)& (0+255),b
  7005  0037E2  EC69  F01B         	call	_I2C1_MasterRead	;wreg free
  7006  0037E6  0E02               	movlw	2
  7007  0037E8  0100               	movlb	0	; () banked
  7008  0037EA  1977               	xorwf	readI2C@status& (0+255),w,b
  7009  0037EC  B4D8               	btfsc	status,2,c
  7010  0037EE  D7FB               	goto	l260
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;Utils.c: 59: if (status == I2C1_MESSAGE_COMPLETE)
  7014                           
  7015                           ; BSR set to: 0
  7016  0037F0  5177               	movf	readI2C@status& (0+255),w,b
  7017  0037F2  B4D8               	btfsc	status,2,c
  7018  0037F4  0012               	return	
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;Utils.c: 69: if (timeOut == 100)
  7022                           
  7023                           ; BSR set to: 0
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;Utils.c: 60: return 0;
  7027                           ;	Return value of _readI2C is never used
  7028  0037F6  0E64               	movlw	100
  7029  0037F8  1975               	xorwf	readI2C@timeOut& (0+255),w,b
  7030  0037FA  1176               	iorwf	(readI2C@timeOut+1)& (0+255),w,b
  7031  0037FC  B4D8               	btfsc	status,2,c
  7032  0037FE  0012               	return	
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;Utils.c: 71: else
  7036                           ;Utils.c: 72: timeOut++;
  7037                           
  7038                           ; BSR set to: 0
  7039                           
  7040                           ; BSR set to: 0
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;Utils.c: 70: return 0;
  7044                           ;	Return value of _readI2C is never used
  7045  003800  4B75               	infsnz	readI2C@timeOut& (0+255),f,b
  7046  003802  2B76               	incf	(readI2C@timeOut+1)& (0+255),f,b
  7047  003804                     l265:
  7048                           
  7049                           ; BSR set to: 0
  7050                           
  7051                           ; BSR set to: 0
  7052  003804  0100               	movlb	0	; () banked
  7053  003806  0577               	decf	readI2C@status& (0+255),w,b
  7054  003808  B4D8               	btfsc	status,2,c
  7055  00380A  0012               	return	
  7056  00380C  D7DB               	goto	l258
  7057  00380E                     __end_of_readI2C:
  7058                           	opt stack 0
  7059                           tblptru	equ	0xFF8
  7060                           tblptrh	equ	0xFF7
  7061                           tblptrl	equ	0xFF6
  7062                           tablat	equ	0xFF5
  7063                           prodh	equ	0xFF4
  7064                           prodl	equ	0xFF3
  7065                           intcon	equ	0xFF2
  7066                           postinc0	equ	0xFEE
  7067                           wreg	equ	0xFE8
  7068                           indf1	equ	0xFE7
  7069                           postinc1	equ	0xFE6
  7070                           postdec1	equ	0xFE5
  7071                           fsr1h	equ	0xFE2
  7072                           fsr1l	equ	0xFE1
  7073                           indf2	equ	0xFDF
  7074                           postinc2	equ	0xFDE
  7075                           fsr2h	equ	0xFDA
  7076                           fsr2l	equ	0xFD9
  7077                           status	equ	0xFD8
  7078                           
  7079 ;; *************** function _I2C1_MasterRead *****************
  7080 ;; Defined at:
  7081 ;;		line 621 in file "mcc_generated_files/i2c1.c"
  7082 ;; Parameters:    Size  Location     Type
  7083 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
  7084 ;;		 -> hx_mainData(61), 
  7085 ;;  length          1   11[BANK0 ] unsigned char 
  7086 ;;  address         2   12[BANK0 ] unsigned int 
  7087 ;;  pflag           2   14[BANK0 ] PTR enum E11632
  7088 ;;		 -> readI2C@status(1), 
  7089 ;; Auto vars:     Size  Location     Type
  7090 ;;		None
  7091 ;; Return value:  Size  Location     Type
  7092 ;;                  1    wreg      void 
  7093 ;; Registers used:
  7094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7095 ;; Tracked objects:
  7096 ;;		On entry : 0/0
  7097 ;;		On exit  : 0/0
  7098 ;;		Unchanged: 0/0
  7099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7100 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7103 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7104 ;;Total ram usage:        7 bytes
  7105 ;; Hardware stack levels used:    1
  7106 ;; Hardware stack levels required when called:    8
  7107 ;; This function calls:
  7108 ;;		_I2C1_MasterReadTRBBuild
  7109 ;;		_I2C1_MasterTRBInsert
  7110 ;; This function is called by:
  7111 ;;		_readI2C
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           	psect	text12
  7116  0036D2                     __ptext12:
  7117                           	opt stack 0
  7118  0036D2                     _I2C1_MasterRead:
  7119                           	opt stack 20
  7120                           
  7121                           ;i2c1.c: 627: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  7122                           ;i2c1.c: 630: if (i2c1_object.trStatus.s.full != 1)
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;incstack = 0
  7126  0036D2  0102               	movlb	2	; () banked
  7127  0036D4  B1DF               	btfsc	(_i2c1_object+4)& (0+255),0,b
  7128  0036D6  D01E               	goto	l1495
  7129                           
  7130                           ; BSR set to: 2
  7131                           ;i2c1.c: 631: {
  7132                           ;i2c1.c: 632: I2C1_MasterReadTRBBuild(&trBlock, pdata, length, address);
  7133  0036D8  0EEC               	movlw	low I2C1_MasterRead@trBlock
  7134  0036DA  0100               	movlb	0	; () banked
  7135  0036DC  6F60               	movwf	I2C1_MasterReadTRBBuild@ptrb& (0+255),b
  7136  0036DE  0E03               	movlw	high I2C1_MasterRead@trBlock
  7137  0036E0  6F61               	movwf	(I2C1_MasterReadTRBBuild@ptrb+1)& (0+255),b
  7138  0036E2  C069  F062         	movff	I2C1_MasterRead@pdata,I2C1_MasterReadTRBBuild@pdata
  7139  0036E6  C06A  F063         	movff	I2C1_MasterRead@pdata+1,I2C1_MasterReadTRBBuild@pdata+1
  7140  0036EA  C06B  F064         	movff	I2C1_MasterRead@length,I2C1_MasterReadTRBBuild@length
  7141  0036EE  C06C  F065         	movff	I2C1_MasterRead@address,I2C1_MasterReadTRBBuild@address
  7142  0036F2  C06D  F066         	movff	I2C1_MasterRead@address+1,I2C1_MasterReadTRBBuild@address+1
  7143  0036F6  EC40  F01B         	call	_I2C1_MasterReadTRBBuild	;wreg free
  7144                           
  7145                           ;i2c1.c: 633: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  7146  0036FA  0EEC               	movlw	low I2C1_MasterRead@trBlock
  7147  0036FC  0100               	movlb	0	; () banked
  7148  0036FE  6F60               	movwf	I2C1_MasterTRBInsert@ptrb_list& (0+255),b
  7149  003700  0E03               	movlw	high I2C1_MasterRead@trBlock
  7150  003702  6F61               	movwf	(I2C1_MasterTRBInsert@ptrb_list+1)& (0+255),b
  7151  003704  C06E  F062         	movff	I2C1_MasterRead@pflag,I2C1_MasterTRBInsert@pflag
  7152  003708  C06F  F063         	movff	I2C1_MasterRead@pflag+1,I2C1_MasterTRBInsert@pflag+1
  7153  00370C  0E01               	movlw	1
  7154  00370E  ECD0  F017         	call	_I2C1_MasterTRBInsert
  7155                           
  7156                           ;i2c1.c: 634: }
  7157  003712  0012               	return	
  7158  003714                     l1495:
  7159                           
  7160                           ;i2c1.c: 635: else
  7161                           ;i2c1.c: 636: {
  7162                           ;i2c1.c: 637: *pflag = I2C1_MESSAGE_FAIL;
  7163  003714  C06E  FFD9         	movff	I2C1_MasterRead@pflag,fsr2l
  7164  003718  C06F  FFDA         	movff	I2C1_MasterRead@pflag+1,fsr2h
  7165  00371C  0E01               	movlw	1
  7166  00371E  6EDF               	movwf	indf2,c
  7167  003720  0012               	return	
  7168  003722                     __end_of_I2C1_MasterRead:
  7169                           	opt stack 0
  7170                           tblptru	equ	0xFF8
  7171                           tblptrh	equ	0xFF7
  7172                           tblptrl	equ	0xFF6
  7173                           tablat	equ	0xFF5
  7174                           prodh	equ	0xFF4
  7175                           prodl	equ	0xFF3
  7176                           intcon	equ	0xFF2
  7177                           postinc0	equ	0xFEE
  7178                           wreg	equ	0xFE8
  7179                           indf1	equ	0xFE7
  7180                           postinc1	equ	0xFE6
  7181                           postdec1	equ	0xFE5
  7182                           fsr1h	equ	0xFE2
  7183                           fsr1l	equ	0xFE1
  7184                           indf2	equ	0xFDF
  7185                           postinc2	equ	0xFDE
  7186                           fsr2h	equ	0xFDA
  7187                           fsr2l	equ	0xFD9
  7188                           status	equ	0xFD8
  7189                           
  7190 ;; *************** function _run_ASLBoron *****************
  7191 ;; Defined at:
  7192 ;;		line 17 in file "HX_ASL_BORON.c"
  7193 ;; Parameters:    Size  Location     Type
  7194 ;;  hx_inData       2  115[BANK0 ] PTR unsigned char 
  7195 ;;		 -> hx_inData(64), 
  7196 ;;  size            1  117[BANK0 ] unsigned char 
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;  i               1  243[BANK1 ] unsigned char 
  7199 ;;  cnfg_arr      256    0[BANK12] unsigned char [256]
  7200 ;;  data_index      2  246[BANK1 ] unsigned int 
  7201 ;;  rpt_run         2  237[BANK1 ] unsigned char [2]
  7202 ;;  mode_run        1  245[BANK1 ] unsigned char 
  7203 ;;  cnfg_cnt        1  244[BANK1 ] unsigned char 
  7204 ;;  cnfg_run        1  242[BANK1 ] unsigned char 
  7205 ;;  test_run        1  241[BANK1 ] unsigned char 
  7206 ;;  calc_checksu    1  240[BANK1 ] unsigned char 
  7207 ;;  checksum        1  239[BANK1 ] unsigned char 
  7208 ;; Return value:  Size  Location     Type
  7209 ;;                  1    wreg      void 
  7210 ;; Registers used:
  7211 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7212 ;; Tracked objects:
  7213 ;;		On entry : 0/0
  7214 ;;		On exit  : 0/0
  7215 ;;		Unchanged: 0/0
  7216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7217 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7218 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0     256       0       0
  7219 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7220 ;;      Totals:         0       6      15       0       0       0       0       0       0       0       0       0       
      +0     256       0       0
  7221 ;;Total ram usage:      277 bytes
  7222 ;; Hardware stack levels used:    1
  7223 ;; Hardware stack levels required when called:   13
  7224 ;; This function calls:
  7225 ;;		_calcChecksum
  7226 ;;		_write_ASLBoron_cnfg
  7227 ;;		_write_ASLBoron_cstm_cnfg
  7228 ;;		_write_ASLBoron_debug
  7229 ;;		_write_ASLBoron_test
  7230 ;; This function is called by:
  7231 ;;		_main
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text13
  7236  0013B8                     __ptext13:
  7237                           	opt stack 0
  7238  0013B8                     _run_ASLBoron:
  7239                           	opt stack 17
  7240                           
  7241                           ;HX_ASL_BORON.c: 19: uint8_t mode_run = 0;
  7242                           
  7243                           ;incstack = 0
  7244  0013B8  0E00               	movlw	0
  7245  0013BA  0101               	movlb	1	; () banked
  7246  0013BC  6FF5               	movwf	run_ASLBoron@mode_run& (0+255),b
  7247                           
  7248                           ;HX_ASL_BORON.c: 20: uint8_t test_run = 0;
  7249  0013BE  0E00               	movlw	0
  7250  0013C0  6FF1               	movwf	run_ASLBoron@test_run& (0+255),b
  7251                           
  7252                           ;HX_ASL_BORON.c: 21: uint8_t cnfg_run = 0;
  7253  0013C2  0E00               	movlw	0
  7254  0013C4  6FF2               	movwf	run_ASLBoron@cnfg_run& (0+255),b
  7255                           
  7256                           ;HX_ASL_BORON.c: 22: uint8_t cnfg_cnt = 0;
  7257  0013C6  0E00               	movlw	0
  7258  0013C8  6FF4               	movwf	run_ASLBoron@cnfg_cnt& (0+255),b
  7259                           
  7260                           ;HX_ASL_BORON.c: 23: uint8_t cnfg_arr[256];
  7261                           ;HX_ASL_BORON.c: 24: uint16_t data_index = 0;
  7262  0013CA  0E00               	movlw	0
  7263  0013CC  6FF7               	movwf	(run_ASLBoron@data_index+1)& (0+255),b
  7264  0013CE  0E00               	movlw	0
  7265  0013D0  6FF6               	movwf	run_ASLBoron@data_index& (0+255),b
  7266                           
  7267                           ;HX_ASL_BORON.c: 25: uint8_t rpt_run[2];
  7268                           ;HX_ASL_BORON.c: 26: uint8_t checksum = 0;
  7269  0013D2  0E00               	movlw	0
  7270  0013D4  6FEF               	movwf	run_ASLBoron@checksum& (0+255),b
  7271                           
  7272                           ;HX_ASL_BORON.c: 27: uint8_t calc_checksum = 0;
  7273  0013D6  0E00               	movlw	0
  7274  0013D8  6FF0               	movwf	run_ASLBoron@calc_checksum& (0+255),b
  7275                           
  7276                           ; BSR set to: 1
  7277                           ;HX_ASL_BORON.c: 29: mode_run = hx_inData[data_index++];
  7278  0013DA  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7279  0013DC  0100               	movlb	0	; () banked
  7280  0013DE  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7281  0013E0  6ED9               	movwf	fsr2l,c
  7282  0013E2  0101               	movlb	1	; () banked
  7283  0013E4  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7284  0013E6  0100               	movlb	0	; () banked
  7285  0013E8  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7286  0013EA  6EDA               	movwf	fsr2h,c
  7287  0013EC  50DF               	movf	indf2,w,c
  7288  0013EE  0101               	movlb	1	; () banked
  7289  0013F0  6FF5               	movwf	run_ASLBoron@mode_run& (0+255),b
  7290                           
  7291                           ; BSR set to: 1
  7292  0013F2  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7293  0013F4  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7294                           
  7295                           ; BSR set to: 1
  7296                           ;HX_ASL_BORON.c: 30: if (!(mode_run == 0x00 ||
  7297                           ;HX_ASL_BORON.c: 31: mode_run == 0x01 ||
  7298                           ;HX_ASL_BORON.c: 32: mode_run == 0x02 ||
  7299                           ;HX_ASL_BORON.c: 33: mode_run == 0xAA))
  7300  0013F6  51F5               	movf	run_ASLBoron@mode_run& (0+255),w,b
  7301  0013F8  B4D8               	btfsc	status,2,c
  7302  0013FA  D00E               	goto	l1021
  7303                           
  7304                           ; BSR set to: 1
  7305  0013FC  05F5               	decf	run_ASLBoron@mode_run& (0+255),w,b
  7306  0013FE  B4D8               	btfsc	status,2,c
  7307  001400  D00B               	goto	l1021
  7308                           
  7309                           ; BSR set to: 1
  7310  001402  0E02               	movlw	2
  7311  001404  19F5               	xorwf	run_ASLBoron@mode_run& (0+255),w,b
  7312  001406  B4D8               	btfsc	status,2,c
  7313  001408  D007               	goto	l1021
  7314                           
  7315                           ; BSR set to: 1
  7316  00140A  0EAA               	movlw	170
  7317  00140C  19F5               	xorwf	run_ASLBoron@mode_run& (0+255),w,b
  7318  00140E  B4D8               	btfsc	status,2,c
  7319  001410  D003               	goto	l1021
  7320                           
  7321                           ; BSR set to: 1
  7322                           ;HX_ASL_BORON.c: 34: {
  7323                           ;HX_ASL_BORON.c: 35: hx_state = 0x21;
  7324  001412  0E21               	movlw	33
  7325  001414  6E45               	movwf	_hx_state,c
  7326                           
  7327                           ; BSR set to: 1
  7328                           ;HX_ASL_BORON.c: 37: }
  7329                           
  7330                           ; BSR set to: 1
  7331                           ;HX_ASL_BORON.c: 36: return;
  7332  001416  0012               	return	
  7333  001418                     l1021:
  7334                           
  7335                           ; BSR set to: 1
  7336                           ;HX_ASL_BORON.c: 38: else
  7337                           ;HX_ASL_BORON.c: 39: {
  7338                           ;HX_ASL_BORON.c: 40: test_run = hx_inData[data_index++];
  7339                           
  7340                           ; BSR set to: 1
  7341  001418  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7342  00141A  0100               	movlb	0	; () banked
  7343  00141C  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7344  00141E  6ED9               	movwf	fsr2l,c
  7345  001420  0101               	movlb	1	; () banked
  7346  001422  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7347  001424  0100               	movlb	0	; () banked
  7348  001426  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7349  001428  6EDA               	movwf	fsr2h,c
  7350  00142A  50DF               	movf	indf2,w,c
  7351  00142C  0101               	movlb	1	; () banked
  7352  00142E  6FF1               	movwf	run_ASLBoron@test_run& (0+255),b
  7353                           
  7354                           ; BSR set to: 1
  7355  001430  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7356  001432  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7357                           
  7358                           ; BSR set to: 1
  7359                           ;HX_ASL_BORON.c: 41: if (mode_run == 0x02)
  7360  001434  0E02               	movlw	2
  7361  001436  19F5               	xorwf	run_ASLBoron@mode_run& (0+255),w,b
  7362  001438  A4D8               	btfss	status,2,c
  7363  00143A  D049               	goto	l1024
  7364                           
  7365                           ; BSR set to: 1
  7366                           ;HX_ASL_BORON.c: 42: {
  7367                           ;HX_ASL_BORON.c: 43: cnfg_cnt = hx_inData[data_index++];
  7368  00143C  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7369  00143E  0100               	movlb	0	; () banked
  7370  001440  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7371  001442  6ED9               	movwf	fsr2l,c
  7372  001444  0101               	movlb	1	; () banked
  7373  001446  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7374  001448  0100               	movlb	0	; () banked
  7375  00144A  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7376  00144C  6EDA               	movwf	fsr2h,c
  7377  00144E  50DF               	movf	indf2,w,c
  7378  001450  0101               	movlb	1	; () banked
  7379  001452  6FF4               	movwf	run_ASLBoron@cnfg_cnt& (0+255),b
  7380                           
  7381                           ; BSR set to: 1
  7382  001454  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7383  001456  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7384                           
  7385                           ; BSR set to: 1
  7386                           ;HX_ASL_BORON.c: 44: if ((3*cnfg_cnt > 256) || (cnfg_cnt < 1))
  7387  001458  51F4               	movf	run_ASLBoron@cnfg_cnt& (0+255),w,b
  7388  00145A  0D03               	mullw	3
  7389  00145C  BEF4               	btfsc	prodh,7,c
  7390  00145E  D005               	goto	u8410
  7391  001460  04F3               	decf	prodl,w,c
  7392  001462  0E01               	movlw	1
  7393  001464  58F4               	subwfb	prodh,w,c
  7394  001466  B0D8               	btfsc	status,0,c
  7395  001468  D003               	goto	u8420
  7396  00146A                     u8410:
  7397                           
  7398                           ; BSR set to: 1
  7399  00146A  51F4               	movf	run_ASLBoron@cnfg_cnt& (0+255),w,b
  7400  00146C  A4D8               	btfss	status,2,c
  7401  00146E  D003               	goto	l1025
  7402  001470                     u8420:
  7403                           
  7404                           ; BSR set to: 1
  7405                           ;HX_ASL_BORON.c: 45: {
  7406                           ;HX_ASL_BORON.c: 46: hx_state = 0x40;
  7407                           
  7408                           ; BSR set to: 1
  7409  001470  0E40               	movlw	64
  7410  001472  6E45               	movwf	_hx_state,c
  7411                           
  7412                           ; BSR set to: 1
  7413                           ;HX_ASL_BORON.c: 47: return;
  7414  001474  0012               	return	
  7415  001476                     l1025:
  7416                           
  7417                           ; BSR set to: 1
  7418                           ;HX_ASL_BORON.c: 48: }
  7419                           ;HX_ASL_BORON.c: 49: for (uint8_t i = 0; i < 3*cnfg_cnt; i++)
  7420                           
  7421                           ; BSR set to: 1
  7422  001476  0E00               	movlw	0
  7423  001478  6FF3               	movwf	run_ASLBoron@i& (0+255),b
  7424  00147A  D018               	goto	l1028
  7425  00147C                     
  7426                           ;HX_ASL_BORON.c: 50: {
  7427                           ;HX_ASL_BORON.c: 51: cnfg_arr[i] = hx_inData[data_index++];
  7428                           
  7429                           ; BSR set to: 1
  7430  00147C  0101               	movlb	1	; () banked
  7431  00147E  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7432  001480  0100               	movlb	0	; () banked
  7433  001482  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7434  001484  6ED9               	movwf	fsr2l,c
  7435  001486  0101               	movlb	1	; () banked
  7436  001488  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7437  00148A  0100               	movlb	0	; () banked
  7438  00148C  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7439  00148E  6EDA               	movwf	fsr2h,c
  7440  001490  0101               	movlb	1	; () banked
  7441  001492  51F3               	movf	run_ASLBoron@i& (0+255),w,b
  7442  001494  0D01               	mullw	1
  7443  001496  0E00               	movlw	low run_ASLBoron@cnfg_arr
  7444  001498  24F3               	addwf	prodl,w,c
  7445  00149A  6EE1               	movwf	fsr1l,c
  7446  00149C  0E0C               	movlw	high run_ASLBoron@cnfg_arr
  7447  00149E  20F4               	addwfc	prodh,w,c
  7448  0014A0  6EE2               	movwf	fsr1h,c
  7449  0014A2  CFDF FFE7          	movff	indf2,indf1
  7450                           
  7451                           ; BSR set to: 1
  7452  0014A6  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7453  0014A8  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7454                           
  7455                           ; BSR set to: 1
  7456  0014AA  2BF3               	incf	run_ASLBoron@i& (0+255),f,b
  7457  0014AC                     l1028:
  7458                           
  7459                           ; BSR set to: 1
  7460                           
  7461                           ; BSR set to: 1
  7462  0014AC  51F4               	movf	run_ASLBoron@cnfg_cnt& (0+255),w,b
  7463  0014AE  0D03               	mullw	3
  7464  0014B0  51F3               	movf	run_ASLBoron@i& (0+255),w,b
  7465  0014B2  0100               	movlb	0	; () banked
  7466  0014B4  6FD6               	movwf	??_run_ASLBoron& (0+255),b
  7467  0014B6  6BD7               	clrf	(??_run_ASLBoron+1)& (0+255),b
  7468  0014B8  50F3               	movf	prodl,w,c
  7469  0014BA  5DD6               	subwf	??_run_ASLBoron& (0+255),w,b
  7470  0014BC  51D7               	movf	(??_run_ASLBoron+1)& (0+255),w,b
  7471  0014BE  0A80               	xorlw	128
  7472  0014C0  6FD8               	movwf	(??_run_ASLBoron+2)& (0+255),b
  7473  0014C2  50F4               	movf	prodh,w,c
  7474  0014C4  0A80               	xorlw	128
  7475  0014C6  59D8               	subwfb	(??_run_ASLBoron+2)& (0+255),w,b
  7476  0014C8  B0D8               	btfsc	status,0,c
  7477  0014CA  D010               	goto	l1031
  7478  0014CC  D7D7               	goto	l1029
  7479  0014CE                     l1024:
  7480                           
  7481                           ;HX_ASL_BORON.c: 54: else
  7482                           ;HX_ASL_BORON.c: 55: {
  7483                           ;HX_ASL_BORON.c: 56: cnfg_run = hx_inData[data_index++];
  7484                           
  7485                           ; BSR set to: 0
  7486  0014CE  0101               	movlb	1	; () banked
  7487  0014D0  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7488  0014D2  0100               	movlb	0	; () banked
  7489  0014D4  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7490  0014D6  6ED9               	movwf	fsr2l,c
  7491  0014D8  0101               	movlb	1	; () banked
  7492  0014DA  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7493  0014DC  0100               	movlb	0	; () banked
  7494  0014DE  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7495  0014E0  6EDA               	movwf	fsr2h,c
  7496  0014E2  50DF               	movf	indf2,w,c
  7497  0014E4  0101               	movlb	1	; () banked
  7498  0014E6  6FF2               	movwf	run_ASLBoron@cnfg_run& (0+255),b
  7499                           
  7500                           ; BSR set to: 1
  7501  0014E8  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7502  0014EA  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7503  0014EC                     l1031:
  7504                           
  7505                           ;HX_ASL_BORON.c: 57: }
  7506                           ;HX_ASL_BORON.c: 58: rpt_run[0] = hx_inData[data_index] == 0 ? 1 : hx_inData[data_index]
      +                          ;
  7507                           
  7508                           ; BSR set to: 1
  7509  0014EC  0101               	movlb	1	; () banked
  7510  0014EE  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7511  0014F0  0100               	movlb	0	; () banked
  7512  0014F2  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7513  0014F4  6ED9               	movwf	fsr2l,c
  7514  0014F6  0101               	movlb	1	; () banked
  7515  0014F8  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7516  0014FA  0100               	movlb	0	; () banked
  7517  0014FC  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7518  0014FE  6EDA               	movwf	fsr2h,c
  7519  001500  50DF               	movf	indf2,w,c
  7520  001502  B4D8               	btfsc	status,2,c
  7521  001504  D011               	goto	l1033
  7522                           
  7523                           ; BSR set to: 0
  7524  001506  0101               	movlb	1	; () banked
  7525  001508  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7526  00150A  0100               	movlb	0	; () banked
  7527  00150C  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7528  00150E  6ED9               	movwf	fsr2l,c
  7529  001510  0101               	movlb	1	; () banked
  7530  001512  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7531  001514  0100               	movlb	0	; () banked
  7532  001516  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7533  001518  6EDA               	movwf	fsr2h,c
  7534  00151A  50DF               	movf	indf2,w,c
  7535  00151C  6FD6               	movwf	??_run_ASLBoron& (0+255),b
  7536  00151E  51D6               	movf	??_run_ASLBoron& (0+255),w,b
  7537  001520  0101               	movlb	1	; () banked
  7538  001522  6FE9               	movwf	_run_ASLBoron$1381& (0+255),b
  7539  001524  6BEA               	clrf	(_run_ASLBoron$1381+1)& (0+255),b
  7540  001526  D005               	goto	l1035
  7541  001528                     l1033:
  7542                           
  7543                           ; BSR set to: 1
  7544  001528  0E00               	movlw	0
  7545  00152A  0101               	movlb	1	; () banked
  7546  00152C  6FEA               	movwf	(_run_ASLBoron$1381+1)& (0+255),b
  7547  00152E  0E01               	movlw	1
  7548  001530  6FE9               	movwf	_run_ASLBoron$1381& (0+255),b
  7549  001532                     l1035:
  7550                           
  7551                           ; BSR set to: 1
  7552                           
  7553                           ; BSR set to: 1
  7554  001532  C1E9  F1ED         	movff	_run_ASLBoron$1381,run_ASLBoron@rpt_run
  7555                           
  7556                           ; BSR set to: 1
  7557                           ;HX_ASL_BORON.c: 59: data_index++;
  7558  001536  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7559  001538  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7560                           
  7561                           ; BSR set to: 1
  7562                           ;HX_ASL_BORON.c: 60: rpt_run[1] = hx_inData[data_index] == 0 ? 1 : hx_inData[data_index]
      +                          ;
  7563  00153A  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7564  00153C  0100               	movlb	0	; () banked
  7565  00153E  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7566  001540  6ED9               	movwf	fsr2l,c
  7567  001542  0101               	movlb	1	; () banked
  7568  001544  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7569  001546  0100               	movlb	0	; () banked
  7570  001548  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7571  00154A  6EDA               	movwf	fsr2h,c
  7572  00154C  50DF               	movf	indf2,w,c
  7573  00154E  B4D8               	btfsc	status,2,c
  7574  001550  D011               	goto	l1037
  7575                           
  7576                           ; BSR set to: 0
  7577  001552  0101               	movlb	1	; () banked
  7578  001554  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7579  001556  0100               	movlb	0	; () banked
  7580  001558  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7581  00155A  6ED9               	movwf	fsr2l,c
  7582  00155C  0101               	movlb	1	; () banked
  7583  00155E  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7584  001560  0100               	movlb	0	; () banked
  7585  001562  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7586  001564  6EDA               	movwf	fsr2h,c
  7587  001566  50DF               	movf	indf2,w,c
  7588  001568  6FD6               	movwf	??_run_ASLBoron& (0+255),b
  7589  00156A  51D6               	movf	??_run_ASLBoron& (0+255),w,b
  7590  00156C  0101               	movlb	1	; () banked
  7591  00156E  6FEB               	movwf	_run_ASLBoron$1382& (0+255),b
  7592  001570  6BEC               	clrf	(_run_ASLBoron$1382+1)& (0+255),b
  7593  001572  D005               	goto	l1039
  7594  001574                     l1037:
  7595                           
  7596                           ; BSR set to: 1
  7597  001574  0E00               	movlw	0
  7598  001576  0101               	movlb	1	; () banked
  7599  001578  6FEC               	movwf	(_run_ASLBoron$1382+1)& (0+255),b
  7600  00157A  0E01               	movlw	1
  7601  00157C  6FEB               	movwf	_run_ASLBoron$1382& (0+255),b
  7602  00157E                     l1039:
  7603                           
  7604                           ; BSR set to: 1
  7605                           
  7606                           ; BSR set to: 1
  7607  00157E  C1EB  F1EE         	movff	_run_ASLBoron$1382,run_ASLBoron@rpt_run+1
  7608                           
  7609                           ; BSR set to: 1
  7610                           ;HX_ASL_BORON.c: 61: data_index++;
  7611  001582  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7612  001584  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7613                           
  7614                           ; BSR set to: 1
  7615                           ;HX_ASL_BORON.c: 62: checksum = hx_inData[data_index++];
  7616  001586  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7617  001588  0100               	movlb	0	; () banked
  7618  00158A  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7619  00158C  6ED9               	movwf	fsr2l,c
  7620  00158E  0101               	movlb	1	; () banked
  7621  001590  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7622  001592  0100               	movlb	0	; () banked
  7623  001594  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7624  001596  6EDA               	movwf	fsr2h,c
  7625  001598  50DF               	movf	indf2,w,c
  7626  00159A  0101               	movlb	1	; () banked
  7627  00159C  6FEF               	movwf	run_ASLBoron@checksum& (0+255),b
  7628                           
  7629                           ; BSR set to: 1
  7630  00159E  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7631  0015A0  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7632                           
  7633                           ; BSR set to: 1
  7634                           ;HX_ASL_BORON.c: 63: calc_checksum = calcChecksum(hx_inData, data_index-1);
  7635  0015A2  C0D3  F060         	movff	run_ASLBoron@hx_inData,calcChecksum@data
  7636  0015A6  C0D4  F061         	movff	run_ASLBoron@hx_inData+1,calcChecksum@data+1
  7637  0015AA  05F6               	decf	run_ASLBoron@data_index& (0+255),w,b
  7638  0015AC  0100               	movlb	0	; () banked
  7639  0015AE  6F62               	movwf	calcChecksum@size& (0+255),b
  7640  0015B0  EC67  F01E         	call	_calcChecksum	;wreg free
  7641  0015B4  0101               	movlb	1	; () banked
  7642  0015B6  6FF0               	movwf	run_ASLBoron@calc_checksum& (0+255),b
  7643                           
  7644                           ; BSR set to: 1
  7645                           ;HX_ASL_BORON.c: 64: if (calc_checksum != checksum)
  7646  0015B8  51EF               	movf	run_ASLBoron@checksum& (0+255),w,b
  7647  0015BA  19F0               	xorwf	run_ASLBoron@calc_checksum& (0+255),w,b
  7648  0015BC  B4D8               	btfsc	status,2,c
  7649  0015BE  D04E               	goto	l1042
  7650                           
  7651                           ; BSR set to: 1
  7652                           ;HX_ASL_BORON.c: 65: {
  7653                           ;HX_ASL_BORON.c: 66: hx_state = 0x20;
  7654  0015C0  0E20               	movlw	32
  7655  0015C2  6E45               	movwf	_hx_state,c
  7656                           
  7657                           ; BSR set to: 1
  7658                           ;HX_ASL_BORON.c: 68: }
  7659                           
  7660                           ; BSR set to: 1
  7661                           ;HX_ASL_BORON.c: 67: return;
  7662  0015C4  0012               	return	
  7663  0015C6                     
  7664                           ; BSR set to: 1
  7665                           ;HX_ASL_BORON.c: 74: hx_mainDataIndex = 1;
  7666                           
  7667                           ; BSR set to: 1
  7668  0015C6  0E01               	movlw	1
  7669  0015C8  6E3F               	movwf	_hx_mainDataIndex,c
  7670                           
  7671                           ; BSR set to: 1
  7672                           ;HX_ASL_BORON.c: 75: write_ASLBoron_test(test_run, rpt_run, hx_mainData);
  7673  0015CA  0EED               	movlw	low run_ASLBoron@rpt_run
  7674  0015CC  0100               	movlb	0	; () banked
  7675  0015CE  6FC7               	movwf	write_ASLBoron_test@run_rpt& (0+255),b
  7676  0015D0  0E01               	movlw	high run_ASLBoron@rpt_run
  7677  0015D2  6FC8               	movwf	(write_ASLBoron_test@run_rpt+1)& (0+255),b
  7678  0015D4  0EC0               	movlw	low _hx_mainData
  7679  0015D6  6FC9               	movwf	write_ASLBoron_test@rxBuffer& (0+255),b
  7680  0015D8  0E0B               	movlw	high _hx_mainData
  7681  0015DA  6FCA               	movwf	(write_ASLBoron_test@rxBuffer+1)& (0+255),b
  7682  0015DC  0101               	movlb	1	; () banked
  7683  0015DE  51F1               	movf	run_ASLBoron@test_run& (0+255),w,b
  7684  0015E0  ECD9  F006         	call	_write_ASLBoron_test
  7685                           
  7686                           ;HX_ASL_BORON.c: 76: hx_state = 0x10;
  7687  0015E4  0E10               	movlw	16
  7688  0015E6  6E45               	movwf	_hx_state,c
  7689                           
  7690                           ;HX_ASL_BORON.c: 77: break;
  7691  0015E8  0012               	return	
  7692  0015EA                     
  7693                           ;HX_ASL_BORON.c: 80: hx_mainDataIndex = 1;
  7694  0015EA  0E01               	movlw	1
  7695  0015EC  6E3F               	movwf	_hx_mainDataIndex,c
  7696                           
  7697                           ;HX_ASL_BORON.c: 81: write_ASLBoron_cnfg(cnfg_run, hx_mainData);
  7698  0015EE  0EC0               	movlw	low _hx_mainData
  7699  0015F0  0100               	movlb	0	; () banked
  7700  0015F2  6F62               	movwf	write_ASLBoron_cnfg@rxBuffer& (0+255),b
  7701  0015F4  0E0B               	movlw	high _hx_mainData
  7702  0015F6  6F63               	movwf	(write_ASLBoron_cnfg@rxBuffer+1)& (0+255),b
  7703  0015F8  0101               	movlb	1	; () banked
  7704  0015FA  51F2               	movf	run_ASLBoron@cnfg_run& (0+255),w,b
  7705  0015FC  ECF6  F019         	call	_write_ASLBoron_cnfg
  7706                           
  7707                           ;HX_ASL_BORON.c: 82: hx_state = 0x10;
  7708  001600  0E10               	movlw	16
  7709  001602  6E45               	movwf	_hx_state,c
  7710                           
  7711                           ;HX_ASL_BORON.c: 83: break;
  7712  001604  0012               	return	
  7713  001606                     
  7714                           ;HX_ASL_BORON.c: 86: hx_mainDataIndex = 1;
  7715  001606  0E01               	movlw	1
  7716  001608  6E3F               	movwf	_hx_mainDataIndex,c
  7717                           
  7718                           ;HX_ASL_BORON.c: 87: write_ASLBoron_cstm_cnfg(cnfg_arr, 3*cnfg_cnt, hx_mainData);
  7719  00160A  0E00               	movlw	low run_ASLBoron@cnfg_arr
  7720  00160C  0100               	movlb	0	; () banked
  7721  00160E  6F60               	movwf	write_ASLBoron_cstm_cnfg@cnfg_arr& (0+255),b
  7722  001610  0E0C               	movlw	high run_ASLBoron@cnfg_arr
  7723  001612  6F61               	movwf	(write_ASLBoron_cstm_cnfg@cnfg_arr+1)& (0+255),b
  7724  001614  0101               	movlb	1	; () banked
  7725  001616  51F4               	movf	run_ASLBoron@cnfg_cnt& (0+255),w,b
  7726  001618  0D03               	mullw	3
  7727  00161A  CFF3 F062          	movff	prodl,write_ASLBoron_cstm_cnfg@cnfg_arr_size
  7728  00161E  CFF4 F063          	movff	prodh,write_ASLBoron_cstm_cnfg@cnfg_arr_size+1
  7729  001622  0EC0               	movlw	low _hx_mainData
  7730  001624  0100               	movlb	0	; () banked
  7731  001626  6F64               	movwf	write_ASLBoron_cstm_cnfg@rxBuffer& (0+255),b
  7732  001628  0E0B               	movlw	high _hx_mainData
  7733  00162A  6F65               	movwf	(write_ASLBoron_cstm_cnfg@rxBuffer+1)& (0+255),b
  7734  00162C  EC53  F020         	call	_write_ASLBoron_cstm_cnfg	;wreg free
  7735                           
  7736                           ;HX_ASL_BORON.c: 88: hx_state = 0x10;
  7737  001630  0E10               	movlw	16
  7738  001632  6E45               	movwf	_hx_state,c
  7739                           
  7740                           ;HX_ASL_BORON.c: 89: break;
  7741  001634  0012               	return	
  7742  001636                     
  7743                           ;HX_ASL_BORON.c: 92: hx_mainDataIndex = 1;
  7744  001636  0E01               	movlw	1
  7745  001638  6E3F               	movwf	_hx_mainDataIndex,c
  7746                           
  7747                           ;HX_ASL_BORON.c: 93: write_ASLBoron_debug(test_run, cnfg_run, hx_mainData);
  7748  00163A  C1F2  F0C8         	movff	run_ASLBoron@cnfg_run,write_ASLBoron_debug@run_cnfg
  7749  00163E  0EC0               	movlw	low _hx_mainData
  7750  001640  0100               	movlb	0	; () banked
  7751  001642  6FC9               	movwf	write_ASLBoron_debug@rxBuffer& (0+255),b
  7752  001644  0E0B               	movlw	high _hx_mainData
  7753  001646  6FCA               	movwf	(write_ASLBoron_debug@rxBuffer+1)& (0+255),b
  7754  001648  0101               	movlb	1	; () banked
  7755  00164A  51F1               	movf	run_ASLBoron@test_run& (0+255),w,b
  7756  00164C  EC18  F014         	call	_write_ASLBoron_debug
  7757                           
  7758                           ;HX_ASL_BORON.c: 94: hx_state = 0x10;
  7759  001650  0E10               	movlw	16
  7760  001652  6E45               	movwf	_hx_state,c
  7761                           
  7762                           ;HX_ASL_BORON.c: 95: break;
  7763  001654  0012               	return	
  7764  001656                     
  7765                           ;HX_ASL_BORON.c: 98: hx_state = 0x40;
  7766  001656  0E40               	movlw	64
  7767  001658  6E45               	movwf	_hx_state,c
  7768                           
  7769                           ;HX_ASL_BORON.c: 100: }
  7770                           
  7771                           ;HX_ASL_BORON.c: 99: break;
  7772  00165A  0012               	return	
  7773  00165C                     l1042:
  7774  00165C  0101               	movlb	1	; () banked
  7775  00165E  51F5               	movf	run_ASLBoron@mode_run& (0+255),w,b
  7776                           
  7777                           ; Switch size 1, requested type "space"
  7778                           ; Number of cases is 4, Range of values is 0 to 170
  7779                           ; switch strategies available:
  7780                           ; Name         Instructions Cycles
  7781                           ; simple_byte           13     7 (average)
  7782                           ;	Chosen strategy is simple_byte
  7783  001660  0A00               	xorlw	0	; case 0
  7784  001662  B4D8               	btfsc	status,2,c
  7785  001664  D7B0               	goto	l1043
  7786  001666  0A01               	xorlw	1	; case 1
  7787  001668  B4D8               	btfsc	status,2,c
  7788  00166A  D7BF               	goto	l1045
  7789  00166C  0A03               	xorlw	3	; case 2
  7790  00166E  B4D8               	btfsc	status,2,c
  7791  001670  D7CA               	goto	l1046
  7792  001672  0AA8               	xorlw	168	; case 170
  7793  001674  B4D8               	btfsc	status,2,c
  7794  001676  D7DF               	goto	l1047
  7795  001678  D7EE               	goto	l1048
  7796  00167A                     __end_of_run_ASLBoron:
  7797                           	opt stack 0
  7798                           tblptru	equ	0xFF8
  7799                           tblptrh	equ	0xFF7
  7800                           tblptrl	equ	0xFF6
  7801                           tablat	equ	0xFF5
  7802                           prodh	equ	0xFF4
  7803                           prodl	equ	0xFF3
  7804                           intcon	equ	0xFF2
  7805                           postinc0	equ	0xFEE
  7806                           wreg	equ	0xFE8
  7807                           indf1	equ	0xFE7
  7808                           postinc1	equ	0xFE6
  7809                           postdec1	equ	0xFE5
  7810                           fsr1h	equ	0xFE2
  7811                           fsr1l	equ	0xFE1
  7812                           indf2	equ	0xFDF
  7813                           postinc2	equ	0xFDE
  7814                           fsr2h	equ	0xFDA
  7815                           fsr2l	equ	0xFD9
  7816                           status	equ	0xFD8
  7817                           
  7818 ;; *************** function _write_ASLBoron_test *****************
  7819 ;; Defined at:
  7820 ;;		line 105 in file "HX_ASL_BORON.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;  run_test        1    wreg     unsigned char 
  7823 ;;  run_rpt         2  103[BANK0 ] PTR unsigned char 
  7824 ;;		 -> run_ASLBoron@rpt_run(2), 
  7825 ;;  rxBuffer        2  105[BANK0 ] PTR unsigned char 
  7826 ;;		 -> hx_mainData(61), 
  7827 ;; Auto vars:     Size  Location     Type
  7828 ;;  run_test        1  110[BANK0 ] unsigned char 
  7829 ;;  j               2  113[BANK0 ] int 
  7830 ;;  i               2  111[BANK0 ] int 
  7831 ;; Return value:  Size  Location     Type
  7832 ;;                  1    wreg      void 
  7833 ;; Registers used:
  7834 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7835 ;; Tracked objects:
  7836 ;;		On entry : 0/0
  7837 ;;		On exit  : 0/0
  7838 ;;		Unchanged: 0/0
  7839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7840 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7841 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7842 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7843 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7844 ;;Total ram usage:       12 bytes
  7845 ;; Hardware stack levels used:    1
  7846 ;; Hardware stack levels required when called:   12
  7847 ;; This function calls:
  7848 ;;		_ASLB_ADC
  7849 ;;		_ASLB_ADCReferenceVoltage
  7850 ;;		_ASLB_AnalogMuxReadingSetup
  7851 ;;		_ASLB_CFCVVaricap
  7852 ;;		_ASLB_CTHERM
  7853 ;;		_ASLB_ColpittsOscillator
  7854 ;;		_ASLB_CommonGate
  7855 ;;		_ASLB_ContinuityESD
  7856 ;;		_ASLB_CurrentLimitDACVoltage
  7857 ;;		_ASLB_DACReferenceVoltage
  7858 ;;		_ASLB_DigitalRegulatorVoltage
  7859 ;;		_ASLB_ExternalReferenceVoltage
  7860 ;;		_ASLB_HeaterFBSignals
  7861 ;;		_ASLB_HeaterFunctionality
  7862 ;;		_ASLB_InternalTempSensor
  7863 ;;		_ASLB_MuxOpenCircuit
  7864 ;;		_ASLB_MuxReadingVDD
  7865 ;;		_ASLB_OscillatorRegulatorVoltage
  7866 ;;		_ASLB_PierceOscillator
  7867 ;;		_ASLB_RDResistor
  7868 ;;		_ASLB_SheetResistance
  7869 ;;		_ASLB_TempSetDACVoltage
  7870 ;;		_ASLB_VaricapBiasSteering
  7871 ;;		_ASLB_VaricapDACVoltage
  7872 ;;		_ASLB_ZTCReferenceCurrent
  7873 ;; This function is called by:
  7874 ;;		_run_ASLBoron
  7875 ;; This function uses a non-reentrant model
  7876 ;;
  7877                           
  7878                           	psect	text14
  7879  000DB2                     __ptext14:
  7880                           	opt stack 0
  7881  000DB2                     _write_ASLBoron_test:
  7882                           	opt stack 17
  7883                           
  7884                           ;incstack = 0
  7885                           ;write_ASLBoron_test@run_test stored from wreg
  7886  000DB2  0100               	movlb	0	; () banked
  7887  000DB4  6FCE               	movwf	write_ASLBoron_test@run_test& (0+255),b
  7888                           
  7889                           ;HX_ASL_BORON.c: 107: int i,j;
  7890                           ;HX_ASL_BORON.c: 109: for (i = 0; i < run_rpt[0]; i++)
  7891  000DB6  0E00               	movlw	0
  7892  000DB8  0100               	movlb	0	; () banked
  7893  000DBA  6FD0               	movwf	(write_ASLBoron_test@i+1)& (0+255),b
  7894  000DBC  0E00               	movlw	0
  7895  000DBE  6FCF               	movwf	write_ASLBoron_test@i& (0+255),b
  7896  000DC0  D172               	goto	l1051
  7897  000DC2                     
  7898                           ; BSR set to: 0
  7899                           ;HX_ASL_BORON.c: 110: {
  7900                           ;HX_ASL_BORON.c: 111: for (j = 0; j < run_rpt[1]; j++)
  7901                           
  7902                           ; BSR set to: 0
  7903  000DC2  0E00               	movlw	0
  7904  000DC4  6FD2               	movwf	(write_ASLBoron_test@j+1)& (0+255),b
  7905  000DC6  0E00               	movlw	0
  7906  000DC8  6FD1               	movwf	write_ASLBoron_test@j& (0+255),b
  7907  000DCA  D158               	goto	l1053
  7908  000DCC                     
  7909                           ; BSR set to: 0
  7910                           ;HX_ASL_BORON.c: 116: ASLB_ContinuityESD(&rxBuffer[1]);
  7911                           
  7912                           ; BSR set to: 0
  7913  000DCC  0E01               	movlw	1
  7914  000DCE  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  7915  000DD0  6F60               	movwf	ASLB_ContinuityESD@rxBuffer& (0+255),b
  7916  000DD2  0E00               	movlw	0
  7917  000DD4  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  7918  000DD6  6F61               	movwf	(ASLB_ContinuityESD@rxBuffer+1)& (0+255),b
  7919  000DD8  EC52  F020         	call	_ASLB_ContinuityESD	;wreg free
  7920  000DDC  D0EF               	goto	l11338
  7921  000DDE                     
  7922                           ;HX_ASL_BORON.c: 121: ASLB_SheetResistance(&rxBuffer[1]);
  7923  000DDE  0E01               	movlw	1
  7924  000DE0  0100               	movlb	0	; () banked
  7925  000DE2  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  7926  000DE4  6FC4               	movwf	ASLB_SheetResistance@rxBuffer& (0+255),b
  7927  000DE6  0E00               	movlw	0
  7928  000DE8  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  7929  000DEA  6FC5               	movwf	(ASLB_SheetResistance@rxBuffer+1)& (0+255),b
  7930  000DEC  ECC1  F018         	call	_ASLB_SheetResistance	;wreg free
  7931  000DF0  D0E5               	goto	l11338
  7932  000DF2                     
  7933                           ;HX_ASL_BORON.c: 126: ASLB_HeaterFunctionality(&rxBuffer[1]);
  7934  000DF2  0E01               	movlw	1
  7935  000DF4  0100               	movlb	0	; () banked
  7936  000DF6  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  7937  000DF8  6F72               	movwf	ASLB_HeaterFunctionality@rxBuffer& (0+255),b
  7938  000DFA  0E00               	movlw	0
  7939  000DFC  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  7940  000DFE  6F73               	movwf	(ASLB_HeaterFunctionality@rxBuffer+1)& (0+255),b
  7941  000E00  EC62  F016         	call	_ASLB_HeaterFunctionality	;wreg free
  7942  000E04  D0DB               	goto	l11338
  7943  000E06                     
  7944                           ;HX_ASL_BORON.c: 131: ASLB_AnalogMuxReadingSetup(&rxBuffer[1]);
  7945  000E06  0E01               	movlw	1
  7946  000E08  0100               	movlb	0	; () banked
  7947  000E0A  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  7948  000E0C  6F72               	movwf	ASLB_AnalogMuxReadingSetup@rxBuffer& (0+255),b
  7949  000E0E  0E00               	movlw	0
  7950  000E10  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  7951  000E12  6F73               	movwf	(ASLB_AnalogMuxReadingSetup@rxBuffer+1)& (0+255),b
  7952  000E14  EC53  F019         	call	_ASLB_AnalogMuxReadingSetup	;wreg free
  7953  000E18  D0D1               	goto	l11338
  7954  000E1A                     
  7955                           ;HX_ASL_BORON.c: 136: ASLB_CTHERM(&rxBuffer[1]);
  7956  000E1A  0E01               	movlw	1
  7957  000E1C  0100               	movlb	0	; () banked
  7958  000E1E  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  7959  000E20  6F62               	movwf	ASLB_CTHERM@rxBuffer& (0+255),b
  7960  000E22  0E00               	movlw	0
  7961  000E24  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  7962  000E26  6F63               	movwf	(ASLB_CTHERM@rxBuffer+1)& (0+255),b
  7963  000E28  ECEC  F01E         	call	_ASLB_CTHERM	;wreg free
  7964  000E2C  D0C7               	goto	l11338
  7965  000E2E                     
  7966                           ;HX_ASL_BORON.c: 141: ASLB_ADCReferenceVoltage(&rxBuffer[1]);
  7967  000E2E  0E01               	movlw	1
  7968  000E30  0100               	movlb	0	; () banked
  7969  000E32  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  7970  000E34  6F62               	movwf	ASLB_ADCReferenceVoltage@rxBuffer& (0+255),b
  7971  000E36  0E00               	movlw	0
  7972  000E38  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  7973  000E3A  6F63               	movwf	(ASLB_ADCReferenceVoltage@rxBuffer+1)& (0+255),b
  7974  000E3C  ECC3  F01E         	call	_ASLB_ADCReferenceVoltage	;wreg free
  7975  000E40  D0BD               	goto	l11338
  7976  000E42                     
  7977                           ;HX_ASL_BORON.c: 146: ASLB_HeaterFBSignals(&rxBuffer[1]);
  7978  000E42  0E01               	movlw	1
  7979  000E44  0100               	movlb	0	; () banked
  7980  000E46  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  7981  000E48  6F62               	movwf	ASLB_HeaterFBSignals@rxBuffer& (0+255),b
  7982  000E4A  0E00               	movlw	0
  7983  000E4C  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  7984  000E4E  6F63               	movwf	(ASLB_HeaterFBSignals@rxBuffer+1)& (0+255),b
  7985  000E50  EC4F  F01C         	call	_ASLB_HeaterFBSignals	;wreg free
  7986  000E54  D0B3               	goto	l11338
  7987  000E56                     
  7988                           ;HX_ASL_BORON.c: 151: ASLB_InternalTempSensor(&rxBuffer[1]);
  7989  000E56  0E01               	movlw	1
  7990  000E58  0100               	movlb	0	; () banked
  7991  000E5A  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  7992  000E5C  6F62               	movwf	ASLB_InternalTempSensor@rxBuffer& (0+255),b
  7993  000E5E  0E00               	movlw	0
  7994  000E60  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  7995  000E62  6F63               	movwf	(ASLB_InternalTempSensor@rxBuffer+1)& (0+255),b
  7996  000E64  ECB5  F01D         	call	_ASLB_InternalTempSensor	;wreg free
  7997  000E68  D0A9               	goto	l11338
  7998  000E6A                     
  7999                           ;HX_ASL_BORON.c: 156: ASLB_MuxReadingVDD(&rxBuffer[1]);
  8000  000E6A  0E01               	movlw	1
  8001  000E6C  0100               	movlb	0	; () banked
  8002  000E6E  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8003  000E70  6F62               	movwf	ASLB_MuxReadingVDD@rxBuffer& (0+255),b
  8004  000E72  0E00               	movlw	0
  8005  000E74  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8006  000E76  6F63               	movwf	(ASLB_MuxReadingVDD@rxBuffer+1)& (0+255),b
  8007  000E78  ECAE  F01E         	call	_ASLB_MuxReadingVDD	;wreg free
  8008  000E7C  D09F               	goto	l11338
  8009  000E7E                     
  8010                           ;HX_ASL_BORON.c: 161: ASLB_DACReferenceVoltage(&rxBuffer[1]);
  8011  000E7E  0E01               	movlw	1
  8012  000E80  0100               	movlb	0	; () banked
  8013  000E82  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8014  000E84  6F62               	movwf	ASLB_DACReferenceVoltage@rxBuffer& (0+255),b
  8015  000E86  0E00               	movlw	0
  8016  000E88  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8017  000E8A  6F63               	movwf	(ASLB_DACReferenceVoltage@rxBuffer+1)& (0+255),b
  8018  000E8C  ECE9  F01D         	call	_ASLB_DACReferenceVoltage	;wreg free
  8019  000E90  D095               	goto	l11338
  8020  000E92                     
  8021                           ;HX_ASL_BORON.c: 166: ASLB_VaricapDACVoltage(&rxBuffer[1]);
  8022  000E92  0E01               	movlw	1
  8023  000E94  0100               	movlb	0	; () banked
  8024  000E96  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8025  000E98  6F62               	movwf	ASLB_VaricapDACVoltage@rxBuffer& (0+255),b
  8026  000E9A  0E00               	movlw	0
  8027  000E9C  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8028  000E9E  6F63               	movwf	(ASLB_VaricapDACVoltage@rxBuffer+1)& (0+255),b
  8029  000EA0  EC81  F01D         	call	_ASLB_VaricapDACVoltage	;wreg free
  8030  000EA4  D08B               	goto	l11338
  8031  000EA6                     
  8032                           ;HX_ASL_BORON.c: 171: ASLB_TempSetDACVoltage(&rxBuffer[1]);
  8033  000EA6  0E01               	movlw	1
  8034  000EA8  0100               	movlb	0	; () banked
  8035  000EAA  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8036  000EAC  6F62               	movwf	ASLB_TempSetDACVoltage@rxBuffer& (0+255),b
  8037  000EAE  0E00               	movlw	0
  8038  000EB0  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8039  000EB2  6F63               	movwf	(ASLB_TempSetDACVoltage@rxBuffer+1)& (0+255),b
  8040  000EB4  EC2B  F01A         	call	_ASLB_TempSetDACVoltage	;wreg free
  8041  000EB8  D081               	goto	l11338
  8042  000EBA                     
  8043                           ;HX_ASL_BORON.c: 176: ASLB_CurrentLimitDACVoltage(&rxBuffer[1]);
  8044  000EBA  0E01               	movlw	1
  8045  000EBC  0100               	movlb	0	; () banked
  8046  000EBE  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8047  000EC0  6F68               	movwf	ASLB_CurrentLimitDACVoltage@rxBuffer& (0+255),b
  8048  000EC2  0E00               	movlw	0
  8049  000EC4  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8050  000EC6  6F69               	movwf	(ASLB_CurrentLimitDACVoltage@rxBuffer+1)& (0+255),b
  8051  000EC8  ECC1  F019         	call	_ASLB_CurrentLimitDACVoltage	;wreg free
  8052  000ECC  D077               	goto	l11338
  8053  000ECE                     
  8054                           ;HX_ASL_BORON.c: 181: ASLB_DigitalRegulatorVoltage(&rxBuffer[1]);
  8055  000ECE  0E01               	movlw	1
  8056  000ED0  0100               	movlb	0	; () banked
  8057  000ED2  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8058  000ED4  6F62               	movwf	ASLB_DigitalRegulatorVoltage@rxBuffer& (0+255),b
  8059  000ED6  0E00               	movlw	0
  8060  000ED8  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8061  000EDA  6F63               	movwf	(ASLB_DigitalRegulatorVoltage@rxBuffer+1)& (0+255),b
  8062  000EDC  ECCF  F01D         	call	_ASLB_DigitalRegulatorVoltage	;wreg free
  8063  000EE0  D06D               	goto	l11338
  8064  000EE2                     
  8065                           ;HX_ASL_BORON.c: 186: ASLB_ZTCReferenceCurrent(&rxBuffer[1]);
  8066  000EE2  0E01               	movlw	1
  8067  000EE4  0100               	movlb	0	; () banked
  8068  000EE6  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8069  000EE8  6F62               	movwf	ASLB_ZTCReferenceCurrent@rxBuffer& (0+255),b
  8070  000EEA  0E00               	movlw	0
  8071  000EEC  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8072  000EEE  6F63               	movwf	(ASLB_ZTCReferenceCurrent@rxBuffer+1)& (0+255),b
  8073  000EF0  EC67  F01D         	call	_ASLB_ZTCReferenceCurrent	;wreg free
  8074  000EF4  D063               	goto	l11338
  8075  000EF6                     
  8076                           ;HX_ASL_BORON.c: 191: ASLB_MuxOpenCircuit(&rxBuffer[1]);
  8077  000EF6  0E01               	movlw	1
  8078  000EF8  0100               	movlb	0	; () banked
  8079  000EFA  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8080  000EFC  6F62               	movwf	ASLB_MuxOpenCircuit@rxBuffer& (0+255),b
  8081  000EFE  0E00               	movlw	0
  8082  000F00  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8083  000F02  6F63               	movwf	(ASLB_MuxOpenCircuit@rxBuffer+1)& (0+255),b
  8084  000F04  EC9B  F01D         	call	_ASLB_MuxOpenCircuit	;wreg free
  8085  000F08  D059               	goto	l11338
  8086  000F0A                     
  8087                           ;HX_ASL_BORON.c: 196: ASLB_OscillatorRegulatorVoltage(&rxBuffer[1]);
  8088  000F0A  0E01               	movlw	1
  8089  000F0C  0100               	movlb	0	; () banked
  8090  000F0E  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8091  000F10  6F62               	movwf	ASLB_OscillatorRegulatorVoltage@rxBuffer& (0+255),b
  8092  000F12  0E00               	movlw	0
  8093  000F14  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8094  000F16  6F63               	movwf	(ASLB_OscillatorRegulatorVoltage@rxBuffer+1)& (0+255),b
  8095  000F18  EC54  F01F         	call	_ASLB_OscillatorRegulatorVoltage	;wreg free
  8096  000F1C  D04F               	goto	l11338
  8097  000F1E                     
  8098                           ;HX_ASL_BORON.c: 201: ASLB_ExternalReferenceVoltage(&rxBuffer[1]);
  8099  000F1E  0E01               	movlw	1
  8100  000F20  0100               	movlb	0	; () banked
  8101  000F22  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8102  000F24  6F62               	movwf	ASLB_ExternalReferenceVoltage@rxBuffer& (0+255),b
  8103  000F26  0E00               	movlw	0
  8104  000F28  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8105  000F2A  6F63               	movwf	(ASLB_ExternalReferenceVoltage@rxBuffer+1)& (0+255),b
  8106  000F2C  EC61  F01F         	call	_ASLB_ExternalReferenceVoltage	;wreg free
  8107  000F30  D045               	goto	l11338
  8108  000F32                     
  8109                           ;HX_ASL_BORON.c: 206: ASLB_VaricapBiasSteering(&rxBuffer[1]);
  8110  000F32  0E01               	movlw	1
  8111  000F34  0100               	movlb	0	; () banked
  8112  000F36  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8113  000F38  6F62               	movwf	ASLB_VaricapBiasSteering@rxBuffer& (0+255),b
  8114  000F3A  0E00               	movlw	0
  8115  000F3C  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8116  000F3E  6F63               	movwf	(ASLB_VaricapBiasSteering@rxBuffer+1)& (0+255),b
  8117  000F40  ECE5  F01F         	call	_ASLB_VaricapBiasSteering	;wreg free
  8118  000F44  D03B               	goto	l11338
  8119  000F46                     
  8120                           ;HX_ASL_BORON.c: 211: ASLB_ColpittsOscillator(&rxBuffer[1]);
  8121  000F46  0E01               	movlw	1
  8122  000F48  0100               	movlb	0	; () banked
  8123  000F4A  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8124  000F4C  6F60               	movwf	ASLB_ColpittsOscillator@rxBuffer& (0+255),b
  8125  000F4E  0E00               	movlw	0
  8126  000F50  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8127  000F52  6F61               	movwf	(ASLB_ColpittsOscillator@rxBuffer+1)& (0+255),b
  8128  000F54  EC31  F020         	call	_ASLB_ColpittsOscillator	;wreg free
  8129  000F58  D031               	goto	l11338
  8130  000F5A                     
  8131                           ;HX_ASL_BORON.c: 216: ASLB_PierceOscillator(&rxBuffer[1]);
  8132  000F5A  0E01               	movlw	1
  8133  000F5C  0100               	movlb	0	; () banked
  8134  000F5E  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8135  000F60  6F60               	movwf	ASLB_PierceOscillator@rxBuffer& (0+255),b
  8136  000F62  0E00               	movlw	0
  8137  000F64  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8138  000F66  6F61               	movwf	(ASLB_PierceOscillator@rxBuffer+1)& (0+255),b
  8139  000F68  EC29  F020         	call	_ASLB_PierceOscillator	;wreg free
  8140  000F6C  D027               	goto	l11338
  8141  000F6E                     
  8142                           ;HX_ASL_BORON.c: 221: ASLB_RDResistor(&rxBuffer[1]);
  8143  000F6E  0E01               	movlw	1
  8144  000F70  0100               	movlb	0	; () banked
  8145  000F72  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8146  000F74  6F60               	movwf	ASLB_RDResistor@rxBuffer& (0+255),b
  8147  000F76  0E00               	movlw	0
  8148  000F78  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8149  000F7A  6F61               	movwf	(ASLB_RDResistor@rxBuffer+1)& (0+255),b
  8150  000F7C  EC25  F020         	call	_ASLB_RDResistor	;wreg free
  8151  000F80  D01D               	goto	l11338
  8152  000F82                     
  8153                           ;HX_ASL_BORON.c: 226: ASLB_CFCVVaricap(&rxBuffer[1]);
  8154  000F82  0E01               	movlw	1
  8155  000F84  0100               	movlb	0	; () banked
  8156  000F86  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8157  000F88  6F60               	movwf	ASLB_CFCVVaricap@rxBuffer& (0+255),b
  8158  000F8A  0E00               	movlw	0
  8159  000F8C  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8160  000F8E  6F61               	movwf	(ASLB_CFCVVaricap@rxBuffer+1)& (0+255),b
  8161  000F90  EC35  F020         	call	_ASLB_CFCVVaricap	;wreg free
  8162  000F94  D013               	goto	l11338
  8163  000F96                     
  8164                           ;HX_ASL_BORON.c: 231: ASLB_CommonGate(&rxBuffer[1]);
  8165  000F96  0E01               	movlw	1
  8166  000F98  0100               	movlb	0	; () banked
  8167  000F9A  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8168  000F9C  6F60               	movwf	ASLB_CommonGate@rxBuffer& (0+255),b
  8169  000F9E  0E00               	movlw	0
  8170  000FA0  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8171  000FA2  6F61               	movwf	(ASLB_CommonGate@rxBuffer+1)& (0+255),b
  8172  000FA4  EC2D  F020         	call	_ASLB_CommonGate	;wreg free
  8173  000FA8  D009               	goto	l11338
  8174  000FAA                     
  8175                           ;HX_ASL_BORON.c: 236: ASLB_ADC(&rxBuffer[1]);
  8176  000FAA  0E01               	movlw	1
  8177  000FAC  0100               	movlb	0	; () banked
  8178  000FAE  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8179  000FB0  6F60               	movwf	ASLB_ADC@rxBuffer& (0+255),b
  8180  000FB2  0E00               	movlw	0
  8181  000FB4  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8182  000FB6  6F61               	movwf	(ASLB_ADC@rxBuffer+1)& (0+255),b
  8183  000FB8  EC39  F020         	call	_ASLB_ADC	;wreg free
  8184  000FBC                     l11338:
  8185                           
  8186                           ;HX_ASL_BORON.c: 237: rxBuffer[0] = 0x10;
  8187  000FBC  C0C9  FFD9         	movff	write_ASLBoron_test@rxBuffer,fsr2l
  8188  000FC0  C0CA  FFDA         	movff	write_ASLBoron_test@rxBuffer+1,fsr2h
  8189  000FC4  0E10               	movlw	16
  8190  000FC6  D007               	goto	L25
  8191  000FC8                     
  8192                           ;HX_ASL_BORON.c: 242: hx_state = 0x40;
  8193  000FC8  0E40               	movlw	64
  8194  000FCA  6E45               	movwf	_hx_state,c
  8195                           
  8196                           ;HX_ASL_BORON.c: 243: rxBuffer[0] = 0x00;
  8197  000FCC  C0C9  FFD9         	movff	write_ASLBoron_test@rxBuffer,fsr2l
  8198  000FD0  C0CA  FFDA         	movff	write_ASLBoron_test@rxBuffer+1,fsr2h
  8199  000FD4  0E00               	movlw	0
  8200  000FD6                     L25:
  8201  000FD6  6EDF               	movwf	indf2,c
  8202                           
  8203                           ;HX_ASL_BORON.c: 245: }
  8204                           
  8205                           ;HX_ASL_BORON.c: 244: break;
  8206  000FD8  D04E               	goto	l1057
  8207  000FDA  0100               	movlb	0	; () banked
  8208  000FDC  51CE               	movf	write_ASLBoron_test@run_test& (0+255),w,b
  8209                           
  8210                           ; Switch size 1, requested type "space"
  8211                           ; Number of cases is 25, Range of values is 0 to 24
  8212                           ; switch strategies available:
  8213                           ; Name         Instructions Cycles
  8214                           ; simple_byte           76    39 (average)
  8215                           ;	Chosen strategy is simple_byte
  8216  000FDE  0A00               	xorlw	0	; case 0
  8217  000FE0  B4D8               	btfsc	status,2,c
  8218  000FE2  D6F4               	goto	l1056
  8219  000FE4  0A01               	xorlw	1	; case 1
  8220  000FE6  B4D8               	btfsc	status,2,c
  8221  000FE8  D6FA               	goto	l1058
  8222  000FEA  0A03               	xorlw	3	; case 2
  8223  000FEC  B4D8               	btfsc	status,2,c
  8224  000FEE  D701               	goto	l1059
  8225  000FF0  0A01               	xorlw	1	; case 3
  8226  000FF2  B4D8               	btfsc	status,2,c
  8227  000FF4  D708               	goto	l1060
  8228  000FF6  0A07               	xorlw	7	; case 4
  8229  000FF8  B4D8               	btfsc	status,2,c
  8230  000FFA  D70F               	goto	l1061
  8231  000FFC  0A01               	xorlw	1	; case 5
  8232  000FFE  B4D8               	btfsc	status,2,c
  8233  001000  D716               	goto	l1062
  8234  001002  0A03               	xorlw	3	; case 6
  8235  001004  B4D8               	btfsc	status,2,c
  8236  001006  D71D               	goto	l1063
  8237  001008  0A01               	xorlw	1	; case 7
  8238  00100A  B4D8               	btfsc	status,2,c
  8239  00100C  D724               	goto	l1064
  8240  00100E  0A0F               	xorlw	15	; case 8
  8241  001010  B4D8               	btfsc	status,2,c
  8242  001012  D72B               	goto	l1065
  8243  001014  0A01               	xorlw	1	; case 9
  8244  001016  B4D8               	btfsc	status,2,c
  8245  001018  D732               	goto	l1066
  8246  00101A  0A03               	xorlw	3	; case 10
  8247  00101C  B4D8               	btfsc	status,2,c
  8248  00101E  D739               	goto	l1067
  8249  001020  0A01               	xorlw	1	; case 11
  8250  001022  B4D8               	btfsc	status,2,c
  8251  001024  D740               	goto	l1068
  8252  001026  0A07               	xorlw	7	; case 12
  8253  001028  B4D8               	btfsc	status,2,c
  8254  00102A  D747               	goto	l1069
  8255  00102C  0A01               	xorlw	1	; case 13
  8256  00102E  B4D8               	btfsc	status,2,c
  8257  001030  D74E               	goto	l1070
  8258  001032  0A03               	xorlw	3	; case 14
  8259  001034  B4D8               	btfsc	status,2,c
  8260  001036  D755               	goto	l1071
  8261  001038  0A01               	xorlw	1	; case 15
  8262  00103A  B4D8               	btfsc	status,2,c
  8263  00103C  D75C               	goto	l1072
  8264  00103E  0A1F               	xorlw	31	; case 16
  8265  001040  B4D8               	btfsc	status,2,c
  8266  001042  D763               	goto	l1073
  8267  001044  0A01               	xorlw	1	; case 17
  8268  001046  B4D8               	btfsc	status,2,c
  8269  001048  D76A               	goto	l1074
  8270  00104A  0A03               	xorlw	3	; case 18
  8271  00104C  B4D8               	btfsc	status,2,c
  8272  00104E  D771               	goto	l1075
  8273  001050  0A01               	xorlw	1	; case 19
  8274  001052  B4D8               	btfsc	status,2,c
  8275  001054  D778               	goto	l1076
  8276  001056  0A07               	xorlw	7	; case 20
  8277  001058  B4D8               	btfsc	status,2,c
  8278  00105A  D77F               	goto	l1077
  8279  00105C  0A01               	xorlw	1	; case 21
  8280  00105E  B4D8               	btfsc	status,2,c
  8281  001060  D786               	goto	l1078
  8282  001062  0A03               	xorlw	3	; case 22
  8283  001064  B4D8               	btfsc	status,2,c
  8284  001066  D78D               	goto	l1079
  8285  001068  0A01               	xorlw	1	; case 23
  8286  00106A  B4D8               	btfsc	status,2,c
  8287  00106C  D794               	goto	l1080
  8288  00106E  0A0F               	xorlw	15	; case 24
  8289  001070  B4D8               	btfsc	status,2,c
  8290  001072  D79B               	goto	l1081
  8291  001074  D7A9               	goto	l1082
  8292  001076                     l1057:
  8293                           
  8294                           ; BSR set to: 0
  8295  001076  0100               	movlb	0	; () banked
  8296  001078  4BD1               	infsnz	write_ASLBoron_test@j& (0+255),f,b
  8297  00107A  2BD2               	incf	(write_ASLBoron_test@j+1)& (0+255),f,b
  8298  00107C                     l1053:
  8299                           
  8300                           ; BSR set to: 0
  8301                           
  8302                           ; BSR set to: 0
  8303  00107C  EE20 F001          	lfsr	2,1
  8304  001080  51C7               	movf	write_ASLBoron_test@run_rpt& (0+255),w,b
  8305  001082  26D9               	addwf	fsr2l,f,c
  8306  001084  51C8               	movf	(write_ASLBoron_test@run_rpt+1)& (0+255),w,b
  8307  001086  22DA               	addwfc	fsr2h,f,c
  8308  001088  50DF               	movf	indf2,w,c
  8309  00108A  6FCB               	movwf	??_write_ASLBoron_test& (0+255),b
  8310  00108C  6BCC               	clrf	(??_write_ASLBoron_test+1)& (0+255),b
  8311  00108E  51CB               	movf	??_write_ASLBoron_test& (0+255),w,b
  8312  001090  5DD1               	subwf	write_ASLBoron_test@j& (0+255),w,b
  8313  001092  51D2               	movf	(write_ASLBoron_test@j+1)& (0+255),w,b
  8314  001094  0A80               	xorlw	128
  8315  001096  6FCD               	movwf	(??_write_ASLBoron_test+2)& (0+255),b
  8316  001098  51CC               	movf	(??_write_ASLBoron_test+1)& (0+255),w,b
  8317  00109A  0A80               	xorlw	128
  8318  00109C  59CD               	subwfb	(??_write_ASLBoron_test+2)& (0+255),w,b
  8319  00109E  A0D8               	btfss	status,0,c
  8320  0010A0  D79C               	goto	l1055
  8321                           
  8322                           ; BSR set to: 0
  8323                           
  8324                           ; BSR set to: 0
  8325  0010A2  4BCF               	infsnz	write_ASLBoron_test@i& (0+255),f,b
  8326  0010A4  2BD0               	incf	(write_ASLBoron_test@i+1)& (0+255),f,b
  8327  0010A6                     l1051:
  8328                           
  8329                           ; BSR set to: 0
  8330                           
  8331                           ; BSR set to: 0
  8332  0010A6  C0C7  FFD9         	movff	write_ASLBoron_test@run_rpt,fsr2l
  8333  0010AA  C0C8  FFDA         	movff	write_ASLBoron_test@run_rpt+1,fsr2h
  8334  0010AE  50DF               	movf	indf2,w,c
  8335  0010B0  6FCB               	movwf	??_write_ASLBoron_test& (0+255),b
  8336  0010B2  6BCC               	clrf	(??_write_ASLBoron_test+1)& (0+255),b
  8337  0010B4  51CB               	movf	??_write_ASLBoron_test& (0+255),w,b
  8338  0010B6  5DCF               	subwf	write_ASLBoron_test@i& (0+255),w,b
  8339  0010B8  51D0               	movf	(write_ASLBoron_test@i+1)& (0+255),w,b
  8340  0010BA  0A80               	xorlw	128
  8341  0010BC  6FCD               	movwf	(??_write_ASLBoron_test+2)& (0+255),b
  8342  0010BE  51CC               	movf	(??_write_ASLBoron_test+1)& (0+255),w,b
  8343  0010C0  0A80               	xorlw	128
  8344  0010C2  59CD               	subwfb	(??_write_ASLBoron_test+2)& (0+255),w,b
  8345  0010C4  B0D8               	btfsc	status,0,c
  8346  0010C6  0012               	return	
  8347  0010C8  D67C               	goto	l1052
  8348  0010CA                     __end_of_write_ASLBoron_test:
  8349                           	opt stack 0
  8350                           tblptru	equ	0xFF8
  8351                           tblptrh	equ	0xFF7
  8352                           tblptrl	equ	0xFF6
  8353                           tablat	equ	0xFF5
  8354                           prodh	equ	0xFF4
  8355                           prodl	equ	0xFF3
  8356                           intcon	equ	0xFF2
  8357                           postinc0	equ	0xFEE
  8358                           wreg	equ	0xFE8
  8359                           indf1	equ	0xFE7
  8360                           postinc1	equ	0xFE6
  8361                           postdec1	equ	0xFE5
  8362                           fsr1h	equ	0xFE2
  8363                           fsr1l	equ	0xFE1
  8364                           indf2	equ	0xFDF
  8365                           postinc2	equ	0xFDE
  8366                           fsr2h	equ	0xFDA
  8367                           fsr2l	equ	0xFD9
  8368                           status	equ	0xFD8
  8369                           
  8370 ;; *************** function _ASLB_ZTCReferenceCurrent *****************
  8371 ;; Defined at:
  8372 ;;		line 719 in file "HX_ASL_BORON.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
  8375 ;;		 -> hx_mainData(61), 
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
  8378 ;;  rx_index        1    4[BANK0 ] unsigned char 
  8379 ;; Return value:  Size  Location     Type
  8380 ;;                  1    wreg      void 
  8381 ;; Registers used:
  8382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8383 ;; Tracked objects:
  8384 ;;		On entry : 0/0
  8385 ;;		On exit  : 0/0
  8386 ;;		Unchanged: 0/0
  8387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8388 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8389 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8391 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8392 ;;Total ram usage:       74 bytes
  8393 ;; Hardware stack levels used:    1
  8394 ;; Hardware stack levels required when called:    8
  8395 ;; This function calls:
  8396 ;;		_setupCmdReadbackPkt
  8397 ;; This function is called by:
  8398 ;;		_write_ASLBoron_test
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           	psect	text15
  8403  003ACE                     __ptext15:
  8404                           	opt stack 0
  8405  003ACE                     _ASLB_ZTCReferenceCurrent:
  8406                           	opt stack 20
  8407                           
  8408                           ;HX_ASL_BORON.c: 727: uint8_t rx_index = 0;
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;incstack = 0
  8412  003ACE  0E00               	movlw	0
  8413  003AD0  0100               	movlb	0	; () banked
  8414  003AD2  6F64               	movwf	ASLB_ZTCReferenceCurrent@rx_index& (0+255),b
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;HX_ASL_BORON.c: 730: LATCH_ADC_DATA |= 0x000E;
  8418  003AD4  0E0E               	movlw	14
  8419  003AD6  0105               	movlb	5	; () banked
  8420  003AD8  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
  8421  003ADA  0E00               	movlw	0
  8422  003ADC  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
  8423  003ADE  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
  8424  003AE0  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
  8425                           
  8426                           ; BSR set to: 5
  8427                           ;HX_ASL_BORON.c: 731: LATCH_ADC_DATA &= 0xFFFE;
  8428  003AE2  0EFE               	movlw	254
  8429  003AE4  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
  8430  003AE6  0EFF               	movlw	255
  8431  003AE8  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
  8432  003AEA  0E00               	movlw	0
  8433  003AEC  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
  8434  003AEE  0E00               	movlw	0
  8435  003AF0  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
  8436                           
  8437                           ; BSR set to: 5
  8438                           ;HX_ASL_BORON.c: 733: txRxPkt cmdReadbackPkt;
  8439                           ;HX_ASL_BORON.c: 734: setupCmdReadbackPkt(&cmdReadbackPkt);
  8440  003AF2  0E65               	movlw	low ASLB_ZTCReferenceCurrent@cmdReadbackPkt
  8441  003AF4  0100               	movlb	0	; () banked
  8442  003AF6  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  8443  003AF8  0E00               	movlw	high ASLB_ZTCReferenceCurrent@cmdReadbackPkt
  8444  003AFA  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  8445  003AFC  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
  8446  003B00  0012               	return		;funcret
  8447  003B02                     __end_of_ASLB_ZTCReferenceCurrent:
  8448                           	opt stack 0
  8449                           tblptru	equ	0xFF8
  8450                           tblptrh	equ	0xFF7
  8451                           tblptrl	equ	0xFF6
  8452                           tablat	equ	0xFF5
  8453                           prodh	equ	0xFF4
  8454                           prodl	equ	0xFF3
  8455                           intcon	equ	0xFF2
  8456                           postinc0	equ	0xFEE
  8457                           wreg	equ	0xFE8
  8458                           indf1	equ	0xFE7
  8459                           postinc1	equ	0xFE6
  8460                           postdec1	equ	0xFE5
  8461                           fsr1h	equ	0xFE2
  8462                           fsr1l	equ	0xFE1
  8463                           indf2	equ	0xFDF
  8464                           postinc2	equ	0xFDE
  8465                           fsr2h	equ	0xFDA
  8466                           fsr2l	equ	0xFD9
  8467                           status	equ	0xFD8
  8468                           
  8469 ;; *************** function _ASLB_VaricapDACVoltage *****************
  8470 ;; Defined at:
  8471 ;;		line 611 in file "HX_ASL_BORON.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
  8474 ;;		 -> hx_mainData(61), 
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
  8477 ;;  rx_index        1    4[BANK0 ] unsigned char 
  8478 ;; Return value:  Size  Location     Type
  8479 ;;                  1    wreg      void 
  8480 ;; Registers used:
  8481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 0/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8487 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8488 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8490 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8491 ;;Total ram usage:       74 bytes
  8492 ;; Hardware stack levels used:    1
  8493 ;; Hardware stack levels required when called:    8
  8494 ;; This function calls:
  8495 ;;		_setupCmdReadbackPkt
  8496 ;; This function is called by:
  8497 ;;		_write_ASLBoron_test
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501                           	psect	text16
  8502  003B02                     __ptext16:
  8503                           	opt stack 0
  8504  003B02                     _ASLB_VaricapDACVoltage:
  8505                           	opt stack 20
  8506                           
  8507                           ;HX_ASL_BORON.c: 621: uint8_t rx_index = 0;
  8508                           
  8509                           ;incstack = 0
  8510  003B02  0E00               	movlw	0
  8511  003B04  0100               	movlb	0	; () banked
  8512  003B06  6F64               	movwf	ASLB_VaricapDACVoltage@rx_index& (0+255),b
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;HX_ASL_BORON.c: 624: LATCH_ADC_DATA |= 0x0009;
  8516  003B08  0E09               	movlw	9
  8517  003B0A  0105               	movlb	5	; () banked
  8518  003B0C  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
  8519  003B0E  0E00               	movlw	0
  8520  003B10  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
  8521  003B12  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
  8522  003B14  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
  8523                           
  8524                           ; BSR set to: 5
  8525                           ;HX_ASL_BORON.c: 625: LATCH_ADC_DATA &= 0xFFF9;
  8526  003B16  0EF9               	movlw	249
  8527  003B18  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
  8528  003B1A  0EFF               	movlw	255
  8529  003B1C  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
  8530  003B1E  0E00               	movlw	0
  8531  003B20  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
  8532  003B22  0E00               	movlw	0
  8533  003B24  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
  8534                           
  8535                           ; BSR set to: 5
  8536                           ;HX_ASL_BORON.c: 627: txRxPkt cmdReadbackPkt;
  8537                           ;HX_ASL_BORON.c: 628: setupCmdReadbackPkt(&cmdReadbackPkt);
  8538  003B26  0E65               	movlw	low ASLB_VaricapDACVoltage@cmdReadbackPkt
  8539  003B28  0100               	movlb	0	; () banked
  8540  003B2A  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  8541  003B2C  0E00               	movlw	high ASLB_VaricapDACVoltage@cmdReadbackPkt
  8542  003B2E  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  8543  003B30  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
  8544  003B34  0012               	return		;funcret
  8545  003B36                     __end_of_ASLB_VaricapDACVoltage:
  8546                           	opt stack 0
  8547                           tblptru	equ	0xFF8
  8548                           tblptrh	equ	0xFF7
  8549                           tblptrl	equ	0xFF6
  8550                           tablat	equ	0xFF5
  8551                           prodh	equ	0xFF4
  8552                           prodl	equ	0xFF3
  8553                           intcon	equ	0xFF2
  8554                           postinc0	equ	0xFEE
  8555                           wreg	equ	0xFE8
  8556                           indf1	equ	0xFE7
  8557                           postinc1	equ	0xFE6
  8558                           postdec1	equ	0xFE5
  8559                           fsr1h	equ	0xFE2
  8560                           fsr1l	equ	0xFE1
  8561                           indf2	equ	0xFDF
  8562                           postinc2	equ	0xFDE
  8563                           fsr2h	equ	0xFDA
  8564                           fsr2l	equ	0xFD9
  8565                           status	equ	0xFD8
  8566                           
  8567 ;; *************** function _ASLB_VaricapBiasSteering *****************
  8568 ;; Defined at:
  8569 ;;		line 788 in file "HX_ASL_BORON.c"
  8570 ;; Parameters:    Size  Location     Type
  8571 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
  8572 ;;		 -> hx_mainData(61), 
  8573 ;; Auto vars:     Size  Location     Type
  8574 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
  8575 ;;  rx_index        1    4[BANK0 ] unsigned char 
  8576 ;; Return value:  Size  Location     Type
  8577 ;;                  1    wreg      void 
  8578 ;; Registers used:
  8579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8580 ;; Tracked objects:
  8581 ;;		On entry : 0/0
  8582 ;;		On exit  : 0/0
  8583 ;;		Unchanged: 0/0
  8584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8585 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8586 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8588 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8589 ;;Total ram usage:       74 bytes
  8590 ;; Hardware stack levels used:    1
  8591 ;; Hardware stack levels required when called:    8
  8592 ;; This function calls:
  8593 ;;		_setupCmdReadbackPkt
  8594 ;; This function is called by:
  8595 ;;		_write_ASLBoron_test
  8596 ;; This function uses a non-reentrant model
  8597 ;;
  8598                           
  8599                           	psect	text17
  8600  003FCA                     __ptext17:
  8601                           	opt stack 0
  8602  003FCA                     _ASLB_VaricapBiasSteering:
  8603                           	opt stack 20
  8604                           
  8605                           ;HX_ASL_BORON.c: 794: uint8_t rx_index = 0;
  8606                           
  8607                           ;incstack = 0
  8608  003FCA  0E00               	movlw	0
  8609  003FCC  0100               	movlb	0	; () banked
  8610  003FCE  6F64               	movwf	ASLB_VaricapBiasSteering@rx_index& (0+255),b
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;HX_ASL_BORON.c: 797: txRxPkt cmdReadbackPkt;
  8614                           ;HX_ASL_BORON.c: 798: setupCmdReadbackPkt(&cmdReadbackPkt);
  8615  003FD0  0E65               	movlw	low ASLB_VaricapBiasSteering@cmdReadbackPkt
  8616  003FD2  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  8617  003FD4  0E00               	movlw	high ASLB_VaricapBiasSteering@cmdReadbackPkt
  8618  003FD6  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  8619  003FD8  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
  8620  003FDC  0012               	return		;funcret
  8621  003FDE                     __end_of_ASLB_VaricapBiasSteering:
  8622                           	opt stack 0
  8623                           tblptru	equ	0xFF8
  8624                           tblptrh	equ	0xFF7
  8625                           tblptrl	equ	0xFF6
  8626                           tablat	equ	0xFF5
  8627                           prodh	equ	0xFF4
  8628                           prodl	equ	0xFF3
  8629                           intcon	equ	0xFF2
  8630                           postinc0	equ	0xFEE
  8631                           wreg	equ	0xFE8
  8632                           indf1	equ	0xFE7
  8633                           postinc1	equ	0xFE6
  8634                           postdec1	equ	0xFE5
  8635                           fsr1h	equ	0xFE2
  8636                           fsr1l	equ	0xFE1
  8637                           indf2	equ	0xFDF
  8638                           postinc2	equ	0xFDE
  8639                           fsr2h	equ	0xFDA
  8640                           fsr2l	equ	0xFD9
  8641                           status	equ	0xFD8
  8642                           
  8643 ;; *************** function _ASLB_TempSetDACVoltage *****************
  8644 ;; Defined at:
  8645 ;;		line 631 in file "HX_ASL_BORON.c"
  8646 ;; Parameters:    Size  Location     Type
  8647 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
  8648 ;;		 -> hx_mainData(61), 
  8649 ;; Auto vars:     Size  Location     Type
  8650 ;;  i               2   76[BANK0 ] int 
  8651 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
  8652 ;;  rx_index        1    4[BANK0 ] unsigned char 
  8653 ;; Return value:  Size  Location     Type
  8654 ;;                  1    wreg      void 
  8655 ;; Registers used:
  8656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8657 ;; Tracked objects:
  8658 ;;		On entry : 0/0
  8659 ;;		On exit  : 0/0
  8660 ;;		Unchanged: 0/0
  8661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8662 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8663 ;;      Locals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8665 ;;      Totals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8666 ;;Total ram usage:       76 bytes
  8667 ;; Hardware stack levels used:    1
  8668 ;; Hardware stack levels required when called:    8
  8669 ;; This function calls:
  8670 ;;		_setTempCtrlDAC
  8671 ;;		_setupCmdReadbackPkt
  8672 ;; This function is called by:
  8673 ;;		_write_ASLBoron_test
  8674 ;; This function uses a non-reentrant model
  8675 ;;
  8676                           
  8677                           	psect	text18
  8678  003456                     __ptext18:
  8679                           	opt stack 0
  8680  003456                     _ASLB_TempSetDACVoltage:
  8681                           	opt stack 20
  8682                           
  8683                           ;HX_ASL_BORON.c: 641: uint8_t rx_index = 0;
  8684                           
  8685                           ;incstack = 0
  8686  003456  0E00               	movlw	0
  8687  003458  0100               	movlb	0	; () banked
  8688  00345A  6F64               	movwf	ASLB_TempSetDACVoltage@rx_index& (0+255),b
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;HX_ASL_BORON.c: 644: txRxPkt cmdReadbackPkt;
  8692                           ;HX_ASL_BORON.c: 645: setupCmdReadbackPkt(&cmdReadbackPkt);
  8693  00345C  0E65               	movlw	low ASLB_TempSetDACVoltage@cmdReadbackPkt
  8694  00345E  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  8695  003460  0E00               	movlw	high ASLB_TempSetDACVoltage@cmdReadbackPkt
  8696  003462  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  8697  003464  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
  8698                           
  8699                           ;HX_ASL_BORON.c: 648: for (int i = 0; i < 4096; i += 819)
  8700  003468  0E00               	movlw	0
  8701  00346A  0100               	movlb	0	; () banked
  8702  00346C  6FAD               	movwf	(ASLB_TempSetDACVoltage@i+1)& (0+255),b
  8703  00346E  0E00               	movlw	0
  8704  003470  6FAC               	movwf	ASLB_TempSetDACVoltage@i& (0+255),b
  8705  003472                     l10544:
  8706                           
  8707                           ; BSR set to: 0
  8708  003472  BFAD               	btfsc	(ASLB_TempSetDACVoltage@i+1)& (0+255),7,b
  8709  003474  D004               	goto	l1149
  8710  003476  0E10               	movlw	16
  8711  003478  5DAD               	subwf	(ASLB_TempSetDACVoltage@i+1)& (0+255),w,b
  8712  00347A  B0D8               	btfsc	status,0,c
  8713  00347C  0012               	return	
  8714  00347E                     l1149:
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;HX_ASL_BORON.c: 649: {
  8718                           ;HX_ASL_BORON.c: 650: if (!setTempCtrlDAC(i))
  8719                           
  8720                           ; BSR set to: 0
  8721  00347E  C0AC  F060         	movff	ASLB_TempSetDACVoltage@i,setTempCtrlDAC@value12bit
  8722  003482  C0AD  F061         	movff	ASLB_TempSetDACVoltage@i+1,setTempCtrlDAC@value12bit+1
  8723  003486  ECD8  F01E         	call	_setTempCtrlDAC	;wreg free
  8724  00348A  0900               	iorlw	0
  8725  00348C  B4D8               	btfsc	status,2,c
  8726  00348E  0012               	return	
  8727                           
  8728                           ;HX_ASL_BORON.c: 654: }
  8729                           ;HX_ASL_BORON.c: 657: LATCH_ADC_DATA |= 0x000B;
  8730                           
  8731                           ;HX_ASL_BORON.c: 651: {
  8732                           ;HX_ASL_BORON.c: 653: break;
  8733  003490  0E0B               	movlw	11
  8734  003492  0105               	movlb	5	; () banked
  8735  003494  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
  8736  003496  0E00               	movlw	0
  8737  003498  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
  8738  00349A  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
  8739  00349C  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
  8740                           
  8741                           ;HX_ASL_BORON.c: 658: LATCH_ADC_DATA &= 0xFFFB;
  8742  00349E  0EFB               	movlw	251
  8743  0034A0  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
  8744  0034A2  0EFF               	movlw	255
  8745  0034A4  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
  8746  0034A6  0E00               	movlw	0
  8747  0034A8  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
  8748  0034AA  0E00               	movlw	0
  8749  0034AC  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
  8750  0034AE  0100               	movlb	0	; () banked
  8751  0034B0  0E33               	movlw	51
  8752  0034B2  27AC               	addwf	ASLB_TempSetDACVoltage@i& (0+255),f,b
  8753  0034B4  0E03               	movlw	3
  8754  0034B6  23AD               	addwfc	(ASLB_TempSetDACVoltage@i+1)& (0+255),f,b
  8755  0034B8  D7DC               	goto	l10544
  8756  0034BA                     __end_of_ASLB_TempSetDACVoltage:
  8757                           	opt stack 0
  8758                           tblptru	equ	0xFF8
  8759                           tblptrh	equ	0xFF7
  8760                           tblptrl	equ	0xFF6
  8761                           tablat	equ	0xFF5
  8762                           prodh	equ	0xFF4
  8763                           prodl	equ	0xFF3
  8764                           intcon	equ	0xFF2
  8765                           postinc0	equ	0xFEE
  8766                           wreg	equ	0xFE8
  8767                           indf1	equ	0xFE7
  8768                           postinc1	equ	0xFE6
  8769                           postdec1	equ	0xFE5
  8770                           fsr1h	equ	0xFE2
  8771                           fsr1l	equ	0xFE1
  8772                           indf2	equ	0xFDF
  8773                           postinc2	equ	0xFDE
  8774                           fsr2h	equ	0xFDA
  8775                           fsr2l	equ	0xFD9
  8776                           status	equ	0xFD8
  8777                           
  8778 ;; *************** function _setTempCtrlDAC *****************
  8779 ;; Defined at:
  8780 ;;		line 1145 in file "HX_ASL_BORON.c"
  8781 ;; Parameters:    Size  Location     Type
  8782 ;;  value12bit      2    0[BANK0 ] unsigned int 
  8783 ;; Auto vars:     Size  Location     Type
  8784 ;;		None
  8785 ;; Return value:  Size  Location     Type
  8786 ;;                  1    wreg      unsigned char 
  8787 ;; Registers used:
  8788 ;;		wreg, status,2, status,0
  8789 ;; Tracked objects:
  8790 ;;		On entry : 0/0
  8791 ;;		On exit  : 0/0
  8792 ;;		Unchanged: 0/0
  8793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8794 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8798 ;;Total ram usage:        2 bytes
  8799 ;; Hardware stack levels used:    1
  8800 ;; Hardware stack levels required when called:    7
  8801 ;; This function calls:
  8802 ;;		Nothing
  8803 ;; This function is called by:
  8804 ;;		_ASLB_TempSetDACVoltage
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           	psect	text19
  8809  003DB0                     __ptext19:
  8810                           	opt stack 0
  8811  003DB0                     _setTempCtrlDAC:
  8812                           	opt stack 20
  8813                           
  8814                           ;HX_ASL_BORON.c: 1147: if (value12bit > 4095)
  8815                           
  8816                           ;incstack = 0
  8817  003DB0  0E10               	movlw	16
  8818  003DB2  0100               	movlb	0	; () banked
  8819  003DB4  5D61               	subwf	(setTempCtrlDAC@value12bit+1)& (0+255),w,b
  8820  003DB6  A0D8               	btfss	status,0,c
  8821  003DB8  D002               	goto	l1247
  8822                           
  8823                           ; BSR set to: 0
  8824                           ;HX_ASL_BORON.c: 1148: {
  8825                           ;HX_ASL_BORON.c: 1149: return 0;
  8826  003DBA  0E00               	movlw	0
  8827                           
  8828                           ; BSR set to: 0
  8829  003DBC  0012               	return	
  8830  003DBE                     l1247:
  8831                           
  8832                           ; BSR set to: 0
  8833                           ;HX_ASL_BORON.c: 1150: }
  8834                           ;HX_ASL_BORON.c: 1154: LATCH_OVEN_DATA |= 0x0040;
  8835                           
  8836                           ; BSR set to: 0
  8837  003DBE  0102               	movlb	2	; () banked
  8838  003DC0  8DE2               	bsf	_LATCH_OVEN_DATA& (0+255),6,b
  8839                           
  8840                           ;HX_ASL_BORON.c: 1155: LATCH_OVEN_DATA |= 0x0080;
  8841  003DC2  8FE2               	bsf	_LATCH_OVEN_DATA& (0+255),7,b
  8842                           
  8843                           ;HX_ASL_BORON.c: 1158: LATCH_BIAS_DATA |= 0x0001;
  8844  003DC4  0105               	movlb	5	; () banked
  8845  003DC6  81E1               	bsf	_LATCH_BIAS_DATA& (0+255),0,b
  8846                           
  8847                           ; BSR set to: 5
  8848                           ;HX_ASL_BORON.c: 1161: LATCH_HEAT_DAC_DATA = value12bit;
  8849  003DC8  C060  F5E9         	movff	setTempCtrlDAC@value12bit,_LATCH_HEAT_DAC_DATA
  8850  003DCC  C061  F5EA         	movff	setTempCtrlDAC@value12bit+1,_LATCH_HEAT_DAC_DATA+1
  8851  003DD0  6BEB               	clrf	(_LATCH_HEAT_DAC_DATA+2)& (0+255),b
  8852  003DD2  6BEC               	clrf	(_LATCH_HEAT_DAC_DATA+3)& (0+255),b
  8853                           
  8854                           ; BSR set to: 5
  8855                           ;HX_ASL_BORON.c: 1165: return 1;
  8856  003DD4  0E01               	movlw	1
  8857  003DD6  0012               	return	
  8858  003DD8                     __end_of_setTempCtrlDAC:
  8859                           	opt stack 0
  8860                           tblptru	equ	0xFF8
  8861                           tblptrh	equ	0xFF7
  8862                           tblptrl	equ	0xFF6
  8863                           tablat	equ	0xFF5
  8864                           prodh	equ	0xFF4
  8865                           prodl	equ	0xFF3
  8866                           intcon	equ	0xFF2
  8867                           postinc0	equ	0xFEE
  8868                           wreg	equ	0xFE8
  8869                           indf1	equ	0xFE7
  8870                           postinc1	equ	0xFE6
  8871                           postdec1	equ	0xFE5
  8872                           fsr1h	equ	0xFE2
  8873                           fsr1l	equ	0xFE1
  8874                           indf2	equ	0xFDF
  8875                           postinc2	equ	0xFDE
  8876                           fsr2h	equ	0xFDA
  8877                           fsr2l	equ	0xFD9
  8878                           status	equ	0xFD8
  8879                           
  8880 ;; *************** function _ASLB_SheetResistance *****************
  8881 ;; Defined at:
  8882 ;;		line 347 in file "HX_ASL_BORON.c"
  8883 ;; Parameters:    Size  Location     Type
  8884 ;;  rxBuffer        2  100[BANK0 ] PTR unsigned char 
  8885 ;;		 -> hx_mainData(61), 
  8886 ;; Auto vars:     Size  Location     Type
  8887 ;;  rx_index        1  102[BANK0 ] unsigned char 
  8888 ;; Return value:  Size  Location     Type
  8889 ;;                  1    wreg      void 
  8890 ;; Registers used:
  8891 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8892 ;; Tracked objects:
  8893 ;;		On entry : 0/0
  8894 ;;		On exit  : 0/0
  8895 ;;		Unchanged: 0/0
  8896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8897 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8900 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8901 ;;Total ram usage:        3 bytes
  8902 ;; Hardware stack levels used:    1
  8903 ;; Hardware stack levels required when called:   11
  8904 ;; This function calls:
  8905 ;;		_checkAndSendLatchData
  8906 ;; This function is called by:
  8907 ;;		_write_ASLBoron_test
  8908 ;; This function uses a non-reentrant model
  8909 ;;
  8910                           
  8911                           	psect	text20
  8912  003182                     __ptext20:
  8913                           	opt stack 0
  8914  003182                     _ASLB_SheetResistance:
  8915                           	opt stack 17
  8916                           
  8917                           ;HX_ASL_BORON.c: 366: uint8_t rx_index = 0;
  8918                           
  8919                           ;incstack = 0
  8920  003182  0E00               	movlw	0
  8921  003184  0100               	movlb	0	; () banked
  8922  003186  6FC6               	movwf	ASLB_SheetResistance@rx_index& (0+255),b
  8923                           
  8924                           ;HX_ASL_BORON.c: 369: tsld.LATCH_OSC0_DATA = 0x0000;
  8925  003188  0E00               	movlw	0
  8926  00318A  0106               	movlb	6	; () banked
  8927  00318C  6FD6               	movwf	(_tsld+1)& (0+255),b
  8928  00318E  0E00               	movlw	0
  8929  003190  6FD5               	movwf	_tsld& (0+255),b
  8930                           
  8931                           ;HX_ASL_BORON.c: 370: tsld.LATCH_OSC1_DATA = 0x0000;
  8932  003192  0E00               	movlw	0
  8933  003194  6FD8               	movwf	(_tsld+3)& (0+255),b
  8934  003196  0E00               	movlw	0
  8935  003198  6FD7               	movwf	(_tsld+2)& (0+255),b
  8936                           
  8937                           ;HX_ASL_BORON.c: 371: tsld.LATCH_OSC2_DATA = 0x0000;
  8938  00319A  0E00               	movlw	0
  8939  00319C  6FDA               	movwf	(_tsld+5)& (0+255),b
  8940  00319E  0E00               	movlw	0
  8941  0031A0  6FD9               	movwf	(_tsld+4)& (0+255),b
  8942                           
  8943                           ;HX_ASL_BORON.c: 372: tsld.LATCH_ANALOG_DATA = 0x0000;
  8944  0031A2  0E00               	movlw	0
  8945  0031A4  6FDC               	movwf	(_tsld+7)& (0+255),b
  8946  0031A6  0E00               	movlw	0
  8947  0031A8  6FDB               	movwf	(_tsld+6)& (0+255),b
  8948                           
  8949                           ;HX_ASL_BORON.c: 373: tsld.LATCH_OVEN_DATA = 0x0000;
  8950  0031AA  0E00               	movlw	0
  8951  0031AC  6FDE               	movwf	(_tsld+9)& (0+255),b
  8952  0031AE  0E00               	movlw	0
  8953  0031B0  6FDD               	movwf	(_tsld+8)& (0+255),b
  8954                           
  8955                           ;HX_ASL_BORON.c: 374: tsld.LATCH_HEAT_DAC_DATA = 0x0000;
  8956  0031B2  0E00               	movlw	0
  8957  0031B4  6FE0               	movwf	(_tsld+11)& (0+255),b
  8958  0031B6  0E00               	movlw	0
  8959  0031B8  6FDF               	movwf	(_tsld+10)& (0+255),b
  8960                           
  8961                           ;HX_ASL_BORON.c: 375: tsld.LATCH_VARACTOR_DAC_DATA = 0x0000;
  8962  0031BA  0E00               	movlw	0
  8963  0031BC  6FE2               	movwf	(_tsld+13)& (0+255),b
  8964  0031BE  0E00               	movlw	0
  8965  0031C0  6FE1               	movwf	(_tsld+12)& (0+255),b
  8966                           
  8967                           ;HX_ASL_BORON.c: 376: tsld.LATCH_BIAS_DATA = 0x0000;
  8968  0031C2  0E00               	movlw	0
  8969  0031C4  6FE4               	movwf	(_tsld+15)& (0+255),b
  8970  0031C6  0E00               	movlw	0
  8971  0031C8  6FE3               	movwf	(_tsld+14)& (0+255),b
  8972                           
  8973                           ;HX_ASL_BORON.c: 377: tsld.LATCH_CMOS_DATA = 0x0000;
  8974  0031CA  0E00               	movlw	0
  8975  0031CC  6FE6               	movwf	(_tsld+17)& (0+255),b
  8976  0031CE  0E00               	movlw	0
  8977  0031D0  6FE5               	movwf	(_tsld+16)& (0+255),b
  8978                           
  8979                           ;HX_ASL_BORON.c: 378: tsld.LATCH_ADC_DATA = 0x0000;
  8980  0031D2  0E00               	movlw	0
  8981  0031D4  6FE8               	movwf	(_tsld+19)& (0+255),b
  8982  0031D6  0E00               	movlw	0
  8983  0031D8  6FE7               	movwf	(_tsld+18)& (0+255),b
  8984                           
  8985                           ;HX_ASL_BORON.c: 379: tsld.LATCH_ADC_MUX_DATA = 0x0000;
  8986  0031DA  0E00               	movlw	0
  8987  0031DC  6FEA               	movwf	(_tsld+21)& (0+255),b
  8988  0031DE  0E00               	movlw	0
  8989  0031E0  6FE9               	movwf	(_tsld+20)& (0+255),b
  8990                           
  8991                           ;HX_ASL_BORON.c: 380: tsld.LATCH_OCXO_DIVISOR_DATA = 0x0000;
  8992  0031E2  0E00               	movlw	0
  8993  0031E4  6FEC               	movwf	(_tsld+23)& (0+255),b
  8994  0031E6  0E00               	movlw	0
  8995  0031E8  6FEB               	movwf	(_tsld+22)& (0+255),b
  8996                           
  8997                           ;HX_ASL_BORON.c: 381: tsld.LATCH_CLOCK_SELECT_DATA = 0x0000;
  8998  0031EA  0E00               	movlw	0
  8999  0031EC  6FEE               	movwf	(_tsld+25)& (0+255),b
  9000  0031EE  0E00               	movlw	0
  9001  0031F0  6FED               	movwf	(_tsld+24)& (0+255),b
  9002                           
  9003                           ; BSR set to: 6
  9004                           ;HX_ASL_BORON.c: 383: if (!checkAndSendLatchData(rxBuffer, &rx_index))
  9005  0031F2  C0C4  F072         	movff	ASLB_SheetResistance@rxBuffer,checkAndSendLatchData@rxBuffer
  9006  0031F6  C0C5  F073         	movff	ASLB_SheetResistance@rxBuffer+1,checkAndSendLatchData@rxBuffer+1
  9007  0031FA  0EC6               	movlw	low ASLB_SheetResistance@rx_index
  9008  0031FC  0100               	movlb	0	; () banked
  9009  0031FE  6F74               	movwf	checkAndSendLatchData@rx_index& (0+255),b
  9010  003200  0E00               	movlw	high ASLB_SheetResistance@rx_index
  9011  003202  6F75               	movwf	(checkAndSendLatchData@rx_index+1)& (0+255),b
  9012  003204  EC76  F000         	call	_checkAndSendLatchData	;wreg free
  9013  003208  0900               	iorlw	0
  9014  00320A  B4D8               	btfsc	status,2,c
  9015  00320C  0012               	return	
  9016                           
  9017                           ;HX_ASL_BORON.c: 387: }
  9018                           ;HX_ASL_BORON.c: 392: hx_mainDataIndex += rx_index;
  9019                           
  9020                           ;HX_ASL_BORON.c: 384: {
  9021                           ;HX_ASL_BORON.c: 386: return;
  9022  00320E  0100               	movlb	0	; () banked
  9023  003210  51C6               	movf	ASLB_SheetResistance@rx_index& (0+255),w,b
  9024  003212  263F               	addwf	_hx_mainDataIndex,f,c
  9025  003214  0012               	return		;funcret
  9026  003216                     __end_of_ASLB_SheetResistance:
  9027                           	opt stack 0
  9028                           tblptru	equ	0xFF8
  9029                           tblptrh	equ	0xFF7
  9030                           tblptrl	equ	0xFF6
  9031                           tablat	equ	0xFF5
  9032                           prodh	equ	0xFF4
  9033                           prodl	equ	0xFF3
  9034                           intcon	equ	0xFF2
  9035                           postinc0	equ	0xFEE
  9036                           wreg	equ	0xFE8
  9037                           indf1	equ	0xFE7
  9038                           postinc1	equ	0xFE6
  9039                           postdec1	equ	0xFE5
  9040                           fsr1h	equ	0xFE2
  9041                           fsr1l	equ	0xFE1
  9042                           indf2	equ	0xFDF
  9043                           postinc2	equ	0xFDE
  9044                           fsr2h	equ	0xFDA
  9045                           fsr2l	equ	0xFD9
  9046                           status	equ	0xFD8
  9047                           
  9048 ;; *************** function _checkAndSendLatchData *****************
  9049 ;; Defined at:
  9050 ;;		line 1243 in file "HX_ASL_BORON.c"
  9051 ;; Parameters:    Size  Location     Type
  9052 ;;  rxBuffer        2   18[BANK0 ] PTR unsigned char 
  9053 ;;		 -> hx_mainData(61), 
  9054 ;;  rx_index        2   20[BANK0 ] PTR unsigned char 
  9055 ;;		 -> ASLB_SheetResistance@rx_index(1), 
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;  clock_select   71    0[BANK10] struct TxRxPacket
  9058 ;;  readback_clo   71  142[BANK9 ] struct TxRxPacket
  9059 ;;  ocxo_divisor   71  142[BANK5 ] struct TxRxPacket
  9060 ;;  readback_ocx   71   71[BANK9 ] struct TxRxPacket
  9061 ;;  adc_mux_pkt    71   71[BANK5 ] struct TxRxPacket
  9062 ;;  readback_adc   71    0[BANK9 ] struct TxRxPacket
  9063 ;;  adc_pkt        71  142[BANK4 ] struct TxRxPacket
  9064 ;;  readback_adc   71  142[BANK8 ] struct TxRxPacket
  9065 ;;  cmos_pkt       71   71[BANK4 ] struct TxRxPacket
  9066 ;;  readback_cmo   71   71[BANK8 ] struct TxRxPacket
  9067 ;;  bias_pkt       71    0[BANK4 ] struct TxRxPacket
  9068 ;;  readback_bia   71    0[BANK8 ] struct TxRxPacket
  9069 ;;  varactor_dac   71  142[BANK3 ] struct TxRxPacket
  9070 ;;  readback_var   71  142[BANK7 ] struct TxRxPacket
  9071 ;;  heat_dac_pkt   71   71[BANK3 ] struct TxRxPacket
  9072 ;;  readback_hea   71   71[BANK7 ] struct TxRxPacket
  9073 ;;  oven_pkt       71    0[BANK3 ] struct TxRxPacket
  9074 ;;  readback_ove   71    0[BANK7 ] struct TxRxPacket
  9075 ;;  analog_pkt     71  142[BANK2 ] struct TxRxPacket
  9076 ;;  readback_ana   71  142[BANK6 ] struct TxRxPacket
  9077 ;;  osc2_pkt       71   71[BANK2 ] struct TxRxPacket
  9078 ;;  readback_osc   71   71[BANK6 ] struct TxRxPacket
  9079 ;;  osc1_pkt       71    0[BANK2 ] struct TxRxPacket
  9080 ;;  readback_osc   71    0[BANK6 ] struct TxRxPacket
  9081 ;;  osc0_pkt       71  162[BANK1 ] struct TxRxPacket
  9082 ;;  readback_osc   71    0[BANK5 ] struct TxRxPacket
  9083 ;;  stream         48   25[BANK0 ] PTR struct TxRxPacket[24
  9084 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
  9085 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
  9086 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
  9087 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
  9088 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
  9089 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
  9090 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
  9091 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
  9092 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
  9093 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
  9094 ;;  readbackPkts   24   73[BANK0 ] PTR struct TxRxPacket[12
  9095 ;;		 -> checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkA
      +ndSendLatchData@readback_adc_mux_pkt(71), checkAndSendLatchData@readback_adc_pkt(71), 
  9096 ;;		 -> checkAndSendLatchData@readback_cmos_pkt(71), checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@
      +readback_varactor_dac_pkt(71), checkAndSendLatchData@readback_heat_dac_pkt(71), 
  9097 ;;		 -> checkAndSendLatchData@readback_oven_pkt(71), checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchDat
      +a@readback_osc2_pkt(71), checkAndSendLatchData@readback_osc1_pkt(71), 
  9098 ;;		 -> checkAndSendLatchData@readback_osc0_pkt(71), 
  9099 ;;  latchSendCou    1   99[BANK0 ] unsigned char 
  9100 ;;  readbackSend    1   98[BANK0 ] unsigned char 
  9101 ;;  noError         1   97[BANK0 ] unsigned char 
  9102 ;;  stream_statu    1   24[BANK0 ] unsigned char 
  9103 ;; Return value:  Size  Location     Type
  9104 ;;                  1    wreg      unsigned char 
  9105 ;; Registers used:
  9106 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9107 ;; Tracked objects:
  9108 ;;		On entry : 0/0
  9109 ;;		On exit  : 0/0
  9110 ;;		Unchanged: 0/0
  9111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9112 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9113 ;;      Locals:         0      76      71     213     213     213     213     213     213     213     213      71       
      +0       0       0       0
  9114 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9115 ;;      Totals:         0      82      71     213     213     213     213     213     213     213     213      71       
      +0       0       0       0
  9116 ;;Total ram usage:     1928 bytes
  9117 ;; Hardware stack levels used:    1
  9118 ;; Hardware stack levels required when called:   10
  9119 ;; This function calls:
  9120 ;;		_filterLatchPacketResponses
  9121 ;;		_setupCmdReadbackPkt
  9122 ;;		_setupLatchPkt
  9123 ;;		_streamBoronComm
  9124 ;; This function is called by:
  9125 ;;		_ASLB_SheetResistance
  9126 ;; This function uses a non-reentrant model
  9127 ;;
  9128                           
  9129                           	psect	text21
  9130  0000EC                     __ptext21:
  9131                           	opt stack 0
  9132  0000EC                     _checkAndSendLatchData:
  9133                           	opt stack 17
  9134                           
  9135                           ;HX_ASL_BORON.c: 1251: uint8_t noError = 0;
  9136                           
  9137                           ;incstack = 0
  9138  0000EC  0E00               	movlw	0
  9139  0000EE  0100               	movlb	0	; () banked
  9140  0000F0  6FC1               	movwf	checkAndSendLatchData@noError& (0+255),b
  9141                           
  9142                           ;HX_ASL_BORON.c: 1252: uint8_t latchSendCount = 0;
  9143  0000F2  0E00               	movlw	0
  9144  0000F4  6FC3               	movwf	checkAndSendLatchData@latchSendCount& (0+255),b
  9145                           
  9146                           ;HX_ASL_BORON.c: 1253: uint8_t readbackSendCount = 0;
  9147  0000F6  0E00               	movlw	0
  9148  0000F8  6FC2               	movwf	checkAndSendLatchData@readbackSendCount& (0+255),b
  9149                           
  9150                           ; BSR set to: 0
  9151                           ;HX_ASL_BORON.c: 1255: txRxPkt* stream[(2*12)];
  9152                           ;HX_ASL_BORON.c: 1256: txRxPkt* readbackPkts[12];
  9153                           ;HX_ASL_BORON.c: 1257: uint8_t stream_status;
  9154                           ;HX_ASL_BORON.c: 1262: if (!(LATCH_OSC0_DATA & tsld.LATCH_OSC0_DATA))
  9155  0000FA  0105               	movlb	5	; () banked
  9156  0000FC  51F9               	movf	_LATCH_OSC0_DATA& (0+255),w,b
  9157  0000FE  0106               	movlb	6	; () banked
  9158  000100  15D5               	andwf	_tsld& (0+255),w,b
  9159  000102  0100               	movlb	0	; () banked
  9160  000104  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9161  000106  0105               	movlb	5	; () banked
  9162  000108  51FA               	movf	(_LATCH_OSC0_DATA+1)& (0+255),w,b
  9163  00010A  0106               	movlb	6	; () banked
  9164  00010C  15D6               	andwf	(_tsld+1)& (0+255),w,b
  9165  00010E  0100               	movlb	0	; () banked
  9166  000110  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9167  000112  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9168  000114  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9169  000116  A4D8               	btfss	status,2,c
  9170  000118  D043               	goto	l1269
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;HX_ASL_BORON.c: 1263: {
  9174                           ;HX_ASL_BORON.c: 1265: LATCH_OSC0_DATA = tsld.LATCH_OSC0_DATA;
  9175  00011A  C6D5  F5F9         	movff	_tsld,_LATCH_OSC0_DATA
  9176  00011E  C6D6  F5FA         	movff	_tsld+1,_LATCH_OSC0_DATA+1
  9177  000122  0105               	movlb	5	; () banked
  9178  000124  6BFB               	clrf	(_LATCH_OSC0_DATA+2)& (0+255),b
  9179  000126  6BFC               	clrf	(_LATCH_OSC0_DATA+3)& (0+255),b
  9180                           
  9181                           ; BSR set to: 5
  9182                           ;HX_ASL_BORON.c: 1268: txRxPkt osc0_pkt;
  9183                           ;HX_ASL_BORON.c: 1271: setupLatchPkt(&osc0_pkt, LATCH_OSC0_DATA, 0x0);
  9184  000128  0EA2               	movlw	low checkAndSendLatchData@osc0_pkt
  9185  00012A  0100               	movlb	0	; () banked
  9186  00012C  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9187  00012E  0E01               	movlw	high checkAndSendLatchData@osc0_pkt
  9188  000130  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9189  000132  C5F9  F067         	movff	_LATCH_OSC0_DATA,setupLatchPkt@latch_data
  9190  000136  C5FA  F068         	movff	_LATCH_OSC0_DATA+1,setupLatchPkt@latch_data+1
  9191  00013A  0E00               	movlw	0
  9192  00013C  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9193  00013E  EC25  F017         	call	_setupLatchPkt	;wreg free
  9194                           
  9195                           ;HX_ASL_BORON.c: 1274: stream[latchSendCount++] = &osc0_pkt;
  9196  000142  0100               	movlb	0	; () banked
  9197  000144  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9198  000146  0D02               	mullw	2
  9199  000148  0E79               	movlw	low checkAndSendLatchData@stream
  9200  00014A  24F3               	addwf	prodl,w,c
  9201  00014C  6ED9               	movwf	fsr2l,c
  9202  00014E  0E00               	movlw	high checkAndSendLatchData@stream
  9203  000150  20F4               	addwfc	prodh,w,c
  9204  000152  6EDA               	movwf	fsr2h,c
  9205  000154  0EA2               	movlw	low checkAndSendLatchData@osc0_pkt
  9206  000156  6EDE               	movwf	postinc2,c
  9207  000158  0E01               	movlw	high checkAndSendLatchData@osc0_pkt
  9208  00015A  6EDD               	movwf	postdec2,c
  9209                           
  9210                           ; BSR set to: 0
  9211  00015C  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9212                           
  9213                           ; BSR set to: 0
  9214                           ;HX_ASL_BORON.c: 1277: txRxPkt readback_osc0_pkt;
  9215                           ;HX_ASL_BORON.c: 1278: setupCmdReadbackPkt(&readback_osc0_pkt);
  9216  00015E  0E00               	movlw	low checkAndSendLatchData@readback_osc0_pkt
  9217  000160  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9218  000162  0E05               	movlw	high checkAndSendLatchData@readback_osc0_pkt
  9219  000164  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9220  000166  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9221                           
  9222                           ;HX_ASL_BORON.c: 1279: stream[latchSendCount++] = &readback_osc0_pkt;
  9223  00016A  0100               	movlb	0	; () banked
  9224  00016C  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9225  00016E  0D02               	mullw	2
  9226  000170  0E79               	movlw	low checkAndSendLatchData@stream
  9227  000172  24F3               	addwf	prodl,w,c
  9228  000174  6ED9               	movwf	fsr2l,c
  9229  000176  0E00               	movlw	high checkAndSendLatchData@stream
  9230  000178  20F4               	addwfc	prodh,w,c
  9231  00017A  6EDA               	movwf	fsr2h,c
  9232  00017C  0E00               	movlw	low checkAndSendLatchData@readback_osc0_pkt
  9233  00017E  6EDE               	movwf	postinc2,c
  9234  000180  0E05               	movlw	high checkAndSendLatchData@readback_osc0_pkt
  9235  000182  6EDD               	movwf	postdec2,c
  9236                           
  9237                           ; BSR set to: 0
  9238  000184  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9239                           
  9240                           ; BSR set to: 0
  9241                           ;HX_ASL_BORON.c: 1282: readbackPkts[readbackSendCount++] = &readback_osc0_pkt;
  9242  000186  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9243  000188  0D02               	mullw	2
  9244  00018A  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9245  00018C  24F3               	addwf	prodl,w,c
  9246  00018E  6ED9               	movwf	fsr2l,c
  9247  000190  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9248  000192  20F4               	addwfc	prodh,w,c
  9249  000194  6EDA               	movwf	fsr2h,c
  9250  000196  0E00               	movlw	low checkAndSendLatchData@readback_osc0_pkt
  9251  000198  6EDE               	movwf	postinc2,c
  9252  00019A  0E05               	movlw	high checkAndSendLatchData@readback_osc0_pkt
  9253  00019C  6EDD               	movwf	postdec2,c
  9254                           
  9255                           ; BSR set to: 0
  9256  00019E  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9257  0001A0                     l1269:
  9258                           
  9259                           ; BSR set to: 0
  9260                           ;HX_ASL_BORON.c: 1283: }
  9261                           ;HX_ASL_BORON.c: 1285: if (!(LATCH_OSC1_DATA & tsld.LATCH_OSC1_DATA))
  9262                           
  9263                           ; BSR set to: 0
  9264  0001A0  0105               	movlb	5	; () banked
  9265  0001A2  51F5               	movf	_LATCH_OSC1_DATA& (0+255),w,b
  9266  0001A4  0106               	movlb	6	; () banked
  9267  0001A6  15D7               	andwf	(_tsld+2)& (0+255),w,b
  9268  0001A8  0100               	movlb	0	; () banked
  9269  0001AA  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9270  0001AC  0105               	movlb	5	; () banked
  9271  0001AE  51F6               	movf	(_LATCH_OSC1_DATA+1)& (0+255),w,b
  9272  0001B0  0106               	movlb	6	; () banked
  9273  0001B2  15D8               	andwf	(_tsld+3)& (0+255),w,b
  9274  0001B4  0100               	movlb	0	; () banked
  9275  0001B6  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9276  0001B8  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9277  0001BA  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9278  0001BC  A4D8               	btfss	status,2,c
  9279  0001BE  D043               	goto	l1270
  9280                           
  9281                           ; BSR set to: 0
  9282                           ;HX_ASL_BORON.c: 1286: {
  9283                           ;HX_ASL_BORON.c: 1287: LATCH_OSC1_DATA = tsld.LATCH_OSC1_DATA;
  9284  0001C0  C6D7  F5F5         	movff	_tsld+2,_LATCH_OSC1_DATA
  9285  0001C4  C6D8  F5F6         	movff	_tsld+3,_LATCH_OSC1_DATA+1
  9286  0001C8  0105               	movlb	5	; () banked
  9287  0001CA  6BF7               	clrf	(_LATCH_OSC1_DATA+2)& (0+255),b
  9288  0001CC  6BF8               	clrf	(_LATCH_OSC1_DATA+3)& (0+255),b
  9289                           
  9290                           ; BSR set to: 5
  9291                           ;HX_ASL_BORON.c: 1288: txRxPkt osc1_pkt;
  9292                           ;HX_ASL_BORON.c: 1289: setupLatchPkt(&osc1_pkt, LATCH_OSC1_DATA, 0x1);
  9293  0001CE  0E00               	movlw	low checkAndSendLatchData@osc1_pkt
  9294  0001D0  0100               	movlb	0	; () banked
  9295  0001D2  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9296  0001D4  0E02               	movlw	high checkAndSendLatchData@osc1_pkt
  9297  0001D6  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9298  0001D8  C5F5  F067         	movff	_LATCH_OSC1_DATA,setupLatchPkt@latch_data
  9299  0001DC  C5F6  F068         	movff	_LATCH_OSC1_DATA+1,setupLatchPkt@latch_data+1
  9300  0001E0  0E01               	movlw	1
  9301  0001E2  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9302  0001E4  EC25  F017         	call	_setupLatchPkt	;wreg free
  9303                           
  9304                           ;HX_ASL_BORON.c: 1290: stream[latchSendCount++] = &osc1_pkt;
  9305  0001E8  0100               	movlb	0	; () banked
  9306  0001EA  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9307  0001EC  0D02               	mullw	2
  9308  0001EE  0E79               	movlw	low checkAndSendLatchData@stream
  9309  0001F0  24F3               	addwf	prodl,w,c
  9310  0001F2  6ED9               	movwf	fsr2l,c
  9311  0001F4  0E00               	movlw	high checkAndSendLatchData@stream
  9312  0001F6  20F4               	addwfc	prodh,w,c
  9313  0001F8  6EDA               	movwf	fsr2h,c
  9314  0001FA  0E00               	movlw	low checkAndSendLatchData@osc1_pkt
  9315  0001FC  6EDE               	movwf	postinc2,c
  9316  0001FE  0E02               	movlw	high checkAndSendLatchData@osc1_pkt
  9317  000200  6EDD               	movwf	postdec2,c
  9318                           
  9319                           ; BSR set to: 0
  9320  000202  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9321                           
  9322                           ; BSR set to: 0
  9323                           ;HX_ASL_BORON.c: 1291: txRxPkt readback_osc1_pkt;
  9324                           ;HX_ASL_BORON.c: 1292: setupCmdReadbackPkt(&readback_osc1_pkt);
  9325  000204  0E00               	movlw	low checkAndSendLatchData@readback_osc1_pkt
  9326  000206  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9327  000208  0E06               	movlw	high checkAndSendLatchData@readback_osc1_pkt
  9328  00020A  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9329  00020C  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9330                           
  9331                           ;HX_ASL_BORON.c: 1293: stream[latchSendCount++] = &readback_osc1_pkt;
  9332  000210  0100               	movlb	0	; () banked
  9333  000212  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9334  000214  0D02               	mullw	2
  9335  000216  0E79               	movlw	low checkAndSendLatchData@stream
  9336  000218  24F3               	addwf	prodl,w,c
  9337  00021A  6ED9               	movwf	fsr2l,c
  9338  00021C  0E00               	movlw	high checkAndSendLatchData@stream
  9339  00021E  20F4               	addwfc	prodh,w,c
  9340  000220  6EDA               	movwf	fsr2h,c
  9341  000222  0E00               	movlw	low checkAndSendLatchData@readback_osc1_pkt
  9342  000224  6EDE               	movwf	postinc2,c
  9343  000226  0E06               	movlw	high checkAndSendLatchData@readback_osc1_pkt
  9344  000228  6EDD               	movwf	postdec2,c
  9345                           
  9346                           ; BSR set to: 0
  9347  00022A  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9348                           
  9349                           ; BSR set to: 0
  9350                           ;HX_ASL_BORON.c: 1294: readbackPkts[readbackSendCount++] = &readback_osc1_pkt;
  9351  00022C  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9352  00022E  0D02               	mullw	2
  9353  000230  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9354  000232  24F3               	addwf	prodl,w,c
  9355  000234  6ED9               	movwf	fsr2l,c
  9356  000236  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9357  000238  20F4               	addwfc	prodh,w,c
  9358  00023A  6EDA               	movwf	fsr2h,c
  9359  00023C  0E00               	movlw	low checkAndSendLatchData@readback_osc1_pkt
  9360  00023E  6EDE               	movwf	postinc2,c
  9361  000240  0E06               	movlw	high checkAndSendLatchData@readback_osc1_pkt
  9362  000242  6EDD               	movwf	postdec2,c
  9363                           
  9364                           ; BSR set to: 0
  9365  000244  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9366  000246                     l1270:
  9367                           
  9368                           ; BSR set to: 0
  9369                           ;HX_ASL_BORON.c: 1295: }
  9370                           ;HX_ASL_BORON.c: 1297: if (!(LATCH_OSC2_DATA & tsld.LATCH_OSC2_DATA))
  9371                           
  9372                           ; BSR set to: 0
  9373  000246  0105               	movlb	5	; () banked
  9374  000248  51F1               	movf	_LATCH_OSC2_DATA& (0+255),w,b
  9375  00024A  0106               	movlb	6	; () banked
  9376  00024C  15D9               	andwf	(_tsld+4)& (0+255),w,b
  9377  00024E  0100               	movlb	0	; () banked
  9378  000250  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9379  000252  0105               	movlb	5	; () banked
  9380  000254  51F2               	movf	(_LATCH_OSC2_DATA+1)& (0+255),w,b
  9381  000256  0106               	movlb	6	; () banked
  9382  000258  15DA               	andwf	(_tsld+5)& (0+255),w,b
  9383  00025A  0100               	movlb	0	; () banked
  9384  00025C  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9385  00025E  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9386  000260  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9387  000262  A4D8               	btfss	status,2,c
  9388  000264  D043               	goto	l1271
  9389                           
  9390                           ; BSR set to: 0
  9391                           ;HX_ASL_BORON.c: 1298: {
  9392                           ;HX_ASL_BORON.c: 1299: LATCH_OSC2_DATA = tsld.LATCH_OSC2_DATA;
  9393  000266  C6D9  F5F1         	movff	_tsld+4,_LATCH_OSC2_DATA
  9394  00026A  C6DA  F5F2         	movff	_tsld+5,_LATCH_OSC2_DATA+1
  9395  00026E  0105               	movlb	5	; () banked
  9396  000270  6BF3               	clrf	(_LATCH_OSC2_DATA+2)& (0+255),b
  9397  000272  6BF4               	clrf	(_LATCH_OSC2_DATA+3)& (0+255),b
  9398                           
  9399                           ; BSR set to: 5
  9400                           ;HX_ASL_BORON.c: 1300: txRxPkt osc2_pkt;
  9401                           ;HX_ASL_BORON.c: 1301: setupLatchPkt(&osc2_pkt, LATCH_OSC2_DATA, 0x2);
  9402  000274  0E47               	movlw	low checkAndSendLatchData@osc2_pkt
  9403  000276  0100               	movlb	0	; () banked
  9404  000278  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9405  00027A  0E02               	movlw	high checkAndSendLatchData@osc2_pkt
  9406  00027C  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9407  00027E  C5F1  F067         	movff	_LATCH_OSC2_DATA,setupLatchPkt@latch_data
  9408  000282  C5F2  F068         	movff	_LATCH_OSC2_DATA+1,setupLatchPkt@latch_data+1
  9409  000286  0E02               	movlw	2
  9410  000288  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9411  00028A  EC25  F017         	call	_setupLatchPkt	;wreg free
  9412                           
  9413                           ;HX_ASL_BORON.c: 1302: stream[latchSendCount++] = &osc2_pkt;
  9414  00028E  0100               	movlb	0	; () banked
  9415  000290  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9416  000292  0D02               	mullw	2
  9417  000294  0E79               	movlw	low checkAndSendLatchData@stream
  9418  000296  24F3               	addwf	prodl,w,c
  9419  000298  6ED9               	movwf	fsr2l,c
  9420  00029A  0E00               	movlw	high checkAndSendLatchData@stream
  9421  00029C  20F4               	addwfc	prodh,w,c
  9422  00029E  6EDA               	movwf	fsr2h,c
  9423  0002A0  0E47               	movlw	low checkAndSendLatchData@osc2_pkt
  9424  0002A2  6EDE               	movwf	postinc2,c
  9425  0002A4  0E02               	movlw	high checkAndSendLatchData@osc2_pkt
  9426  0002A6  6EDD               	movwf	postdec2,c
  9427                           
  9428                           ; BSR set to: 0
  9429  0002A8  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9430                           
  9431                           ; BSR set to: 0
  9432                           ;HX_ASL_BORON.c: 1303: txRxPkt readback_osc2_pkt;
  9433                           ;HX_ASL_BORON.c: 1304: setupCmdReadbackPkt(&readback_osc2_pkt);
  9434  0002AA  0E47               	movlw	low checkAndSendLatchData@readback_osc2_pkt
  9435  0002AC  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9436  0002AE  0E06               	movlw	high checkAndSendLatchData@readback_osc2_pkt
  9437  0002B0  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9438  0002B2  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9439                           
  9440                           ;HX_ASL_BORON.c: 1305: stream[latchSendCount++] = &readback_osc2_pkt;
  9441  0002B6  0100               	movlb	0	; () banked
  9442  0002B8  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9443  0002BA  0D02               	mullw	2
  9444  0002BC  0E79               	movlw	low checkAndSendLatchData@stream
  9445  0002BE  24F3               	addwf	prodl,w,c
  9446  0002C0  6ED9               	movwf	fsr2l,c
  9447  0002C2  0E00               	movlw	high checkAndSendLatchData@stream
  9448  0002C4  20F4               	addwfc	prodh,w,c
  9449  0002C6  6EDA               	movwf	fsr2h,c
  9450  0002C8  0E47               	movlw	low checkAndSendLatchData@readback_osc2_pkt
  9451  0002CA  6EDE               	movwf	postinc2,c
  9452  0002CC  0E06               	movlw	high checkAndSendLatchData@readback_osc2_pkt
  9453  0002CE  6EDD               	movwf	postdec2,c
  9454                           
  9455                           ; BSR set to: 0
  9456  0002D0  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9457                           
  9458                           ; BSR set to: 0
  9459                           ;HX_ASL_BORON.c: 1306: readbackPkts[readbackSendCount++] = &readback_osc2_pkt;
  9460  0002D2  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9461  0002D4  0D02               	mullw	2
  9462  0002D6  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9463  0002D8  24F3               	addwf	prodl,w,c
  9464  0002DA  6ED9               	movwf	fsr2l,c
  9465  0002DC  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9466  0002DE  20F4               	addwfc	prodh,w,c
  9467  0002E0  6EDA               	movwf	fsr2h,c
  9468  0002E2  0E47               	movlw	low checkAndSendLatchData@readback_osc2_pkt
  9469  0002E4  6EDE               	movwf	postinc2,c
  9470  0002E6  0E06               	movlw	high checkAndSendLatchData@readback_osc2_pkt
  9471  0002E8  6EDD               	movwf	postdec2,c
  9472                           
  9473                           ; BSR set to: 0
  9474  0002EA  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9475  0002EC                     l1271:
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;HX_ASL_BORON.c: 1307: }
  9479                           ;HX_ASL_BORON.c: 1309: if (!(LATCH_ANALOG_DATA & tsld.LATCH_ANALOG_DATA))
  9480                           
  9481                           ; BSR set to: 0
  9482  0002EC  0105               	movlb	5	; () banked
  9483  0002EE  51ED               	movf	_LATCH_ANALOG_DATA& (0+255),w,b
  9484  0002F0  0106               	movlb	6	; () banked
  9485  0002F2  15DB               	andwf	(_tsld+6)& (0+255),w,b
  9486  0002F4  0100               	movlb	0	; () banked
  9487  0002F6  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9488  0002F8  0105               	movlb	5	; () banked
  9489  0002FA  51EE               	movf	(_LATCH_ANALOG_DATA+1)& (0+255),w,b
  9490  0002FC  0106               	movlb	6	; () banked
  9491  0002FE  15DC               	andwf	(_tsld+7)& (0+255),w,b
  9492  000300  0100               	movlb	0	; () banked
  9493  000302  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9494  000304  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9495  000306  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9496  000308  A4D8               	btfss	status,2,c
  9497  00030A  D043               	goto	l1272
  9498                           
  9499                           ; BSR set to: 0
  9500                           ;HX_ASL_BORON.c: 1310: {
  9501                           ;HX_ASL_BORON.c: 1311: LATCH_ANALOG_DATA = tsld.LATCH_ANALOG_DATA;
  9502  00030C  C6DB  F5ED         	movff	_tsld+6,_LATCH_ANALOG_DATA
  9503  000310  C6DC  F5EE         	movff	_tsld+7,_LATCH_ANALOG_DATA+1
  9504  000314  0105               	movlb	5	; () banked
  9505  000316  6BEF               	clrf	(_LATCH_ANALOG_DATA+2)& (0+255),b
  9506  000318  6BF0               	clrf	(_LATCH_ANALOG_DATA+3)& (0+255),b
  9507                           
  9508                           ; BSR set to: 5
  9509                           ;HX_ASL_BORON.c: 1312: txRxPkt analog_pkt;
  9510                           ;HX_ASL_BORON.c: 1313: setupLatchPkt(&analog_pkt, LATCH_ANALOG_DATA, 0x3);
  9511  00031A  0E8E               	movlw	low checkAndSendLatchData@analog_pkt
  9512  00031C  0100               	movlb	0	; () banked
  9513  00031E  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9514  000320  0E02               	movlw	high checkAndSendLatchData@analog_pkt
  9515  000322  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9516  000324  C5ED  F067         	movff	_LATCH_ANALOG_DATA,setupLatchPkt@latch_data
  9517  000328  C5EE  F068         	movff	_LATCH_ANALOG_DATA+1,setupLatchPkt@latch_data+1
  9518  00032C  0E03               	movlw	3
  9519  00032E  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9520  000330  EC25  F017         	call	_setupLatchPkt	;wreg free
  9521                           
  9522                           ;HX_ASL_BORON.c: 1314: stream[latchSendCount++] = &analog_pkt;
  9523  000334  0100               	movlb	0	; () banked
  9524  000336  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9525  000338  0D02               	mullw	2
  9526  00033A  0E79               	movlw	low checkAndSendLatchData@stream
  9527  00033C  24F3               	addwf	prodl,w,c
  9528  00033E  6ED9               	movwf	fsr2l,c
  9529  000340  0E00               	movlw	high checkAndSendLatchData@stream
  9530  000342  20F4               	addwfc	prodh,w,c
  9531  000344  6EDA               	movwf	fsr2h,c
  9532  000346  0E8E               	movlw	low checkAndSendLatchData@analog_pkt
  9533  000348  6EDE               	movwf	postinc2,c
  9534  00034A  0E02               	movlw	high checkAndSendLatchData@analog_pkt
  9535  00034C  6EDD               	movwf	postdec2,c
  9536                           
  9537                           ; BSR set to: 0
  9538  00034E  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9539                           
  9540                           ; BSR set to: 0
  9541                           ;HX_ASL_BORON.c: 1315: txRxPkt readback_analog_pkt;
  9542                           ;HX_ASL_BORON.c: 1316: setupCmdReadbackPkt(&readback_analog_pkt);
  9543  000350  0E8E               	movlw	low checkAndSendLatchData@readback_analog_pkt
  9544  000352  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9545  000354  0E06               	movlw	high checkAndSendLatchData@readback_analog_pkt
  9546  000356  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9547  000358  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9548                           
  9549                           ;HX_ASL_BORON.c: 1317: stream[latchSendCount++] = &readback_analog_pkt;
  9550  00035C  0100               	movlb	0	; () banked
  9551  00035E  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9552  000360  0D02               	mullw	2
  9553  000362  0E79               	movlw	low checkAndSendLatchData@stream
  9554  000364  24F3               	addwf	prodl,w,c
  9555  000366  6ED9               	movwf	fsr2l,c
  9556  000368  0E00               	movlw	high checkAndSendLatchData@stream
  9557  00036A  20F4               	addwfc	prodh,w,c
  9558  00036C  6EDA               	movwf	fsr2h,c
  9559  00036E  0E8E               	movlw	low checkAndSendLatchData@readback_analog_pkt
  9560  000370  6EDE               	movwf	postinc2,c
  9561  000372  0E06               	movlw	high checkAndSendLatchData@readback_analog_pkt
  9562  000374  6EDD               	movwf	postdec2,c
  9563                           
  9564                           ; BSR set to: 0
  9565  000376  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9566                           
  9567                           ; BSR set to: 0
  9568                           ;HX_ASL_BORON.c: 1318: readbackPkts[readbackSendCount++] = &readback_analog_pkt;
  9569  000378  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9570  00037A  0D02               	mullw	2
  9571  00037C  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9572  00037E  24F3               	addwf	prodl,w,c
  9573  000380  6ED9               	movwf	fsr2l,c
  9574  000382  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9575  000384  20F4               	addwfc	prodh,w,c
  9576  000386  6EDA               	movwf	fsr2h,c
  9577  000388  0E8E               	movlw	low checkAndSendLatchData@readback_analog_pkt
  9578  00038A  6EDE               	movwf	postinc2,c
  9579  00038C  0E06               	movlw	high checkAndSendLatchData@readback_analog_pkt
  9580  00038E  6EDD               	movwf	postdec2,c
  9581                           
  9582                           ; BSR set to: 0
  9583  000390  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9584  000392                     l1272:
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;HX_ASL_BORON.c: 1319: }
  9588                           ;HX_ASL_BORON.c: 1321: if (!(LATCH_OVEN_DATA & tsld.LATCH_OVEN_DATA))
  9589                           
  9590                           ; BSR set to: 0
  9591  000392  0102               	movlb	2	; () banked
  9592  000394  51E2               	movf	_LATCH_OVEN_DATA& (0+255),w,b
  9593  000396  0106               	movlb	6	; () banked
  9594  000398  15DD               	andwf	(_tsld+8)& (0+255),w,b
  9595  00039A  0100               	movlb	0	; () banked
  9596  00039C  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9597  00039E  0102               	movlb	2	; () banked
  9598  0003A0  51E3               	movf	(_LATCH_OVEN_DATA+1)& (0+255),w,b
  9599  0003A2  0106               	movlb	6	; () banked
  9600  0003A4  15DE               	andwf	(_tsld+9)& (0+255),w,b
  9601  0003A6  0100               	movlb	0	; () banked
  9602  0003A8  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9603  0003AA  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9604  0003AC  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9605  0003AE  A4D8               	btfss	status,2,c
  9606  0003B0  D043               	goto	l1273
  9607                           
  9608                           ; BSR set to: 0
  9609                           ;HX_ASL_BORON.c: 1322: {
  9610                           ;HX_ASL_BORON.c: 1323: LATCH_OVEN_DATA = tsld.LATCH_OVEN_DATA;
  9611  0003B2  C6DD  F2E2         	movff	_tsld+8,_LATCH_OVEN_DATA
  9612  0003B6  C6DE  F2E3         	movff	_tsld+9,_LATCH_OVEN_DATA+1
  9613  0003BA  0102               	movlb	2	; () banked
  9614  0003BC  6BE4               	clrf	(_LATCH_OVEN_DATA+2)& (0+255),b
  9615  0003BE  6BE5               	clrf	(_LATCH_OVEN_DATA+3)& (0+255),b
  9616                           
  9617                           ; BSR set to: 2
  9618                           ;HX_ASL_BORON.c: 1324: txRxPkt oven_pkt;
  9619                           ;HX_ASL_BORON.c: 1325: setupLatchPkt(&oven_pkt, LATCH_OVEN_DATA, 0x4);
  9620  0003C0  0E00               	movlw	low checkAndSendLatchData@oven_pkt
  9621  0003C2  0100               	movlb	0	; () banked
  9622  0003C4  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9623  0003C6  0E03               	movlw	high checkAndSendLatchData@oven_pkt
  9624  0003C8  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9625  0003CA  C2E2  F067         	movff	_LATCH_OVEN_DATA,setupLatchPkt@latch_data
  9626  0003CE  C2E3  F068         	movff	_LATCH_OVEN_DATA+1,setupLatchPkt@latch_data+1
  9627  0003D2  0E04               	movlw	4
  9628  0003D4  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9629  0003D6  EC25  F017         	call	_setupLatchPkt	;wreg free
  9630                           
  9631                           ;HX_ASL_BORON.c: 1326: stream[latchSendCount++] = &oven_pkt;
  9632  0003DA  0100               	movlb	0	; () banked
  9633  0003DC  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9634  0003DE  0D02               	mullw	2
  9635  0003E0  0E79               	movlw	low checkAndSendLatchData@stream
  9636  0003E2  24F3               	addwf	prodl,w,c
  9637  0003E4  6ED9               	movwf	fsr2l,c
  9638  0003E6  0E00               	movlw	high checkAndSendLatchData@stream
  9639  0003E8  20F4               	addwfc	prodh,w,c
  9640  0003EA  6EDA               	movwf	fsr2h,c
  9641  0003EC  0E00               	movlw	low checkAndSendLatchData@oven_pkt
  9642  0003EE  6EDE               	movwf	postinc2,c
  9643  0003F0  0E03               	movlw	high checkAndSendLatchData@oven_pkt
  9644  0003F2  6EDD               	movwf	postdec2,c
  9645                           
  9646                           ; BSR set to: 0
  9647  0003F4  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;HX_ASL_BORON.c: 1327: txRxPkt readback_oven_pkt;
  9651                           ;HX_ASL_BORON.c: 1328: setupCmdReadbackPkt(&readback_oven_pkt);
  9652  0003F6  0E00               	movlw	low checkAndSendLatchData@readback_oven_pkt
  9653  0003F8  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9654  0003FA  0E07               	movlw	high checkAndSendLatchData@readback_oven_pkt
  9655  0003FC  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9656  0003FE  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9657                           
  9658                           ;HX_ASL_BORON.c: 1329: stream[latchSendCount++] = &readback_oven_pkt;
  9659  000402  0100               	movlb	0	; () banked
  9660  000404  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9661  000406  0D02               	mullw	2
  9662  000408  0E79               	movlw	low checkAndSendLatchData@stream
  9663  00040A  24F3               	addwf	prodl,w,c
  9664  00040C  6ED9               	movwf	fsr2l,c
  9665  00040E  0E00               	movlw	high checkAndSendLatchData@stream
  9666  000410  20F4               	addwfc	prodh,w,c
  9667  000412  6EDA               	movwf	fsr2h,c
  9668  000414  0E00               	movlw	low checkAndSendLatchData@readback_oven_pkt
  9669  000416  6EDE               	movwf	postinc2,c
  9670  000418  0E07               	movlw	high checkAndSendLatchData@readback_oven_pkt
  9671  00041A  6EDD               	movwf	postdec2,c
  9672                           
  9673                           ; BSR set to: 0
  9674  00041C  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9675                           
  9676                           ; BSR set to: 0
  9677                           ;HX_ASL_BORON.c: 1330: readbackPkts[readbackSendCount++] = &readback_oven_pkt;
  9678  00041E  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9679  000420  0D02               	mullw	2
  9680  000422  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9681  000424  24F3               	addwf	prodl,w,c
  9682  000426  6ED9               	movwf	fsr2l,c
  9683  000428  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9684  00042A  20F4               	addwfc	prodh,w,c
  9685  00042C  6EDA               	movwf	fsr2h,c
  9686  00042E  0E00               	movlw	low checkAndSendLatchData@readback_oven_pkt
  9687  000430  6EDE               	movwf	postinc2,c
  9688  000432  0E07               	movlw	high checkAndSendLatchData@readback_oven_pkt
  9689  000434  6EDD               	movwf	postdec2,c
  9690                           
  9691                           ; BSR set to: 0
  9692  000436  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9693  000438                     l1273:
  9694                           
  9695                           ; BSR set to: 0
  9696                           ;HX_ASL_BORON.c: 1331: }
  9697                           ;HX_ASL_BORON.c: 1333: if (!(LATCH_HEAT_DAC_DATA & tsld.LATCH_HEAT_DAC_DATA))
  9698                           
  9699                           ; BSR set to: 0
  9700  000438  0105               	movlb	5	; () banked
  9701  00043A  51E9               	movf	_LATCH_HEAT_DAC_DATA& (0+255),w,b
  9702  00043C  0106               	movlb	6	; () banked
  9703  00043E  15DF               	andwf	(_tsld+10)& (0+255),w,b
  9704  000440  0100               	movlb	0	; () banked
  9705  000442  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9706  000444  0105               	movlb	5	; () banked
  9707  000446  51EA               	movf	(_LATCH_HEAT_DAC_DATA+1)& (0+255),w,b
  9708  000448  0106               	movlb	6	; () banked
  9709  00044A  15E0               	andwf	(_tsld+11)& (0+255),w,b
  9710  00044C  0100               	movlb	0	; () banked
  9711  00044E  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9712  000450  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9713  000452  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9714  000454  A4D8               	btfss	status,2,c
  9715  000456  D043               	goto	l1274
  9716                           
  9717                           ; BSR set to: 0
  9718                           ;HX_ASL_BORON.c: 1334: {
  9719                           ;HX_ASL_BORON.c: 1335: LATCH_HEAT_DAC_DATA = tsld.LATCH_HEAT_DAC_DATA;
  9720  000458  C6DF  F5E9         	movff	_tsld+10,_LATCH_HEAT_DAC_DATA
  9721  00045C  C6E0  F5EA         	movff	_tsld+11,_LATCH_HEAT_DAC_DATA+1
  9722  000460  0105               	movlb	5	; () banked
  9723  000462  6BEB               	clrf	(_LATCH_HEAT_DAC_DATA+2)& (0+255),b
  9724  000464  6BEC               	clrf	(_LATCH_HEAT_DAC_DATA+3)& (0+255),b
  9725                           
  9726                           ; BSR set to: 5
  9727                           ;HX_ASL_BORON.c: 1336: txRxPkt heat_dac_pkt;
  9728                           ;HX_ASL_BORON.c: 1337: setupLatchPkt(&heat_dac_pkt, LATCH_HEAT_DAC_DATA, 0x5);
  9729  000466  0E47               	movlw	low checkAndSendLatchData@heat_dac_pkt
  9730  000468  0100               	movlb	0	; () banked
  9731  00046A  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9732  00046C  0E03               	movlw	high checkAndSendLatchData@heat_dac_pkt
  9733  00046E  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9734  000470  C5E9  F067         	movff	_LATCH_HEAT_DAC_DATA,setupLatchPkt@latch_data
  9735  000474  C5EA  F068         	movff	_LATCH_HEAT_DAC_DATA+1,setupLatchPkt@latch_data+1
  9736  000478  0E05               	movlw	5
  9737  00047A  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9738  00047C  EC25  F017         	call	_setupLatchPkt	;wreg free
  9739                           
  9740                           ;HX_ASL_BORON.c: 1338: stream[latchSendCount++] = &heat_dac_pkt;
  9741  000480  0100               	movlb	0	; () banked
  9742  000482  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9743  000484  0D02               	mullw	2
  9744  000486  0E79               	movlw	low checkAndSendLatchData@stream
  9745  000488  24F3               	addwf	prodl,w,c
  9746  00048A  6ED9               	movwf	fsr2l,c
  9747  00048C  0E00               	movlw	high checkAndSendLatchData@stream
  9748  00048E  20F4               	addwfc	prodh,w,c
  9749  000490  6EDA               	movwf	fsr2h,c
  9750  000492  0E47               	movlw	low checkAndSendLatchData@heat_dac_pkt
  9751  000494  6EDE               	movwf	postinc2,c
  9752  000496  0E03               	movlw	high checkAndSendLatchData@heat_dac_pkt
  9753  000498  6EDD               	movwf	postdec2,c
  9754                           
  9755                           ; BSR set to: 0
  9756  00049A  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;HX_ASL_BORON.c: 1339: txRxPkt readback_heat_dac_pkt;
  9760                           ;HX_ASL_BORON.c: 1340: setupCmdReadbackPkt(&readback_heat_dac_pkt);
  9761  00049C  0E47               	movlw	low checkAndSendLatchData@readback_heat_dac_pkt
  9762  00049E  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9763  0004A0  0E07               	movlw	high checkAndSendLatchData@readback_heat_dac_pkt
  9764  0004A2  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9765  0004A4  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9766                           
  9767                           ;HX_ASL_BORON.c: 1341: stream[latchSendCount++] = &readback_heat_dac_pkt;
  9768  0004A8  0100               	movlb	0	; () banked
  9769  0004AA  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9770  0004AC  0D02               	mullw	2
  9771  0004AE  0E79               	movlw	low checkAndSendLatchData@stream
  9772  0004B0  24F3               	addwf	prodl,w,c
  9773  0004B2  6ED9               	movwf	fsr2l,c
  9774  0004B4  0E00               	movlw	high checkAndSendLatchData@stream
  9775  0004B6  20F4               	addwfc	prodh,w,c
  9776  0004B8  6EDA               	movwf	fsr2h,c
  9777  0004BA  0E47               	movlw	low checkAndSendLatchData@readback_heat_dac_pkt
  9778  0004BC  6EDE               	movwf	postinc2,c
  9779  0004BE  0E07               	movlw	high checkAndSendLatchData@readback_heat_dac_pkt
  9780  0004C0  6EDD               	movwf	postdec2,c
  9781                           
  9782                           ; BSR set to: 0
  9783  0004C2  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9784                           
  9785                           ; BSR set to: 0
  9786                           ;HX_ASL_BORON.c: 1342: readbackPkts[readbackSendCount++] = &readback_heat_dac_pkt;
  9787  0004C4  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9788  0004C6  0D02               	mullw	2
  9789  0004C8  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9790  0004CA  24F3               	addwf	prodl,w,c
  9791  0004CC  6ED9               	movwf	fsr2l,c
  9792  0004CE  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9793  0004D0  20F4               	addwfc	prodh,w,c
  9794  0004D2  6EDA               	movwf	fsr2h,c
  9795  0004D4  0E47               	movlw	low checkAndSendLatchData@readback_heat_dac_pkt
  9796  0004D6  6EDE               	movwf	postinc2,c
  9797  0004D8  0E07               	movlw	high checkAndSendLatchData@readback_heat_dac_pkt
  9798  0004DA  6EDD               	movwf	postdec2,c
  9799                           
  9800                           ; BSR set to: 0
  9801  0004DC  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9802  0004DE                     l1274:
  9803                           
  9804                           ; BSR set to: 0
  9805                           ;HX_ASL_BORON.c: 1343: }
  9806                           ;HX_ASL_BORON.c: 1345: if (!(LATCH_VARACTOR_DAC_DATA & tsld.LATCH_VARACTOR_DAC_DATA))
  9807                           
  9808                           ; BSR set to: 0
  9809  0004DE  0105               	movlb	5	; () banked
  9810  0004E0  51E5               	movf	_LATCH_VARACTOR_DAC_DATA& (0+255),w,b
  9811  0004E2  0106               	movlb	6	; () banked
  9812  0004E4  15E1               	andwf	(_tsld+12)& (0+255),w,b
  9813  0004E6  0100               	movlb	0	; () banked
  9814  0004E8  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9815  0004EA  0105               	movlb	5	; () banked
  9816  0004EC  51E6               	movf	(_LATCH_VARACTOR_DAC_DATA+1)& (0+255),w,b
  9817  0004EE  0106               	movlb	6	; () banked
  9818  0004F0  15E2               	andwf	(_tsld+13)& (0+255),w,b
  9819  0004F2  0100               	movlb	0	; () banked
  9820  0004F4  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9821  0004F6  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9822  0004F8  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9823  0004FA  A4D8               	btfss	status,2,c
  9824  0004FC  D043               	goto	l1275
  9825                           
  9826                           ; BSR set to: 0
  9827                           ;HX_ASL_BORON.c: 1346: {
  9828                           ;HX_ASL_BORON.c: 1347: LATCH_VARACTOR_DAC_DATA = tsld.LATCH_VARACTOR_DAC_DATA;
  9829  0004FE  C6E1  F5E5         	movff	_tsld+12,_LATCH_VARACTOR_DAC_DATA
  9830  000502  C6E2  F5E6         	movff	_tsld+13,_LATCH_VARACTOR_DAC_DATA+1
  9831  000506  0105               	movlb	5	; () banked
  9832  000508  6BE7               	clrf	(_LATCH_VARACTOR_DAC_DATA+2)& (0+255),b
  9833  00050A  6BE8               	clrf	(_LATCH_VARACTOR_DAC_DATA+3)& (0+255),b
  9834                           
  9835                           ; BSR set to: 5
  9836                           ;HX_ASL_BORON.c: 1348: txRxPkt varactor_dac_pkt;
  9837                           ;HX_ASL_BORON.c: 1349: setupLatchPkt(&varactor_dac_pkt, LATCH_VARACTOR_DAC_DATA, 0x6);
  9838  00050C  0E8E               	movlw	low checkAndSendLatchData@varactor_dac_pkt
  9839  00050E  0100               	movlb	0	; () banked
  9840  000510  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9841  000512  0E03               	movlw	high checkAndSendLatchData@varactor_dac_pkt
  9842  000514  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9843  000516  C5E5  F067         	movff	_LATCH_VARACTOR_DAC_DATA,setupLatchPkt@latch_data
  9844  00051A  C5E6  F068         	movff	_LATCH_VARACTOR_DAC_DATA+1,setupLatchPkt@latch_data+1
  9845  00051E  0E06               	movlw	6
  9846  000520  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9847  000522  EC25  F017         	call	_setupLatchPkt	;wreg free
  9848                           
  9849                           ;HX_ASL_BORON.c: 1350: stream[latchSendCount++] = &varactor_dac_pkt;
  9850  000526  0100               	movlb	0	; () banked
  9851  000528  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9852  00052A  0D02               	mullw	2
  9853  00052C  0E79               	movlw	low checkAndSendLatchData@stream
  9854  00052E  24F3               	addwf	prodl,w,c
  9855  000530  6ED9               	movwf	fsr2l,c
  9856  000532  0E00               	movlw	high checkAndSendLatchData@stream
  9857  000534  20F4               	addwfc	prodh,w,c
  9858  000536  6EDA               	movwf	fsr2h,c
  9859  000538  0E8E               	movlw	low checkAndSendLatchData@varactor_dac_pkt
  9860  00053A  6EDE               	movwf	postinc2,c
  9861  00053C  0E03               	movlw	high checkAndSendLatchData@varactor_dac_pkt
  9862  00053E  6EDD               	movwf	postdec2,c
  9863                           
  9864                           ; BSR set to: 0
  9865  000540  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;HX_ASL_BORON.c: 1351: txRxPkt readback_varactor_dac_pkt;
  9869                           ;HX_ASL_BORON.c: 1352: setupCmdReadbackPkt(&readback_varactor_dac_pkt);
  9870  000542  0E8E               	movlw	low checkAndSendLatchData@readback_varactor_dac_pkt
  9871  000544  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9872  000546  0E07               	movlw	high checkAndSendLatchData@readback_varactor_dac_pkt
  9873  000548  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9874  00054A  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9875                           
  9876                           ;HX_ASL_BORON.c: 1353: stream[latchSendCount++] = &readback_varactor_dac_pkt;
  9877  00054E  0100               	movlb	0	; () banked
  9878  000550  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9879  000552  0D02               	mullw	2
  9880  000554  0E79               	movlw	low checkAndSendLatchData@stream
  9881  000556  24F3               	addwf	prodl,w,c
  9882  000558  6ED9               	movwf	fsr2l,c
  9883  00055A  0E00               	movlw	high checkAndSendLatchData@stream
  9884  00055C  20F4               	addwfc	prodh,w,c
  9885  00055E  6EDA               	movwf	fsr2h,c
  9886  000560  0E8E               	movlw	low checkAndSendLatchData@readback_varactor_dac_pkt
  9887  000562  6EDE               	movwf	postinc2,c
  9888  000564  0E07               	movlw	high checkAndSendLatchData@readback_varactor_dac_pkt
  9889  000566  6EDD               	movwf	postdec2,c
  9890                           
  9891                           ; BSR set to: 0
  9892  000568  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;HX_ASL_BORON.c: 1354: readbackPkts[readbackSendCount++] = &readback_varactor_dac_pkt;
  9896  00056A  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9897  00056C  0D02               	mullw	2
  9898  00056E  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9899  000570  24F3               	addwf	prodl,w,c
  9900  000572  6ED9               	movwf	fsr2l,c
  9901  000574  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9902  000576  20F4               	addwfc	prodh,w,c
  9903  000578  6EDA               	movwf	fsr2h,c
  9904  00057A  0E8E               	movlw	low checkAndSendLatchData@readback_varactor_dac_pkt
  9905  00057C  6EDE               	movwf	postinc2,c
  9906  00057E  0E07               	movlw	high checkAndSendLatchData@readback_varactor_dac_pkt
  9907  000580  6EDD               	movwf	postdec2,c
  9908                           
  9909                           ; BSR set to: 0
  9910  000582  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9911  000584                     l1275:
  9912                           
  9913                           ; BSR set to: 0
  9914                           ;HX_ASL_BORON.c: 1355: }
  9915                           ;HX_ASL_BORON.c: 1357: if (!(LATCH_BIAS_DATA & tsld.LATCH_BIAS_DATA))
  9916                           
  9917                           ; BSR set to: 0
  9918  000584  0105               	movlb	5	; () banked
  9919  000586  51E1               	movf	_LATCH_BIAS_DATA& (0+255),w,b
  9920  000588  0106               	movlb	6	; () banked
  9921  00058A  15E3               	andwf	(_tsld+14)& (0+255),w,b
  9922  00058C  0100               	movlb	0	; () banked
  9923  00058E  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9924  000590  0105               	movlb	5	; () banked
  9925  000592  51E2               	movf	(_LATCH_BIAS_DATA+1)& (0+255),w,b
  9926  000594  0106               	movlb	6	; () banked
  9927  000596  15E4               	andwf	(_tsld+15)& (0+255),w,b
  9928  000598  0100               	movlb	0	; () banked
  9929  00059A  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9930  00059C  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9931  00059E  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9932  0005A0  A4D8               	btfss	status,2,c
  9933  0005A2  D043               	goto	l1276
  9934                           
  9935                           ; BSR set to: 0
  9936                           ;HX_ASL_BORON.c: 1358: {
  9937                           ;HX_ASL_BORON.c: 1359: LATCH_BIAS_DATA = tsld.LATCH_BIAS_DATA;
  9938  0005A4  C6E3  F5E1         	movff	_tsld+14,_LATCH_BIAS_DATA
  9939  0005A8  C6E4  F5E2         	movff	_tsld+15,_LATCH_BIAS_DATA+1
  9940  0005AC  0105               	movlb	5	; () banked
  9941  0005AE  6BE3               	clrf	(_LATCH_BIAS_DATA+2)& (0+255),b
  9942  0005B0  6BE4               	clrf	(_LATCH_BIAS_DATA+3)& (0+255),b
  9943                           
  9944                           ; BSR set to: 5
  9945                           ;HX_ASL_BORON.c: 1360: txRxPkt bias_pkt;
  9946                           ;HX_ASL_BORON.c: 1361: setupLatchPkt(&bias_pkt, LATCH_BIAS_DATA, 0x7);
  9947  0005B2  0E00               	movlw	low checkAndSendLatchData@bias_pkt
  9948  0005B4  0100               	movlb	0	; () banked
  9949  0005B6  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9950  0005B8  0E04               	movlw	high checkAndSendLatchData@bias_pkt
  9951  0005BA  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9952  0005BC  C5E1  F067         	movff	_LATCH_BIAS_DATA,setupLatchPkt@latch_data
  9953  0005C0  C5E2  F068         	movff	_LATCH_BIAS_DATA+1,setupLatchPkt@latch_data+1
  9954  0005C4  0E07               	movlw	7
  9955  0005C6  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9956  0005C8  EC25  F017         	call	_setupLatchPkt	;wreg free
  9957                           
  9958                           ;HX_ASL_BORON.c: 1362: stream[latchSendCount++] = &bias_pkt;
  9959  0005CC  0100               	movlb	0	; () banked
  9960  0005CE  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9961  0005D0  0D02               	mullw	2
  9962  0005D2  0E79               	movlw	low checkAndSendLatchData@stream
  9963  0005D4  24F3               	addwf	prodl,w,c
  9964  0005D6  6ED9               	movwf	fsr2l,c
  9965  0005D8  0E00               	movlw	high checkAndSendLatchData@stream
  9966  0005DA  20F4               	addwfc	prodh,w,c
  9967  0005DC  6EDA               	movwf	fsr2h,c
  9968  0005DE  0E00               	movlw	low checkAndSendLatchData@bias_pkt
  9969  0005E0  6EDE               	movwf	postinc2,c
  9970  0005E2  0E04               	movlw	high checkAndSendLatchData@bias_pkt
  9971  0005E4  6EDD               	movwf	postdec2,c
  9972                           
  9973                           ; BSR set to: 0
  9974  0005E6  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9975                           
  9976                           ; BSR set to: 0
  9977                           ;HX_ASL_BORON.c: 1363: txRxPkt readback_bias_pkt;
  9978                           ;HX_ASL_BORON.c: 1364: setupCmdReadbackPkt(&readback_bias_pkt);
  9979  0005E8  0E00               	movlw	low checkAndSendLatchData@readback_bias_pkt
  9980  0005EA  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9981  0005EC  0E08               	movlw	high checkAndSendLatchData@readback_bias_pkt
  9982  0005EE  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9983  0005F0  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9984                           
  9985                           ;HX_ASL_BORON.c: 1365: stream[latchSendCount++] = &readback_bias_pkt;
  9986  0005F4  0100               	movlb	0	; () banked
  9987  0005F6  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9988  0005F8  0D02               	mullw	2
  9989  0005FA  0E79               	movlw	low checkAndSendLatchData@stream
  9990  0005FC  24F3               	addwf	prodl,w,c
  9991  0005FE  6ED9               	movwf	fsr2l,c
  9992  000600  0E00               	movlw	high checkAndSendLatchData@stream
  9993  000602  20F4               	addwfc	prodh,w,c
  9994  000604  6EDA               	movwf	fsr2h,c
  9995  000606  0E00               	movlw	low checkAndSendLatchData@readback_bias_pkt
  9996  000608  6EDE               	movwf	postinc2,c
  9997  00060A  0E08               	movlw	high checkAndSendLatchData@readback_bias_pkt
  9998  00060C  6EDD               	movwf	postdec2,c
  9999                           
 10000                           ; BSR set to: 0
 10001  00060E  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10002                           
 10003                           ; BSR set to: 0
 10004                           ;HX_ASL_BORON.c: 1366: readbackPkts[readbackSendCount++] = &readback_bias_pkt;
 10005  000610  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
 10006  000612  0D02               	mullw	2
 10007  000614  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10008  000616  24F3               	addwf	prodl,w,c
 10009  000618  6ED9               	movwf	fsr2l,c
 10010  00061A  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10011  00061C  20F4               	addwfc	prodh,w,c
 10012  00061E  6EDA               	movwf	fsr2h,c
 10013  000620  0E00               	movlw	low checkAndSendLatchData@readback_bias_pkt
 10014  000622  6EDE               	movwf	postinc2,c
 10015  000624  0E08               	movlw	high checkAndSendLatchData@readback_bias_pkt
 10016  000626  6EDD               	movwf	postdec2,c
 10017                           
 10018                           ; BSR set to: 0
 10019  000628  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
 10020  00062A                     l1276:
 10021                           
 10022                           ; BSR set to: 0
 10023                           ;HX_ASL_BORON.c: 1367: }
 10024                           ;HX_ASL_BORON.c: 1369: if (!(LATCH_CMOS_DATA & tsld.LATCH_CMOS_DATA))
 10025                           
 10026                           ; BSR set to: 0
 10027  00062A  0105               	movlb	5	; () banked
 10028  00062C  51DD               	movf	_LATCH_CMOS_DATA& (0+255),w,b
 10029  00062E  0106               	movlb	6	; () banked
 10030  000630  15E5               	andwf	(_tsld+16)& (0+255),w,b
 10031  000632  0100               	movlb	0	; () banked
 10032  000634  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10033  000636  0105               	movlb	5	; () banked
 10034  000638  51DE               	movf	(_LATCH_CMOS_DATA+1)& (0+255),w,b
 10035  00063A  0106               	movlb	6	; () banked
 10036  00063C  15E6               	andwf	(_tsld+17)& (0+255),w,b
 10037  00063E  0100               	movlb	0	; () banked
 10038  000640  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
 10039  000642  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10040  000644  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
 10041  000646  A4D8               	btfss	status,2,c
 10042  000648  D043               	goto	l1277
 10043                           
 10044                           ; BSR set to: 0
 10045                           ;HX_ASL_BORON.c: 1370: {
 10046                           ;HX_ASL_BORON.c: 1371: LATCH_CMOS_DATA = tsld.LATCH_CMOS_DATA;
 10047  00064A  C6E5  F5DD         	movff	_tsld+16,_LATCH_CMOS_DATA
 10048  00064E  C6E6  F5DE         	movff	_tsld+17,_LATCH_CMOS_DATA+1
 10049  000652  0105               	movlb	5	; () banked
 10050  000654  6BDF               	clrf	(_LATCH_CMOS_DATA+2)& (0+255),b
 10051  000656  6BE0               	clrf	(_LATCH_CMOS_DATA+3)& (0+255),b
 10052                           
 10053                           ; BSR set to: 5
 10054                           ;HX_ASL_BORON.c: 1372: txRxPkt cmos_pkt;
 10055                           ;HX_ASL_BORON.c: 1373: setupLatchPkt(&cmos_pkt, LATCH_CMOS_DATA, 0x8);
 10056  000658  0E47               	movlw	low checkAndSendLatchData@cmos_pkt
 10057  00065A  0100               	movlb	0	; () banked
 10058  00065C  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 10059  00065E  0E04               	movlw	high checkAndSendLatchData@cmos_pkt
 10060  000660  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 10061  000662  C5DD  F067         	movff	_LATCH_CMOS_DATA,setupLatchPkt@latch_data
 10062  000666  C5DE  F068         	movff	_LATCH_CMOS_DATA+1,setupLatchPkt@latch_data+1
 10063  00066A  0E08               	movlw	8
 10064  00066C  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 10065  00066E  EC25  F017         	call	_setupLatchPkt	;wreg free
 10066                           
 10067                           ;HX_ASL_BORON.c: 1374: stream[latchSendCount++] = &cmos_pkt;
 10068  000672  0100               	movlb	0	; () banked
 10069  000674  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10070  000676  0D02               	mullw	2
 10071  000678  0E79               	movlw	low checkAndSendLatchData@stream
 10072  00067A  24F3               	addwf	prodl,w,c
 10073  00067C  6ED9               	movwf	fsr2l,c
 10074  00067E  0E00               	movlw	high checkAndSendLatchData@stream
 10075  000680  20F4               	addwfc	prodh,w,c
 10076  000682  6EDA               	movwf	fsr2h,c
 10077  000684  0E47               	movlw	low checkAndSendLatchData@cmos_pkt
 10078  000686  6EDE               	movwf	postinc2,c
 10079  000688  0E04               	movlw	high checkAndSendLatchData@cmos_pkt
 10080  00068A  6EDD               	movwf	postdec2,c
 10081                           
 10082                           ; BSR set to: 0
 10083  00068C  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10084                           
 10085                           ; BSR set to: 0
 10086                           ;HX_ASL_BORON.c: 1375: txRxPkt readback_cmos_pkt;
 10087                           ;HX_ASL_BORON.c: 1376: setupCmdReadbackPkt(&readback_cmos_pkt);
 10088  00068E  0E47               	movlw	low checkAndSendLatchData@readback_cmos_pkt
 10089  000690  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 10090  000692  0E08               	movlw	high checkAndSendLatchData@readback_cmos_pkt
 10091  000694  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 10092  000696  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 10093                           
 10094                           ;HX_ASL_BORON.c: 1377: stream[latchSendCount++] = &readback_cmos_pkt;
 10095  00069A  0100               	movlb	0	; () banked
 10096  00069C  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10097  00069E  0D02               	mullw	2
 10098  0006A0  0E79               	movlw	low checkAndSendLatchData@stream
 10099  0006A2  24F3               	addwf	prodl,w,c
 10100  0006A4  6ED9               	movwf	fsr2l,c
 10101  0006A6  0E00               	movlw	high checkAndSendLatchData@stream
 10102  0006A8  20F4               	addwfc	prodh,w,c
 10103  0006AA  6EDA               	movwf	fsr2h,c
 10104  0006AC  0E47               	movlw	low checkAndSendLatchData@readback_cmos_pkt
 10105  0006AE  6EDE               	movwf	postinc2,c
 10106  0006B0  0E08               	movlw	high checkAndSendLatchData@readback_cmos_pkt
 10107  0006B2  6EDD               	movwf	postdec2,c
 10108                           
 10109                           ; BSR set to: 0
 10110  0006B4  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10111                           
 10112                           ; BSR set to: 0
 10113                           ;HX_ASL_BORON.c: 1378: readbackPkts[readbackSendCount++] = &readback_cmos_pkt;
 10114  0006B6  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
 10115  0006B8  0D02               	mullw	2
 10116  0006BA  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10117  0006BC  24F3               	addwf	prodl,w,c
 10118  0006BE  6ED9               	movwf	fsr2l,c
 10119  0006C0  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10120  0006C2  20F4               	addwfc	prodh,w,c
 10121  0006C4  6EDA               	movwf	fsr2h,c
 10122  0006C6  0E47               	movlw	low checkAndSendLatchData@readback_cmos_pkt
 10123  0006C8  6EDE               	movwf	postinc2,c
 10124  0006CA  0E08               	movlw	high checkAndSendLatchData@readback_cmos_pkt
 10125  0006CC  6EDD               	movwf	postdec2,c
 10126                           
 10127                           ; BSR set to: 0
 10128  0006CE  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
 10129  0006D0                     l1277:
 10130                           
 10131                           ; BSR set to: 0
 10132                           ;HX_ASL_BORON.c: 1379: }
 10133                           ;HX_ASL_BORON.c: 1381: if (!(LATCH_ADC_DATA & tsld.LATCH_ADC_DATA))
 10134                           
 10135                           ; BSR set to: 0
 10136  0006D0  0105               	movlb	5	; () banked
 10137  0006D2  51D9               	movf	_LATCH_ADC_DATA& (0+255),w,b
 10138  0006D4  0106               	movlb	6	; () banked
 10139  0006D6  15E7               	andwf	(_tsld+18)& (0+255),w,b
 10140  0006D8  0100               	movlb	0	; () banked
 10141  0006DA  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10142  0006DC  0105               	movlb	5	; () banked
 10143  0006DE  51DA               	movf	(_LATCH_ADC_DATA+1)& (0+255),w,b
 10144  0006E0  0106               	movlb	6	; () banked
 10145  0006E2  15E8               	andwf	(_tsld+19)& (0+255),w,b
 10146  0006E4  0100               	movlb	0	; () banked
 10147  0006E6  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
 10148  0006E8  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10149  0006EA  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
 10150  0006EC  A4D8               	btfss	status,2,c
 10151  0006EE  D043               	goto	l1278
 10152                           
 10153                           ; BSR set to: 0
 10154                           ;HX_ASL_BORON.c: 1382: {
 10155                           ;HX_ASL_BORON.c: 1383: LATCH_ADC_DATA = tsld.LATCH_ADC_DATA;
 10156  0006F0  C6E7  F5D9         	movff	_tsld+18,_LATCH_ADC_DATA
 10157  0006F4  C6E8  F5DA         	movff	_tsld+19,_LATCH_ADC_DATA+1
 10158  0006F8  0105               	movlb	5	; () banked
 10159  0006FA  6BDB               	clrf	(_LATCH_ADC_DATA+2)& (0+255),b
 10160  0006FC  6BDC               	clrf	(_LATCH_ADC_DATA+3)& (0+255),b
 10161                           
 10162                           ; BSR set to: 5
 10163                           ;HX_ASL_BORON.c: 1384: txRxPkt adc_pkt;
 10164                           ;HX_ASL_BORON.c: 1385: setupLatchPkt(&adc_pkt, LATCH_ADC_DATA, 0x9);
 10165  0006FE  0E8E               	movlw	low checkAndSendLatchData@adc_pkt
 10166  000700  0100               	movlb	0	; () banked
 10167  000702  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 10168  000704  0E04               	movlw	high checkAndSendLatchData@adc_pkt
 10169  000706  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 10170  000708  C5D9  F067         	movff	_LATCH_ADC_DATA,setupLatchPkt@latch_data
 10171  00070C  C5DA  F068         	movff	_LATCH_ADC_DATA+1,setupLatchPkt@latch_data+1
 10172  000710  0E09               	movlw	9
 10173  000712  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 10174  000714  EC25  F017         	call	_setupLatchPkt	;wreg free
 10175                           
 10176                           ;HX_ASL_BORON.c: 1386: stream[latchSendCount++] = &adc_pkt;
 10177  000718  0100               	movlb	0	; () banked
 10178  00071A  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10179  00071C  0D02               	mullw	2
 10180  00071E  0E79               	movlw	low checkAndSendLatchData@stream
 10181  000720  24F3               	addwf	prodl,w,c
 10182  000722  6ED9               	movwf	fsr2l,c
 10183  000724  0E00               	movlw	high checkAndSendLatchData@stream
 10184  000726  20F4               	addwfc	prodh,w,c
 10185  000728  6EDA               	movwf	fsr2h,c
 10186  00072A  0E8E               	movlw	low checkAndSendLatchData@adc_pkt
 10187  00072C  6EDE               	movwf	postinc2,c
 10188  00072E  0E04               	movlw	high checkAndSendLatchData@adc_pkt
 10189  000730  6EDD               	movwf	postdec2,c
 10190                           
 10191                           ; BSR set to: 0
 10192  000732  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10193                           
 10194                           ; BSR set to: 0
 10195                           ;HX_ASL_BORON.c: 1387: txRxPkt readback_adc_pkt;
 10196                           ;HX_ASL_BORON.c: 1388: setupCmdReadbackPkt(&readback_adc_pkt);
 10197  000734  0E8E               	movlw	low checkAndSendLatchData@readback_adc_pkt
 10198  000736  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 10199  000738  0E08               	movlw	high checkAndSendLatchData@readback_adc_pkt
 10200  00073A  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 10201  00073C  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 10202                           
 10203                           ;HX_ASL_BORON.c: 1389: stream[latchSendCount++] = &readback_adc_pkt;
 10204  000740  0100               	movlb	0	; () banked
 10205  000742  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10206  000744  0D02               	mullw	2
 10207  000746  0E79               	movlw	low checkAndSendLatchData@stream
 10208  000748  24F3               	addwf	prodl,w,c
 10209  00074A  6ED9               	movwf	fsr2l,c
 10210  00074C  0E00               	movlw	high checkAndSendLatchData@stream
 10211  00074E  20F4               	addwfc	prodh,w,c
 10212  000750  6EDA               	movwf	fsr2h,c
 10213  000752  0E8E               	movlw	low checkAndSendLatchData@readback_adc_pkt
 10214  000754  6EDE               	movwf	postinc2,c
 10215  000756  0E08               	movlw	high checkAndSendLatchData@readback_adc_pkt
 10216  000758  6EDD               	movwf	postdec2,c
 10217                           
 10218                           ; BSR set to: 0
 10219  00075A  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;HX_ASL_BORON.c: 1390: readbackPkts[readbackSendCount++] = &readback_adc_pkt;
 10223  00075C  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
 10224  00075E  0D02               	mullw	2
 10225  000760  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10226  000762  24F3               	addwf	prodl,w,c
 10227  000764  6ED9               	movwf	fsr2l,c
 10228  000766  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10229  000768  20F4               	addwfc	prodh,w,c
 10230  00076A  6EDA               	movwf	fsr2h,c
 10231  00076C  0E8E               	movlw	low checkAndSendLatchData@readback_adc_pkt
 10232  00076E  6EDE               	movwf	postinc2,c
 10233  000770  0E08               	movlw	high checkAndSendLatchData@readback_adc_pkt
 10234  000772  6EDD               	movwf	postdec2,c
 10235                           
 10236                           ; BSR set to: 0
 10237  000774  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
 10238  000776                     l1278:
 10239                           
 10240                           ; BSR set to: 0
 10241                           ;HX_ASL_BORON.c: 1391: }
 10242                           ;HX_ASL_BORON.c: 1393: if (!(LATCH_ADC_MUX_DATA & tsld.LATCH_ADC_MUX_DATA))
 10243                           
 10244                           ; BSR set to: 0
 10245  000776  0106               	movlb	6	; () banked
 10246  000778  51F3               	movf	_LATCH_ADC_MUX_DATA& (0+255),w,b
 10247  00077A  15E9               	andwf	(_tsld+20)& (0+255),w,b
 10248  00077C  0100               	movlb	0	; () banked
 10249  00077E  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10250  000780  0106               	movlb	6	; () banked
 10251  000782  51F4               	movf	(_LATCH_ADC_MUX_DATA+1)& (0+255),w,b
 10252  000784  15EA               	andwf	(_tsld+21)& (0+255),w,b
 10253  000786  0100               	movlb	0	; () banked
 10254  000788  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
 10255  00078A  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10256  00078C  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
 10257  00078E  A4D8               	btfss	status,2,c
 10258  000790  D043               	goto	l1279
 10259                           
 10260                           ; BSR set to: 0
 10261                           ;HX_ASL_BORON.c: 1394: {
 10262                           ;HX_ASL_BORON.c: 1395: LATCH_ADC_MUX_DATA = tsld.LATCH_ADC_MUX_DATA;
 10263  000792  C6E9  F6F3         	movff	_tsld+20,_LATCH_ADC_MUX_DATA
 10264  000796  C6EA  F6F4         	movff	_tsld+21,_LATCH_ADC_MUX_DATA+1
 10265  00079A  0106               	movlb	6	; () banked
 10266  00079C  6BF5               	clrf	(_LATCH_ADC_MUX_DATA+2)& (0+255),b
 10267  00079E  6BF6               	clrf	(_LATCH_ADC_MUX_DATA+3)& (0+255),b
 10268                           
 10269                           ; BSR set to: 6
 10270                           ;HX_ASL_BORON.c: 1396: txRxPkt adc_mux_pkt;
 10271                           ;HX_ASL_BORON.c: 1397: setupLatchPkt(&adc_mux_pkt, LATCH_ADC_MUX_DATA, 0xA);
 10272  0007A0  0E47               	movlw	low checkAndSendLatchData@adc_mux_pkt
 10273  0007A2  0100               	movlb	0	; () banked
 10274  0007A4  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 10275  0007A6  0E05               	movlw	high checkAndSendLatchData@adc_mux_pkt
 10276  0007A8  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 10277  0007AA  C6F3  F067         	movff	_LATCH_ADC_MUX_DATA,setupLatchPkt@latch_data
 10278  0007AE  C6F4  F068         	movff	_LATCH_ADC_MUX_DATA+1,setupLatchPkt@latch_data+1
 10279  0007B2  0E0A               	movlw	10
 10280  0007B4  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 10281  0007B6  EC25  F017         	call	_setupLatchPkt	;wreg free
 10282                           
 10283                           ;HX_ASL_BORON.c: 1398: stream[latchSendCount++] = &adc_mux_pkt;
 10284  0007BA  0100               	movlb	0	; () banked
 10285  0007BC  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10286  0007BE  0D02               	mullw	2
 10287  0007C0  0E79               	movlw	low checkAndSendLatchData@stream
 10288  0007C2  24F3               	addwf	prodl,w,c
 10289  0007C4  6ED9               	movwf	fsr2l,c
 10290  0007C6  0E00               	movlw	high checkAndSendLatchData@stream
 10291  0007C8  20F4               	addwfc	prodh,w,c
 10292  0007CA  6EDA               	movwf	fsr2h,c
 10293  0007CC  0E47               	movlw	low checkAndSendLatchData@adc_mux_pkt
 10294  0007CE  6EDE               	movwf	postinc2,c
 10295  0007D0  0E05               	movlw	high checkAndSendLatchData@adc_mux_pkt
 10296  0007D2  6EDD               	movwf	postdec2,c
 10297                           
 10298                           ; BSR set to: 0
 10299  0007D4  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10300                           
 10301                           ; BSR set to: 0
 10302                           ;HX_ASL_BORON.c: 1399: txRxPkt readback_adc_mux_pkt;
 10303                           ;HX_ASL_BORON.c: 1400: setupCmdReadbackPkt(&readback_adc_mux_pkt);
 10304  0007D6  0E00               	movlw	low checkAndSendLatchData@readback_adc_mux_pkt
 10305  0007D8  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 10306  0007DA  0E09               	movlw	high checkAndSendLatchData@readback_adc_mux_pkt
 10307  0007DC  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 10308  0007DE  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 10309                           
 10310                           ;HX_ASL_BORON.c: 1401: stream[latchSendCount++] = &readback_adc_mux_pkt;
 10311  0007E2  0100               	movlb	0	; () banked
 10312  0007E4  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10313  0007E6  0D02               	mullw	2
 10314  0007E8  0E79               	movlw	low checkAndSendLatchData@stream
 10315  0007EA  24F3               	addwf	prodl,w,c
 10316  0007EC  6ED9               	movwf	fsr2l,c
 10317  0007EE  0E00               	movlw	high checkAndSendLatchData@stream
 10318  0007F0  20F4               	addwfc	prodh,w,c
 10319  0007F2  6EDA               	movwf	fsr2h,c
 10320  0007F4  0E00               	movlw	low checkAndSendLatchData@readback_adc_mux_pkt
 10321  0007F6  6EDE               	movwf	postinc2,c
 10322  0007F8  0E09               	movlw	high checkAndSendLatchData@readback_adc_mux_pkt
 10323  0007FA  6EDD               	movwf	postdec2,c
 10324                           
 10325                           ; BSR set to: 0
 10326  0007FC  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10327                           
 10328                           ; BSR set to: 0
 10329                           ;HX_ASL_BORON.c: 1402: readbackPkts[readbackSendCount++] = &readback_adc_mux_pkt;
 10330  0007FE  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
 10331  000800  0D02               	mullw	2
 10332  000802  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10333  000804  24F3               	addwf	prodl,w,c
 10334  000806  6ED9               	movwf	fsr2l,c
 10335  000808  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10336  00080A  20F4               	addwfc	prodh,w,c
 10337  00080C  6EDA               	movwf	fsr2h,c
 10338  00080E  0E00               	movlw	low checkAndSendLatchData@readback_adc_mux_pkt
 10339  000810  6EDE               	movwf	postinc2,c
 10340  000812  0E09               	movlw	high checkAndSendLatchData@readback_adc_mux_pkt
 10341  000814  6EDD               	movwf	postdec2,c
 10342                           
 10343                           ; BSR set to: 0
 10344  000816  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
 10345  000818                     l1279:
 10346                           
 10347                           ; BSR set to: 0
 10348                           ;HX_ASL_BORON.c: 1403: }
 10349                           ;HX_ASL_BORON.c: 1405: if (!(LATCH_OCXO_DIVISOR_DATA & tsld.LATCH_OCXO_DIVISOR_DATA))
 10350                           
 10351                           ; BSR set to: 0
 10352  000818  0106               	movlb	6	; () banked
 10353  00081A  51EF               	movf	_LATCH_OCXO_DIVISOR_DATA& (0+255),w,b
 10354  00081C  15EB               	andwf	(_tsld+22)& (0+255),w,b
 10355  00081E  0100               	movlb	0	; () banked
 10356  000820  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10357  000822  0106               	movlb	6	; () banked
 10358  000824  51F0               	movf	(_LATCH_OCXO_DIVISOR_DATA+1)& (0+255),w,b
 10359  000826  15EC               	andwf	(_tsld+23)& (0+255),w,b
 10360  000828  0100               	movlb	0	; () banked
 10361  00082A  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
 10362  00082C  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10363  00082E  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
 10364  000830  A4D8               	btfss	status,2,c
 10365  000832  D043               	goto	l1280
 10366                           
 10367                           ; BSR set to: 0
 10368                           ;HX_ASL_BORON.c: 1406: {
 10369                           ;HX_ASL_BORON.c: 1407: LATCH_OCXO_DIVISOR_DATA = tsld.LATCH_OCXO_DIVISOR_DATA;
 10370  000834  C6EB  F6EF         	movff	_tsld+22,_LATCH_OCXO_DIVISOR_DATA
 10371  000838  C6EC  F6F0         	movff	_tsld+23,_LATCH_OCXO_DIVISOR_DATA+1
 10372  00083C  0106               	movlb	6	; () banked
 10373  00083E  6BF1               	clrf	(_LATCH_OCXO_DIVISOR_DATA+2)& (0+255),b
 10374  000840  6BF2               	clrf	(_LATCH_OCXO_DIVISOR_DATA+3)& (0+255),b
 10375                           
 10376                           ; BSR set to: 6
 10377                           ;HX_ASL_BORON.c: 1408: txRxPkt ocxo_divisor_pkt;
 10378                           ;HX_ASL_BORON.c: 1409: setupLatchPkt(&ocxo_divisor_pkt, LATCH_OCXO_DIVISOR_DATA, 0xB);
 10379  000842  0E8E               	movlw	low checkAndSendLatchData@ocxo_divisor_pkt
 10380  000844  0100               	movlb	0	; () banked
 10381  000846  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 10382  000848  0E05               	movlw	high checkAndSendLatchData@ocxo_divisor_pkt
 10383  00084A  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 10384  00084C  C6EF  F067         	movff	_LATCH_OCXO_DIVISOR_DATA,setupLatchPkt@latch_data
 10385  000850  C6F0  F068         	movff	_LATCH_OCXO_DIVISOR_DATA+1,setupLatchPkt@latch_data+1
 10386  000854  0E0B               	movlw	11
 10387  000856  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 10388  000858  EC25  F017         	call	_setupLatchPkt	;wreg free
 10389                           
 10390                           ;HX_ASL_BORON.c: 1410: stream[latchSendCount++] = &ocxo_divisor_pkt;
 10391  00085C  0100               	movlb	0	; () banked
 10392  00085E  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10393  000860  0D02               	mullw	2
 10394  000862  0E79               	movlw	low checkAndSendLatchData@stream
 10395  000864  24F3               	addwf	prodl,w,c
 10396  000866  6ED9               	movwf	fsr2l,c
 10397  000868  0E00               	movlw	high checkAndSendLatchData@stream
 10398  00086A  20F4               	addwfc	prodh,w,c
 10399  00086C  6EDA               	movwf	fsr2h,c
 10400  00086E  0E8E               	movlw	low checkAndSendLatchData@ocxo_divisor_pkt
 10401  000870  6EDE               	movwf	postinc2,c
 10402  000872  0E05               	movlw	high checkAndSendLatchData@ocxo_divisor_pkt
 10403  000874  6EDD               	movwf	postdec2,c
 10404                           
 10405                           ; BSR set to: 0
 10406  000876  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;HX_ASL_BORON.c: 1411: txRxPkt readback_ocxo_divisor_pkt;
 10410                           ;HX_ASL_BORON.c: 1412: setupCmdReadbackPkt(&readback_ocxo_divisor_pkt);
 10411  000878  0E47               	movlw	low checkAndSendLatchData@readback_ocxo_divisor_pkt
 10412  00087A  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 10413  00087C  0E09               	movlw	high checkAndSendLatchData@readback_ocxo_divisor_pkt
 10414  00087E  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 10415  000880  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 10416                           
 10417                           ;HX_ASL_BORON.c: 1413: stream[latchSendCount++] = &readback_ocxo_divisor_pkt;
 10418  000884  0100               	movlb	0	; () banked
 10419  000886  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10420  000888  0D02               	mullw	2
 10421  00088A  0E79               	movlw	low checkAndSendLatchData@stream
 10422  00088C  24F3               	addwf	prodl,w,c
 10423  00088E  6ED9               	movwf	fsr2l,c
 10424  000890  0E00               	movlw	high checkAndSendLatchData@stream
 10425  000892  20F4               	addwfc	prodh,w,c
 10426  000894  6EDA               	movwf	fsr2h,c
 10427  000896  0E47               	movlw	low checkAndSendLatchData@readback_ocxo_divisor_pkt
 10428  000898  6EDE               	movwf	postinc2,c
 10429  00089A  0E09               	movlw	high checkAndSendLatchData@readback_ocxo_divisor_pkt
 10430  00089C  6EDD               	movwf	postdec2,c
 10431                           
 10432                           ; BSR set to: 0
 10433  00089E  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10434                           
 10435                           ; BSR set to: 0
 10436                           ;HX_ASL_BORON.c: 1414: readbackPkts[readbackSendCount++] = &readback_ocxo_divisor_pkt;
 10437  0008A0  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
 10438  0008A2  0D02               	mullw	2
 10439  0008A4  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10440  0008A6  24F3               	addwf	prodl,w,c
 10441  0008A8  6ED9               	movwf	fsr2l,c
 10442  0008AA  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10443  0008AC  20F4               	addwfc	prodh,w,c
 10444  0008AE  6EDA               	movwf	fsr2h,c
 10445  0008B0  0E47               	movlw	low checkAndSendLatchData@readback_ocxo_divisor_pkt
 10446  0008B2  6EDE               	movwf	postinc2,c
 10447  0008B4  0E09               	movlw	high checkAndSendLatchData@readback_ocxo_divisor_pkt
 10448  0008B6  6EDD               	movwf	postdec2,c
 10449                           
 10450                           ; BSR set to: 0
 10451  0008B8  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
 10452  0008BA                     l1280:
 10453                           
 10454                           ; BSR set to: 0
 10455                           ;HX_ASL_BORON.c: 1415: }
 10456                           ;HX_ASL_BORON.c: 1417: if (!(LATCH_CLOCK_SELECT_DATA & tsld.LATCH_CLOCK_SELECT_DATA))
 10457                           
 10458                           ; BSR set to: 0
 10459  0008BA  0105               	movlb	5	; () banked
 10460  0008BC  51D5               	movf	_LATCH_CLOCK_SELECT_DATA& (0+255),w,b
 10461  0008BE  0106               	movlb	6	; () banked
 10462  0008C0  15ED               	andwf	(_tsld+24)& (0+255),w,b
 10463  0008C2  0100               	movlb	0	; () banked
 10464  0008C4  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10465  0008C6  0105               	movlb	5	; () banked
 10466  0008C8  51D6               	movf	(_LATCH_CLOCK_SELECT_DATA+1)& (0+255),w,b
 10467  0008CA  0106               	movlb	6	; () banked
 10468  0008CC  15EE               	andwf	(_tsld+25)& (0+255),w,b
 10469  0008CE  0100               	movlb	0	; () banked
 10470  0008D0  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
 10471  0008D2  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10472  0008D4  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
 10473  0008D6  A4D8               	btfss	status,2,c
 10474  0008D8  D043               	goto	l1281
 10475                           
 10476                           ; BSR set to: 0
 10477                           ;HX_ASL_BORON.c: 1418: {
 10478                           ;HX_ASL_BORON.c: 1419: LATCH_CLOCK_SELECT_DATA = tsld.LATCH_CLOCK_SELECT_DATA;
 10479  0008DA  C6ED  F5D5         	movff	_tsld+24,_LATCH_CLOCK_SELECT_DATA
 10480  0008DE  C6EE  F5D6         	movff	_tsld+25,_LATCH_CLOCK_SELECT_DATA+1
 10481  0008E2  0105               	movlb	5	; () banked
 10482  0008E4  6BD7               	clrf	(_LATCH_CLOCK_SELECT_DATA+2)& (0+255),b
 10483  0008E6  6BD8               	clrf	(_LATCH_CLOCK_SELECT_DATA+3)& (0+255),b
 10484                           
 10485                           ; BSR set to: 5
 10486                           ;HX_ASL_BORON.c: 1420: txRxPkt clock_select_pkt;
 10487                           ;HX_ASL_BORON.c: 1421: setupLatchPkt(&clock_select_pkt, LATCH_CLOCK_SELECT_DATA, LATCH_C
      +                          LOCK_SELECT_DATA);
 10488  0008E8  0E00               	movlw	low checkAndSendLatchData@clock_select_pkt
 10489  0008EA  0100               	movlb	0	; () banked
 10490  0008EC  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 10491  0008EE  0E0A               	movlw	high checkAndSendLatchData@clock_select_pkt
 10492  0008F0  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 10493  0008F2  C5D5  F067         	movff	_LATCH_CLOCK_SELECT_DATA,setupLatchPkt@latch_data
 10494  0008F6  C5D6  F068         	movff	_LATCH_CLOCK_SELECT_DATA+1,setupLatchPkt@latch_data+1
 10495  0008FA  C5D5  F069         	movff	_LATCH_CLOCK_SELECT_DATA,setupLatchPkt@latch_num
 10496  0008FE  EC25  F017         	call	_setupLatchPkt	;wreg free
 10497                           
 10498                           ;HX_ASL_BORON.c: 1422: stream[latchSendCount++] = &clock_select_pkt;
 10499  000902  0100               	movlb	0	; () banked
 10500  000904  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10501  000906  0D02               	mullw	2
 10502  000908  0E79               	movlw	low checkAndSendLatchData@stream
 10503  00090A  24F3               	addwf	prodl,w,c
 10504  00090C  6ED9               	movwf	fsr2l,c
 10505  00090E  0E00               	movlw	high checkAndSendLatchData@stream
 10506  000910  20F4               	addwfc	prodh,w,c
 10507  000912  6EDA               	movwf	fsr2h,c
 10508  000914  0E00               	movlw	low checkAndSendLatchData@clock_select_pkt
 10509  000916  6EDE               	movwf	postinc2,c
 10510  000918  0E0A               	movlw	high checkAndSendLatchData@clock_select_pkt
 10511  00091A  6EDD               	movwf	postdec2,c
 10512                           
 10513                           ; BSR set to: 0
 10514  00091C  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;HX_ASL_BORON.c: 1423: txRxPkt readback_clock_select_pkt;
 10518                           ;HX_ASL_BORON.c: 1424: setupCmdReadbackPkt(&readback_clock_select_pkt);
 10519  00091E  0E8E               	movlw	low checkAndSendLatchData@readback_clock_select_pkt
 10520  000920  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 10521  000922  0E09               	movlw	high checkAndSendLatchData@readback_clock_select_pkt
 10522  000924  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 10523  000926  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 10524                           
 10525                           ;HX_ASL_BORON.c: 1425: stream[latchSendCount++] = &readback_clock_select_pkt;
 10526  00092A  0100               	movlb	0	; () banked
 10527  00092C  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10528  00092E  0D02               	mullw	2
 10529  000930  0E79               	movlw	low checkAndSendLatchData@stream
 10530  000932  24F3               	addwf	prodl,w,c
 10531  000934  6ED9               	movwf	fsr2l,c
 10532  000936  0E00               	movlw	high checkAndSendLatchData@stream
 10533  000938  20F4               	addwfc	prodh,w,c
 10534  00093A  6EDA               	movwf	fsr2h,c
 10535  00093C  0E8E               	movlw	low checkAndSendLatchData@readback_clock_select_pkt
 10536  00093E  6EDE               	movwf	postinc2,c
 10537  000940  0E09               	movlw	high checkAndSendLatchData@readback_clock_select_pkt
 10538  000942  6EDD               	movwf	postdec2,c
 10539                           
 10540                           ; BSR set to: 0
 10541  000944  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;HX_ASL_BORON.c: 1426: readbackPkts[readbackSendCount++] = &readback_clock_select_pkt;
 10545  000946  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
 10546  000948  0D02               	mullw	2
 10547  00094A  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10548  00094C  24F3               	addwf	prodl,w,c
 10549  00094E  6ED9               	movwf	fsr2l,c
 10550  000950  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10551  000952  20F4               	addwfc	prodh,w,c
 10552  000954  6EDA               	movwf	fsr2h,c
 10553  000956  0E8E               	movlw	low checkAndSendLatchData@readback_clock_select_pkt
 10554  000958  6EDE               	movwf	postinc2,c
 10555  00095A  0E09               	movlw	high checkAndSendLatchData@readback_clock_select_pkt
 10556  00095C  6EDD               	movwf	postdec2,c
 10557                           
 10558                           ; BSR set to: 0
 10559  00095E  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
 10560  000960                     l1281:
 10561                           
 10562                           ; BSR set to: 0
 10563                           ;HX_ASL_BORON.c: 1427: }
 10564                           ;HX_ASL_BORON.c: 1430: stream_status = streamBoronComm(BORON_COMM_TYPE, stream, latchSen
      +                          dCount);
 10565                           
 10566                           ; BSR set to: 0
 10567  000960  0E79               	movlw	low checkAndSendLatchData@stream
 10568  000962  6F6E               	movwf	streamBoronComm@pktArr& (0+255),b
 10569  000964  0E00               	movlw	high checkAndSendLatchData@stream
 10570  000966  6F6F               	movwf	(streamBoronComm@pktArr+1)& (0+255),b
 10571  000968  C0C3  F070         	movff	checkAndSendLatchData@latchSendCount,streamBoronComm@pktSize
 10572  00096C  5030               	movf	_BORON_COMM_TYPE,w,c
 10573  00096E  EC4F  F01E         	call	_streamBoronComm
 10574  000972  0100               	movlb	0	; () banked
 10575  000974  6F78               	movwf	checkAndSendLatchData@stream_status& (0+255),b
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;HX_ASL_BORON.c: 1433: if (stream_status != 0)
 10579  000976  5178               	movf	checkAndSendLatchData@stream_status& (0+255),w,b
 10580  000978  B4D8               	btfsc	status,2,c
 10581  00097A  D002               	goto	l1282
 10582                           
 10583                           ; BSR set to: 0
 10584                           ;HX_ASL_BORON.c: 1434: {
 10585                           ;HX_ASL_BORON.c: 1437: noError = 1;
 10586  00097C  0E01               	movlw	1
 10587  00097E  D025               	goto	L26
 10588  000980                     l1282:
 10589                           
 10590                           ; BSR set to: 0
 10591                           ;HX_ASL_BORON.c: 1439: else
 10592                           ;HX_ASL_BORON.c: 1440: {
 10593                           ;HX_ASL_BORON.c: 1441: rxBuffer[*rx_index++] = 0x41;
 10594                           
 10595                           ; BSR set to: 0
 10596  000980  C074  FFD9         	movff	checkAndSendLatchData@rx_index,fsr2l
 10597  000984  C075  FFDA         	movff	checkAndSendLatchData@rx_index+1,fsr2h
 10598  000988  50DF               	movf	indf2,w,c
 10599  00098A  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10600  00098C  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10601  00098E  0D01               	mullw	1
 10602  000990  50F3               	movf	prodl,w,c
 10603  000992  2572               	addwf	checkAndSendLatchData@rxBuffer& (0+255),w,b
 10604  000994  6ED9               	movwf	fsr2l,c
 10605  000996  50F4               	movf	prodh,w,c
 10606  000998  2173               	addwfc	(checkAndSendLatchData@rxBuffer+1)& (0+255),w,b
 10607  00099A  6EDA               	movwf	fsr2h,c
 10608  00099C  0E41               	movlw	65
 10609  00099E  6EDF               	movwf	indf2,c
 10610                           
 10611                           ; BSR set to: 0
 10612  0009A0  4B74               	infsnz	checkAndSendLatchData@rx_index& (0+255),f,b
 10613  0009A2  2B75               	incf	(checkAndSendLatchData@rx_index+1)& (0+255),f,b
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;HX_ASL_BORON.c: 1442: rxBuffer[*rx_index++] = 0xEE;
 10617  0009A4  C074  FFD9         	movff	checkAndSendLatchData@rx_index,fsr2l
 10618  0009A8  C075  FFDA         	movff	checkAndSendLatchData@rx_index+1,fsr2h
 10619  0009AC  50DF               	movf	indf2,w,c
 10620  0009AE  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10621  0009B0  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10622  0009B2  0D01               	mullw	1
 10623  0009B4  50F3               	movf	prodl,w,c
 10624  0009B6  2572               	addwf	checkAndSendLatchData@rxBuffer& (0+255),w,b
 10625  0009B8  6ED9               	movwf	fsr2l,c
 10626  0009BA  50F4               	movf	prodh,w,c
 10627  0009BC  2173               	addwfc	(checkAndSendLatchData@rxBuffer+1)& (0+255),w,b
 10628  0009BE  6EDA               	movwf	fsr2h,c
 10629  0009C0  0EEE               	movlw	238
 10630  0009C2  6EDF               	movwf	indf2,c
 10631  0009C4  4B74               	infsnz	checkAndSendLatchData@rx_index& (0+255),f,b
 10632  0009C6  2B75               	incf	(checkAndSendLatchData@rx_index+1)& (0+255),f,b
 10633                           
 10634                           ; BSR set to: 0
 10635                           ;HX_ASL_BORON.c: 1443: noError = 0;
 10636  0009C8  0E00               	movlw	0
 10637  0009CA                     L26:
 10638  0009CA  6FC1               	movwf	checkAndSendLatchData@noError& (0+255),b
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;HX_ASL_BORON.c: 1444: }
 10642                           ;HX_ASL_BORON.c: 1446: noError = filterLatchPacketResponses(rxBuffer, rx_index, readback
      +                          Pkts, readbackSendCount);
 10643                           
 10644                           ; BSR set to: 0
 10645  0009CC  C072  F060         	movff	checkAndSendLatchData@rxBuffer,filterLatchPacketResponses@rxBuffer
 10646  0009D0  C073  F061         	movff	checkAndSendLatchData@rxBuffer+1,filterLatchPacketResponses@rxBuffer+1
 10647  0009D4  C074  F062         	movff	checkAndSendLatchData@rx_index,filterLatchPacketResponses@rx_index
 10648  0009D8  C075  F063         	movff	checkAndSendLatchData@rx_index+1,filterLatchPacketResponses@rx_index+1
 10649  0009DC  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10650  0009DE  6F64               	movwf	filterLatchPacketResponses@readbackPkts& (0+255),b
 10651  0009E0  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10652  0009E2  6F65               	movwf	(filterLatchPacketResponses@readbackPkts+1)& (0+255),b
 10653  0009E4  C0C2  F066         	movff	checkAndSendLatchData@readbackSendCount,filterLatchPacketResponses@count
 10654  0009E8  EC69  F013         	call	_filterLatchPacketResponses	;wreg free
 10655  0009EC  0100               	movlb	0	; () banked
 10656  0009EE  6FC1               	movwf	checkAndSendLatchData@noError& (0+255),b
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;HX_ASL_BORON.c: 1449: return noError;
 10660  0009F0  51C1               	movf	checkAndSendLatchData@noError& (0+255),w,b
 10661  0009F2  0012               	return	
 10662  0009F4                     __end_of_checkAndSendLatchData:
 10663                           	opt stack 0
 10664                           tblptru	equ	0xFF8
 10665                           tblptrh	equ	0xFF7
 10666                           tblptrl	equ	0xFF6
 10667                           tablat	equ	0xFF5
 10668                           prodh	equ	0xFF4
 10669                           prodl	equ	0xFF3
 10670                           intcon	equ	0xFF2
 10671                           postinc0	equ	0xFEE
 10672                           wreg	equ	0xFE8
 10673                           indf1	equ	0xFE7
 10674                           postinc1	equ	0xFE6
 10675                           postdec1	equ	0xFE5
 10676                           fsr1h	equ	0xFE2
 10677                           fsr1l	equ	0xFE1
 10678                           indf2	equ	0xFDF
 10679                           postinc2	equ	0xFDE
 10680                           postdec2	equ	0xFDD
 10681                           fsr2h	equ	0xFDA
 10682                           fsr2l	equ	0xFD9
 10683                           status	equ	0xFD8
 10684                           
 10685 ;; *************** function _filterLatchPacketResponses *****************
 10686 ;; Defined at:
 10687 ;;		line 1453 in file "HX_ASL_BORON.c"
 10688 ;; Parameters:    Size  Location     Type
 10689 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 10690 ;;		 -> hx_mainData(61), 
 10691 ;;  rx_index        2    2[BANK0 ] PTR unsigned char 
 10692 ;;		 -> ASLB_SheetResistance@rx_index(1), 
 10693 ;;  readbackPkts    2    4[BANK0 ] PTR PTR struct TxRxPacke
 10694 ;;		 -> checkAndSendLatchData@readbackPkts(24), 
 10695 ;;  count           1    6[BANK0 ] unsigned char 
 10696 ;; Auto vars:     Size  Location     Type
 10697 ;;  i               2   10[BANK0 ] int 
 10698 ;;  possibleErro    1   12[BANK0 ] unsigned char 
 10699 ;; Return value:  Size  Location     Type
 10700 ;;                  1    wreg      unsigned char 
 10701 ;; Registers used:
 10702 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10703 ;; Tracked objects:
 10704 ;;		On entry : 0/0
 10705 ;;		On exit  : 0/0
 10706 ;;		Unchanged: 0/0
 10707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10708 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10709 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10710 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10711 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10712 ;;Total ram usage:       13 bytes
 10713 ;; Hardware stack levels used:    1
 10714 ;; Hardware stack levels required when called:    7
 10715 ;; This function calls:
 10716 ;;		Nothing
 10717 ;; This function is called by:
 10718 ;;		_checkAndSendLatchData
 10719 ;; This function uses a non-reentrant model
 10720 ;;
 10721                           
 10722                           	psect	text22
 10723  0026D2                     __ptext22:
 10724                           	opt stack 0
 10725  0026D2                     _filterLatchPacketResponses:
 10726                           	opt stack 19
 10727                           
 10728                           ;HX_ASL_BORON.c: 1456: uint8_t possibleError = 0;
 10729                           
 10730                           ; BSR set to: 0
 10731                           ;incstack = 0
 10732  0026D2  0E00               	movlw	0
 10733  0026D4  0100               	movlb	0	; () banked
 10734  0026D6  6F6C               	movwf	filterLatchPacketResponses@possibleError& (0+255),b
 10735                           
 10736                           ;HX_ASL_BORON.c: 1457: for (int i = 0; i < count; i++)
 10737  0026D8  0E00               	movlw	0
 10738  0026DA  6F6B               	movwf	(filterLatchPacketResponses@i+1)& (0+255),b
 10739  0026DC  0E00               	movlw	0
 10740  0026DE  6F6A               	movwf	filterLatchPacketResponses@i& (0+255),b
 10741  0026E0  D098               	goto	l1287
 10742  0026E2                     
 10743                           ; BSR set to: 0
 10744                           ;HX_ASL_BORON.c: 1458: {
 10745                           ;HX_ASL_BORON.c: 1459: possibleError = readbackPkts[i]->data[1];
 10746                           
 10747                           ; BSR set to: 0
 10748  0026E2  90D8               	bcf	status,0,c
 10749  0026E4  356A               	rlcf	filterLatchPacketResponses@i& (0+255),w,b
 10750  0026E6  6ED9               	movwf	fsr2l,c
 10751  0026E8  356B               	rlcf	(filterLatchPacketResponses@i+1)& (0+255),w,b
 10752  0026EA  6EDA               	movwf	fsr2h,c
 10753  0026EC  5164               	movf	filterLatchPacketResponses@readbackPkts& (0+255),w,b
 10754  0026EE  26D9               	addwf	fsr2l,f,c
 10755  0026F0  5165               	movf	(filterLatchPacketResponses@readbackPkts+1)& (0+255),w,b
 10756  0026F2  22DA               	addwfc	fsr2h,f,c
 10757  0026F4  EE10 F004          	lfsr	1,4
 10758  0026F8  50DE               	movf	postinc2,w,c
 10759  0026FA  26E1               	addwf	fsr1l,f,c
 10760  0026FC  50DD               	movf	postdec2,w,c
 10761  0026FE  22E2               	addwfc	fsr1h,f,c
 10762  002700  50E7               	movf	indf1,w,c
 10763  002702  6F6C               	movwf	filterLatchPacketResponses@possibleError& (0+255),b
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;HX_ASL_BORON.c: 1462: if (possibleError == 0x11 ||
 10767                           ;HX_ASL_BORON.c: 1463: possibleError == 0x12 ||
 10768                           ;HX_ASL_BORON.c: 1464: possibleError == 0x13 ||
 10769                           ;HX_ASL_BORON.c: 1465: possibleError == 0x14 ||
 10770                           ;HX_ASL_BORON.c: 1466: possibleError == 0x15 ||
 10771                           ;HX_ASL_BORON.c: 1467: possibleError == 0x16 ||
 10772                           ;HX_ASL_BORON.c: 1468: possibleError == 0x21 ||
 10773                           ;HX_ASL_BORON.c: 1469: possibleError == 0x21)
 10774  002704  0E11               	movlw	17
 10775  002706  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10776  002708  B4D8               	btfsc	status,2,c
 10777  00270A  D01C               	goto	u6700
 10778                           
 10779                           ; BSR set to: 0
 10780  00270C  0E12               	movlw	18
 10781  00270E  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10782  002710  B4D8               	btfsc	status,2,c
 10783  002712  D018               	goto	u6700
 10784                           
 10785                           ; BSR set to: 0
 10786  002714  0E13               	movlw	19
 10787  002716  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10788  002718  B4D8               	btfsc	status,2,c
 10789  00271A  D014               	goto	u6700
 10790                           
 10791                           ; BSR set to: 0
 10792  00271C  0E14               	movlw	20
 10793  00271E  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10794  002720  B4D8               	btfsc	status,2,c
 10795  002722  D010               	goto	u6700
 10796                           
 10797                           ; BSR set to: 0
 10798  002724  0E15               	movlw	21
 10799  002726  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10800  002728  B4D8               	btfsc	status,2,c
 10801  00272A  D00C               	goto	u6700
 10802                           
 10803                           ; BSR set to: 0
 10804  00272C  0E16               	movlw	22
 10805  00272E  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10806  002730  B4D8               	btfsc	status,2,c
 10807  002732  D008               	goto	u6700
 10808                           
 10809                           ; BSR set to: 0
 10810  002734  0E21               	movlw	33
 10811  002736  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10812  002738  B4D8               	btfsc	status,2,c
 10813  00273A  D004               	goto	u6700
 10814                           
 10815                           ; BSR set to: 0
 10816  00273C  0E21               	movlw	33
 10817  00273E  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10818  002740  A4D8               	btfss	status,2,c
 10819  002742  D065               	goto	l1289
 10820  002744                     u6700:
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;HX_ASL_BORON.c: 1470: {
 10824                           ;HX_ASL_BORON.c: 1471: rxBuffer[*rx_index++] = readbackPkts[i]->data[0];
 10825                           
 10826                           ; BSR set to: 0
 10827  002744  90D8               	bcf	status,0,c
 10828  002746  356A               	rlcf	filterLatchPacketResponses@i& (0+255),w,b
 10829  002748  6ED9               	movwf	fsr2l,c
 10830  00274A  356B               	rlcf	(filterLatchPacketResponses@i+1)& (0+255),w,b
 10831  00274C  6EDA               	movwf	fsr2h,c
 10832  00274E  5164               	movf	filterLatchPacketResponses@readbackPkts& (0+255),w,b
 10833  002750  26D9               	addwf	fsr2l,f,c
 10834  002752  5165               	movf	(filterLatchPacketResponses@readbackPkts+1)& (0+255),w,b
 10835  002754  22DA               	addwfc	fsr2h,f,c
 10836  002756  EE10 F003          	lfsr	1,3
 10837  00275A  50DE               	movf	postinc2,w,c
 10838  00275C  26E1               	addwf	fsr1l,f,c
 10839  00275E  50DD               	movf	postdec2,w,c
 10840  002760  22E2               	addwfc	fsr1h,f,c
 10841  002762  C062  FFD9         	movff	filterLatchPacketResponses@rx_index,fsr2l
 10842  002766  C063  FFDA         	movff	filterLatchPacketResponses@rx_index+1,fsr2h
 10843  00276A  50DF               	movf	indf2,w,c
 10844  00276C  6F67               	movwf	??_filterLatchPacketResponses& (0+255),b
 10845  00276E  5167               	movf	??_filterLatchPacketResponses& (0+255),w,b
 10846  002770  0D01               	mullw	1
 10847  002772  50F3               	movf	prodl,w,c
 10848  002774  2560               	addwf	filterLatchPacketResponses@rxBuffer& (0+255),w,b
 10849  002776  6ED9               	movwf	fsr2l,c
 10850  002778  50F4               	movf	prodh,w,c
 10851  00277A  2161               	addwfc	(filterLatchPacketResponses@rxBuffer+1)& (0+255),w,b
 10852  00277C  6EDA               	movwf	fsr2h,c
 10853  00277E  CFE7 FFDF          	movff	indf1,indf2
 10854                           
 10855                           ; BSR set to: 0
 10856  002782  4B62               	infsnz	filterLatchPacketResponses@rx_index& (0+255),f,b
 10857  002784  2B63               	incf	(filterLatchPacketResponses@rx_index+1)& (0+255),f,b
 10858                           
 10859                           ; BSR set to: 0
 10860                           ;HX_ASL_BORON.c: 1472: rxBuffer[*rx_index++] = readbackPkts[i]->data[1];
 10861  002786  90D8               	bcf	status,0,c
 10862  002788  356A               	rlcf	filterLatchPacketResponses@i& (0+255),w,b
 10863  00278A  6ED9               	movwf	fsr2l,c
 10864  00278C  356B               	rlcf	(filterLatchPacketResponses@i+1)& (0+255),w,b
 10865  00278E  6EDA               	movwf	fsr2h,c
 10866  002790  5164               	movf	filterLatchPacketResponses@readbackPkts& (0+255),w,b
 10867  002792  26D9               	addwf	fsr2l,f,c
 10868  002794  5165               	movf	(filterLatchPacketResponses@readbackPkts+1)& (0+255),w,b
 10869  002796  22DA               	addwfc	fsr2h,f,c
 10870  002798  EE10 F004          	lfsr	1,4
 10871  00279C  50DE               	movf	postinc2,w,c
 10872  00279E  26E1               	addwf	fsr1l,f,c
 10873  0027A0  50DD               	movf	postdec2,w,c
 10874  0027A2  22E2               	addwfc	fsr1h,f,c
 10875  0027A4  C062  FFD9         	movff	filterLatchPacketResponses@rx_index,fsr2l
 10876  0027A8  C063  FFDA         	movff	filterLatchPacketResponses@rx_index+1,fsr2h
 10877  0027AC  50DF               	movf	indf2,w,c
 10878  0027AE  6F67               	movwf	??_filterLatchPacketResponses& (0+255),b
 10879  0027B0  5167               	movf	??_filterLatchPacketResponses& (0+255),w,b
 10880  0027B2  0D01               	mullw	1
 10881  0027B4  50F3               	movf	prodl,w,c
 10882  0027B6  2560               	addwf	filterLatchPacketResponses@rxBuffer& (0+255),w,b
 10883  0027B8  6ED9               	movwf	fsr2l,c
 10884  0027BA  50F4               	movf	prodh,w,c
 10885  0027BC  2161               	addwfc	(filterLatchPacketResponses@rxBuffer+1)& (0+255),w,b
 10886  0027BE  6EDA               	movwf	fsr2h,c
 10887  0027C0  CFE7 FFDF          	movff	indf1,indf2
 10888  0027C4  4B62               	infsnz	filterLatchPacketResponses@rx_index& (0+255),f,b
 10889  0027C6  2B63               	incf	(filterLatchPacketResponses@rx_index+1)& (0+255),f,b
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;HX_ASL_BORON.c: 1473: rxBuffer[*rx_index++] = readbackPkts[i]->data[2];
 10893  0027C8  90D8               	bcf	status,0,c
 10894  0027CA  356A               	rlcf	filterLatchPacketResponses@i& (0+255),w,b
 10895  0027CC  6ED9               	movwf	fsr2l,c
 10896  0027CE  356B               	rlcf	(filterLatchPacketResponses@i+1)& (0+255),w,b
 10897  0027D0  6EDA               	movwf	fsr2h,c
 10898  0027D2  5164               	movf	filterLatchPacketResponses@readbackPkts& (0+255),w,b
 10899  0027D4  26D9               	addwf	fsr2l,f,c
 10900  0027D6  5165               	movf	(filterLatchPacketResponses@readbackPkts+1)& (0+255),w,b
 10901  0027D8  22DA               	addwfc	fsr2h,f,c
 10902  0027DA  EE10 F005          	lfsr	1,5
 10903  0027DE  50DE               	movf	postinc2,w,c
 10904  0027E0  26E1               	addwf	fsr1l,f,c
 10905  0027E2  50DD               	movf	postdec2,w,c
 10906  0027E4  22E2               	addwfc	fsr1h,f,c
 10907  0027E6  C062  FFD9         	movff	filterLatchPacketResponses@rx_index,fsr2l
 10908  0027EA  C063  FFDA         	movff	filterLatchPacketResponses@rx_index+1,fsr2h
 10909  0027EE  50DF               	movf	indf2,w,c
 10910  0027F0  6F67               	movwf	??_filterLatchPacketResponses& (0+255),b
 10911  0027F2  5167               	movf	??_filterLatchPacketResponses& (0+255),w,b
 10912  0027F4  0D01               	mullw	1
 10913  0027F6  50F3               	movf	prodl,w,c
 10914  0027F8  2560               	addwf	filterLatchPacketResponses@rxBuffer& (0+255),w,b
 10915  0027FA  6ED9               	movwf	fsr2l,c
 10916  0027FC  50F4               	movf	prodh,w,c
 10917  0027FE  2161               	addwfc	(filterLatchPacketResponses@rxBuffer+1)& (0+255),w,b
 10918  002800  6EDA               	movwf	fsr2h,c
 10919  002802  CFE7 FFDF          	movff	indf1,indf2
 10920                           
 10921                           ; BSR set to: 0
 10922  002806  4B62               	infsnz	filterLatchPacketResponses@rx_index& (0+255),f,b
 10923  002808  2B63               	incf	(filterLatchPacketResponses@rx_index+1)& (0+255),f,b
 10924                           
 10925                           ; BSR set to: 0
 10926                           ;HX_ASL_BORON.c: 1474: return 0;
 10927  00280A  0E00               	movlw	0
 10928                           
 10929                           ; BSR set to: 0
 10930  00280C  0012               	return	
 10931  00280E                     l1289:
 10932                           
 10933                           ; BSR set to: 0
 10934                           
 10935                           ; BSR set to: 0
 10936  00280E  4B6A               	infsnz	filterLatchPacketResponses@i& (0+255),f,b
 10937  002810  2B6B               	incf	(filterLatchPacketResponses@i+1)& (0+255),f,b
 10938  002812                     l1287:
 10939                           
 10940                           ; BSR set to: 0
 10941                           
 10942                           ; BSR set to: 0
 10943  002812  5166               	movf	filterLatchPacketResponses@count& (0+255),w,b
 10944  002814  6F67               	movwf	??_filterLatchPacketResponses& (0+255),b
 10945  002816  6B68               	clrf	(??_filterLatchPacketResponses+1)& (0+255),b
 10946  002818  5167               	movf	??_filterLatchPacketResponses& (0+255),w,b
 10947  00281A  5D6A               	subwf	filterLatchPacketResponses@i& (0+255),w,b
 10948  00281C  516B               	movf	(filterLatchPacketResponses@i+1)& (0+255),w,b
 10949  00281E  0A80               	xorlw	128
 10950  002820  6F69               	movwf	(??_filterLatchPacketResponses+2)& (0+255),b
 10951  002822  5168               	movf	(??_filterLatchPacketResponses+1)& (0+255),w,b
 10952  002824  0A80               	xorlw	128
 10953  002826  5969               	subwfb	(??_filterLatchPacketResponses+2)& (0+255),w,b
 10954  002828  A0D8               	btfss	status,0,c
 10955  00282A  D75B               	goto	l1288
 10956                           
 10957                           ; BSR set to: 0
 10958                           ;HX_ASL_BORON.c: 1475: }
 10959                           ;HX_ASL_BORON.c: 1477: }
 10960                           ;HX_ASL_BORON.c: 1478: return 1;
 10961                           
 10962                           ; BSR set to: 0
 10963  00282C  0E01               	movlw	1
 10964  00282E  0012               	return	
 10965  002830                     __end_of_filterLatchPacketResponses:
 10966                           	opt stack 0
 10967                           tblptru	equ	0xFF8
 10968                           tblptrh	equ	0xFF7
 10969                           tblptrl	equ	0xFF6
 10970                           tablat	equ	0xFF5
 10971                           prodh	equ	0xFF4
 10972                           prodl	equ	0xFF3
 10973                           intcon	equ	0xFF2
 10974                           postinc0	equ	0xFEE
 10975                           wreg	equ	0xFE8
 10976                           indf1	equ	0xFE7
 10977                           postinc1	equ	0xFE6
 10978                           postdec1	equ	0xFE5
 10979                           fsr1h	equ	0xFE2
 10980                           fsr1l	equ	0xFE1
 10981                           indf2	equ	0xFDF
 10982                           postinc2	equ	0xFDE
 10983                           postdec2	equ	0xFDD
 10984                           fsr2h	equ	0xFDA
 10985                           fsr2l	equ	0xFD9
 10986                           status	equ	0xFD8
 10987                           
 10988 ;; *************** function _ASLB_RDResistor *****************
 10989 ;; Defined at:
 10990 ;;		line 823 in file "HX_ASL_BORON.c"
 10991 ;; Parameters:    Size  Location     Type
 10992 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 10993 ;;		 -> hx_mainData(61), 
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;  rx_index        1    2[BANK0 ] unsigned char 
 10996 ;; Return value:  Size  Location     Type
 10997 ;;                  1    wreg      void 
 10998 ;; Registers used:
 10999 ;;		wreg, status,2
 11000 ;; Tracked objects:
 11001 ;;		On entry : 0/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11005 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11008 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11009 ;;Total ram usage:        3 bytes
 11010 ;; Hardware stack levels used:    1
 11011 ;; Hardware stack levels required when called:    7
 11012 ;; This function calls:
 11013 ;;		Nothing
 11014 ;; This function is called by:
 11015 ;;		_write_ASLBoron_test
 11016 ;; This function uses a non-reentrant model
 11017 ;;
 11018                           
 11019                           	psect	text23
 11020  00404A                     __ptext23:
 11021                           	opt stack 0
 11022  00404A                     _ASLB_RDResistor:
 11023                           	opt stack 21
 11024                           
 11025                           ;HX_ASL_BORON.c: 829: uint8_t rx_index = 0;
 11026                           
 11027                           ; BSR set to: 0
 11028                           ;incstack = 0
 11029  00404A  0E00               	movlw	0
 11030  00404C  0100               	movlb	0	; () banked
 11031  00404E  6F62               	movwf	ASLB_RDResistor@rx_index& (0+255),b
 11032                           
 11033                           ; BSR set to: 0
 11034  004050  0012               	return		;funcret
 11035  004052                     __end_of_ASLB_RDResistor:
 11036                           	opt stack 0
 11037                           tblptru	equ	0xFF8
 11038                           tblptrh	equ	0xFF7
 11039                           tblptrl	equ	0xFF6
 11040                           tablat	equ	0xFF5
 11041                           prodh	equ	0xFF4
 11042                           prodl	equ	0xFF3
 11043                           intcon	equ	0xFF2
 11044                           postinc0	equ	0xFEE
 11045                           wreg	equ	0xFE8
 11046                           indf1	equ	0xFE7
 11047                           postinc1	equ	0xFE6
 11048                           postdec1	equ	0xFE5
 11049                           fsr1h	equ	0xFE2
 11050                           fsr1l	equ	0xFE1
 11051                           indf2	equ	0xFDF
 11052                           postinc2	equ	0xFDE
 11053                           postdec2	equ	0xFDD
 11054                           fsr2h	equ	0xFDA
 11055                           fsr2l	equ	0xFD9
 11056                           status	equ	0xFD8
 11057                           
 11058 ;; *************** function _ASLB_PierceOscillator *****************
 11059 ;; Defined at:
 11060 ;;		line 812 in file "HX_ASL_BORON.c"
 11061 ;; Parameters:    Size  Location     Type
 11062 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 11063 ;;		 -> hx_mainData(61), 
 11064 ;; Auto vars:     Size  Location     Type
 11065 ;;  rx_index        1    2[BANK0 ] unsigned char 
 11066 ;; Return value:  Size  Location     Type
 11067 ;;                  1    wreg      void 
 11068 ;; Registers used:
 11069 ;;		wreg, status,2
 11070 ;; Tracked objects:
 11071 ;;		On entry : 0/0
 11072 ;;		On exit  : 0/0
 11073 ;;		Unchanged: 0/0
 11074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11075 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11078 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11079 ;;Total ram usage:        3 bytes
 11080 ;; Hardware stack levels used:    1
 11081 ;; Hardware stack levels required when called:    7
 11082 ;; This function calls:
 11083 ;;		Nothing
 11084 ;; This function is called by:
 11085 ;;		_write_ASLBoron_test
 11086 ;; This function uses a non-reentrant model
 11087 ;;
 11088                           
 11089                           	psect	text24
 11090  004052                     __ptext24:
 11091                           	opt stack 0
 11092  004052                     _ASLB_PierceOscillator:
 11093                           	opt stack 21
 11094                           
 11095                           ;HX_ASL_BORON.c: 818: uint8_t rx_index = 0;
 11096                           
 11097                           ; BSR set to: 0
 11098                           ;incstack = 0
 11099  004052  0E00               	movlw	0
 11100  004054  0100               	movlb	0	; () banked
 11101  004056  6F62               	movwf	ASLB_PierceOscillator@rx_index& (0+255),b
 11102                           
 11103                           ; BSR set to: 0
 11104  004058  0012               	return		;funcret
 11105  00405A                     __end_of_ASLB_PierceOscillator:
 11106                           	opt stack 0
 11107                           tblptru	equ	0xFF8
 11108                           tblptrh	equ	0xFF7
 11109                           tblptrl	equ	0xFF6
 11110                           tablat	equ	0xFF5
 11111                           prodh	equ	0xFF4
 11112                           prodl	equ	0xFF3
 11113                           intcon	equ	0xFF2
 11114                           postinc0	equ	0xFEE
 11115                           wreg	equ	0xFE8
 11116                           indf1	equ	0xFE7
 11117                           postinc1	equ	0xFE6
 11118                           postdec1	equ	0xFE5
 11119                           fsr1h	equ	0xFE2
 11120                           fsr1l	equ	0xFE1
 11121                           indf2	equ	0xFDF
 11122                           postinc2	equ	0xFDE
 11123                           postdec2	equ	0xFDD
 11124                           fsr2h	equ	0xFDA
 11125                           fsr2l	equ	0xFD9
 11126                           status	equ	0xFD8
 11127                           
 11128 ;; *************** function _ASLB_OscillatorRegulatorVoltage *****************
 11129 ;; Defined at:
 11130 ;;		line 756 in file "HX_ASL_BORON.c"
 11131 ;; Parameters:    Size  Location     Type
 11132 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11133 ;;		 -> hx_mainData(61), 
 11134 ;; Auto vars:     Size  Location     Type
 11135 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11136 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11137 ;; Return value:  Size  Location     Type
 11138 ;;                  1    wreg      void 
 11139 ;; Registers used:
 11140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11141 ;; Tracked objects:
 11142 ;;		On entry : 0/0
 11143 ;;		On exit  : 0/0
 11144 ;;		Unchanged: 0/0
 11145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11146 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11147 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11149 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11150 ;;Total ram usage:       74 bytes
 11151 ;; Hardware stack levels used:    1
 11152 ;; Hardware stack levels required when called:    8
 11153 ;; This function calls:
 11154 ;;		_setupCmdReadbackPkt
 11155 ;; This function is called by:
 11156 ;;		_write_ASLBoron_test
 11157 ;; This function uses a non-reentrant model
 11158 ;;
 11159                           
 11160                           	psect	text25
 11161  003EA8                     __ptext25:
 11162                           	opt stack 0
 11163  003EA8                     _ASLB_OscillatorRegulatorVoltage:
 11164                           	opt stack 20
 11165                           
 11166                           ;HX_ASL_BORON.c: 763: uint8_t rx_index = 0;
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;incstack = 0
 11170  003EA8  0E00               	movlw	0
 11171  003EAA  0100               	movlb	0	; () banked
 11172  003EAC  6F64               	movwf	ASLB_OscillatorRegulatorVoltage@rx_index& (0+255),b
 11173                           
 11174                           ; BSR set to: 0
 11175                           ;HX_ASL_BORON.c: 766: LATCH_BIAS_DATA |= 0x0004;
 11176  003EAE  0105               	movlb	5	; () banked
 11177  003EB0  85E1               	bsf	_LATCH_BIAS_DATA& (0+255),2,b
 11178                           
 11179                           ; BSR set to: 5
 11180                           ;HX_ASL_BORON.c: 768: txRxPkt cmdReadbackPkt;
 11181                           ;HX_ASL_BORON.c: 769: setupCmdReadbackPkt(&cmdReadbackPkt);
 11182  003EB2  0E65               	movlw	low ASLB_OscillatorRegulatorVoltage@cmdReadbackPkt
 11183  003EB4  0100               	movlb	0	; () banked
 11184  003EB6  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11185  003EB8  0E00               	movlw	high ASLB_OscillatorRegulatorVoltage@cmdReadbackPkt
 11186  003EBA  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11187  003EBC  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11188  003EC0  0012               	return		;funcret
 11189  003EC2                     __end_of_ASLB_OscillatorRegulatorVoltage:
 11190                           	opt stack 0
 11191                           tblptru	equ	0xFF8
 11192                           tblptrh	equ	0xFF7
 11193                           tblptrl	equ	0xFF6
 11194                           tablat	equ	0xFF5
 11195                           prodh	equ	0xFF4
 11196                           prodl	equ	0xFF3
 11197                           intcon	equ	0xFF2
 11198                           postinc0	equ	0xFEE
 11199                           wreg	equ	0xFE8
 11200                           indf1	equ	0xFE7
 11201                           postinc1	equ	0xFE6
 11202                           postdec1	equ	0xFE5
 11203                           fsr1h	equ	0xFE2
 11204                           fsr1l	equ	0xFE1
 11205                           indf2	equ	0xFDF
 11206                           postinc2	equ	0xFDE
 11207                           postdec2	equ	0xFDD
 11208                           fsr2h	equ	0xFDA
 11209                           fsr2l	equ	0xFD9
 11210                           status	equ	0xFD8
 11211                           
 11212 ;; *************** function _ASLB_MuxReadingVDD *****************
 11213 ;; Defined at:
 11214 ;;		line 575 in file "HX_ASL_BORON.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11217 ;;		 -> hx_mainData(61), 
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11220 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11221 ;; Return value:  Size  Location     Type
 11222 ;;                  1    wreg      void 
 11223 ;; Registers used:
 11224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11225 ;; Tracked objects:
 11226 ;;		On entry : 0/0
 11227 ;;		On exit  : 0/0
 11228 ;;		Unchanged: 0/0
 11229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11230 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11231 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11233 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11234 ;;Total ram usage:       74 bytes
 11235 ;; Hardware stack levels used:    1
 11236 ;; Hardware stack levels required when called:    8
 11237 ;; This function calls:
 11238 ;;		_setupCmdReadbackPkt
 11239 ;; This function is called by:
 11240 ;;		_write_ASLBoron_test
 11241 ;; This function uses a non-reentrant model
 11242 ;;
 11243                           
 11244                           	psect	text26
 11245  003D5C                     __ptext26:
 11246                           	opt stack 0
 11247  003D5C                     _ASLB_MuxReadingVDD:
 11248                           	opt stack 20
 11249                           
 11250                           ;HX_ASL_BORON.c: 583: uint8_t rx_index = 0;
 11251                           
 11252                           ;incstack = 0
 11253  003D5C  0E00               	movlw	0
 11254  003D5E  0100               	movlb	0	; () banked
 11255  003D60  6F64               	movwf	ASLB_MuxReadingVDD@rx_index& (0+255),b
 11256                           
 11257                           ; BSR set to: 0
 11258                           ;HX_ASL_BORON.c: 586: LATCH_ADC_DATA |= 0x0008;
 11259  003D62  0105               	movlb	5	; () banked
 11260  003D64  87D9               	bsf	_LATCH_ADC_DATA& (0+255),3,b
 11261                           
 11262                           ; BSR set to: 5
 11263                           ;HX_ASL_BORON.c: 587: LATCH_ADC_DATA &= 0xFFF8;
 11264  003D66  0EF8               	movlw	248
 11265  003D68  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 11266  003D6A  0EFF               	movlw	255
 11267  003D6C  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11268  003D6E  0E00               	movlw	0
 11269  003D70  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11270  003D72  0E00               	movlw	0
 11271  003D74  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11272                           
 11273                           ; BSR set to: 5
 11274                           ;HX_ASL_BORON.c: 589: txRxPkt cmdReadbackPkt;
 11275                           ;HX_ASL_BORON.c: 590: setupCmdReadbackPkt(&cmdReadbackPkt);
 11276  003D76  0E65               	movlw	low ASLB_MuxReadingVDD@cmdReadbackPkt
 11277  003D78  0100               	movlb	0	; () banked
 11278  003D7A  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11279  003D7C  0E00               	movlw	high ASLB_MuxReadingVDD@cmdReadbackPkt
 11280  003D7E  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11281  003D80  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11282  003D84  0012               	return		;funcret
 11283  003D86                     __end_of_ASLB_MuxReadingVDD:
 11284                           	opt stack 0
 11285                           tblptru	equ	0xFF8
 11286                           tblptrh	equ	0xFF7
 11287                           tblptrl	equ	0xFF6
 11288                           tablat	equ	0xFF5
 11289                           prodh	equ	0xFF4
 11290                           prodl	equ	0xFF3
 11291                           intcon	equ	0xFF2
 11292                           postinc0	equ	0xFEE
 11293                           wreg	equ	0xFE8
 11294                           indf1	equ	0xFE7
 11295                           postinc1	equ	0xFE6
 11296                           postdec1	equ	0xFE5
 11297                           fsr1h	equ	0xFE2
 11298                           fsr1l	equ	0xFE1
 11299                           indf2	equ	0xFDF
 11300                           postinc2	equ	0xFDE
 11301                           postdec2	equ	0xFDD
 11302                           fsr2h	equ	0xFDA
 11303                           fsr2l	equ	0xFD9
 11304                           status	equ	0xFD8
 11305                           
 11306 ;; *************** function _ASLB_MuxOpenCircuit *****************
 11307 ;; Defined at:
 11308 ;;		line 738 in file "HX_ASL_BORON.c"
 11309 ;; Parameters:    Size  Location     Type
 11310 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11311 ;;		 -> hx_mainData(61), 
 11312 ;; Auto vars:     Size  Location     Type
 11313 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11314 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11315 ;; Return value:  Size  Location     Type
 11316 ;;                  1    wreg      void 
 11317 ;; Registers used:
 11318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11319 ;; Tracked objects:
 11320 ;;		On entry : 0/0
 11321 ;;		On exit  : 0/0
 11322 ;;		Unchanged: 0/0
 11323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11324 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11325 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11327 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11328 ;;Total ram usage:       74 bytes
 11329 ;; Hardware stack levels used:    1
 11330 ;; Hardware stack levels required when called:    8
 11331 ;; This function calls:
 11332 ;;		_setupCmdReadbackPkt
 11333 ;; This function is called by:
 11334 ;;		_write_ASLBoron_test
 11335 ;; This function uses a non-reentrant model
 11336 ;;
 11337                           
 11338                           	psect	text27
 11339  003B36                     __ptext27:
 11340                           	opt stack 0
 11341  003B36                     _ASLB_MuxOpenCircuit:
 11342                           	opt stack 20
 11343                           
 11344                           ;HX_ASL_BORON.c: 746: uint8_t rx_index = 0;
 11345                           
 11346                           ;incstack = 0
 11347  003B36  0E00               	movlw	0
 11348  003B38  0100               	movlb	0	; () banked
 11349  003B3A  6F64               	movwf	ASLB_MuxOpenCircuit@rx_index& (0+255),b
 11350                           
 11351                           ; BSR set to: 0
 11352                           ;HX_ASL_BORON.c: 749: LATCH_ADC_DATA |= 0x000F;
 11353  003B3C  0E0F               	movlw	15
 11354  003B3E  0105               	movlb	5	; () banked
 11355  003B40  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
 11356  003B42  0E00               	movlw	0
 11357  003B44  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11358  003B46  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11359  003B48  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11360                           
 11361                           ; BSR set to: 5
 11362                           ;HX_ASL_BORON.c: 750: LATCH_ADC_DATA &= 0xFFFF;
 11363  003B4A  0EFF               	movlw	255
 11364  003B4C  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 11365  003B4E  0EFF               	movlw	255
 11366  003B50  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11367  003B52  0E00               	movlw	0
 11368  003B54  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11369  003B56  0E00               	movlw	0
 11370  003B58  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11371                           
 11372                           ; BSR set to: 5
 11373                           ;HX_ASL_BORON.c: 752: txRxPkt cmdReadbackPkt;
 11374                           ;HX_ASL_BORON.c: 753: setupCmdReadbackPkt(&cmdReadbackPkt);
 11375  003B5A  0E65               	movlw	low ASLB_MuxOpenCircuit@cmdReadbackPkt
 11376  003B5C  0100               	movlb	0	; () banked
 11377  003B5E  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11378  003B60  0E00               	movlw	high ASLB_MuxOpenCircuit@cmdReadbackPkt
 11379  003B62  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11380  003B64  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11381  003B68  0012               	return		;funcret
 11382  003B6A                     __end_of_ASLB_MuxOpenCircuit:
 11383                           	opt stack 0
 11384                           tblptru	equ	0xFF8
 11385                           tblptrh	equ	0xFF7
 11386                           tblptrl	equ	0xFF6
 11387                           tablat	equ	0xFF5
 11388                           prodh	equ	0xFF4
 11389                           prodl	equ	0xFF3
 11390                           intcon	equ	0xFF2
 11391                           postinc0	equ	0xFEE
 11392                           wreg	equ	0xFE8
 11393                           indf1	equ	0xFE7
 11394                           postinc1	equ	0xFE6
 11395                           postdec1	equ	0xFE5
 11396                           fsr1h	equ	0xFE2
 11397                           fsr1l	equ	0xFE1
 11398                           indf2	equ	0xFDF
 11399                           postinc2	equ	0xFDE
 11400                           postdec2	equ	0xFDD
 11401                           fsr2h	equ	0xFDA
 11402                           fsr2l	equ	0xFD9
 11403                           status	equ	0xFD8
 11404                           
 11405 ;; *************** function _ASLB_InternalTempSensor *****************
 11406 ;; Defined at:
 11407 ;;		line 555 in file "HX_ASL_BORON.c"
 11408 ;; Parameters:    Size  Location     Type
 11409 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11410 ;;		 -> hx_mainData(61), 
 11411 ;; Auto vars:     Size  Location     Type
 11412 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11413 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11414 ;; Return value:  Size  Location     Type
 11415 ;;                  1    wreg      void 
 11416 ;; Registers used:
 11417 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11418 ;; Tracked objects:
 11419 ;;		On entry : 0/0
 11420 ;;		On exit  : 0/0
 11421 ;;		Unchanged: 0/0
 11422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11423 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11424 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11426 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11427 ;;Total ram usage:       74 bytes
 11428 ;; Hardware stack levels used:    1
 11429 ;; Hardware stack levels required when called:    8
 11430 ;; This function calls:
 11431 ;;		_setupCmdReadbackPkt
 11432 ;; This function is called by:
 11433 ;;		_write_ASLBoron_test
 11434 ;; This function uses a non-reentrant model
 11435 ;;
 11436                           
 11437                           	psect	text28
 11438  003B6A                     __ptext28:
 11439                           	opt stack 0
 11440  003B6A                     _ASLB_InternalTempSensor:
 11441                           	opt stack 20
 11442                           
 11443                           ;HX_ASL_BORON.c: 563: uint8_t rx_index = 0;
 11444                           
 11445                           ;incstack = 0
 11446  003B6A  0E00               	movlw	0
 11447  003B6C  0100               	movlb	0	; () banked
 11448  003B6E  6F64               	movwf	ASLB_InternalTempSensor@rx_index& (0+255),b
 11449                           
 11450                           ; BSR set to: 0
 11451                           ;HX_ASL_BORON.c: 566: LATCH_ADC_DATA |= 0x0005;
 11452  003B70  0E05               	movlw	5
 11453  003B72  0105               	movlb	5	; () banked
 11454  003B74  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
 11455  003B76  0E00               	movlw	0
 11456  003B78  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11457  003B7A  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11458  003B7C  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11459                           
 11460                           ; BSR set to: 5
 11461                           ;HX_ASL_BORON.c: 567: LATCH_ADC_DATA &= 0xFFF5;
 11462  003B7E  0EF5               	movlw	245
 11463  003B80  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 11464  003B82  0EFF               	movlw	255
 11465  003B84  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11466  003B86  0E00               	movlw	0
 11467  003B88  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11468  003B8A  0E00               	movlw	0
 11469  003B8C  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11470                           
 11471                           ; BSR set to: 5
 11472                           ;HX_ASL_BORON.c: 569: txRxPkt cmdReadbackPkt;
 11473                           ;HX_ASL_BORON.c: 570: setupCmdReadbackPkt(&cmdReadbackPkt);
 11474  003B8E  0E65               	movlw	low ASLB_InternalTempSensor@cmdReadbackPkt
 11475  003B90  0100               	movlb	0	; () banked
 11476  003B92  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11477  003B94  0E00               	movlw	high ASLB_InternalTempSensor@cmdReadbackPkt
 11478  003B96  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11479  003B98  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11480  003B9C  0012               	return		;funcret
 11481  003B9E                     __end_of_ASLB_InternalTempSensor:
 11482                           	opt stack 0
 11483                           tblptru	equ	0xFF8
 11484                           tblptrh	equ	0xFF7
 11485                           tblptrl	equ	0xFF6
 11486                           tablat	equ	0xFF5
 11487                           prodh	equ	0xFF4
 11488                           prodl	equ	0xFF3
 11489                           intcon	equ	0xFF2
 11490                           postinc0	equ	0xFEE
 11491                           wreg	equ	0xFE8
 11492                           indf1	equ	0xFE7
 11493                           postinc1	equ	0xFE6
 11494                           postdec1	equ	0xFE5
 11495                           fsr1h	equ	0xFE2
 11496                           fsr1l	equ	0xFE1
 11497                           indf2	equ	0xFDF
 11498                           postinc2	equ	0xFDE
 11499                           postdec2	equ	0xFDD
 11500                           fsr2h	equ	0xFDA
 11501                           fsr2l	equ	0xFD9
 11502                           status	equ	0xFD8
 11503                           
 11504 ;; *************** function _ASLB_HeaterFunctionality *****************
 11505 ;; Defined at:
 11506 ;;		line 396 in file "HX_ASL_BORON.c"
 11507 ;; Parameters:    Size  Location     Type
 11508 ;;  rxBuffer        2   18[BANK0 ] PTR unsigned char 
 11509 ;;		 -> hx_mainData(61), 
 11510 ;; Auto vars:     Size  Location     Type
 11511 ;;  ovenWrPkt      71  148[BANK2 ] struct TxRxPacket
 11512 ;;  cmdReadbackP   71   77[BANK2 ] struct TxRxPacket
 11513 ;;  heatDacWrPkt   71    6[BANK2 ] struct TxRxPacket
 11514 ;;  trBlock        10    0        struct .[2]
 11515 ;;  stream          4    2[BANK2 ] PTR struct TxRxPacket[2]
 11516 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
 11517 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
 11518 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
 11519 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
 11520 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
 11521 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
 11522 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
 11523 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
 11524 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
 11525 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
 11526 ;;  stream_statu    1    1[BANK2 ] unsigned char 
 11527 ;;  rx_index        1    0[BANK2 ] unsigned char 
 11528 ;; Return value:  Size  Location     Type
 11529 ;;                  1    wreg      void 
 11530 ;; Registers used:
 11531 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11532 ;; Tracked objects:
 11533 ;;		On entry : 0/0
 11534 ;;		On exit  : 0/0
 11535 ;;		Unchanged: 0/0
 11536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11537 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11538 ;;      Locals:         0       0       0     219       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11540 ;;      Totals:         0       2       0     219       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11541 ;;Total ram usage:      221 bytes
 11542 ;; Hardware stack levels used:    1
 11543 ;; Hardware stack levels required when called:   10
 11544 ;; This function calls:
 11545 ;;		_setupCmdReadbackPkt
 11546 ;;		_setupLatchPkt
 11547 ;;		_streamBoronComm
 11548 ;; This function is called by:
 11549 ;;		_write_ASLBoron_test
 11550 ;; This function uses a non-reentrant model
 11551 ;;
 11552                           
 11553                           	psect	text29
 11554  002CC4                     __ptext29:
 11555                           	opt stack 0
 11556  002CC4                     _ASLB_HeaterFunctionality:
 11557                           	opt stack 18
 11558                           
 11559                           ;HX_ASL_BORON.c: 408: uint8_t rx_index = 0;
 11560                           
 11561                           ;incstack = 0
 11562  002CC4  0E00               	movlw	0
 11563  002CC6  0102               	movlb	2	; () banked
 11564  002CC8  6F00               	movwf	ASLB_HeaterFunctionality@rx_index& (0+255),b
 11565                           
 11566                           ; BSR set to: 2
 11567                           ;HX_ASL_BORON.c: 411: LATCH_OVEN_DATA |= 0x0040;
 11568  002CCA  8DE2               	bsf	_LATCH_OVEN_DATA& (0+255),6,b
 11569                           
 11570                           ; BSR set to: 2
 11571                           ;HX_ASL_BORON.c: 414: LATCH_OVEN_DATA |= 0xA000;
 11572  002CCC  0E00               	movlw	0
 11573  002CCE  13E2               	iorwf	_LATCH_OVEN_DATA& (0+255),f,b
 11574  002CD0  0EA0               	movlw	160
 11575  002CD2  13E3               	iorwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 11576  002CD4  0E00               	movlw	0
 11577  002CD6  13E4               	iorwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 11578  002CD8  0E00               	movlw	0
 11579  002CDA  13E5               	iorwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 11580                           
 11581                           ; BSR set to: 2
 11582                           ;HX_ASL_BORON.c: 415: LATCH_OVEN_DATA &= 0xAFFF;
 11583  002CDC  0EFF               	movlw	255
 11584  002CDE  17E2               	andwf	_LATCH_OVEN_DATA& (0+255),f,b
 11585  002CE0  0EAF               	movlw	175
 11586  002CE2  17E3               	andwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 11587  002CE4  0E00               	movlw	0
 11588  002CE6  17E4               	andwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 11589  002CE8  0E00               	movlw	0
 11590  002CEA  17E5               	andwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 11591                           
 11592                           ; BSR set to: 2
 11593                           ;HX_ASL_BORON.c: 418: LATCH_OVEN_DATA |= 0x0004;
 11594  002CEC  85E2               	bsf	_LATCH_OVEN_DATA& (0+255),2,b
 11595                           
 11596                           ; BSR set to: 2
 11597                           ;HX_ASL_BORON.c: 421: LATCH_OVEN_DATA |= 0x0003;
 11598  002CEE  0E03               	movlw	3
 11599  002CF0  13E2               	iorwf	_LATCH_OVEN_DATA& (0+255),f,b
 11600  002CF2  0E00               	movlw	0
 11601  002CF4  13E3               	iorwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 11602  002CF6  13E4               	iorwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 11603  002CF8  13E5               	iorwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 11604                           
 11605                           ; BSR set to: 2
 11606                           ;HX_ASL_BORON.c: 422: LATCH_OVEN_DATA &= 0xFFF3;
 11607  002CFA  0EF3               	movlw	243
 11608  002CFC  17E2               	andwf	_LATCH_OVEN_DATA& (0+255),f,b
 11609  002CFE  0EFF               	movlw	255
 11610  002D00  17E3               	andwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 11611  002D02  0E00               	movlw	0
 11612  002D04  17E4               	andwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 11613  002D06  0E00               	movlw	0
 11614  002D08  17E5               	andwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 11615                           
 11616                           ;HX_ASL_BORON.c: 425: LATCH_HEAT_DAC_DATA = 0xFAAA;
 11617  002D0A  0EAA               	movlw	170
 11618  002D0C  0105               	movlb	5	; () banked
 11619  002D0E  6FE9               	movwf	_LATCH_HEAT_DAC_DATA& (0+255),b
 11620  002D10  0EFA               	movlw	250
 11621  002D12  6FEA               	movwf	(_LATCH_HEAT_DAC_DATA+1)& (0+255),b
 11622  002D14  0E00               	movlw	0
 11623  002D16  6FEB               	movwf	(_LATCH_HEAT_DAC_DATA+2)& (0+255),b
 11624  002D18  0E00               	movlw	0
 11625  002D1A  6FEC               	movwf	(_LATCH_HEAT_DAC_DATA+3)& (0+255),b
 11626                           
 11627                           ; BSR set to: 5
 11628                           ;HX_ASL_BORON.c: 427: txRxPkt cmdReadbackPkt;
 11629                           ;HX_ASL_BORON.c: 428: setupCmdReadbackPkt(&cmdReadbackPkt);
 11630  002D1C  0E4D               	movlw	low ASLB_HeaterFunctionality@cmdReadbackPkt
 11631  002D1E  0100               	movlb	0	; () banked
 11632  002D20  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11633  002D22  0E02               	movlw	high ASLB_HeaterFunctionality@cmdReadbackPkt
 11634  002D24  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11635  002D26  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11636                           
 11637                           ;HX_ASL_BORON.c: 430: txRxPkt ovenWrPkt;
 11638                           ;HX_ASL_BORON.c: 431: setupLatchPkt(&ovenWrPkt, LATCH_OVEN_DATA, 0x4);
 11639  002D2A  0E94               	movlw	low ASLB_HeaterFunctionality@ovenWrPkt
 11640  002D2C  0100               	movlb	0	; () banked
 11641  002D2E  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 11642  002D30  0E02               	movlw	high ASLB_HeaterFunctionality@ovenWrPkt
 11643  002D32  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 11644  002D34  C2E2  F067         	movff	_LATCH_OVEN_DATA,setupLatchPkt@latch_data
 11645  002D38  C2E3  F068         	movff	_LATCH_OVEN_DATA+1,setupLatchPkt@latch_data+1
 11646  002D3C  0E04               	movlw	4
 11647  002D3E  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 11648  002D40  EC25  F017         	call	_setupLatchPkt	;wreg free
 11649                           
 11650                           ;HX_ASL_BORON.c: 432: txRxPkt heatDacWrPkt;
 11651                           ;HX_ASL_BORON.c: 433: setupLatchPkt(&heatDacWrPkt, LATCH_HEAT_DAC_DATA, 0x5);
 11652  002D44  0E06               	movlw	low ASLB_HeaterFunctionality@heatDacWrPkt
 11653  002D46  0100               	movlb	0	; () banked
 11654  002D48  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 11655  002D4A  0E02               	movlw	high ASLB_HeaterFunctionality@heatDacWrPkt
 11656  002D4C  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 11657  002D4E  C5E9  F067         	movff	_LATCH_HEAT_DAC_DATA,setupLatchPkt@latch_data
 11658  002D52  C5EA  F068         	movff	_LATCH_HEAT_DAC_DATA+1,setupLatchPkt@latch_data+1
 11659  002D56  0E05               	movlw	5
 11660  002D58  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 11661  002D5A  EC25  F017         	call	_setupLatchPkt	;wreg free
 11662                           
 11663                           ;HX_ASL_BORON.c: 436: I2C1_TRANSACTION_REQUEST_BLOCK trBlock[2];
 11664                           ;HX_ASL_BORON.c: 437: txRxPkt* stream[2];
 11665                           ;HX_ASL_BORON.c: 438: uint8_t stream_status = 0;
 11666  002D5E  0E00               	movlw	0
 11667  002D60  0102               	movlb	2	; () banked
 11668  002D62  6F01               	movwf	ASLB_HeaterFunctionality@stream_status& (0+255),b
 11669                           
 11670                           ; BSR set to: 2
 11671                           ;HX_ASL_BORON.c: 439: stream[0] = &ovenWrPkt;
 11672  002D64  0E94               	movlw	low ASLB_HeaterFunctionality@ovenWrPkt
 11673  002D66  6F02               	movwf	ASLB_HeaterFunctionality@stream& (0+255),b
 11674  002D68  0E02               	movlw	high ASLB_HeaterFunctionality@ovenWrPkt
 11675  002D6A  6F03               	movwf	(ASLB_HeaterFunctionality@stream+1)& (0+255),b
 11676                           
 11677                           ; BSR set to: 2
 11678                           ;HX_ASL_BORON.c: 440: stream[1] = &cmdReadbackPkt;
 11679  002D6C  0E4D               	movlw	low ASLB_HeaterFunctionality@cmdReadbackPkt
 11680  002D6E  6F04               	movwf	(ASLB_HeaterFunctionality@stream+2)& (0+255),b
 11681  002D70  0E02               	movlw	high ASLB_HeaterFunctionality@cmdReadbackPkt
 11682  002D72  6F05               	movwf	(ASLB_HeaterFunctionality@stream+3)& (0+255),b
 11683                           
 11684                           ; BSR set to: 2
 11685                           ;HX_ASL_BORON.c: 441: stream_status = streamBoronComm(BORON_COMM_TYPE, stream, 2);
 11686  002D74  0E02               	movlw	low ASLB_HeaterFunctionality@stream
 11687  002D76  0100               	movlb	0	; () banked
 11688  002D78  6F6E               	movwf	streamBoronComm@pktArr& (0+255),b
 11689  002D7A  0E02               	movlw	high ASLB_HeaterFunctionality@stream
 11690  002D7C  6F6F               	movwf	(streamBoronComm@pktArr+1)& (0+255),b
 11691  002D7E  0E02               	movlw	2
 11692  002D80  6F70               	movwf	streamBoronComm@pktSize& (0+255),b
 11693  002D82  5030               	movf	_BORON_COMM_TYPE,w,c
 11694  002D84  EC4F  F01E         	call	_streamBoronComm
 11695  002D88  0102               	movlb	2	; () banked
 11696  002D8A  6F01               	movwf	ASLB_HeaterFunctionality@stream_status& (0+255),b
 11697                           
 11698                           ; BSR set to: 2
 11699  002D8C  0012               	return		;funcret
 11700  002D8E                     __end_of_ASLB_HeaterFunctionality:
 11701                           	opt stack 0
 11702                           tblptru	equ	0xFF8
 11703                           tblptrh	equ	0xFF7
 11704                           tblptrl	equ	0xFF6
 11705                           tablat	equ	0xFF5
 11706                           prodh	equ	0xFF4
 11707                           prodl	equ	0xFF3
 11708                           intcon	equ	0xFF2
 11709                           postinc0	equ	0xFEE
 11710                           wreg	equ	0xFE8
 11711                           indf1	equ	0xFE7
 11712                           postinc1	equ	0xFE6
 11713                           postdec1	equ	0xFE5
 11714                           fsr1h	equ	0xFE2
 11715                           fsr1l	equ	0xFE1
 11716                           indf2	equ	0xFDF
 11717                           postinc2	equ	0xFDE
 11718                           postdec2	equ	0xFDD
 11719                           fsr2h	equ	0xFDA
 11720                           fsr2l	equ	0xFD9
 11721                           status	equ	0xFD8
 11722                           
 11723 ;; *************** function _ASLB_HeaterFBSignals *****************
 11724 ;; Defined at:
 11725 ;;		line 533 in file "HX_ASL_BORON.c"
 11726 ;; Parameters:    Size  Location     Type
 11727 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11728 ;;		 -> hx_mainData(61), 
 11729 ;; Auto vars:     Size  Location     Type
 11730 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11731 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11732 ;; Return value:  Size  Location     Type
 11733 ;;                  1    wreg      void 
 11734 ;; Registers used:
 11735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11736 ;; Tracked objects:
 11737 ;;		On entry : 0/0
 11738 ;;		On exit  : 0/0
 11739 ;;		Unchanged: 0/0
 11740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11741 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11742 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11744 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11745 ;;Total ram usage:       74 bytes
 11746 ;; Hardware stack levels used:    1
 11747 ;; Hardware stack levels required when called:    8
 11748 ;; This function calls:
 11749 ;;		_setupCmdReadbackPkt
 11750 ;; This function is called by:
 11751 ;;		_write_ASLBoron_test
 11752 ;; This function uses a non-reentrant model
 11753 ;;
 11754                           
 11755                           	psect	text30
 11756  00389E                     __ptext30:
 11757                           	opt stack 0
 11758  00389E                     _ASLB_HeaterFBSignals:
 11759                           	opt stack 20
 11760                           
 11761                           ;HX_ASL_BORON.c: 539: uint8_t rx_index = 0;
 11762                           
 11763                           ; BSR set to: 2
 11764                           ;incstack = 0
 11765  00389E  0E00               	movlw	0
 11766  0038A0  0100               	movlb	0	; () banked
 11767  0038A2  6F64               	movwf	ASLB_HeaterFBSignals@rx_index& (0+255),b
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;HX_ASL_BORON.c: 543: LATCH_ADC_DATA |= 0x0003;
 11771  0038A4  0E03               	movlw	3
 11772  0038A6  0105               	movlb	5	; () banked
 11773  0038A8  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
 11774  0038AA  0E00               	movlw	0
 11775  0038AC  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11776  0038AE  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11777  0038B0  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11778                           
 11779                           ; BSR set to: 5
 11780                           ;HX_ASL_BORON.c: 544: LATCH_ADC_DATA &= 0xFFF3;
 11781  0038B2  0EF3               	movlw	243
 11782  0038B4  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 11783  0038B6  0EFF               	movlw	255
 11784  0038B8  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11785  0038BA  0E00               	movlw	0
 11786  0038BC  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11787  0038BE  0E00               	movlw	0
 11788  0038C0  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11789                           
 11790                           ; BSR set to: 5
 11791                           ;HX_ASL_BORON.c: 548: LATCH_ADC_DATA |= 0x0004;
 11792  0038C2  85D9               	bsf	_LATCH_ADC_DATA& (0+255),2,b
 11793                           
 11794                           ; BSR set to: 5
 11795                           ;HX_ASL_BORON.c: 549: LATCH_ADC_DATA &= 0xFFF4;
 11796  0038C4  0EF4               	movlw	244
 11797  0038C6  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 11798  0038C8  0EFF               	movlw	255
 11799  0038CA  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11800  0038CC  0E00               	movlw	0
 11801  0038CE  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11802  0038D0  0E00               	movlw	0
 11803  0038D2  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11804                           
 11805                           ; BSR set to: 5
 11806                           ;HX_ASL_BORON.c: 551: txRxPkt cmdReadbackPkt;
 11807                           ;HX_ASL_BORON.c: 552: setupCmdReadbackPkt(&cmdReadbackPkt);
 11808  0038D4  0E65               	movlw	low ASLB_HeaterFBSignals@cmdReadbackPkt
 11809  0038D6  0100               	movlb	0	; () banked
 11810  0038D8  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11811  0038DA  0E00               	movlw	high ASLB_HeaterFBSignals@cmdReadbackPkt
 11812  0038DC  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11813  0038DE  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11814  0038E2  0012               	return		;funcret
 11815  0038E4                     __end_of_ASLB_HeaterFBSignals:
 11816                           	opt stack 0
 11817                           tblptru	equ	0xFF8
 11818                           tblptrh	equ	0xFF7
 11819                           tblptrl	equ	0xFF6
 11820                           tablat	equ	0xFF5
 11821                           prodh	equ	0xFF4
 11822                           prodl	equ	0xFF3
 11823                           intcon	equ	0xFF2
 11824                           postinc0	equ	0xFEE
 11825                           wreg	equ	0xFE8
 11826                           indf1	equ	0xFE7
 11827                           postinc1	equ	0xFE6
 11828                           postdec1	equ	0xFE5
 11829                           fsr1h	equ	0xFE2
 11830                           fsr1l	equ	0xFE1
 11831                           indf2	equ	0xFDF
 11832                           postinc2	equ	0xFDE
 11833                           postdec2	equ	0xFDD
 11834                           fsr2h	equ	0xFDA
 11835                           fsr2l	equ	0xFD9
 11836                           status	equ	0xFD8
 11837                           
 11838 ;; *************** function _ASLB_ExternalReferenceVoltage *****************
 11839 ;; Defined at:
 11840 ;;		line 772 in file "HX_ASL_BORON.c"
 11841 ;; Parameters:    Size  Location     Type
 11842 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11843 ;;		 -> hx_mainData(61), 
 11844 ;; Auto vars:     Size  Location     Type
 11845 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11846 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11847 ;; Return value:  Size  Location     Type
 11848 ;;                  1    wreg      void 
 11849 ;; Registers used:
 11850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11851 ;; Tracked objects:
 11852 ;;		On entry : 0/0
 11853 ;;		On exit  : 0/0
 11854 ;;		Unchanged: 0/0
 11855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11856 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11857 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11859 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11860 ;;Total ram usage:       74 bytes
 11861 ;; Hardware stack levels used:    1
 11862 ;; Hardware stack levels required when called:    8
 11863 ;; This function calls:
 11864 ;;		_setupCmdReadbackPkt
 11865 ;; This function is called by:
 11866 ;;		_write_ASLBoron_test
 11867 ;; This function uses a non-reentrant model
 11868 ;;
 11869                           
 11870                           	psect	text31
 11871  003EC2                     __ptext31:
 11872                           	opt stack 0
 11873  003EC2                     _ASLB_ExternalReferenceVoltage:
 11874                           	opt stack 20
 11875                           
 11876                           ;HX_ASL_BORON.c: 779: uint8_t rx_index = 0;
 11877                           
 11878                           ;incstack = 0
 11879  003EC2  0E00               	movlw	0
 11880  003EC4  0100               	movlb	0	; () banked
 11881  003EC6  6F64               	movwf	ASLB_ExternalReferenceVoltage@rx_index& (0+255),b
 11882                           
 11883                           ; BSR set to: 0
 11884                           ;HX_ASL_BORON.c: 782: LATCH_BIAS_DATA |= 0x0010;
 11885  003EC8  0105               	movlb	5	; () banked
 11886  003ECA  89E1               	bsf	_LATCH_BIAS_DATA& (0+255),4,b
 11887                           
 11888                           ; BSR set to: 5
 11889                           ;HX_ASL_BORON.c: 784: txRxPkt cmdReadbackPkt;
 11890                           ;HX_ASL_BORON.c: 785: setupCmdReadbackPkt(&cmdReadbackPkt);
 11891  003ECC  0E65               	movlw	low ASLB_ExternalReferenceVoltage@cmdReadbackPkt
 11892  003ECE  0100               	movlb	0	; () banked
 11893  003ED0  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11894  003ED2  0E00               	movlw	high ASLB_ExternalReferenceVoltage@cmdReadbackPkt
 11895  003ED4  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11896  003ED6  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11897  003EDA  0012               	return		;funcret
 11898  003EDC                     __end_of_ASLB_ExternalReferenceVoltage:
 11899                           	opt stack 0
 11900                           tblptru	equ	0xFF8
 11901                           tblptrh	equ	0xFF7
 11902                           tblptrl	equ	0xFF6
 11903                           tablat	equ	0xFF5
 11904                           prodh	equ	0xFF4
 11905                           prodl	equ	0xFF3
 11906                           intcon	equ	0xFF2
 11907                           postinc0	equ	0xFEE
 11908                           wreg	equ	0xFE8
 11909                           indf1	equ	0xFE7
 11910                           postinc1	equ	0xFE6
 11911                           postdec1	equ	0xFE5
 11912                           fsr1h	equ	0xFE2
 11913                           fsr1l	equ	0xFE1
 11914                           indf2	equ	0xFDF
 11915                           postinc2	equ	0xFDE
 11916                           postdec2	equ	0xFDD
 11917                           fsr2h	equ	0xFDA
 11918                           fsr2l	equ	0xFD9
 11919                           status	equ	0xFD8
 11920                           
 11921 ;; *************** function _ASLB_DigitalRegulatorVoltage *****************
 11922 ;; Defined at:
 11923 ;;		line 701 in file "HX_ASL_BORON.c"
 11924 ;; Parameters:    Size  Location     Type
 11925 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11926 ;;		 -> hx_mainData(61), 
 11927 ;; Auto vars:     Size  Location     Type
 11928 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11929 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11930 ;; Return value:  Size  Location     Type
 11931 ;;                  1    wreg      void 
 11932 ;; Registers used:
 11933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11934 ;; Tracked objects:
 11935 ;;		On entry : 0/0
 11936 ;;		On exit  : 0/0
 11937 ;;		Unchanged: 0/0
 11938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11939 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11940 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11942 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11943 ;;Total ram usage:       74 bytes
 11944 ;; Hardware stack levels used:    1
 11945 ;; Hardware stack levels required when called:    8
 11946 ;; This function calls:
 11947 ;;		_setupCmdReadbackPkt
 11948 ;; This function is called by:
 11949 ;;		_write_ASLBoron_test
 11950 ;; This function uses a non-reentrant model
 11951 ;;
 11952                           
 11953                           	psect	text32
 11954  003B9E                     __ptext32:
 11955                           	opt stack 0
 11956  003B9E                     _ASLB_DigitalRegulatorVoltage:
 11957                           	opt stack 20
 11958                           
 11959                           ;HX_ASL_BORON.c: 709: uint8_t rx_index = 0;
 11960                           
 11961                           ;incstack = 0
 11962  003B9E  0E00               	movlw	0
 11963  003BA0  0100               	movlb	0	; () banked
 11964  003BA2  6F64               	movwf	ASLB_DigitalRegulatorVoltage@rx_index& (0+255),b
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;HX_ASL_BORON.c: 712: LATCH_ADC_DATA |= 0x000D;
 11968  003BA4  0E0D               	movlw	13
 11969  003BA6  0105               	movlb	5	; () banked
 11970  003BA8  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
 11971  003BAA  0E00               	movlw	0
 11972  003BAC  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11973  003BAE  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11974  003BB0  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11975                           
 11976                           ; BSR set to: 5
 11977                           ;HX_ASL_BORON.c: 713: LATCH_ADC_DATA &= 0xFFFD;
 11978  003BB2  0EFD               	movlw	253
 11979  003BB4  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 11980  003BB6  0EFF               	movlw	255
 11981  003BB8  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11982  003BBA  0E00               	movlw	0
 11983  003BBC  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11984  003BBE  0E00               	movlw	0
 11985  003BC0  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11986                           
 11987                           ; BSR set to: 5
 11988                           ;HX_ASL_BORON.c: 715: txRxPkt cmdReadbackPkt;
 11989                           ;HX_ASL_BORON.c: 716: setupCmdReadbackPkt(&cmdReadbackPkt);
 11990  003BC2  0E65               	movlw	low ASLB_DigitalRegulatorVoltage@cmdReadbackPkt
 11991  003BC4  0100               	movlb	0	; () banked
 11992  003BC6  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11993  003BC8  0E00               	movlw	high ASLB_DigitalRegulatorVoltage@cmdReadbackPkt
 11994  003BCA  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11995  003BCC  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11996  003BD0  0012               	return		;funcret
 11997  003BD2                     __end_of_ASLB_DigitalRegulatorVoltage:
 11998                           	opt stack 0
 11999                           tblptru	equ	0xFF8
 12000                           tblptrh	equ	0xFF7
 12001                           tblptrl	equ	0xFF6
 12002                           tablat	equ	0xFF5
 12003                           prodh	equ	0xFF4
 12004                           prodl	equ	0xFF3
 12005                           intcon	equ	0xFF2
 12006                           postinc0	equ	0xFEE
 12007                           wreg	equ	0xFE8
 12008                           indf1	equ	0xFE7
 12009                           postinc1	equ	0xFE6
 12010                           postdec1	equ	0xFE5
 12011                           fsr1h	equ	0xFE2
 12012                           fsr1l	equ	0xFE1
 12013                           indf2	equ	0xFDF
 12014                           postinc2	equ	0xFDE
 12015                           postdec2	equ	0xFDD
 12016                           fsr2h	equ	0xFDA
 12017                           fsr2l	equ	0xFD9
 12018                           status	equ	0xFD8
 12019                           
 12020 ;; *************** function _ASLB_DACReferenceVoltage *****************
 12021 ;; Defined at:
 12022 ;;		line 593 in file "HX_ASL_BORON.c"
 12023 ;; Parameters:    Size  Location     Type
 12024 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 12025 ;;		 -> hx_mainData(61), 
 12026 ;; Auto vars:     Size  Location     Type
 12027 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 12028 ;;  rx_index        1    4[BANK0 ] unsigned char 
 12029 ;; Return value:  Size  Location     Type
 12030 ;;                  1    wreg      void 
 12031 ;; Registers used:
 12032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12033 ;; Tracked objects:
 12034 ;;		On entry : 0/0
 12035 ;;		On exit  : 0/0
 12036 ;;		Unchanged: 0/0
 12037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12038 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12039 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12041 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12042 ;;Total ram usage:       74 bytes
 12043 ;; Hardware stack levels used:    1
 12044 ;; Hardware stack levels required when called:    8
 12045 ;; This function calls:
 12046 ;;		_setupCmdReadbackPkt
 12047 ;; This function is called by:
 12048 ;;		_write_ASLBoron_test
 12049 ;; This function uses a non-reentrant model
 12050 ;;
 12051                           
 12052                           	psect	text33
 12053  003BD2                     __ptext33:
 12054                           	opt stack 0
 12055  003BD2                     _ASLB_DACReferenceVoltage:
 12056                           	opt stack 20
 12057                           
 12058                           ;HX_ASL_BORON.c: 601: uint8_t rx_index = 0;
 12059                           
 12060                           ;incstack = 0
 12061  003BD2  0E00               	movlw	0
 12062  003BD4  0100               	movlb	0	; () banked
 12063  003BD6  6F64               	movwf	ASLB_DACReferenceVoltage@rx_index& (0+255),b
 12064                           
 12065                           ; BSR set to: 0
 12066                           ;HX_ASL_BORON.c: 604: LATCH_ADC_DATA |= 0x0009;
 12067  003BD8  0E09               	movlw	9
 12068  003BDA  0105               	movlb	5	; () banked
 12069  003BDC  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
 12070  003BDE  0E00               	movlw	0
 12071  003BE0  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 12072  003BE2  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 12073  003BE4  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 12074                           
 12075                           ; BSR set to: 5
 12076                           ;HX_ASL_BORON.c: 605: LATCH_ADC_DATA &= 0xFFF9;
 12077  003BE6  0EF9               	movlw	249
 12078  003BE8  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 12079  003BEA  0EFF               	movlw	255
 12080  003BEC  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 12081  003BEE  0E00               	movlw	0
 12082  003BF0  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 12083  003BF2  0E00               	movlw	0
 12084  003BF4  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 12085                           
 12086                           ; BSR set to: 5
 12087                           ;HX_ASL_BORON.c: 607: txRxPkt cmdReadbackPkt;
 12088                           ;HX_ASL_BORON.c: 608: setupCmdReadbackPkt(&cmdReadbackPkt);
 12089  003BF6  0E65               	movlw	low ASLB_DACReferenceVoltage@cmdReadbackPkt
 12090  003BF8  0100               	movlb	0	; () banked
 12091  003BFA  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 12092  003BFC  0E00               	movlw	high ASLB_DACReferenceVoltage@cmdReadbackPkt
 12093  003BFE  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 12094  003C00  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 12095  003C04  0012               	return		;funcret
 12096  003C06                     __end_of_ASLB_DACReferenceVoltage:
 12097                           	opt stack 0
 12098                           tblptru	equ	0xFF8
 12099                           tblptrh	equ	0xFF7
 12100                           tblptrl	equ	0xFF6
 12101                           tablat	equ	0xFF5
 12102                           prodh	equ	0xFF4
 12103                           prodl	equ	0xFF3
 12104                           intcon	equ	0xFF2
 12105                           postinc0	equ	0xFEE
 12106                           wreg	equ	0xFE8
 12107                           indf1	equ	0xFE7
 12108                           postinc1	equ	0xFE6
 12109                           postdec1	equ	0xFE5
 12110                           fsr1h	equ	0xFE2
 12111                           fsr1l	equ	0xFE1
 12112                           indf2	equ	0xFDF
 12113                           postinc2	equ	0xFDE
 12114                           postdec2	equ	0xFDD
 12115                           fsr2h	equ	0xFDA
 12116                           fsr2l	equ	0xFD9
 12117                           status	equ	0xFD8
 12118                           
 12119 ;; *************** function _ASLB_CurrentLimitDACVoltage *****************
 12120 ;; Defined at:
 12121 ;;		line 668 in file "HX_ASL_BORON.c"
 12122 ;; Parameters:    Size  Location     Type
 12123 ;;  rxBuffer        2    8[BANK0 ] PTR unsigned char 
 12124 ;;		 -> hx_mainData(61), 
 12125 ;; Auto vars:     Size  Location     Type
 12126 ;;  i               2   82[BANK0 ] int 
 12127 ;;  cmdReadbackP   71   11[BANK0 ] struct TxRxPacket
 12128 ;;  rx_index        1   10[BANK0 ] unsigned char 
 12129 ;; Return value:  Size  Location     Type
 12130 ;;                  1    wreg      void 
 12131 ;; Registers used:
 12132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12133 ;; Tracked objects:
 12134 ;;		On entry : 0/0
 12135 ;;		On exit  : 0/0
 12136 ;;		Unchanged: 0/0
 12137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12138 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12139 ;;      Locals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12141 ;;      Totals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12142 ;;Total ram usage:       76 bytes
 12143 ;; Hardware stack levels used:    1
 12144 ;; Hardware stack levels required when called:    8
 12145 ;; This function calls:
 12146 ;;		_setCurrLimitDAC
 12147 ;;		_setupCmdReadbackPkt
 12148 ;; This function is called by:
 12149 ;;		_write_ASLBoron_test
 12150 ;; This function uses a non-reentrant model
 12151 ;;
 12152                           
 12153                           	psect	text34
 12154  003382                     __ptext34:
 12155                           	opt stack 0
 12156  003382                     _ASLB_CurrentLimitDACVoltage:
 12157                           	opt stack 20
 12158                           
 12159                           ;HX_ASL_BORON.c: 678: uint8_t rx_index = 0;
 12160                           
 12161                           ;incstack = 0
 12162  003382  0E00               	movlw	0
 12163  003384  0100               	movlb	0	; () banked
 12164  003386  6F6A               	movwf	ASLB_CurrentLimitDACVoltage@rx_index& (0+255),b
 12165                           
 12166                           ; BSR set to: 0
 12167                           ;HX_ASL_BORON.c: 681: txRxPkt cmdReadbackPkt;
 12168                           ;HX_ASL_BORON.c: 682: setupCmdReadbackPkt(&cmdReadbackPkt);
 12169  003388  0E6B               	movlw	low ASLB_CurrentLimitDACVoltage@cmdReadbackPkt
 12170  00338A  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 12171  00338C  0E00               	movlw	high ASLB_CurrentLimitDACVoltage@cmdReadbackPkt
 12172  00338E  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 12173  003390  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 12174                           
 12175                           ;HX_ASL_BORON.c: 685: for (int i = 0; i < 128; i += 25)
 12176  003394  0E00               	movlw	0
 12177  003396  0100               	movlb	0	; () banked
 12178  003398  6FB3               	movwf	(ASLB_CurrentLimitDACVoltage@i+1)& (0+255),b
 12179  00339A  0E00               	movlw	0
 12180  00339C  6FB2               	movwf	ASLB_CurrentLimitDACVoltage@i& (0+255),b
 12181  00339E                     l10560:
 12182                           
 12183                           ; BSR set to: 0
 12184  00339E  BFB3               	btfsc	(ASLB_CurrentLimitDACVoltage@i+1)& (0+255),7,b
 12185  0033A0  D006               	goto	l1155
 12186  0033A2  51B3               	movf	(ASLB_CurrentLimitDACVoltage@i+1)& (0+255),w,b
 12187  0033A4  E122               	bnz	l1158
 12188  0033A6  0E80               	movlw	128
 12189  0033A8  5DB2               	subwf	ASLB_CurrentLimitDACVoltage@i& (0+255),w,b
 12190  0033AA  B0D8               	btfsc	status,0,c
 12191  0033AC  0012               	return	
 12192  0033AE                     l1155:
 12193                           
 12194                           ; BSR set to: 0
 12195                           ;HX_ASL_BORON.c: 686: {
 12196                           ;HX_ASL_BORON.c: 687: if (!setCurrLimitDAC(i))
 12197                           
 12198                           ; BSR set to: 0
 12199  0033AE  C0B2  F060         	movff	ASLB_CurrentLimitDACVoltage@i,setCurrLimitDAC@value7bit
 12200  0033B2  C0B3  F061         	movff	ASLB_CurrentLimitDACVoltage@i+1,setCurrLimitDAC@value7bit+1
 12201  0033B6  EC72  F018         	call	_setCurrLimitDAC	;wreg free
 12202  0033BA  0900               	iorlw	0
 12203  0033BC  B4D8               	btfsc	status,2,c
 12204  0033BE  0012               	return	
 12205                           
 12206                           ;HX_ASL_BORON.c: 691: }
 12207                           ;HX_ASL_BORON.c: 694: LATCH_ADC_DATA |= 0x000B;
 12208                           
 12209                           ;HX_ASL_BORON.c: 688: {
 12210                           ;HX_ASL_BORON.c: 690: break;
 12211  0033C0  0E0B               	movlw	11
 12212  0033C2  0105               	movlb	5	; () banked
 12213  0033C4  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
 12214  0033C6  0E00               	movlw	0
 12215  0033C8  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 12216  0033CA  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 12217  0033CC  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 12218                           
 12219                           ;HX_ASL_BORON.c: 695: LATCH_ADC_DATA &= 0xFFFB;
 12220  0033CE  0EFB               	movlw	251
 12221  0033D0  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 12222  0033D2  0EFF               	movlw	255
 12223  0033D4  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 12224  0033D6  0E00               	movlw	0
 12225  0033D8  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 12226  0033DA  0E00               	movlw	0
 12227  0033DC  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 12228  0033DE  0E19               	movlw	25
 12229  0033E0  0100               	movlb	0	; () banked
 12230  0033E2  27B2               	addwf	ASLB_CurrentLimitDACVoltage@i& (0+255),f,b
 12231  0033E4  0E00               	movlw	0
 12232  0033E6  23B3               	addwfc	(ASLB_CurrentLimitDACVoltage@i+1)& (0+255),f,b
 12233  0033E8  D7DA               	goto	l10560
 12234  0033EA                     l1158:
 12235  0033EA  0012               	return		;funcret
 12236  0033EC                     __end_of_ASLB_CurrentLimitDACVoltage:
 12237                           	opt stack 0
 12238                           tblptru	equ	0xFF8
 12239                           tblptrh	equ	0xFF7
 12240                           tblptrl	equ	0xFF6
 12241                           tablat	equ	0xFF5
 12242                           prodh	equ	0xFF4
 12243                           prodl	equ	0xFF3
 12244                           intcon	equ	0xFF2
 12245                           postinc0	equ	0xFEE
 12246                           wreg	equ	0xFE8
 12247                           indf1	equ	0xFE7
 12248                           postinc1	equ	0xFE6
 12249                           postdec1	equ	0xFE5
 12250                           fsr1h	equ	0xFE2
 12251                           fsr1l	equ	0xFE1
 12252                           indf2	equ	0xFDF
 12253                           postinc2	equ	0xFDE
 12254                           postdec2	equ	0xFDD
 12255                           fsr2h	equ	0xFDA
 12256                           fsr2l	equ	0xFD9
 12257                           status	equ	0xFD8
 12258                           
 12259 ;; *************** function _setCurrLimitDAC *****************
 12260 ;; Defined at:
 12261 ;;		line 1168 in file "HX_ASL_BORON.c"
 12262 ;; Parameters:    Size  Location     Type
 12263 ;;  value7bit       2    0[BANK0 ] unsigned int 
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;		None
 12266 ;; Return value:  Size  Location     Type
 12267 ;;                  1    wreg      unsigned char 
 12268 ;; Registers used:
 12269 ;;		wreg, status,2, status,0
 12270 ;; Tracked objects:
 12271 ;;		On entry : 0/0
 12272 ;;		On exit  : 0/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12275 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12277 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12278 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12279 ;;Total ram usage:        8 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; Hardware stack levels required when called:    7
 12282 ;; This function calls:
 12283 ;;		Nothing
 12284 ;; This function is called by:
 12285 ;;		_ASLB_CurrentLimitDACVoltage
 12286 ;; This function uses a non-reentrant model
 12287 ;;
 12288                           
 12289                           	psect	text35
 12290  0030E4                     __ptext35:
 12291                           	opt stack 0
 12292  0030E4                     _setCurrLimitDAC:
 12293                           	opt stack 20
 12294                           
 12295                           ;HX_ASL_BORON.c: 1170: if (value7bit > 127)
 12296                           
 12297                           ;incstack = 0
 12298  0030E4  0100               	movlb	0	; () banked
 12299  0030E6  5161               	movf	(setCurrLimitDAC@value7bit+1)& (0+255),w,b
 12300  0030E8  E104               	bnz	u7010
 12301  0030EA  0E80               	movlw	128
 12302  0030EC  5D60               	subwf	setCurrLimitDAC@value7bit& (0+255),w,b
 12303  0030EE  A0D8               	btfss	status,0,c
 12304  0030F0  D002               	goto	l1251
 12305  0030F2                     u7010:
 12306                           
 12307                           ; BSR set to: 0
 12308                           ;HX_ASL_BORON.c: 1171: {
 12309                           ;HX_ASL_BORON.c: 1172: return 0;
 12310  0030F2  0E00               	movlw	0
 12311                           
 12312                           ; BSR set to: 0
 12313  0030F4  0012               	return	
 12314  0030F6                     l1251:
 12315                           
 12316                           ; BSR set to: 0
 12317                           ;HX_ASL_BORON.c: 1173: }
 12318                           ;HX_ASL_BORON.c: 1176: LATCH_BIAS_DATA |= 0x0001;
 12319                           
 12320                           ; BSR set to: 0
 12321  0030F6  0105               	movlb	5	; () banked
 12322  0030F8  81E1               	bsf	_LATCH_BIAS_DATA& (0+255),0,b
 12323                           
 12324                           ; BSR set to: 5
 12325                           ;HX_ASL_BORON.c: 1179: LATCH_OVEN_DATA |= (value7bit << 9);
 12326  0030FA  C060  F062         	movff	setCurrLimitDAC@value7bit,??_setCurrLimitDAC
 12327  0030FE  C061  F063         	movff	setCurrLimitDAC@value7bit+1,??_setCurrLimitDAC+1
 12328  003102  0E09               	movlw	9
 12329  003104                     u7025:
 12330  003104  90D8               	bcf	status,0,c
 12331  003106  0100               	movlb	0	; () banked
 12332  003108  3762               	rlcf	??_setCurrLimitDAC& (0+255),f,b
 12333  00310A  3763               	rlcf	(??_setCurrLimitDAC+1)& (0+255),f,b
 12334  00310C  2EE8               	decfsz	wreg,f,c
 12335  00310E  D7FA               	goto	u7025
 12336  003110  5162               	movf	??_setCurrLimitDAC& (0+255),w,b
 12337  003112  6F64               	movwf	(??_setCurrLimitDAC+2)& (0+255),b
 12338  003114  5163               	movf	(??_setCurrLimitDAC+1)& (0+255),w,b
 12339  003116  6F65               	movwf	(??_setCurrLimitDAC+3)& (0+255),b
 12340  003118  6B66               	clrf	(??_setCurrLimitDAC+4)& (0+255),b
 12341  00311A  6B67               	clrf	(??_setCurrLimitDAC+5)& (0+255),b
 12342  00311C  5164               	movf	(??_setCurrLimitDAC+2)& (0+255),w,b
 12343  00311E  0102               	movlb	2	; () banked
 12344  003120  13E2               	iorwf	_LATCH_OVEN_DATA& (0+255),f,b
 12345  003122  0100               	movlb	0	; () banked
 12346  003124  5165               	movf	(??_setCurrLimitDAC+3)& (0+255),w,b
 12347  003126  0102               	movlb	2	; () banked
 12348  003128  13E3               	iorwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 12349  00312A  0100               	movlb	0	; () banked
 12350  00312C  5166               	movf	(??_setCurrLimitDAC+4)& (0+255),w,b
 12351  00312E  0102               	movlb	2	; () banked
 12352  003130  13E4               	iorwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 12353  003132  0100               	movlb	0	; () banked
 12354  003134  5167               	movf	(??_setCurrLimitDAC+5)& (0+255),w,b
 12355  003136  0102               	movlb	2	; () banked
 12356  003138  13E5               	iorwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 12357                           
 12358                           ; BSR set to: 2
 12359                           ;HX_ASL_BORON.c: 1180: LATCH_OVEN_DATA &= (value7bit << 9) | 0x01FF;
 12360  00313A  C060  F062         	movff	setCurrLimitDAC@value7bit,??_setCurrLimitDAC
 12361  00313E  C061  F063         	movff	setCurrLimitDAC@value7bit+1,??_setCurrLimitDAC+1
 12362  003142  0E09               	movlw	9
 12363  003144                     u7035:
 12364  003144  90D8               	bcf	status,0,c
 12365  003146  0100               	movlb	0	; () banked
 12366  003148  3762               	rlcf	??_setCurrLimitDAC& (0+255),f,b
 12367  00314A  3763               	rlcf	(??_setCurrLimitDAC+1)& (0+255),f,b
 12368  00314C  2EE8               	decfsz	wreg,f,c
 12369  00314E  D7FA               	goto	u7035
 12370  003150  0EFF               	movlw	255
 12371  003152  1162               	iorwf	??_setCurrLimitDAC& (0+255),w,b
 12372  003154  6F64               	movwf	(??_setCurrLimitDAC+2)& (0+255),b
 12373  003156  0E01               	movlw	1
 12374  003158  1163               	iorwf	(??_setCurrLimitDAC+1)& (0+255),w,b
 12375  00315A  6F65               	movwf	(??_setCurrLimitDAC+3)& (0+255),b
 12376  00315C  6B66               	clrf	(??_setCurrLimitDAC+4)& (0+255),b
 12377  00315E  6B67               	clrf	(??_setCurrLimitDAC+5)& (0+255),b
 12378  003160  5164               	movf	(??_setCurrLimitDAC+2)& (0+255),w,b
 12379  003162  0102               	movlb	2	; () banked
 12380  003164  17E2               	andwf	_LATCH_OVEN_DATA& (0+255),f,b
 12381  003166  0100               	movlb	0	; () banked
 12382  003168  5165               	movf	(??_setCurrLimitDAC+3)& (0+255),w,b
 12383  00316A  0102               	movlb	2	; () banked
 12384  00316C  17E3               	andwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 12385  00316E  0100               	movlb	0	; () banked
 12386  003170  5166               	movf	(??_setCurrLimitDAC+4)& (0+255),w,b
 12387  003172  0102               	movlb	2	; () banked
 12388  003174  17E4               	andwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 12389  003176  0100               	movlb	0	; () banked
 12390  003178  5167               	movf	(??_setCurrLimitDAC+5)& (0+255),w,b
 12391  00317A  0102               	movlb	2	; () banked
 12392  00317C  17E5               	andwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 12393                           
 12394                           ; BSR set to: 2
 12395                           ;HX_ASL_BORON.c: 1184: return 1;
 12396  00317E  0E01               	movlw	1
 12397  003180  0012               	return	
 12398  003182                     __end_of_setCurrLimitDAC:
 12399                           	opt stack 0
 12400                           tblptru	equ	0xFF8
 12401                           tblptrh	equ	0xFF7
 12402                           tblptrl	equ	0xFF6
 12403                           tablat	equ	0xFF5
 12404                           prodh	equ	0xFF4
 12405                           prodl	equ	0xFF3
 12406                           intcon	equ	0xFF2
 12407                           postinc0	equ	0xFEE
 12408                           wreg	equ	0xFE8
 12409                           indf1	equ	0xFE7
 12410                           postinc1	equ	0xFE6
 12411                           postdec1	equ	0xFE5
 12412                           fsr1h	equ	0xFE2
 12413                           fsr1l	equ	0xFE1
 12414                           indf2	equ	0xFDF
 12415                           postinc2	equ	0xFDE
 12416                           postdec2	equ	0xFDD
 12417                           fsr2h	equ	0xFDA
 12418                           fsr2l	equ	0xFD9
 12419                           status	equ	0xFD8
 12420                           
 12421 ;; *************** function _ASLB_ContinuityESD *****************
 12422 ;; Defined at:
 12423 ;;		line 342 in file "HX_ASL_BORON.c"
 12424 ;; Parameters:    Size  Location     Type
 12425 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 12426 ;;		 -> hx_mainData(61), 
 12427 ;; Auto vars:     Size  Location     Type
 12428 ;;		None
 12429 ;; Return value:  Size  Location     Type
 12430 ;;                  1    wreg      void 
 12431 ;; Registers used:
 12432 ;;		None
 12433 ;; Tracked objects:
 12434 ;;		On entry : 0/0
 12435 ;;		On exit  : 0/0
 12436 ;;		Unchanged: 0/0
 12437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12438 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12441 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12442 ;;Total ram usage:        2 bytes
 12443 ;; Hardware stack levels used:    1
 12444 ;; Hardware stack levels required when called:    7
 12445 ;; This function calls:
 12446 ;;		Nothing
 12447 ;; This function is called by:
 12448 ;;		_write_ASLBoron_test
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           	psect	text36
 12453  0040A4                     __ptext36:
 12454                           	opt stack 0
 12455  0040A4                     _ASLB_ContinuityESD:
 12456                           	opt stack 21
 12457                           
 12458                           ;incstack = 0
 12459  0040A4  0012               	return		;funcret
 12460  0040A6                     __end_of_ASLB_ContinuityESD:
 12461                           	opt stack 0
 12462                           tblptru	equ	0xFF8
 12463                           tblptrh	equ	0xFF7
 12464                           tblptrl	equ	0xFF6
 12465                           tablat	equ	0xFF5
 12466                           prodh	equ	0xFF4
 12467                           prodl	equ	0xFF3
 12468                           intcon	equ	0xFF2
 12469                           postinc0	equ	0xFEE
 12470                           wreg	equ	0xFE8
 12471                           indf1	equ	0xFE7
 12472                           postinc1	equ	0xFE6
 12473                           postdec1	equ	0xFE5
 12474                           fsr1h	equ	0xFE2
 12475                           fsr1l	equ	0xFE1
 12476                           indf2	equ	0xFDF
 12477                           postinc2	equ	0xFDE
 12478                           postdec2	equ	0xFDD
 12479                           fsr2h	equ	0xFDA
 12480                           fsr2l	equ	0xFD9
 12481                           status	equ	0xFD8
 12482                           
 12483 ;; *************** function _ASLB_CommonGate *****************
 12484 ;; Defined at:
 12485 ;;		line 845 in file "HX_ASL_BORON.c"
 12486 ;; Parameters:    Size  Location     Type
 12487 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 12488 ;;		 -> hx_mainData(61), 
 12489 ;; Auto vars:     Size  Location     Type
 12490 ;;  rx_index        1    2[BANK0 ] unsigned char 
 12491 ;; Return value:  Size  Location     Type
 12492 ;;                  1    wreg      void 
 12493 ;; Registers used:
 12494 ;;		wreg, status,2
 12495 ;; Tracked objects:
 12496 ;;		On entry : 0/0
 12497 ;;		On exit  : 0/0
 12498 ;;		Unchanged: 0/0
 12499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12500 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12501 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12503 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12504 ;;Total ram usage:        3 bytes
 12505 ;; Hardware stack levels used:    1
 12506 ;; Hardware stack levels required when called:    7
 12507 ;; This function calls:
 12508 ;;		Nothing
 12509 ;; This function is called by:
 12510 ;;		_write_ASLBoron_test
 12511 ;; This function uses a non-reentrant model
 12512 ;;
 12513                           
 12514                           	psect	text37
 12515  00405A                     __ptext37:
 12516                           	opt stack 0
 12517  00405A                     _ASLB_CommonGate:
 12518                           	opt stack 21
 12519                           
 12520                           ;HX_ASL_BORON.c: 851: uint8_t rx_index = 0;
 12521                           
 12522                           ;incstack = 0
 12523  00405A  0E00               	movlw	0
 12524  00405C  0100               	movlb	0	; () banked
 12525  00405E  6F62               	movwf	ASLB_CommonGate@rx_index& (0+255),b
 12526                           
 12527                           ; BSR set to: 0
 12528  004060  0012               	return		;funcret
 12529  004062                     __end_of_ASLB_CommonGate:
 12530                           	opt stack 0
 12531                           tblptru	equ	0xFF8
 12532                           tblptrh	equ	0xFF7
 12533                           tblptrl	equ	0xFF6
 12534                           tablat	equ	0xFF5
 12535                           prodh	equ	0xFF4
 12536                           prodl	equ	0xFF3
 12537                           intcon	equ	0xFF2
 12538                           postinc0	equ	0xFEE
 12539                           wreg	equ	0xFE8
 12540                           indf1	equ	0xFE7
 12541                           postinc1	equ	0xFE6
 12542                           postdec1	equ	0xFE5
 12543                           fsr1h	equ	0xFE2
 12544                           fsr1l	equ	0xFE1
 12545                           indf2	equ	0xFDF
 12546                           postinc2	equ	0xFDE
 12547                           postdec2	equ	0xFDD
 12548                           fsr2h	equ	0xFDA
 12549                           fsr2l	equ	0xFD9
 12550                           status	equ	0xFD8
 12551                           
 12552 ;; *************** function _ASLB_ColpittsOscillator *****************
 12553 ;; Defined at:
 12554 ;;		line 801 in file "HX_ASL_BORON.c"
 12555 ;; Parameters:    Size  Location     Type
 12556 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 12557 ;;		 -> hx_mainData(61), 
 12558 ;; Auto vars:     Size  Location     Type
 12559 ;;  rx_index        1    2[BANK0 ] unsigned char 
 12560 ;; Return value:  Size  Location     Type
 12561 ;;                  1    wreg      void 
 12562 ;; Registers used:
 12563 ;;		wreg, status,2
 12564 ;; Tracked objects:
 12565 ;;		On entry : 0/0
 12566 ;;		On exit  : 0/0
 12567 ;;		Unchanged: 0/0
 12568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12569 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12570 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12572 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12573 ;;Total ram usage:        3 bytes
 12574 ;; Hardware stack levels used:    1
 12575 ;; Hardware stack levels required when called:    7
 12576 ;; This function calls:
 12577 ;;		Nothing
 12578 ;; This function is called by:
 12579 ;;		_write_ASLBoron_test
 12580 ;; This function uses a non-reentrant model
 12581 ;;
 12582                           
 12583                           	psect	text38
 12584  004062                     __ptext38:
 12585                           	opt stack 0
 12586  004062                     _ASLB_ColpittsOscillator:
 12587                           	opt stack 21
 12588                           
 12589                           ;HX_ASL_BORON.c: 807: uint8_t rx_index = 0;
 12590                           
 12591                           ; BSR set to: 0
 12592                           ;incstack = 0
 12593  004062  0E00               	movlw	0
 12594  004064  0100               	movlb	0	; () banked
 12595  004066  6F62               	movwf	ASLB_ColpittsOscillator@rx_index& (0+255),b
 12596                           
 12597                           ; BSR set to: 0
 12598  004068  0012               	return		;funcret
 12599  00406A                     __end_of_ASLB_ColpittsOscillator:
 12600                           	opt stack 0
 12601                           tblptru	equ	0xFF8
 12602                           tblptrh	equ	0xFF7
 12603                           tblptrl	equ	0xFF6
 12604                           tablat	equ	0xFF5
 12605                           prodh	equ	0xFF4
 12606                           prodl	equ	0xFF3
 12607                           intcon	equ	0xFF2
 12608                           postinc0	equ	0xFEE
 12609                           wreg	equ	0xFE8
 12610                           indf1	equ	0xFE7
 12611                           postinc1	equ	0xFE6
 12612                           postdec1	equ	0xFE5
 12613                           fsr1h	equ	0xFE2
 12614                           fsr1l	equ	0xFE1
 12615                           indf2	equ	0xFDF
 12616                           postinc2	equ	0xFDE
 12617                           postdec2	equ	0xFDD
 12618                           fsr2h	equ	0xFDA
 12619                           fsr2l	equ	0xFD9
 12620                           status	equ	0xFD8
 12621                           
 12622 ;; *************** function _ASLB_CTHERM *****************
 12623 ;; Defined at:
 12624 ;;		line 491 in file "HX_ASL_BORON.c"
 12625 ;; Parameters:    Size  Location     Type
 12626 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 12627 ;;		 -> hx_mainData(61), 
 12628 ;; Auto vars:     Size  Location     Type
 12629 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 12630 ;;  rx_index        1    4[BANK0 ] unsigned char 
 12631 ;; Return value:  Size  Location     Type
 12632 ;;                  1    wreg      void 
 12633 ;; Registers used:
 12634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12635 ;; Tracked objects:
 12636 ;;		On entry : 0/0
 12637 ;;		On exit  : 0/0
 12638 ;;		Unchanged: 0/0
 12639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12640 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12641 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12643 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12644 ;;Total ram usage:       74 bytes
 12645 ;; Hardware stack levels used:    1
 12646 ;; Hardware stack levels required when called:    8
 12647 ;; This function calls:
 12648 ;;		_setupCmdReadbackPkt
 12649 ;; This function is called by:
 12650 ;;		_write_ASLBoron_test
 12651 ;; This function uses a non-reentrant model
 12652 ;;
 12653                           
 12654                           	psect	text39
 12655  003DD8                     __ptext39:
 12656                           	opt stack 0
 12657  003DD8                     _ASLB_CTHERM:
 12658                           	opt stack 20
 12659                           
 12660                           ;HX_ASL_BORON.c: 501: uint8_t rx_index = 0;
 12661                           
 12662                           ; BSR set to: 0
 12663                           ;incstack = 0
 12664  003DD8  0E00               	movlw	0
 12665  003DDA  0100               	movlb	0	; () banked
 12666  003DDC  6F64               	movwf	ASLB_CTHERM@rx_index& (0+255),b
 12667                           
 12668                           ; BSR set to: 0
 12669                           ;HX_ASL_BORON.c: 505: LATCH_ADC_DATA &= 0xFFF0;
 12670  003DDE  0EF0               	movlw	240
 12671  003DE0  0105               	movlb	5	; () banked
 12672  003DE2  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 12673  003DE4  0EFF               	movlw	255
 12674  003DE6  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 12675  003DE8  0E00               	movlw	0
 12676  003DEA  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 12677  003DEC  0E00               	movlw	0
 12678  003DEE  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 12679                           
 12680                           ; BSR set to: 5
 12681                           ;HX_ASL_BORON.c: 507: txRxPkt cmdReadbackPkt;
 12682                           ;HX_ASL_BORON.c: 508: setupCmdReadbackPkt(&cmdReadbackPkt);
 12683  003DF0  0E65               	movlw	low ASLB_CTHERM@cmdReadbackPkt
 12684  003DF2  0100               	movlb	0	; () banked
 12685  003DF4  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 12686  003DF6  0E00               	movlw	high ASLB_CTHERM@cmdReadbackPkt
 12687  003DF8  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 12688  003DFA  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 12689  003DFE  0012               	return		;funcret
 12690  003E00                     __end_of_ASLB_CTHERM:
 12691                           	opt stack 0
 12692                           tblptru	equ	0xFF8
 12693                           tblptrh	equ	0xFF7
 12694                           tblptrl	equ	0xFF6
 12695                           tablat	equ	0xFF5
 12696                           prodh	equ	0xFF4
 12697                           prodl	equ	0xFF3
 12698                           intcon	equ	0xFF2
 12699                           postinc0	equ	0xFEE
 12700                           wreg	equ	0xFE8
 12701                           indf1	equ	0xFE7
 12702                           postinc1	equ	0xFE6
 12703                           postdec1	equ	0xFE5
 12704                           fsr1h	equ	0xFE2
 12705                           fsr1l	equ	0xFE1
 12706                           indf2	equ	0xFDF
 12707                           postinc2	equ	0xFDE
 12708                           postdec2	equ	0xFDD
 12709                           fsr2h	equ	0xFDA
 12710                           fsr2l	equ	0xFD9
 12711                           status	equ	0xFD8
 12712                           
 12713 ;; *************** function _ASLB_CFCVVaricap *****************
 12714 ;; Defined at:
 12715 ;;		line 834 in file "HX_ASL_BORON.c"
 12716 ;; Parameters:    Size  Location     Type
 12717 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 12718 ;;		 -> hx_mainData(61), 
 12719 ;; Auto vars:     Size  Location     Type
 12720 ;;  rx_index        1    2[BANK0 ] unsigned char 
 12721 ;; Return value:  Size  Location     Type
 12722 ;;                  1    wreg      void 
 12723 ;; Registers used:
 12724 ;;		wreg, status,2
 12725 ;; Tracked objects:
 12726 ;;		On entry : 0/0
 12727 ;;		On exit  : 0/0
 12728 ;;		Unchanged: 0/0
 12729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12730 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12733 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12734 ;;Total ram usage:        3 bytes
 12735 ;; Hardware stack levels used:    1
 12736 ;; Hardware stack levels required when called:    7
 12737 ;; This function calls:
 12738 ;;		Nothing
 12739 ;; This function is called by:
 12740 ;;		_write_ASLBoron_test
 12741 ;; This function uses a non-reentrant model
 12742 ;;
 12743                           
 12744                           	psect	text40
 12745  00406A                     __ptext40:
 12746                           	opt stack 0
 12747  00406A                     _ASLB_CFCVVaricap:
 12748                           	opt stack 21
 12749                           
 12750                           ;HX_ASL_BORON.c: 840: uint8_t rx_index = 0;
 12751                           
 12752                           ;incstack = 0
 12753  00406A  0E00               	movlw	0
 12754  00406C  0100               	movlb	0	; () banked
 12755  00406E  6F62               	movwf	ASLB_CFCVVaricap@rx_index& (0+255),b
 12756                           
 12757                           ; BSR set to: 0
 12758  004070  0012               	return		;funcret
 12759  004072                     __end_of_ASLB_CFCVVaricap:
 12760                           	opt stack 0
 12761                           tblptru	equ	0xFF8
 12762                           tblptrh	equ	0xFF7
 12763                           tblptrl	equ	0xFF6
 12764                           tablat	equ	0xFF5
 12765                           prodh	equ	0xFF4
 12766                           prodl	equ	0xFF3
 12767                           intcon	equ	0xFF2
 12768                           postinc0	equ	0xFEE
 12769                           wreg	equ	0xFE8
 12770                           indf1	equ	0xFE7
 12771                           postinc1	equ	0xFE6
 12772                           postdec1	equ	0xFE5
 12773                           fsr1h	equ	0xFE2
 12774                           fsr1l	equ	0xFE1
 12775                           indf2	equ	0xFDF
 12776                           postinc2	equ	0xFDE
 12777                           postdec2	equ	0xFDD
 12778                           fsr2h	equ	0xFDA
 12779                           fsr2l	equ	0xFD9
 12780                           status	equ	0xFD8
 12781                           
 12782 ;; *************** function _ASLB_AnalogMuxReadingSetup *****************
 12783 ;; Defined at:
 12784 ;;		line 459 in file "HX_ASL_BORON.c"
 12785 ;; Parameters:    Size  Location     Type
 12786 ;;  rxBuffer        2   18[BANK0 ] PTR unsigned char 
 12787 ;;		 -> hx_mainData(61), 
 12788 ;; Auto vars:     Size  Location     Type
 12789 ;;  ovenWrPkt      71   77[BANK2 ] struct TxRxPacket
 12790 ;;  cmdReadbackP   71    6[BANK2 ] struct TxRxPacket
 12791 ;;  stream          4    2[BANK2 ] PTR struct TxRxPacket[2]
 12792 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
 12793 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
 12794 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
 12795 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
 12796 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
 12797 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
 12798 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
 12799 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
 12800 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
 12801 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
 12802 ;;  stream_statu    1    1[BANK2 ] unsigned char 
 12803 ;;  rx_index        1    0[BANK2 ] unsigned char 
 12804 ;; Return value:  Size  Location     Type
 12805 ;;                  1    wreg      void 
 12806 ;; Registers used:
 12807 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12808 ;; Tracked objects:
 12809 ;;		On entry : 0/0
 12810 ;;		On exit  : 0/0
 12811 ;;		Unchanged: 0/0
 12812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12813 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12814 ;;      Locals:         0       0       0     148       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12816 ;;      Totals:         0       2       0     148       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12817 ;;Total ram usage:      150 bytes
 12818 ;; Hardware stack levels used:    1
 12819 ;; Hardware stack levels required when called:   10
 12820 ;; This function calls:
 12821 ;;		_setupCmdReadbackPkt
 12822 ;;		_setupLatchPkt
 12823 ;;		_streamBoronComm
 12824 ;; This function is called by:
 12825 ;;		_write_ASLBoron_test
 12826 ;; This function uses a non-reentrant model
 12827 ;;
 12828                           
 12829                           	psect	text41
 12830  0032A6                     __ptext41:
 12831                           	opt stack 0
 12832  0032A6                     _ASLB_AnalogMuxReadingSetup:
 12833                           	opt stack 18
 12834                           
 12835                           ;HX_ASL_BORON.c: 468: uint8_t rx_index = 0;
 12836                           
 12837                           ; BSR set to: 0
 12838                           ;incstack = 0
 12839  0032A6  0E00               	movlw	0
 12840  0032A8  0102               	movlb	2	; () banked
 12841  0032AA  6F00               	movwf	ASLB_AnalogMuxReadingSetup@rx_index& (0+255),b
 12842                           
 12843                           ; BSR set to: 2
 12844                           ;HX_ASL_BORON.c: 471: LATCH_OVEN_DATA &= 0xF7FF;
 12845  0032AC  0EFF               	movlw	255
 12846  0032AE  17E2               	andwf	_LATCH_OVEN_DATA& (0+255),f,b
 12847  0032B0  0EF7               	movlw	247
 12848  0032B2  17E3               	andwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 12849  0032B4  0E00               	movlw	0
 12850  0032B6  17E4               	andwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 12851  0032B8  0E00               	movlw	0
 12852  0032BA  17E5               	andwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 12853                           
 12854                           ; BSR set to: 2
 12855                           ;HX_ASL_BORON.c: 474: LATCH_OVEN_DATA |= 0x0040;
 12856  0032BC  8DE2               	bsf	_LATCH_OVEN_DATA& (0+255),6,b
 12857                           
 12858                           ; BSR set to: 2
 12859                           ;HX_ASL_BORON.c: 478: txRxPkt cmdReadbackPkt;
 12860                           ;HX_ASL_BORON.c: 479: setupCmdReadbackPkt(&cmdReadbackPkt);
 12861  0032BE  0E06               	movlw	low ASLB_AnalogMuxReadingSetup@cmdReadbackPkt
 12862  0032C0  0100               	movlb	0	; () banked
 12863  0032C2  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 12864  0032C4  0E02               	movlw	high ASLB_AnalogMuxReadingSetup@cmdReadbackPkt
 12865  0032C6  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 12866  0032C8  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 12867                           
 12868                           ;HX_ASL_BORON.c: 480: txRxPkt ovenWrPkt;
 12869                           ;HX_ASL_BORON.c: 481: setupLatchPkt(&ovenWrPkt, LATCH_OVEN_DATA, 0x4);
 12870  0032CC  0E4D               	movlw	low ASLB_AnalogMuxReadingSetup@ovenWrPkt
 12871  0032CE  0100               	movlb	0	; () banked
 12872  0032D0  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 12873  0032D2  0E02               	movlw	high ASLB_AnalogMuxReadingSetup@ovenWrPkt
 12874  0032D4  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 12875  0032D6  C2E2  F067         	movff	_LATCH_OVEN_DATA,setupLatchPkt@latch_data
 12876  0032DA  C2E3  F068         	movff	_LATCH_OVEN_DATA+1,setupLatchPkt@latch_data+1
 12877  0032DE  0E04               	movlw	4
 12878  0032E0  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 12879  0032E2  EC25  F017         	call	_setupLatchPkt	;wreg free
 12880                           
 12881                           ;HX_ASL_BORON.c: 484: txRxPkt* stream[2];
 12882                           ;HX_ASL_BORON.c: 485: uint8_t stream_status = 0;
 12883  0032E6  0E00               	movlw	0
 12884  0032E8  0102               	movlb	2	; () banked
 12885  0032EA  6F01               	movwf	ASLB_AnalogMuxReadingSetup@stream_status& (0+255),b
 12886                           
 12887                           ; BSR set to: 2
 12888                           ;HX_ASL_BORON.c: 486: stream[0] = &ovenWrPkt;
 12889  0032EC  0E4D               	movlw	low ASLB_AnalogMuxReadingSetup@ovenWrPkt
 12890  0032EE  6F02               	movwf	ASLB_AnalogMuxReadingSetup@stream& (0+255),b
 12891  0032F0  0E02               	movlw	high ASLB_AnalogMuxReadingSetup@ovenWrPkt
 12892  0032F2  6F03               	movwf	(ASLB_AnalogMuxReadingSetup@stream+1)& (0+255),b
 12893                           
 12894                           ; BSR set to: 2
 12895                           ;HX_ASL_BORON.c: 487: stream[1] = &cmdReadbackPkt;
 12896  0032F4  0E06               	movlw	low ASLB_AnalogMuxReadingSetup@cmdReadbackPkt
 12897  0032F6  6F04               	movwf	(ASLB_AnalogMuxReadingSetup@stream+2)& (0+255),b
 12898  0032F8  0E02               	movlw	high ASLB_AnalogMuxReadingSetup@cmdReadbackPkt
 12899  0032FA  6F05               	movwf	(ASLB_AnalogMuxReadingSetup@stream+3)& (0+255),b
 12900                           
 12901                           ; BSR set to: 2
 12902                           ;HX_ASL_BORON.c: 488: stream_status = streamBoronComm(BORON_COMM_TYPE, stream, 2);
 12903  0032FC  0E02               	movlw	low ASLB_AnalogMuxReadingSetup@stream
 12904  0032FE  0100               	movlb	0	; () banked
 12905  003300  6F6E               	movwf	streamBoronComm@pktArr& (0+255),b
 12906  003302  0E02               	movlw	high ASLB_AnalogMuxReadingSetup@stream
 12907  003304  6F6F               	movwf	(streamBoronComm@pktArr+1)& (0+255),b
 12908  003306  0E02               	movlw	2
 12909  003308  6F70               	movwf	streamBoronComm@pktSize& (0+255),b
 12910  00330A  5030               	movf	_BORON_COMM_TYPE,w,c
 12911  00330C  EC4F  F01E         	call	_streamBoronComm
 12912  003310  0102               	movlb	2	; () banked
 12913  003312  6F01               	movwf	ASLB_AnalogMuxReadingSetup@stream_status& (0+255),b
 12914                           
 12915                           ; BSR set to: 2
 12916  003314  0012               	return		;funcret
 12917  003316                     __end_of_ASLB_AnalogMuxReadingSetup:
 12918                           	opt stack 0
 12919                           tblptru	equ	0xFF8
 12920                           tblptrh	equ	0xFF7
 12921                           tblptrl	equ	0xFF6
 12922                           tablat	equ	0xFF5
 12923                           prodh	equ	0xFF4
 12924                           prodl	equ	0xFF3
 12925                           intcon	equ	0xFF2
 12926                           postinc0	equ	0xFEE
 12927                           wreg	equ	0xFE8
 12928                           indf1	equ	0xFE7
 12929                           postinc1	equ	0xFE6
 12930                           postdec1	equ	0xFE5
 12931                           fsr1h	equ	0xFE2
 12932                           fsr1l	equ	0xFE1
 12933                           indf2	equ	0xFDF
 12934                           postinc2	equ	0xFDE
 12935                           postdec2	equ	0xFDD
 12936                           fsr2h	equ	0xFDA
 12937                           fsr2l	equ	0xFD9
 12938                           status	equ	0xFD8
 12939                           
 12940 ;; *************** function _setupLatchPkt *****************
 12941 ;; Defined at:
 12942 ;;		line 1187 in file "HX_ASL_BORON.c"
 12943 ;; Parameters:    Size  Location     Type
 12944 ;;  pkt             2    5[BANK0 ] PTR struct TxRxPacket
 12945 ;;		 -> checkAndSendLatchData@clock_select_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLatchData@ad
      +c_mux_pkt(71), checkAndSendLatchData@adc_pkt(71), 
 12946 ;;		 -> checkAndSendLatchData@cmos_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@varactor_dac_pkt(7
      +1), checkAndSendLatchData@heat_dac_pkt(71), 
 12947 ;;		 -> checkAndSendLatchData@oven_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@osc2_pkt(71), ch
      +eckAndSendLatchData@osc1_pkt(71), 
 12948 ;;		 -> checkAndSendLatchData@osc0_pkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_HeaterFunctionality@heatDacWr
      +Pkt(71), ASLB_HeaterFunctionality@ovenWrPkt(71), 
 12949 ;;  latch_data      2    7[BANK0 ] unsigned int 
 12950 ;;  latch_num       1    9[BANK0 ] unsigned char 
 12951 ;; Auto vars:     Size  Location     Type
 12952 ;;		None
 12953 ;; Return value:  Size  Location     Type
 12954 ;;                  1    wreg      void 
 12955 ;; Registers used:
 12956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12957 ;; Tracked objects:
 12958 ;;		On entry : 0/0
 12959 ;;		On exit  : 0/0
 12960 ;;		Unchanged: 0/0
 12961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12962 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12965 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12966 ;;Total ram usage:        7 bytes
 12967 ;; Hardware stack levels used:    1
 12968 ;; Hardware stack levels required when called:    8
 12969 ;; This function calls:
 12970 ;;		_calcChecksum
 12971 ;; This function is called by:
 12972 ;;		_ASLB_HeaterFunctionality
 12973 ;;		_ASLB_AnalogMuxReadingSetup
 12974 ;;		_checkAndSendLatchData
 12975 ;; This function uses a non-reentrant model
 12976 ;;
 12977                           
 12978                           	psect	text42
 12979  002E4A                     __ptext42:
 12980                           	opt stack 0
 12981  002E4A                     _setupLatchPkt:
 12982                           	opt stack 18
 12983                           
 12984                           ;HX_ASL_BORON.c: 1191: pkt->txOrRx = 0;
 12985                           
 12986                           ; BSR set to: 2
 12987                           ;incstack = 0
 12988  002E4A  C065  FFD9         	movff	setupLatchPkt@pkt,fsr2l
 12989  002E4E  C066  FFDA         	movff	setupLatchPkt@pkt+1,fsr2h
 12990  002E52  0E00               	movlw	0
 12991  002E54  6EDF               	movwf	indf2,c
 12992                           
 12993                           ;HX_ASL_BORON.c: 1192: pkt->slaveAddr = 0x5A;
 12994  002E56  0100               	movlb	0	; () banked
 12995  002E58  EE20 F001          	lfsr	2,1
 12996  002E5C  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 12997  002E5E  26D9               	addwf	fsr2l,f,c
 12998  002E60  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 12999  002E62  22DA               	addwfc	fsr2h,f,c
 13000  002E64  0E5A               	movlw	90
 13001  002E66  6EDE               	movwf	postinc2,c
 13002  002E68  0E00               	movlw	0
 13003  002E6A  6EDD               	movwf	postdec2,c
 13004                           
 13005                           ; BSR set to: 0
 13006                           ;HX_ASL_BORON.c: 1193: pkt->numOfBytes = 5;
 13007  002E6C  EE20 F043          	lfsr	2,67
 13008  002E70  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13009  002E72  26D9               	addwf	fsr2l,f,c
 13010  002E74  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13011  002E76  22DA               	addwfc	fsr2h,f,c
 13012  002E78  0E05               	movlw	5
 13013  002E7A  6EDF               	movwf	indf2,c
 13014                           
 13015                           ; BSR set to: 0
 13016                           ;HX_ASL_BORON.c: 1194: pkt->data[0] = 0x50;
 13017  002E7C  EE20 F003          	lfsr	2,3
 13018  002E80  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13019  002E82  26D9               	addwf	fsr2l,f,c
 13020  002E84  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13021  002E86  22DA               	addwfc	fsr2h,f,c
 13022  002E88  0E50               	movlw	80
 13023  002E8A  6EDF               	movwf	indf2,c
 13024                           
 13025                           ; BSR set to: 0
 13026                           ;HX_ASL_BORON.c: 1195: pkt->data[1] = (latch_data >> 8) & 0xFF;
 13027  002E8C  EE20 F004          	lfsr	2,4
 13028  002E90  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13029  002E92  26D9               	addwf	fsr2l,f,c
 13030  002E94  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13031  002E96  22DA               	addwfc	fsr2h,f,c
 13032  002E98  5168               	movf	(setupLatchPkt@latch_data+1)& (0+255),w,b
 13033  002E9A  6EDF               	movwf	indf2,c
 13034                           
 13035                           ; BSR set to: 0
 13036                           ;HX_ASL_BORON.c: 1196: pkt->data[2] = latch_data & 0xFF;
 13037  002E9C  EE20 F005          	lfsr	2,5
 13038  002EA0  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13039  002EA2  26D9               	addwf	fsr2l,f,c
 13040  002EA4  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13041  002EA6  22DA               	addwfc	fsr2h,f,c
 13042  002EA8  C067  FFDF         	movff	setupLatchPkt@latch_data,indf2
 13043                           
 13044                           ; BSR set to: 0
 13045                           ;HX_ASL_BORON.c: 1197: pkt->data[3] = latch_num;
 13046  002EAC  EE20 F006          	lfsr	2,6
 13047  002EB0  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13048  002EB2  26D9               	addwf	fsr2l,f,c
 13049  002EB4  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13050  002EB6  22DA               	addwfc	fsr2h,f,c
 13051  002EB8  C069  FFDF         	movff	setupLatchPkt@latch_num,indf2
 13052                           
 13053                           ; BSR set to: 0
 13054                           ;HX_ASL_BORON.c: 1198: pkt->data[4] = calcChecksum(pkt->data, pkt->numOfBytes-1);
 13055  002EBC  0E03               	movlw	3
 13056  002EBE  2565               	addwf	setupLatchPkt@pkt& (0+255),w,b
 13057  002EC0  6F60               	movwf	calcChecksum@data& (0+255),b
 13058  002EC2  0E00               	movlw	0
 13059  002EC4  2166               	addwfc	(setupLatchPkt@pkt+1)& (0+255),w,b
 13060  002EC6  6F61               	movwf	(calcChecksum@data+1)& (0+255),b
 13061  002EC8  EE20 F043          	lfsr	2,67
 13062  002ECC  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13063  002ECE  26D9               	addwf	fsr2l,f,c
 13064  002ED0  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13065  002ED2  22DA               	addwfc	fsr2h,f,c
 13066  002ED4  50DF               	movf	indf2,w,c
 13067  002ED6  6F6A               	movwf	??_setupLatchPkt& (0+255),b
 13068  002ED8  056A               	decf	??_setupLatchPkt& (0+255),w,b
 13069  002EDA  6F62               	movwf	calcChecksum@size& (0+255),b
 13070  002EDC  EC67  F01E         	call	_calcChecksum	;wreg free
 13071  002EE0  0100               	movlb	0	; () banked
 13072  002EE2  6F6B               	movwf	(??_setupLatchPkt+1)& (0+255),b
 13073  002EE4  EE20 F007          	lfsr	2,7
 13074  002EE8  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13075  002EEA  26D9               	addwf	fsr2l,f,c
 13076  002EEC  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13077  002EEE  22DA               	addwfc	fsr2h,f,c
 13078  002EF0  C06B  FFDF         	movff	??_setupLatchPkt+1,indf2
 13079                           
 13080                           ; BSR set to: 0
 13081  002EF4  0012               	return		;funcret
 13082  002EF6                     __end_of_setupLatchPkt:
 13083                           	opt stack 0
 13084                           tblptru	equ	0xFF8
 13085                           tblptrh	equ	0xFF7
 13086                           tblptrl	equ	0xFF6
 13087                           tablat	equ	0xFF5
 13088                           prodh	equ	0xFF4
 13089                           prodl	equ	0xFF3
 13090                           intcon	equ	0xFF2
 13091                           postinc0	equ	0xFEE
 13092                           wreg	equ	0xFE8
 13093                           indf1	equ	0xFE7
 13094                           postinc1	equ	0xFE6
 13095                           postdec1	equ	0xFE5
 13096                           fsr1h	equ	0xFE2
 13097                           fsr1l	equ	0xFE1
 13098                           indf2	equ	0xFDF
 13099                           postinc2	equ	0xFDE
 13100                           postdec2	equ	0xFDD
 13101                           fsr2h	equ	0xFDA
 13102                           fsr2l	equ	0xFD9
 13103                           status	equ	0xFD8
 13104                           
 13105 ;; *************** function _ASLB_ADCReferenceVoltage *****************
 13106 ;; Defined at:
 13107 ;;		line 512 in file "HX_ASL_BORON.c"
 13108 ;; Parameters:    Size  Location     Type
 13109 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 13110 ;;		 -> hx_mainData(61), 
 13111 ;; Auto vars:     Size  Location     Type
 13112 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 13113 ;;  rx_index        1    4[BANK0 ] unsigned char 
 13114 ;; Return value:  Size  Location     Type
 13115 ;;                  1    wreg      void 
 13116 ;; Registers used:
 13117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13118 ;; Tracked objects:
 13119 ;;		On entry : 0/0
 13120 ;;		On exit  : 0/0
 13121 ;;		Unchanged: 0/0
 13122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13123 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13124 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13126 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13127 ;;Total ram usage:       74 bytes
 13128 ;; Hardware stack levels used:    1
 13129 ;; Hardware stack levels required when called:    8
 13130 ;; This function calls:
 13131 ;;		_setupCmdReadbackPkt
 13132 ;; This function is called by:
 13133 ;;		_write_ASLBoron_test
 13134 ;; This function uses a non-reentrant model
 13135 ;;
 13136                           
 13137                           	psect	text43
 13138  003D86                     __ptext43:
 13139                           	opt stack 0
 13140  003D86                     _ASLB_ADCReferenceVoltage:
 13141                           	opt stack 20
 13142                           
 13143                           ;HX_ASL_BORON.c: 521: uint8_t rx_index = 0;
 13144                           
 13145                           ; BSR set to: 0
 13146                           ;incstack = 0
 13147  003D86  0E00               	movlw	0
 13148  003D88  0100               	movlb	0	; () banked
 13149  003D8A  6F64               	movwf	ASLB_ADCReferenceVoltage@rx_index& (0+255),b
 13150                           
 13151                           ; BSR set to: 0
 13152                           ;HX_ASL_BORON.c: 524: LATCH_ADC_DATA |= 0x0001;
 13153  003D8C  0105               	movlb	5	; () banked
 13154  003D8E  81D9               	bsf	_LATCH_ADC_DATA& (0+255),0,b
 13155                           
 13156                           ; BSR set to: 5
 13157                           ;HX_ASL_BORON.c: 525: LATCH_ADC_DATA &= 0xFFF1;
 13158  003D90  0EF1               	movlw	241
 13159  003D92  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 13160  003D94  0EFF               	movlw	255
 13161  003D96  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 13162  003D98  0E00               	movlw	0
 13163  003D9A  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 13164  003D9C  0E00               	movlw	0
 13165  003D9E  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 13166                           
 13167                           ; BSR set to: 5
 13168                           ;HX_ASL_BORON.c: 527: txRxPkt cmdReadbackPkt;
 13169                           ;HX_ASL_BORON.c: 528: setupCmdReadbackPkt(&cmdReadbackPkt);
 13170  003DA0  0E65               	movlw	low ASLB_ADCReferenceVoltage@cmdReadbackPkt
 13171  003DA2  0100               	movlb	0	; () banked
 13172  003DA4  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 13173  003DA6  0E00               	movlw	high ASLB_ADCReferenceVoltage@cmdReadbackPkt
 13174  003DA8  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 13175  003DAA  EC03  F01E         	call	_setupCmdReadbackPkt	;wreg free
 13176  003DAE  0012               	return		;funcret
 13177  003DB0                     __end_of_ASLB_ADCReferenceVoltage:
 13178                           	opt stack 0
 13179                           tblptru	equ	0xFF8
 13180                           tblptrh	equ	0xFF7
 13181                           tblptrl	equ	0xFF6
 13182                           tablat	equ	0xFF5
 13183                           prodh	equ	0xFF4
 13184                           prodl	equ	0xFF3
 13185                           intcon	equ	0xFF2
 13186                           postinc0	equ	0xFEE
 13187                           wreg	equ	0xFE8
 13188                           indf1	equ	0xFE7
 13189                           postinc1	equ	0xFE6
 13190                           postdec1	equ	0xFE5
 13191                           fsr1h	equ	0xFE2
 13192                           fsr1l	equ	0xFE1
 13193                           indf2	equ	0xFDF
 13194                           postinc2	equ	0xFDE
 13195                           postdec2	equ	0xFDD
 13196                           fsr2h	equ	0xFDA
 13197                           fsr2l	equ	0xFD9
 13198                           status	equ	0xFD8
 13199                           
 13200 ;; *************** function _setupCmdReadbackPkt *****************
 13201 ;; Defined at:
 13202 ;;		line 1201 in file "HX_ASL_BORON.c"
 13203 ;; Parameters:    Size  Location     Type
 13204 ;;  pkt             2    0[BANK0 ] PTR struct TxRxPacket
 13205 ;;		 -> checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkA
      +ndSendLatchData@readback_adc_mux_pkt(71), checkAndSendLatchData@readback_adc_pkt(71), 
 13206 ;;		 -> checkAndSendLatchData@readback_cmos_pkt(71), checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@
      +readback_varactor_dac_pkt(71), checkAndSendLatchData@readback_heat_dac_pkt(71), 
 13207 ;;		 -> checkAndSendLatchData@readback_oven_pkt(71), checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchDat
      +a@readback_osc2_pkt(71), checkAndSendLatchData@readback_osc1_pkt(71), 
 13208 ;;		 -> checkAndSendLatchData@readback_osc0_pkt(71), ASLB_VaricapBiasSteering@cmdReadbackPkt(71), ASLB_ExternalReference
      +Voltage@cmdReadbackPkt(71), ASLB_OscillatorRegulatorVoltage@cmdReadbackPkt(71), 
 13209 ;;		 -> ASLB_MuxOpenCircuit@cmdReadbackPkt(71), ASLB_ZTCReferenceCurrent@cmdReadbackPkt(71), ASLB_DigitalRegulatorVoltag
      +e@cmdReadbackPkt(71), ASLB_CurrentLimitDACVoltage@cmdReadbackPkt(71), 
 13210 ;;		 -> ASLB_TempSetDACVoltage@cmdReadbackPkt(71), ASLB_VaricapDACVoltage@cmdReadbackPkt(71), ASLB_DACReferenceVoltage@c
      +mdReadbackPkt(71), ASLB_MuxReadingVDD@cmdReadbackPkt(71), 
 13211 ;;		 -> ASLB_InternalTempSensor@cmdReadbackPkt(71), ASLB_HeaterFBSignals@cmdReadbackPkt(71), ASLB_ADCReferenceVoltage@cm
      +dReadbackPkt(71), ASLB_CTHERM@cmdReadbackPkt(71), 
 13212 ;;		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
 13213 ;; Auto vars:     Size  Location     Type
 13214 ;;		None
 13215 ;; Return value:  Size  Location     Type
 13216 ;;                  1    wreg      void 
 13217 ;; Registers used:
 13218 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13219 ;; Tracked objects:
 13220 ;;		On entry : 0/0
 13221 ;;		On exit  : 0/0
 13222 ;;		Unchanged: 0/0
 13223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13224 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13228 ;;Total ram usage:        2 bytes
 13229 ;; Hardware stack levels used:    1
 13230 ;; Hardware stack levels required when called:    7
 13231 ;; This function calls:
 13232 ;;		Nothing
 13233 ;; This function is called by:
 13234 ;;		_ASLB_HeaterFunctionality
 13235 ;;		_ASLB_AnalogMuxReadingSetup
 13236 ;;		_ASLB_CTHERM
 13237 ;;		_ASLB_ADCReferenceVoltage
 13238 ;;		_ASLB_HeaterFBSignals
 13239 ;;		_ASLB_InternalTempSensor
 13240 ;;		_ASLB_MuxReadingVDD
 13241 ;;		_ASLB_DACReferenceVoltage
 13242 ;;		_ASLB_VaricapDACVoltage
 13243 ;;		_ASLB_TempSetDACVoltage
 13244 ;;		_ASLB_CurrentLimitDACVoltage
 13245 ;;		_ASLB_DigitalRegulatorVoltage
 13246 ;;		_ASLB_ZTCReferenceCurrent
 13247 ;;		_ASLB_MuxOpenCircuit
 13248 ;;		_ASLB_OscillatorRegulatorVoltage
 13249 ;;		_ASLB_ExternalReferenceVoltage
 13250 ;;		_ASLB_VaricapBiasSteering
 13251 ;;		_checkAndSendLatchData
 13252 ;; This function uses a non-reentrant model
 13253 ;;
 13254                           
 13255                           	psect	text44
 13256  003C06                     __ptext44:
 13257                           	opt stack 0
 13258  003C06                     _setupCmdReadbackPkt:
 13259                           	opt stack 20
 13260                           
 13261                           ;HX_ASL_BORON.c: 1204: pkt->txOrRx = 1;
 13262                           
 13263                           ;incstack = 0
 13264  003C06  C060  FFD9         	movff	setupCmdReadbackPkt@pkt,fsr2l
 13265  003C0A  C061  FFDA         	movff	setupCmdReadbackPkt@pkt+1,fsr2h
 13266  003C0E  0E01               	movlw	1
 13267  003C10  6EDF               	movwf	indf2,c
 13268                           
 13269                           ;HX_ASL_BORON.c: 1205: pkt->slaveAddr = 0x5A;
 13270  003C12  0100               	movlb	0	; () banked
 13271  003C14  EE20 F001          	lfsr	2,1
 13272  003C18  5160               	movf	setupCmdReadbackPkt@pkt& (0+255),w,b
 13273  003C1A  26D9               	addwf	fsr2l,f,c
 13274  003C1C  5161               	movf	(setupCmdReadbackPkt@pkt+1)& (0+255),w,b
 13275  003C1E  22DA               	addwfc	fsr2h,f,c
 13276  003C20  0E5A               	movlw	90
 13277  003C22  6EDE               	movwf	postinc2,c
 13278  003C24  0E00               	movlw	0
 13279  003C26  6EDD               	movwf	postdec2,c
 13280                           
 13281                           ; BSR set to: 0
 13282                           ;HX_ASL_BORON.c: 1206: pkt->numOfBytes = 3;
 13283  003C28  EE20 F043          	lfsr	2,67
 13284  003C2C  5160               	movf	setupCmdReadbackPkt@pkt& (0+255),w,b
 13285  003C2E  26D9               	addwf	fsr2l,f,c
 13286  003C30  5161               	movf	(setupCmdReadbackPkt@pkt+1)& (0+255),w,b
 13287  003C32  22DA               	addwfc	fsr2h,f,c
 13288  003C34  0E03               	movlw	3
 13289  003C36  6EDF               	movwf	indf2,c
 13290                           
 13291                           ; BSR set to: 0
 13292  003C38  0012               	return		;funcret
 13293  003C3A                     __end_of_setupCmdReadbackPkt:
 13294                           	opt stack 0
 13295                           tblptru	equ	0xFF8
 13296                           tblptrh	equ	0xFF7
 13297                           tblptrl	equ	0xFF6
 13298                           tablat	equ	0xFF5
 13299                           prodh	equ	0xFF4
 13300                           prodl	equ	0xFF3
 13301                           intcon	equ	0xFF2
 13302                           postinc0	equ	0xFEE
 13303                           wreg	equ	0xFE8
 13304                           indf1	equ	0xFE7
 13305                           postinc1	equ	0xFE6
 13306                           postdec1	equ	0xFE5
 13307                           fsr1h	equ	0xFE2
 13308                           fsr1l	equ	0xFE1
 13309                           indf2	equ	0xFDF
 13310                           postinc2	equ	0xFDE
 13311                           postdec2	equ	0xFDD
 13312                           fsr2h	equ	0xFDA
 13313                           fsr2l	equ	0xFD9
 13314                           status	equ	0xFD8
 13315                           
 13316 ;; *************** function _ASLB_ADC *****************
 13317 ;; Defined at:
 13318 ;;		line 856 in file "HX_ASL_BORON.c"
 13319 ;; Parameters:    Size  Location     Type
 13320 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 13321 ;;		 -> hx_mainData(61), 
 13322 ;; Auto vars:     Size  Location     Type
 13323 ;;  rx_index        1    2[BANK0 ] unsigned char 
 13324 ;; Return value:  Size  Location     Type
 13325 ;;                  1    wreg      void 
 13326 ;; Registers used:
 13327 ;;		wreg, status,2
 13328 ;; Tracked objects:
 13329 ;;		On entry : 0/0
 13330 ;;		On exit  : 0/0
 13331 ;;		Unchanged: 0/0
 13332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13333 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13336 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13337 ;;Total ram usage:        3 bytes
 13338 ;; Hardware stack levels used:    1
 13339 ;; Hardware stack levels required when called:    7
 13340 ;; This function calls:
 13341 ;;		Nothing
 13342 ;; This function is called by:
 13343 ;;		_write_ASLBoron_test
 13344 ;; This function uses a non-reentrant model
 13345 ;;
 13346                           
 13347                           	psect	text45
 13348  004072                     __ptext45:
 13349                           	opt stack 0
 13350  004072                     _ASLB_ADC:
 13351                           	opt stack 21
 13352                           
 13353                           ;HX_ASL_BORON.c: 869: uint8_t rx_index = 0;
 13354                           
 13355                           ; BSR set to: 0
 13356                           ;incstack = 0
 13357  004072  0E00               	movlw	0
 13358  004074  0100               	movlb	0	; () banked
 13359  004076  6F62               	movwf	ASLB_ADC@rx_index& (0+255),b
 13360                           
 13361                           ; BSR set to: 0
 13362  004078  0012               	return		;funcret
 13363  00407A                     __end_of_ASLB_ADC:
 13364                           	opt stack 0
 13365                           tblptru	equ	0xFF8
 13366                           tblptrh	equ	0xFF7
 13367                           tblptrl	equ	0xFF6
 13368                           tablat	equ	0xFF5
 13369                           prodh	equ	0xFF4
 13370                           prodl	equ	0xFF3
 13371                           intcon	equ	0xFF2
 13372                           postinc0	equ	0xFEE
 13373                           wreg	equ	0xFE8
 13374                           indf1	equ	0xFE7
 13375                           postinc1	equ	0xFE6
 13376                           postdec1	equ	0xFE5
 13377                           fsr1h	equ	0xFE2
 13378                           fsr1l	equ	0xFE1
 13379                           indf2	equ	0xFDF
 13380                           postinc2	equ	0xFDE
 13381                           postdec2	equ	0xFDD
 13382                           fsr2h	equ	0xFDA
 13383                           fsr2l	equ	0xFD9
 13384                           status	equ	0xFD8
 13385                           
 13386 ;; *************** function _write_ASLBoron_debug *****************
 13387 ;; Defined at:
 13388 ;;		line 277 in file "HX_ASL_BORON.c"
 13389 ;; Parameters:    Size  Location     Type
 13390 ;;  run_test        1    wreg     unsigned char 
 13391 ;;  run_cnfg        1  104[BANK0 ] unsigned char 
 13392 ;;  rxBuffer        2  105[BANK0 ] PTR unsigned char 
 13393 ;;		 -> hx_mainData(61), 
 13394 ;; Auto vars:     Size  Location     Type
 13395 ;;  run_test        1  107[BANK0 ] unsigned char 
 13396 ;; Return value:  Size  Location     Type
 13397 ;;                  1    wreg      void 
 13398 ;; Registers used:
 13399 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13400 ;; Tracked objects:
 13401 ;;		On entry : 0/0
 13402 ;;		On exit  : 0/0
 13403 ;;		Unchanged: 0/0
 13404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13405 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13408 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13409 ;;Total ram usage:        4 bytes
 13410 ;; Hardware stack levels used:    1
 13411 ;; Hardware stack levels required when called:   11
 13412 ;; This function calls:
 13413 ;;		_ASLB_debug0
 13414 ;;		_ASLB_debug1
 13415 ;;		_ASLB_debug2
 13416 ;;		_ASLB_debug3
 13417 ;;		_cycleBoronPower
 13418 ;;		_findMaxI2CSpeed
 13419 ;;		_resetLATCHData
 13420 ;;		_resetSFRData
 13421 ;;		_setCommI2C
 13422 ;;		_setCommSingleWire
 13423 ;; This function is called by:
 13424 ;;		_run_ASLBoron
 13425 ;; This function uses a non-reentrant model
 13426 ;;
 13427                           
 13428                           	psect	text46
 13429  002830                     __ptext46:
 13430                           	opt stack 0
 13431  002830                     _write_ASLBoron_debug:
 13432                           	opt stack 18
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;incstack = 0
 13436                           ;write_ASLBoron_debug@run_test stored from wreg
 13437  002830  0100               	movlb	0	; () banked
 13438  002832  6FCB               	movwf	write_ASLBoron_debug@run_test& (0+255),b
 13439                           
 13440                           ;HX_ASL_BORON.c: 279: switch(run_test)
 13441  002834  D081               	goto	l1099
 13442  002836                     
 13443                           ;HX_ASL_BORON.c: 282: cycleBoronPower();
 13444  002836  EC88  F01F         	call	_cycleBoronPower	;wreg free
 13445                           
 13446                           ;HX_ASL_BORON.c: 283: break;
 13447  00283A  0012               	return	
 13448  00283C                     
 13449                           ;HX_ASL_BORON.c: 286: ASLB_debug0(&rxBuffer[1]);
 13450  00283C  0E01               	movlw	1
 13451  00283E  0100               	movlb	0	; () banked
 13452  002840  25C9               	addwf	write_ASLBoron_debug@rxBuffer& (0+255),w,b
 13453  002842  6F60               	movwf	ASLB_debug0@rxBuffer& (0+255),b
 13454  002844  0E00               	movlw	0
 13455  002846  21CA               	addwfc	(write_ASLBoron_debug@rxBuffer+1)& (0+255),w,b
 13456  002848  6F61               	movwf	(ASLB_debug0@rxBuffer+1)& (0+255),b
 13457  00284A  EC27  F01F         	call	_ASLB_debug0	;wreg free
 13458                           
 13459                           ;HX_ASL_BORON.c: 287: rxBuffer[0] = 0x10;
 13460  00284E  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13461  002852  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13462  002856  0E10               	movlw	16
 13463  002858  6EDF               	movwf	indf2,c
 13464                           
 13465                           ;HX_ASL_BORON.c: 288: break;
 13466  00285A  0012               	return	
 13467  00285C                     
 13468                           ;HX_ASL_BORON.c: 291: ASLB_debug1(&rxBuffer[1]);
 13469  00285C  0E01               	movlw	1
 13470  00285E  0100               	movlb	0	; () banked
 13471  002860  25C9               	addwf	write_ASLBoron_debug@rxBuffer& (0+255),w,b
 13472  002862  6F72               	movwf	ASLB_debug1@rxBuffer& (0+255),b
 13473  002864  0E00               	movlw	0
 13474  002866  21CA               	addwfc	(write_ASLBoron_debug@rxBuffer+1)& (0+255),w,b
 13475  002868  6F73               	movwf	(ASLB_debug1@rxBuffer+1)& (0+255),b
 13476  00286A  EC7C  F010         	call	_ASLB_debug1	;wreg free
 13477                           
 13478                           ;HX_ASL_BORON.c: 292: rxBuffer[0] = 0x10;
 13479  00286E  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13480  002872  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13481  002876  0E10               	movlw	16
 13482  002878  6EDF               	movwf	indf2,c
 13483                           
 13484                           ;HX_ASL_BORON.c: 293: break;
 13485  00287A  0012               	return	
 13486  00287C                     
 13487                           ;HX_ASL_BORON.c: 296: ASLB_debug2(&rxBuffer[1]);
 13488  00287C  0E01               	movlw	1
 13489  00287E  0100               	movlb	0	; () banked
 13490  002880  25C9               	addwf	write_ASLBoron_debug@rxBuffer& (0+255),w,b
 13491  002882  6F78               	movwf	ASLB_debug2@rxBuffer& (0+255),b
 13492  002884  0E00               	movlw	0
 13493  002886  21CA               	addwfc	(write_ASLBoron_debug@rxBuffer+1)& (0+255),w,b
 13494  002888  6F79               	movwf	(ASLB_debug2@rxBuffer+1)& (0+255),b
 13495  00288A  EC4C  F01D         	call	_ASLB_debug2	;wreg free
 13496                           
 13497                           ;HX_ASL_BORON.c: 297: rxBuffer[0] = 0x10;
 13498  00288E  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13499  002892  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13500  002896  0E10               	movlw	16
 13501  002898  6EDF               	movwf	indf2,c
 13502                           
 13503                           ;HX_ASL_BORON.c: 298: break;
 13504  00289A  0012               	return	
 13505  00289C                     
 13506                           ;HX_ASL_BORON.c: 301: ASLB_debug3(run_cnfg, &rxBuffer[1]);
 13507  00289C  0E01               	movlw	1
 13508  00289E  0100               	movlb	0	; () banked
 13509  0028A0  25C9               	addwf	write_ASLBoron_debug@rxBuffer& (0+255),w,b
 13510  0028A2  6F61               	movwf	ASLB_debug3@rxBuffer& (0+255),b
 13511  0028A4  0E00               	movlw	0
 13512  0028A6  21CA               	addwfc	(write_ASLBoron_debug@rxBuffer+1)& (0+255),w,b
 13513  0028A8  6F62               	movwf	(ASLB_debug3@rxBuffer+1)& (0+255),b
 13514  0028AA  51C8               	movf	write_ASLBoron_debug@run_cnfg& (0+255),w,b
 13515  0028AC  EC5D  F01A         	call	_ASLB_debug3
 13516                           
 13517                           ;HX_ASL_BORON.c: 302: rxBuffer[0] = 0x10;
 13518  0028B0  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13519  0028B4  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13520  0028B8  0E10               	movlw	16
 13521  0028BA  6EDF               	movwf	indf2,c
 13522                           
 13523                           ;HX_ASL_BORON.c: 303: break;
 13524  0028BC  0012               	return	
 13525  0028BE                     
 13526                           ;HX_ASL_BORON.c: 306: resetSFRData();
 13527  0028BE  EC7B  F017         	call	_resetSFRData	;wreg free
 13528                           
 13529                           ;HX_ASL_BORON.c: 307: rxBuffer[0] = 0x10;
 13530  0028C2  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13531  0028C6  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13532  0028CA  0E10               	movlw	16
 13533  0028CC  6EDF               	movwf	indf2,c
 13534                           
 13535                           ;HX_ASL_BORON.c: 308: break;
 13536  0028CE  0012               	return	
 13537  0028D0                     
 13538                           ;HX_ASL_BORON.c: 311: resetLATCHData();
 13539  0028D0  ECBD  F014         	call	_resetLATCHData	;wreg free
 13540                           
 13541                           ;HX_ASL_BORON.c: 312: rxBuffer[0] = 0x10;
 13542  0028D4  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13543  0028D8  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13544  0028DC  0E10               	movlw	16
 13545  0028DE  6EDF               	movwf	indf2,c
 13546                           
 13547                           ;HX_ASL_BORON.c: 313: break;
 13548  0028E0  0012               	return	
 13549  0028E2                     
 13550                           ;HX_ASL_BORON.c: 316: setCommSingleWire();
 13551  0028E2  EC3D  F020         	call	_setCommSingleWire	;wreg free
 13552                           
 13553                           ;HX_ASL_BORON.c: 317: rxBuffer[0] = 0x10;
 13554  0028E6  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13555  0028EA  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13556  0028EE  0E10               	movlw	16
 13557  0028F0  6EDF               	movwf	indf2,c
 13558                           
 13559                           ;HX_ASL_BORON.c: 318: break;
 13560  0028F2  0012               	return	
 13561  0028F4                     
 13562                           ;HX_ASL_BORON.c: 321: setCommI2C();
 13563  0028F4  EC40  F020         	call	_setCommI2C	;wreg free
 13564                           
 13565                           ;HX_ASL_BORON.c: 322: rxBuffer[0] = 0x10;
 13566  0028F8  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13567  0028FC  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13568  002900  0E10               	movlw	16
 13569  002902  6EDF               	movwf	indf2,c
 13570                           
 13571                           ;HX_ASL_BORON.c: 323: break;
 13572  002904  0012               	return	
 13573  002906                     
 13574                           ;HX_ASL_BORON.c: 326: findMaxI2CSpeed(&rxBuffer[1]);
 13575  002906  0E01               	movlw	1
 13576  002908  0100               	movlb	0	; () banked
 13577  00290A  25C9               	addwf	write_ASLBoron_debug@rxBuffer& (0+255),w,b
 13578  00290C  6F75               	movwf	findMaxI2CSpeed@rxBuffer& (0+255),b
 13579  00290E  0E00               	movlw	0
 13580  002910  21CA               	addwfc	(write_ASLBoron_debug@rxBuffer+1)& (0+255),w,b
 13581  002912  6F76               	movwf	(findMaxI2CSpeed@rxBuffer+1)& (0+255),b
 13582  002914  ECFB  F011         	call	_findMaxI2CSpeed	;wreg free
 13583                           
 13584                           ;HX_ASL_BORON.c: 327: rxBuffer[0] = 0x10;
 13585  002918  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13586  00291C  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13587  002920  0E10               	movlw	16
 13588  002922  6EDF               	movwf	indf2,c
 13589                           
 13590                           ;HX_ASL_BORON.c: 328: break;
 13591  002924  0012               	return	
 13592  002926                     
 13593                           ;HX_ASL_BORON.c: 336: hx_state = 0x40;
 13594  002926  0E40               	movlw	64
 13595  002928  6E45               	movwf	_hx_state,c
 13596                           
 13597                           ;HX_ASL_BORON.c: 337: rxBuffer[0] = 0x00;
 13598  00292A  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13599  00292E  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13600  002932  0E00               	movlw	0
 13601  002934  6EDF               	movwf	indf2,c
 13602                           
 13603                           ;HX_ASL_BORON.c: 339: }
 13604                           
 13605                           ;HX_ASL_BORON.c: 338: break;
 13606  002936  0012               	return	
 13607  002938                     l1099:
 13608  002938  0100               	movlb	0	; () banked
 13609  00293A  51CB               	movf	write_ASLBoron_debug@run_test& (0+255),w,b
 13610                           
 13611                           ; Switch size 1, requested type "space"
 13612                           ; Number of cases is 10, Range of values is 0 to 9
 13613                           ; switch strategies available:
 13614                           ; Name         Instructions Cycles
 13615                           ; simple_byte           31    16 (average)
 13616                           ;	Chosen strategy is simple_byte
 13617  00293C  0A00               	xorlw	0	; case 0
 13618  00293E  B4D8               	btfsc	status,2,c
 13619  002940  D77A               	goto	l1100
 13620  002942  0A01               	xorlw	1	; case 1
 13621  002944  B4D8               	btfsc	status,2,c
 13622  002946  D77A               	goto	l1102
 13623  002948  0A03               	xorlw	3	; case 2
 13624  00294A  B4D8               	btfsc	status,2,c
 13625  00294C  D787               	goto	l1103
 13626  00294E  0A01               	xorlw	1	; case 3
 13627  002950  B4D8               	btfsc	status,2,c
 13628  002952  D794               	goto	l1104
 13629  002954  0A07               	xorlw	7	; case 4
 13630  002956  B4D8               	btfsc	status,2,c
 13631  002958  D7A1               	goto	l1105
 13632  00295A  0A01               	xorlw	1	; case 5
 13633  00295C  B4D8               	btfsc	status,2,c
 13634  00295E  D7AF               	goto	l1106
 13635  002960  0A03               	xorlw	3	; case 6
 13636  002962  B4D8               	btfsc	status,2,c
 13637  002964  D7B5               	goto	l1107
 13638  002966  0A01               	xorlw	1	; case 7
 13639  002968  B4D8               	btfsc	status,2,c
 13640  00296A  D7BB               	goto	l1108
 13641  00296C  0A0F               	xorlw	15	; case 8
 13642  00296E  B4D8               	btfsc	status,2,c
 13643  002970  D7C1               	goto	l1109
 13644  002972  0A01               	xorlw	1	; case 9
 13645  002974  B4D8               	btfsc	status,2,c
 13646  002976  D7C7               	goto	l1110
 13647  002978  D7D6               	goto	l1111
 13648  00297A                     __end_of_write_ASLBoron_debug:
 13649                           	opt stack 0
 13650                           tblptru	equ	0xFF8
 13651                           tblptrh	equ	0xFF7
 13652                           tblptrl	equ	0xFF6
 13653                           tablat	equ	0xFF5
 13654                           prodh	equ	0xFF4
 13655                           prodl	equ	0xFF3
 13656                           intcon	equ	0xFF2
 13657                           postinc0	equ	0xFEE
 13658                           wreg	equ	0xFE8
 13659                           indf1	equ	0xFE7
 13660                           postinc1	equ	0xFE6
 13661                           postdec1	equ	0xFE5
 13662                           fsr1h	equ	0xFE2
 13663                           fsr1l	equ	0xFE1
 13664                           indf2	equ	0xFDF
 13665                           postinc2	equ	0xFDE
 13666                           postdec2	equ	0xFDD
 13667                           fsr2h	equ	0xFDA
 13668                           fsr2l	equ	0xFD9
 13669                           status	equ	0xFD8
 13670                           
 13671 ;; *************** function _setCommSingleWire *****************
 13672 ;; Defined at:
 13673 ;;		line 1010 in file "HX_ASL_BORON.c"
 13674 ;; Parameters:    Size  Location     Type
 13675 ;;		None
 13676 ;; Auto vars:     Size  Location     Type
 13677 ;;		None
 13678 ;; Return value:  Size  Location     Type
 13679 ;;                  1    wreg      void 
 13680 ;; Registers used:
 13681 ;;		wreg, status,2
 13682 ;; Tracked objects:
 13683 ;;		On entry : 0/0
 13684 ;;		On exit  : 0/0
 13685 ;;		Unchanged: 0/0
 13686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13691 ;;Total ram usage:        0 bytes
 13692 ;; Hardware stack levels used:    1
 13693 ;; Hardware stack levels required when called:    7
 13694 ;; This function calls:
 13695 ;;		Nothing
 13696 ;; This function is called by:
 13697 ;;		_write_ASLBoron_debug
 13698 ;; This function uses a non-reentrant model
 13699 ;;
 13700                           
 13701                           	psect	text47
 13702  00407A                     __ptext47:
 13703                           	opt stack 0
 13704  00407A                     _setCommSingleWire:
 13705                           	opt stack 21
 13706                           
 13707                           ;HX_ASL_BORON.c: 1012: BORON_COMM_TYPE = 1;
 13708                           
 13709                           ;incstack = 0
 13710  00407A  0E01               	movlw	1
 13711  00407C  6E30               	movwf	_BORON_COMM_TYPE,c
 13712  00407E  0012               	return		;funcret
 13713  004080                     __end_of_setCommSingleWire:
 13714                           	opt stack 0
 13715                           tblptru	equ	0xFF8
 13716                           tblptrh	equ	0xFF7
 13717                           tblptrl	equ	0xFF6
 13718                           tablat	equ	0xFF5
 13719                           prodh	equ	0xFF4
 13720                           prodl	equ	0xFF3
 13721                           intcon	equ	0xFF2
 13722                           postinc0	equ	0xFEE
 13723                           wreg	equ	0xFE8
 13724                           indf1	equ	0xFE7
 13725                           postinc1	equ	0xFE6
 13726                           postdec1	equ	0xFE5
 13727                           fsr1h	equ	0xFE2
 13728                           fsr1l	equ	0xFE1
 13729                           indf2	equ	0xFDF
 13730                           postinc2	equ	0xFDE
 13731                           postdec2	equ	0xFDD
 13732                           fsr2h	equ	0xFDA
 13733                           fsr2l	equ	0xFD9
 13734                           status	equ	0xFD8
 13735                           
 13736 ;; *************** function _setCommI2C *****************
 13737 ;; Defined at:
 13738 ;;		line 1015 in file "HX_ASL_BORON.c"
 13739 ;; Parameters:    Size  Location     Type
 13740 ;;		None
 13741 ;; Auto vars:     Size  Location     Type
 13742 ;;		None
 13743 ;; Return value:  Size  Location     Type
 13744 ;;                  1    wreg      void 
 13745 ;; Registers used:
 13746 ;;		wreg, status,2
 13747 ;; Tracked objects:
 13748 ;;		On entry : 0/0
 13749 ;;		On exit  : 0/0
 13750 ;;		Unchanged: 0/0
 13751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13756 ;;Total ram usage:        0 bytes
 13757 ;; Hardware stack levels used:    1
 13758 ;; Hardware stack levels required when called:    7
 13759 ;; This function calls:
 13760 ;;		Nothing
 13761 ;; This function is called by:
 13762 ;;		_write_ASLBoron_debug
 13763 ;; This function uses a non-reentrant model
 13764 ;;
 13765                           
 13766                           	psect	text48
 13767  004080                     __ptext48:
 13768                           	opt stack 0
 13769  004080                     _setCommI2C:
 13770                           	opt stack 21
 13771                           
 13772                           ;HX_ASL_BORON.c: 1017: BORON_COMM_TYPE = 0;
 13773                           
 13774                           ;incstack = 0
 13775  004080  0E00               	movlw	0
 13776  004082  6E30               	movwf	_BORON_COMM_TYPE,c
 13777  004084  0012               	return		;funcret
 13778  004086                     __end_of_setCommI2C:
 13779                           	opt stack 0
 13780                           tblptru	equ	0xFF8
 13781                           tblptrh	equ	0xFF7
 13782                           tblptrl	equ	0xFF6
 13783                           tablat	equ	0xFF5
 13784                           prodh	equ	0xFF4
 13785                           prodl	equ	0xFF3
 13786                           intcon	equ	0xFF2
 13787                           postinc0	equ	0xFEE
 13788                           wreg	equ	0xFE8
 13789                           indf1	equ	0xFE7
 13790                           postinc1	equ	0xFE6
 13791                           postdec1	equ	0xFE5
 13792                           fsr1h	equ	0xFE2
 13793                           fsr1l	equ	0xFE1
 13794                           indf2	equ	0xFDF
 13795                           postinc2	equ	0xFDE
 13796                           postdec2	equ	0xFDD
 13797                           fsr2h	equ	0xFDA
 13798                           fsr2l	equ	0xFD9
 13799                           status	equ	0xFD8
 13800                           
 13801 ;; *************** function _resetSFRData *****************
 13802 ;; Defined at:
 13803 ;;		line 1481 in file "HX_ASL_BORON.c"
 13804 ;; Parameters:    Size  Location     Type
 13805 ;;		None
 13806 ;; Auto vars:     Size  Location     Type
 13807 ;;		None
 13808 ;; Return value:  Size  Location     Type
 13809 ;;                  1    wreg      void 
 13810 ;; Registers used:
 13811 ;;		wreg, status,2
 13812 ;; Tracked objects:
 13813 ;;		On entry : 0/0
 13814 ;;		On exit  : 0/0
 13815 ;;		Unchanged: 0/0
 13816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13821 ;;Total ram usage:        0 bytes
 13822 ;; Hardware stack levels used:    1
 13823 ;; Hardware stack levels required when called:    7
 13824 ;; This function calls:
 13825 ;;		Nothing
 13826 ;; This function is called by:
 13827 ;;		_write_ASLBoron_debug
 13828 ;; This function uses a non-reentrant model
 13829 ;;
 13830                           
 13831                           	psect	text49
 13832  002EF6                     __ptext49:
 13833                           	opt stack 0
 13834  002EF6                     _resetSFRData:
 13835                           	opt stack 21
 13836                           
 13837                           ;HX_ASL_BORON.c: 1483: SFR_P0_DATA = 0x00;
 13838                           
 13839                           ;incstack = 0
 13840  002EF6  0E00               	movlw	0
 13841  002EF8  0102               	movlb	2	; () banked
 13842  002EFA  6FFC               	movwf	_SFR_P0_DATA& (0+255),b
 13843                           
 13844                           ;HX_ASL_BORON.c: 1484: SFR_P1_DATA = 0x00;
 13845  002EFC  0E00               	movlw	0
 13846  002EFE  6FFB               	movwf	_SFR_P1_DATA& (0+255),b
 13847                           
 13848                           ;HX_ASL_BORON.c: 1485: SFR_OSC0_DATA = 0x00;
 13849  002F00  0E00               	movlw	0
 13850  002F02  6FFA               	movwf	_SFR_OSC0_DATA& (0+255),b
 13851                           
 13852                           ;HX_ASL_BORON.c: 1486: SFR_OSC1_DATA = 0x00;
 13853  002F04  0E00               	movlw	0
 13854  002F06  6FF9               	movwf	_SFR_OSC1_DATA& (0+255),b
 13855                           
 13856                           ;HX_ASL_BORON.c: 1487: SFR_OSC2_DATA = 0x00;
 13857  002F08  0E00               	movlw	0
 13858  002F0A  6FF8               	movwf	_SFR_OSC2_DATA& (0+255),b
 13859                           
 13860                           ;HX_ASL_BORON.c: 1488: SFR_ANALOG_DATA = 0x00;
 13861  002F0C  0E00               	movlw	0
 13862  002F0E  6FF7               	movwf	_SFR_ANALOG_DATA& (0+255),b
 13863                           
 13864                           ;HX_ASL_BORON.c: 1489: SFR_OVEN_DATA = 0x00;
 13865  002F10  0E00               	movlw	0
 13866  002F12  6FF6               	movwf	_SFR_OVEN_DATA& (0+255),b
 13867                           
 13868                           ;HX_ASL_BORON.c: 1490: SFR_HEAT_DATA = 0x00;
 13869  002F14  0E00               	movlw	0
 13870  002F16  6FF5               	movwf	_SFR_HEAT_DATA& (0+255),b
 13871                           
 13872                           ;HX_ASL_BORON.c: 1491: SFR_VAR_DATA = 0x00;
 13873  002F18  0E00               	movlw	0
 13874  002F1A  6FF4               	movwf	_SFR_VAR_DATA& (0+255),b
 13875                           
 13876                           ;HX_ASL_BORON.c: 1492: SFR_BIAS_DATA = 0x00;
 13877  002F1C  0E00               	movlw	0
 13878  002F1E  6FF3               	movwf	_SFR_BIAS_DATA& (0+255),b
 13879                           
 13880                           ;HX_ASL_BORON.c: 1493: SFR_EXT_DATA = 0x00;
 13881  002F20  0E00               	movlw	0
 13882  002F22  6FF2               	movwf	_SFR_EXT_DATA& (0+255),b
 13883                           
 13884                           ;HX_ASL_BORON.c: 1494: SFR_CMOS_OUT_DATA = 0x00;
 13885  002F24  0E00               	movlw	0
 13886  002F26  6FF1               	movwf	_SFR_CMOS_OUT_DATA& (0+255),b
 13887                           
 13888                           ;HX_ASL_BORON.c: 1495: SFR_OCXO_DIV_DATA = 0x00;
 13889  002F28  0E00               	movlw	0
 13890  002F2A  6FF0               	movwf	_SFR_OCXO_DIV_DATA& (0+255),b
 13891                           
 13892                           ;HX_ASL_BORON.c: 1496: SFR_CLK_SEL_DATA = 0x00;
 13893  002F2C  0E00               	movlw	0
 13894  002F2E  6FEF               	movwf	_SFR_CLK_SEL_DATA& (0+255),b
 13895                           
 13896                           ;HX_ASL_BORON.c: 1497: SFR_ADC_DIV_DATA = 0x00;
 13897  002F30  0E00               	movlw	0
 13898  002F32  6FEE               	movwf	_SFR_ADC_DIV_DATA& (0+255),b
 13899                           
 13900                           ;HX_ASL_BORON.c: 1498: SFR_ADC_MUX_DATA = 0x00;
 13901  002F34  0E00               	movlw	0
 13902  002F36  6FED               	movwf	_SFR_ADC_MUX_DATA& (0+255),b
 13903                           
 13904                           ;HX_ASL_BORON.c: 1499: SFR_ASIC_REV_DATA = 0x00;
 13905  002F38  0E00               	movlw	0
 13906  002F3A  6FEC               	movwf	_SFR_ASIC_REV_DATA& (0+255),b
 13907                           
 13908                           ;HX_ASL_BORON.c: 1500: SFR_OTP_MR_DATA = 0x00;
 13909  002F3C  0E00               	movlw	0
 13910  002F3E  6FEB               	movwf	_SFR_OTP_MR_DATA& (0+255),b
 13911                           
 13912                           ;HX_ASL_BORON.c: 1501: SFR_OTP_MPP_DATA = 0x00;
 13913  002F40  0E00               	movlw	0
 13914  002F42  6FEA               	movwf	_SFR_OTP_MPP_DATA& (0+255),b
 13915                           
 13916                           ;HX_ASL_BORON.c: 1502: SFR_OTP_MRR_LO_DATA = 0x00;
 13917  002F44  0E00               	movlw	0
 13918  002F46  6FE9               	movwf	_SFR_OTP_MRR_LO_DATA& (0+255),b
 13919                           
 13920                           ;HX_ASL_BORON.c: 1503: SFR_OTP_MRR_HI_DATA = 0x00;
 13921  002F48  0E00               	movlw	0
 13922  002F4A  6FE8               	movwf	_SFR_OTP_MRR_HI_DATA& (0+255),b
 13923                           
 13924                           ;HX_ASL_BORON.c: 1504: SFR_OTP_WR_ADDR_HIGH_DATA = 0x00;
 13925  002F4C  0E00               	movlw	0
 13926  002F4E  6FE7               	movwf	_SFR_OTP_WR_ADDR_HIGH_DATA& (0+255),b
 13927                           
 13928                           ;HX_ASL_BORON.c: 1505: SFR_OTP_WR_ADDR_LOW_DATA = 0x00;
 13929  002F50  0E00               	movlw	0
 13930  002F52  6FE6               	movwf	_SFR_OTP_WR_ADDR_LOW_DATA& (0+255),b
 13931                           
 13932                           ;HX_ASL_BORON.c: 1506: SFR_OTP_WR_DATA_DATA = 0x00;
 13933  002F54  0E00               	movlw	0
 13934  002F56  0103               	movlb	3	; () banked
 13935  002F58  6FEB               	movwf	_SFR_OTP_WR_DATA_DATA& (0+255),b
 13936                           
 13937                           ;HX_ASL_BORON.c: 1507: SFR_OTP_DIV_100US_HIGH_DATA = 0x00;
 13938  002F5A  0E00               	movlw	0
 13939  002F5C  6FEA               	movwf	_SFR_OTP_DIV_100US_HIGH_DATA& (0+255),b
 13940                           
 13941                           ;HX_ASL_BORON.c: 1508: SFR_OTP_DIV_100US_LOW_DATA = 0x00;
 13942  002F5E  0E00               	movlw	0
 13943  002F60  6FE9               	movwf	_SFR_OTP_DIV_100US_LOW_DATA& (0+255),b
 13944                           
 13945                           ;HX_ASL_BORON.c: 1509: SFR_OTP_DIV_400US_HIGH_DATA = 0x00;
 13946  002F62  0E00               	movlw	0
 13947  002F64  6FE8               	movwf	_SFR_OTP_DIV_400US_HIGH_DATA& (0+255),b
 13948                           
 13949                           ;HX_ASL_BORON.c: 1510: SFR_OTP_DIV_400US_LOW_DATA = 0x00;
 13950  002F66  0E00               	movlw	0
 13951  002F68  6FE7               	movwf	_SFR_OTP_DIV_400US_LOW_DATA& (0+255),b
 13952                           
 13953                           ;HX_ASL_BORON.c: 1511: SFR_OTP_ST_TIMING_DATA = 0x00;
 13954  002F6A  0E00               	movlw	0
 13955  002F6C  6FE6               	movwf	_SFR_OTP_ST_TIMING_DATA& (0+255),b
 13956                           
 13957                           ;HX_ASL_BORON.c: 1512: SFR_SW_100US_LOW_DATA = 0x00;
 13958  002F6E  0E00               	movlw	0
 13959  002F70  6FE5               	movwf	_SFR_SW_100US_LOW_DATA& (0+255),b
 13960                           
 13961                           ;HX_ASL_BORON.c: 1513: SFR_SW_100US_HIGH_DATA = 0x00;
 13962  002F72  0E00               	movlw	0
 13963  002F74  6FE4               	movwf	_SFR_SW_100US_HIGH_DATA& (0+255),b
 13964                           
 13965                           ;HX_ASL_BORON.c: 1514: SFR_SW_ST_DET_DATA = 0x00;
 13966  002F76  0E00               	movlw	0
 13967  002F78  6FE3               	movwf	_SFR_SW_ST_DET_DATA& (0+255),b
 13968                           
 13969                           ;HX_ASL_BORON.c: 1515: SFR_SW_WR_BIT_DATA = 0x00;
 13970  002F7A  0E00               	movlw	0
 13971  002F7C  6FE2               	movwf	_SFR_SW_WR_BIT_DATA& (0+255),b
 13972                           
 13973                           ;HX_ASL_BORON.c: 1516: SFR_SW_BIT_INT_DATA = 0x00;
 13974  002F7E  0E00               	movlw	0
 13975  002F80  6FE1               	movwf	_SFR_SW_BIT_INT_DATA& (0+255),b
 13976                           
 13977                           ;HX_ASL_BORON.c: 1517: SFR_SW_WR_BYT_DATA = 0x00;
 13978  002F82  0E00               	movlw	0
 13979  002F84  6FE0               	movwf	_SFR_SW_WR_BYT_DATA& (0+255),b
 13980                           
 13981                           ;HX_ASL_BORON.c: 1518: SFR_SW_BYT_INT_DATA = 0x00;
 13982  002F86  0E00               	movlw	0
 13983  002F88  6FDF               	movwf	_SFR_SW_BYT_INT_DATA& (0+255),b
 13984                           
 13985                           ;HX_ASL_BORON.c: 1519: SFR_SW_DET_BIT_DATA = 0x00;
 13986  002F8A  0E00               	movlw	0
 13987  002F8C  6FDE               	movwf	_SFR_SW_DET_BIT_DATA& (0+255),b
 13988                           
 13989                           ;HX_ASL_BORON.c: 1520: SFR_SW_BIT_DATA_DATA = 0x00;
 13990  002F8E  0E00               	movlw	0
 13991  002F90  6FDD               	movwf	_SFR_SW_BIT_DATA_DATA& (0+255),b
 13992                           
 13993                           ;HX_ASL_BORON.c: 1521: SFR_SW_BIT_DATA_ST_DATA = 0x00;
 13994  002F92  0E00               	movlw	0
 13995  002F94  6FDC               	movwf	_SFR_SW_BIT_DATA_ST_DATA& (0+255),b
 13996                           
 13997                           ;HX_ASL_BORON.c: 1522: SFR_SW_STOP_DET_DATA = 0x00;
 13998  002F96  0E00               	movlw	0
 13999  002F98  6FDB               	movwf	_SFR_SW_STOP_DET_DATA& (0+255),b
 14000                           
 14001                           ;HX_ASL_BORON.c: 1523: SFR_SW_STOP_DET_ST_DATA = 0x00;
 14002  002F9A  0E00               	movlw	0
 14003  002F9C  6FDA               	movwf	_SFR_SW_STOP_DET_ST_DATA& (0+255),b
 14004                           
 14005                           ; BSR set to: 3
 14006  002F9E  0012               	return		;funcret
 14007  002FA0                     __end_of_resetSFRData:
 14008                           	opt stack 0
 14009                           tblptru	equ	0xFF8
 14010                           tblptrh	equ	0xFF7
 14011                           tblptrl	equ	0xFF6
 14012                           tablat	equ	0xFF5
 14013                           prodh	equ	0xFF4
 14014                           prodl	equ	0xFF3
 14015                           intcon	equ	0xFF2
 14016                           postinc0	equ	0xFEE
 14017                           wreg	equ	0xFE8
 14018                           indf1	equ	0xFE7
 14019                           postinc1	equ	0xFE6
 14020                           postdec1	equ	0xFE5
 14021                           fsr1h	equ	0xFE2
 14022                           fsr1l	equ	0xFE1
 14023                           indf2	equ	0xFDF
 14024                           postinc2	equ	0xFDE
 14025                           postdec2	equ	0xFDD
 14026                           fsr2h	equ	0xFDA
 14027                           fsr2l	equ	0xFD9
 14028                           status	equ	0xFD8
 14029                           
 14030 ;; *************** function _resetLATCHData *****************
 14031 ;; Defined at:
 14032 ;;		line 1526 in file "HX_ASL_BORON.c"
 14033 ;; Parameters:    Size  Location     Type
 14034 ;;		None
 14035 ;; Auto vars:     Size  Location     Type
 14036 ;;		None
 14037 ;; Return value:  Size  Location     Type
 14038 ;;                  1    wreg      void 
 14039 ;; Registers used:
 14040 ;;		wreg, status,2
 14041 ;; Tracked objects:
 14042 ;;		On entry : 0/0
 14043 ;;		On exit  : 0/0
 14044 ;;		Unchanged: 0/0
 14045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14050 ;;Total ram usage:        0 bytes
 14051 ;; Hardware stack levels used:    1
 14052 ;; Hardware stack levels required when called:    7
 14053 ;; This function calls:
 14054 ;;		Nothing
 14055 ;; This function is called by:
 14056 ;;		_write_ASLBoron_debug
 14057 ;; This function uses a non-reentrant model
 14058 ;;
 14059                           
 14060                           	psect	text50
 14061  00297A                     __ptext50:
 14062                           	opt stack 0
 14063  00297A                     _resetLATCHData:
 14064                           	opt stack 21
 14065                           
 14066                           ;HX_ASL_BORON.c: 1528: LATCH_OSC0_DATA = 0x000B;
 14067                           
 14068                           ; BSR set to: 3
 14069                           ;incstack = 0
 14070  00297A  0E0B               	movlw	11
 14071  00297C  0105               	movlb	5	; () banked
 14072  00297E  6FF9               	movwf	_LATCH_OSC0_DATA& (0+255),b
 14073  002980  0E00               	movlw	0
 14074  002982  6FFA               	movwf	(_LATCH_OSC0_DATA+1)& (0+255),b
 14075  002984  0E00               	movlw	0
 14076  002986  6FFB               	movwf	(_LATCH_OSC0_DATA+2)& (0+255),b
 14077  002988  0E00               	movlw	0
 14078  00298A  6FFC               	movwf	(_LATCH_OSC0_DATA+3)& (0+255),b
 14079                           
 14080                           ;HX_ASL_BORON.c: 1529: LATCH_OSC1_DATA = 0x0000;
 14081  00298C  0E00               	movlw	0
 14082  00298E  6FF5               	movwf	_LATCH_OSC1_DATA& (0+255),b
 14083  002990  0E00               	movlw	0
 14084  002992  6FF6               	movwf	(_LATCH_OSC1_DATA+1)& (0+255),b
 14085  002994  0E00               	movlw	0
 14086  002996  6FF7               	movwf	(_LATCH_OSC1_DATA+2)& (0+255),b
 14087  002998  0E00               	movlw	0
 14088  00299A  6FF8               	movwf	(_LATCH_OSC1_DATA+3)& (0+255),b
 14089                           
 14090                           ;HX_ASL_BORON.c: 1530: LATCH_OSC2_DATA = 0x0000;
 14091  00299C  0E00               	movlw	0
 14092  00299E  6FF1               	movwf	_LATCH_OSC2_DATA& (0+255),b
 14093  0029A0  0E00               	movlw	0
 14094  0029A2  6FF2               	movwf	(_LATCH_OSC2_DATA+1)& (0+255),b
 14095  0029A4  0E00               	movlw	0
 14096  0029A6  6FF3               	movwf	(_LATCH_OSC2_DATA+2)& (0+255),b
 14097  0029A8  0E00               	movlw	0
 14098  0029AA  6FF4               	movwf	(_LATCH_OSC2_DATA+3)& (0+255),b
 14099                           
 14100                           ;HX_ASL_BORON.c: 1531: LATCH_ANALOG_DATA = 0x0000;
 14101  0029AC  0E00               	movlw	0
 14102  0029AE  6FED               	movwf	_LATCH_ANALOG_DATA& (0+255),b
 14103  0029B0  0E00               	movlw	0
 14104  0029B2  6FEE               	movwf	(_LATCH_ANALOG_DATA+1)& (0+255),b
 14105  0029B4  0E00               	movlw	0
 14106  0029B6  6FEF               	movwf	(_LATCH_ANALOG_DATA+2)& (0+255),b
 14107  0029B8  0E00               	movlw	0
 14108  0029BA  6FF0               	movwf	(_LATCH_ANALOG_DATA+3)& (0+255),b
 14109                           
 14110                           ;HX_ASL_BORON.c: 1532: LATCH_OVEN_DATA = 0x0000;
 14111  0029BC  0E00               	movlw	0
 14112  0029BE  0102               	movlb	2	; () banked
 14113  0029C0  6FE2               	movwf	_LATCH_OVEN_DATA& (0+255),b
 14114  0029C2  0E00               	movlw	0
 14115  0029C4  6FE3               	movwf	(_LATCH_OVEN_DATA+1)& (0+255),b
 14116  0029C6  0E00               	movlw	0
 14117  0029C8  6FE4               	movwf	(_LATCH_OVEN_DATA+2)& (0+255),b
 14118  0029CA  0E00               	movlw	0
 14119  0029CC  6FE5               	movwf	(_LATCH_OVEN_DATA+3)& (0+255),b
 14120                           
 14121                           ;HX_ASL_BORON.c: 1533: LATCH_HEAT_DAC_DATA = 0x0000;
 14122  0029CE  0E00               	movlw	0
 14123  0029D0  0105               	movlb	5	; () banked
 14124  0029D2  6FE9               	movwf	_LATCH_HEAT_DAC_DATA& (0+255),b
 14125  0029D4  0E00               	movlw	0
 14126  0029D6  6FEA               	movwf	(_LATCH_HEAT_DAC_DATA+1)& (0+255),b
 14127  0029D8  0E00               	movlw	0
 14128  0029DA  6FEB               	movwf	(_LATCH_HEAT_DAC_DATA+2)& (0+255),b
 14129  0029DC  0E00               	movlw	0
 14130  0029DE  6FEC               	movwf	(_LATCH_HEAT_DAC_DATA+3)& (0+255),b
 14131                           
 14132                           ;HX_ASL_BORON.c: 1534: LATCH_VARACTOR_DAC_DATA = 0x0000;
 14133  0029E0  0E00               	movlw	0
 14134  0029E2  6FE5               	movwf	_LATCH_VARACTOR_DAC_DATA& (0+255),b
 14135  0029E4  0E00               	movlw	0
 14136  0029E6  6FE6               	movwf	(_LATCH_VARACTOR_DAC_DATA+1)& (0+255),b
 14137  0029E8  0E00               	movlw	0
 14138  0029EA  6FE7               	movwf	(_LATCH_VARACTOR_DAC_DATA+2)& (0+255),b
 14139  0029EC  0E00               	movlw	0
 14140  0029EE  6FE8               	movwf	(_LATCH_VARACTOR_DAC_DATA+3)& (0+255),b
 14141                           
 14142                           ;HX_ASL_BORON.c: 1535: LATCH_BIAS_DATA = 0x0000;
 14143  0029F0  0E00               	movlw	0
 14144  0029F2  6FE1               	movwf	_LATCH_BIAS_DATA& (0+255),b
 14145  0029F4  0E00               	movlw	0
 14146  0029F6  6FE2               	movwf	(_LATCH_BIAS_DATA+1)& (0+255),b
 14147  0029F8  0E00               	movlw	0
 14148  0029FA  6FE3               	movwf	(_LATCH_BIAS_DATA+2)& (0+255),b
 14149  0029FC  0E00               	movlw	0
 14150  0029FE  6FE4               	movwf	(_LATCH_BIAS_DATA+3)& (0+255),b
 14151                           
 14152                           ;HX_ASL_BORON.c: 1536: LATCH_CMOS_DATA = 0x0000;
 14153  002A00  0E00               	movlw	0
 14154  002A02  6FDD               	movwf	_LATCH_CMOS_DATA& (0+255),b
 14155  002A04  0E00               	movlw	0
 14156  002A06  6FDE               	movwf	(_LATCH_CMOS_DATA+1)& (0+255),b
 14157  002A08  0E00               	movlw	0
 14158  002A0A  6FDF               	movwf	(_LATCH_CMOS_DATA+2)& (0+255),b
 14159  002A0C  0E00               	movlw	0
 14160  002A0E  6FE0               	movwf	(_LATCH_CMOS_DATA+3)& (0+255),b
 14161                           
 14162                           ;HX_ASL_BORON.c: 1537: LATCH_ADC_DATA = 0x0000;
 14163  002A10  0E00               	movlw	0
 14164  002A12  6FD9               	movwf	_LATCH_ADC_DATA& (0+255),b
 14165  002A14  0E00               	movlw	0
 14166  002A16  6FDA               	movwf	(_LATCH_ADC_DATA+1)& (0+255),b
 14167  002A18  0E00               	movlw	0
 14168  002A1A  6FDB               	movwf	(_LATCH_ADC_DATA+2)& (0+255),b
 14169  002A1C  0E00               	movlw	0
 14170  002A1E  6FDC               	movwf	(_LATCH_ADC_DATA+3)& (0+255),b
 14171                           
 14172                           ;HX_ASL_BORON.c: 1538: LATCH_ADC_MUX_DATA = 0x0000;
 14173  002A20  0E00               	movlw	0
 14174  002A22  0106               	movlb	6	; () banked
 14175  002A24  6FF3               	movwf	_LATCH_ADC_MUX_DATA& (0+255),b
 14176  002A26  0E00               	movlw	0
 14177  002A28  6FF4               	movwf	(_LATCH_ADC_MUX_DATA+1)& (0+255),b
 14178  002A2A  0E00               	movlw	0
 14179  002A2C  6FF5               	movwf	(_LATCH_ADC_MUX_DATA+2)& (0+255),b
 14180  002A2E  0E00               	movlw	0
 14181  002A30  6FF6               	movwf	(_LATCH_ADC_MUX_DATA+3)& (0+255),b
 14182                           
 14183                           ;HX_ASL_BORON.c: 1539: LATCH_OCXO_DIVISOR_DATA = 0x0000;
 14184  002A32  0E00               	movlw	0
 14185  002A34  6FEF               	movwf	_LATCH_OCXO_DIVISOR_DATA& (0+255),b
 14186  002A36  0E00               	movlw	0
 14187  002A38  6FF0               	movwf	(_LATCH_OCXO_DIVISOR_DATA+1)& (0+255),b
 14188  002A3A  0E00               	movlw	0
 14189  002A3C  6FF1               	movwf	(_LATCH_OCXO_DIVISOR_DATA+2)& (0+255),b
 14190  002A3E  0E00               	movlw	0
 14191  002A40  6FF2               	movwf	(_LATCH_OCXO_DIVISOR_DATA+3)& (0+255),b
 14192                           
 14193                           ;HX_ASL_BORON.c: 1540: LATCH_CLOCK_SELECT_DATA = 0x0000;
 14194  002A42  0E00               	movlw	0
 14195  002A44  0105               	movlb	5	; () banked
 14196  002A46  6FD5               	movwf	_LATCH_CLOCK_SELECT_DATA& (0+255),b
 14197  002A48  0E00               	movlw	0
 14198  002A4A  6FD6               	movwf	(_LATCH_CLOCK_SELECT_DATA+1)& (0+255),b
 14199  002A4C  0E00               	movlw	0
 14200  002A4E  6FD7               	movwf	(_LATCH_CLOCK_SELECT_DATA+2)& (0+255),b
 14201  002A50  0E00               	movlw	0
 14202  002A52  6FD8               	movwf	(_LATCH_CLOCK_SELECT_DATA+3)& (0+255),b
 14203                           
 14204                           ; BSR set to: 5
 14205  002A54  0012               	return		;funcret
 14206  002A56                     __end_of_resetLATCHData:
 14207                           	opt stack 0
 14208                           tblptru	equ	0xFF8
 14209                           tblptrh	equ	0xFF7
 14210                           tblptrl	equ	0xFF6
 14211                           tablat	equ	0xFF5
 14212                           prodh	equ	0xFF4
 14213                           prodl	equ	0xFF3
 14214                           intcon	equ	0xFF2
 14215                           postinc0	equ	0xFEE
 14216                           wreg	equ	0xFE8
 14217                           indf1	equ	0xFE7
 14218                           postinc1	equ	0xFE6
 14219                           postdec1	equ	0xFE5
 14220                           fsr1h	equ	0xFE2
 14221                           fsr1l	equ	0xFE1
 14222                           indf2	equ	0xFDF
 14223                           postinc2	equ	0xFDE
 14224                           postdec2	equ	0xFDD
 14225                           fsr2h	equ	0xFDA
 14226                           fsr2l	equ	0xFD9
 14227                           status	equ	0xFD8
 14228                           
 14229 ;; *************** function _findMaxI2CSpeed *****************
 14230 ;; Defined at:
 14231 ;;		line 1020 in file "HX_ASL_BORON.c"
 14232 ;; Parameters:    Size  Location     Type
 14233 ;;  rxBuffer        2   21[BANK0 ] PTR unsigned char 
 14234 ;;		 -> hx_mainData(61), 
 14235 ;; Auto vars:     Size  Location     Type
 14236 ;;  i               1    9[BANK2 ] unsigned char 
 14237 ;;  ramWrPkt       71   82[BANK2 ] struct TxRxPacket
 14238 ;;  cmdReadbackP   71   10[BANK2 ] struct TxRxPacket
 14239 ;;  stream          4    2[BANK2 ] PTR struct TxRxPacket[2]
 14240 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
 14241 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
 14242 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
 14243 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
 14244 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
 14245 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
 14246 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
 14247 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
 14248 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
 14249 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
 14250 ;;  bRate           2    7[BANK2 ] unsigned int 
 14251 ;;  rx_index        1   81[BANK2 ] unsigned char 
 14252 ;;  ramData         1    6[BANK2 ] unsigned char 
 14253 ;;  ramAddrLo       1    1[BANK2 ] unsigned char 
 14254 ;;  ramAddrHi       1    0[BANK2 ] unsigned char 
 14255 ;; Return value:  Size  Location     Type
 14256 ;;                  1    wreg      void 
 14257 ;; Registers used:
 14258 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14259 ;; Tracked objects:
 14260 ;;		On entry : 0/0
 14261 ;;		On exit  : 0/0
 14262 ;;		Unchanged: 0/0
 14263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14264 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14265 ;;      Locals:         0       0       0     153       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14267 ;;      Totals:         0       2       0     153       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14268 ;;Total ram usage:      155 bytes
 14269 ;; Hardware stack levels used:    1
 14270 ;; Hardware stack levels required when called:    9
 14271 ;; This function calls:
 14272 ;;		_adjustI2CBaudRate
 14273 ;;		_calcBaudRate
 14274 ;;		_calcChecksum
 14275 ;;		_streamI2C
 14276 ;; This function is called by:
 14277 ;;		_write_ASLBoron_debug
 14278 ;; This function uses a non-reentrant model
 14279 ;;
 14280                           
 14281                           	psect	text51
 14282  0023F6                     __ptext51:
 14283                           	opt stack 0
 14284  0023F6                     _findMaxI2CSpeed:
 14285                           	opt stack 19
 14286                           
 14287                           ;HX_ASL_BORON.c: 1022: uint8_t rx_index = 0;
 14288                           
 14289                           ; BSR set to: 5
 14290                           ;incstack = 0
 14291  0023F6  0E00               	movlw	0
 14292  0023F8  0102               	movlb	2	; () banked
 14293  0023FA  6F51               	movwf	findMaxI2CSpeed@rx_index& (0+255),b
 14294                           
 14295                           ;HX_ASL_BORON.c: 1024: uint8_t ramAddrHi = 0x00;
 14296  0023FC  0E00               	movlw	0
 14297  0023FE  6F00               	movwf	findMaxI2CSpeed@ramAddrHi& (0+255),b
 14298                           
 14299                           ;HX_ASL_BORON.c: 1025: uint8_t ramAddrLo = 0x31;
 14300  002400  0E31               	movlw	49
 14301  002402  6F01               	movwf	findMaxI2CSpeed@ramAddrLo& (0+255),b
 14302                           
 14303                           ;HX_ASL_BORON.c: 1026: uint8_t ramData = 0xBB;
 14304  002404  0EBB               	movlw	187
 14305  002406  6F06               	movwf	findMaxI2CSpeed@ramData& (0+255),b
 14306                           
 14307                           ;HX_ASL_BORON.c: 1028: uint16_t bRate = 0;
 14308  002408  0E00               	movlw	0
 14309  00240A  6F08               	movwf	(findMaxI2CSpeed@bRate+1)& (0+255),b
 14310  00240C  0E00               	movlw	0
 14311  00240E  6F07               	movwf	findMaxI2CSpeed@bRate& (0+255),b
 14312                           
 14313                           ;HX_ASL_BORON.c: 1030: txRxPkt ramWrPkt;
 14314                           ;HX_ASL_BORON.c: 1031: ramWrPkt.txOrRx = 0;
 14315  002410  0E00               	movlw	0
 14316  002412  6F52               	movwf	findMaxI2CSpeed@ramWrPkt& (0+255),b
 14317                           
 14318                           ;HX_ASL_BORON.c: 1032: ramWrPkt.slaveAddr = 0x5A;
 14319  002414  0E00               	movlw	0
 14320  002416  6F54               	movwf	(findMaxI2CSpeed@ramWrPkt+2)& (0+255),b
 14321  002418  0E5A               	movlw	90
 14322  00241A  6F53               	movwf	(findMaxI2CSpeed@ramWrPkt+1)& (0+255),b
 14323                           
 14324                           ;HX_ASL_BORON.c: 1033: ramWrPkt.numOfBytes = 6;
 14325  00241C  0E06               	movlw	6
 14326  00241E  6F95               	movwf	(findMaxI2CSpeed@ramWrPkt+67)& (0+255),b
 14327                           
 14328                           ;HX_ASL_BORON.c: 1034: ramWrPkt.data[0] = 0x32;
 14329  002420  0E32               	movlw	50
 14330  002422  6F55               	movwf	(findMaxI2CSpeed@ramWrPkt+3)& (0+255),b
 14331                           
 14332                           ; BSR set to: 2
 14333                           ;HX_ASL_BORON.c: 1035: ramWrPkt.data[1] = ramAddrLo;
 14334  002424  C201  F256         	movff	findMaxI2CSpeed@ramAddrLo,findMaxI2CSpeed@ramWrPkt+4
 14335                           
 14336                           ; BSR set to: 2
 14337                           ;HX_ASL_BORON.c: 1036: ramWrPkt.data[2] = ramAddrHi;
 14338  002428  C200  F257         	movff	findMaxI2CSpeed@ramAddrHi,findMaxI2CSpeed@ramWrPkt+5
 14339                           
 14340                           ;HX_ASL_BORON.c: 1037: ramWrPkt.data[3] = 1;
 14341  00242C  0E01               	movlw	1
 14342  00242E  6F58               	movwf	(findMaxI2CSpeed@ramWrPkt+6)& (0+255),b
 14343                           
 14344                           ; BSR set to: 2
 14345                           ;HX_ASL_BORON.c: 1038: ramWrPkt.data[4] = ramData;
 14346  002430  C206  F259         	movff	findMaxI2CSpeed@ramData,findMaxI2CSpeed@ramWrPkt+7
 14347                           
 14348                           ; BSR set to: 2
 14349                           ;HX_ASL_BORON.c: 1039: ramWrPkt.data[5] = calcChecksum(ramWrPkt.data, ramWrPkt.numOfByte
      +                          s-1);
 14350  002434  0E55               	movlw	low (findMaxI2CSpeed@ramWrPkt+3)
 14351  002436  0100               	movlb	0	; () banked
 14352  002438  6F60               	movwf	calcChecksum@data& (0+255),b
 14353  00243A  0E02               	movlw	high (findMaxI2CSpeed@ramWrPkt+3)
 14354  00243C  6F61               	movwf	(calcChecksum@data+1)& (0+255),b
 14355  00243E  0102               	movlb	2	; () banked
 14356  002440  0595               	decf	(findMaxI2CSpeed@ramWrPkt+67)& (0+255),w,b
 14357  002442  0100               	movlb	0	; () banked
 14358  002444  6F62               	movwf	calcChecksum@size& (0+255),b
 14359  002446  EC67  F01E         	call	_calcChecksum	;wreg free
 14360  00244A  0102               	movlb	2	; () banked
 14361  00244C  6F5A               	movwf	(findMaxI2CSpeed@ramWrPkt+8)& (0+255),b
 14362                           
 14363                           ; BSR set to: 2
 14364                           ;HX_ASL_BORON.c: 1042: txRxPkt cmdReadbackPkt;
 14365                           ;HX_ASL_BORON.c: 1043: cmdReadbackPkt.txOrRx = 1;
 14366  00244E  0E01               	movlw	1
 14367  002450  6F0A               	movwf	findMaxI2CSpeed@cmdReadbackPkt& (0+255),b
 14368                           
 14369                           ; BSR set to: 2
 14370                           ;HX_ASL_BORON.c: 1044: cmdReadbackPkt.slaveAddr = 0x5A;
 14371  002452  0E00               	movlw	0
 14372  002454  6F0C               	movwf	(findMaxI2CSpeed@cmdReadbackPkt+2)& (0+255),b
 14373  002456  0E5A               	movlw	90
 14374  002458  6F0B               	movwf	(findMaxI2CSpeed@cmdReadbackPkt+1)& (0+255),b
 14375                           
 14376                           ; BSR set to: 2
 14377                           ;HX_ASL_BORON.c: 1045: cmdReadbackPkt.numOfBytes = 3;
 14378  00245A  0E03               	movlw	3
 14379  00245C  6F4D               	movwf	(findMaxI2CSpeed@cmdReadbackPkt+67)& (0+255),b
 14380                           
 14381                           ; BSR set to: 2
 14382                           ;HX_ASL_BORON.c: 1047: txRxPkt* stream[2];
 14383                           ;HX_ASL_BORON.c: 1048: stream[0] = &ramWrPkt;
 14384  00245E  0E52               	movlw	low findMaxI2CSpeed@ramWrPkt
 14385  002460  6F02               	movwf	findMaxI2CSpeed@stream& (0+255),b
 14386  002462  0E02               	movlw	high findMaxI2CSpeed@ramWrPkt
 14387  002464  6F03               	movwf	(findMaxI2CSpeed@stream+1)& (0+255),b
 14388                           
 14389                           ; BSR set to: 2
 14390                           ;HX_ASL_BORON.c: 1049: stream[1] = &cmdReadbackPkt;
 14391  002466  0E0A               	movlw	low findMaxI2CSpeed@cmdReadbackPkt
 14392  002468  6F04               	movwf	(findMaxI2CSpeed@stream+2)& (0+255),b
 14393  00246A  0E02               	movlw	high findMaxI2CSpeed@cmdReadbackPkt
 14394  00246C  6F05               	movwf	(findMaxI2CSpeed@stream+3)& (0+255),b
 14395                           
 14396                           ; BSR set to: 2
 14397                           ;HX_ASL_BORON.c: 1052: for (uint8_t i = 0xFF; i >= 0x03; i--)
 14398  00246E  6909               	setf	findMaxI2CSpeed@i& (0+255),b
 14399  002470                     l10748:
 14400                           
 14401                           ; BSR set to: 2
 14402  002470  0E03               	movlw	3
 14403  002472  6109               	cpfslt	findMaxI2CSpeed@i& (0+255),b
 14404  002474  D001               	goto	l1227
 14405  002476  D074               	goto	u7580
 14406  002478                     l1227:
 14407                           
 14408                           ; BSR set to: 2
 14409                           ;HX_ASL_BORON.c: 1053: {
 14410                           ;HX_ASL_BORON.c: 1054: if (!adjustI2CBaudRate(i))
 14411                           
 14412                           ; BSR set to: 2
 14413  002478  5109               	movf	findMaxI2CSpeed@i& (0+255),w,b
 14414  00247A  EC38  F01F         	call	_adjustI2CBaudRate
 14415  00247E  0900               	iorlw	0
 14416  002480  B4D8               	btfsc	status,2,c
 14417  002482  D06E               	goto	u7580
 14418                           
 14419                           ;HX_ASL_BORON.c: 1057: }
 14420                           ;HX_ASL_BORON.c: 1060: if (streamI2C(stream, 2) == I2C1_MESSAGE_FAIL)
 14421                           
 14422                           ;HX_ASL_BORON.c: 1055: {
 14423                           ;HX_ASL_BORON.c: 1056: break;
 14424  002484  0E02               	movlw	low findMaxI2CSpeed@stream
 14425  002486  0100               	movlb	0	; () banked
 14426  002488  6F69               	movwf	streamI2C@pktArr& (0+255),b
 14427  00248A  0E02               	movlw	high findMaxI2CSpeed@stream
 14428  00248C  6F6A               	movwf	(streamI2C@pktArr+1)& (0+255),b
 14429  00248E  0E02               	movlw	2
 14430  002490  6F6B               	movwf	streamI2C@pktSize& (0+255),b
 14431  002492  ECED  F00E         	call	_streamI2C	;wreg free
 14432  002496  06E8               	decf	wreg,f,c
 14433  002498  A4D8               	btfss	status,2,c
 14434  00249A  D041               	goto	l1230
 14435                           
 14436                           ;HX_ASL_BORON.c: 1061: {
 14437                           ;HX_ASL_BORON.c: 1063: bRate = calcBaudRate(i);
 14438  00249C  0102               	movlb	2	; () banked
 14439  00249E  5109               	movf	findMaxI2CSpeed@i& (0+255),w,b
 14440  0024A0  ECEB  F01A         	call	_calcBaudRate
 14441  0024A4  C06E  F207         	movff	?_calcBaudRate,findMaxI2CSpeed@bRate
 14442  0024A8  C06F  F208         	movff	?_calcBaudRate+1,findMaxI2CSpeed@bRate+1
 14443                           
 14444                           ;HX_ASL_BORON.c: 1064: rxBuffer[rx_index++] = 0x41;
 14445  0024AC  0102               	movlb	2	; () banked
 14446  0024AE  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14447  0024B0  0D01               	mullw	1
 14448  0024B2  50F3               	movf	prodl,w,c
 14449  0024B4  0100               	movlb	0	; () banked
 14450  0024B6  2575               	addwf	findMaxI2CSpeed@rxBuffer& (0+255),w,b
 14451  0024B8  6ED9               	movwf	fsr2l,c
 14452  0024BA  50F4               	movf	prodh,w,c
 14453  0024BC  2176               	addwfc	(findMaxI2CSpeed@rxBuffer+1)& (0+255),w,b
 14454  0024BE  6EDA               	movwf	fsr2h,c
 14455  0024C0  0E41               	movlw	65
 14456  0024C2  6EDF               	movwf	indf2,c
 14457                           
 14458                           ; BSR set to: 0
 14459  0024C4  0102               	movlb	2	; () banked
 14460  0024C6  2B51               	incf	findMaxI2CSpeed@rx_index& (0+255),f,b
 14461                           
 14462                           ; BSR set to: 2
 14463                           ;HX_ASL_BORON.c: 1065: rxBuffer[rx_index++] = i;
 14464  0024C8  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14465  0024CA  0D01               	mullw	1
 14466  0024CC  50F3               	movf	prodl,w,c
 14467  0024CE  0100               	movlb	0	; () banked
 14468  0024D0  2575               	addwf	findMaxI2CSpeed@rxBuffer& (0+255),w,b
 14469  0024D2  6ED9               	movwf	fsr2l,c
 14470  0024D4  50F4               	movf	prodh,w,c
 14471  0024D6  2176               	addwfc	(findMaxI2CSpeed@rxBuffer+1)& (0+255),w,b
 14472  0024D8  6EDA               	movwf	fsr2h,c
 14473  0024DA  C209  FFDF         	movff	findMaxI2CSpeed@i,indf2
 14474                           
 14475                           ; BSR set to: 0
 14476  0024DE  0102               	movlb	2	; () banked
 14477  0024E0  2B51               	incf	findMaxI2CSpeed@rx_index& (0+255),f,b
 14478                           
 14479                           ; BSR set to: 2
 14480                           ;HX_ASL_BORON.c: 1066: rxBuffer[rx_index++] = (bRate >> 8) & 0xFF;
 14481  0024E2  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14482  0024E4  0D01               	mullw	1
 14483  0024E6  50F3               	movf	prodl,w,c
 14484  0024E8  0100               	movlb	0	; () banked
 14485  0024EA  2575               	addwf	findMaxI2CSpeed@rxBuffer& (0+255),w,b
 14486  0024EC  6ED9               	movwf	fsr2l,c
 14487  0024EE  50F4               	movf	prodh,w,c
 14488  0024F0  2176               	addwfc	(findMaxI2CSpeed@rxBuffer+1)& (0+255),w,b
 14489  0024F2  6EDA               	movwf	fsr2h,c
 14490  0024F4  0102               	movlb	2	; () banked
 14491  0024F6  5108               	movf	(findMaxI2CSpeed@bRate+1)& (0+255),w,b
 14492  0024F8  6EDF               	movwf	indf2,c
 14493                           
 14494                           ; BSR set to: 2
 14495  0024FA  2B51               	incf	findMaxI2CSpeed@rx_index& (0+255),f,b
 14496                           
 14497                           ; BSR set to: 2
 14498                           ;HX_ASL_BORON.c: 1067: rxBuffer[rx_index++] = bRate & 0xFF;
 14499  0024FC  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14500  0024FE  0D01               	mullw	1
 14501  002500  50F3               	movf	prodl,w,c
 14502  002502  0100               	movlb	0	; () banked
 14503  002504  2575               	addwf	findMaxI2CSpeed@rxBuffer& (0+255),w,b
 14504  002506  6ED9               	movwf	fsr2l,c
 14505  002508  50F4               	movf	prodh,w,c
 14506  00250A  2176               	addwfc	(findMaxI2CSpeed@rxBuffer+1)& (0+255),w,b
 14507  00250C  6EDA               	movwf	fsr2h,c
 14508  00250E  C207  FFDF         	movff	findMaxI2CSpeed@bRate,indf2
 14509                           
 14510                           ; BSR set to: 0
 14511  002512  0102               	movlb	2	; () banked
 14512  002514  2B51               	incf	findMaxI2CSpeed@rx_index& (0+255),f,b
 14513                           
 14514                           ;HX_ASL_BORON.c: 1068: adjustI2CBaudRate(0x9F);
 14515  002516  0E9F               	movlw	159
 14516  002518  EC38  F01F         	call	_adjustI2CBaudRate
 14517                           
 14518                           ;HX_ASL_BORON.c: 1069: break;
 14519  00251C  D021               	goto	u7580
 14520  00251E                     l1230:
 14521                           
 14522                           ;HX_ASL_BORON.c: 1070: }
 14523                           ;HX_ASL_BORON.c: 1072: if (ramData == cmdReadbackPkt.data[1])
 14524  00251E  0102               	movlb	2	; () banked
 14525  002520  5106               	movf	findMaxI2CSpeed@ramData& (0+255),w,b
 14526  002522  190E               	xorwf	(findMaxI2CSpeed@cmdReadbackPkt+4)& (0+255),w,b
 14527  002524  B4D8               	btfsc	status,2,c
 14528  002526  D01A               	goto	l1233
 14529                           
 14530                           ; BSR set to: 2
 14531                           ;HX_ASL_BORON.c: 1077: else
 14532                           ;HX_ASL_BORON.c: 1078: {
 14533                           ;HX_ASL_BORON.c: 1080: rxBuffer[rx_index++] = 0x01;
 14534                           
 14535                           ; BSR set to: 2
 14536                           
 14537                           ; BSR set to: 2
 14538                           ;HX_ASL_BORON.c: 1076: }
 14539                           
 14540                           ; BSR set to: 2
 14541                           ;HX_ASL_BORON.c: 1073: {
 14542                           ;HX_ASL_BORON.c: 1075: continue;
 14543  002528  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14544  00252A  0D01               	mullw	1
 14545  00252C  50F3               	movf	prodl,w,c
 14546  00252E  0100               	movlb	0	; () banked
 14547  002530  2575               	addwf	findMaxI2CSpeed@rxBuffer& (0+255),w,b
 14548  002532  6ED9               	movwf	fsr2l,c
 14549  002534  50F4               	movf	prodh,w,c
 14550  002536  2176               	addwfc	(findMaxI2CSpeed@rxBuffer+1)& (0+255),w,b
 14551  002538  6EDA               	movwf	fsr2h,c
 14552  00253A  0E01               	movlw	1
 14553  00253C  6EDF               	movwf	indf2,c
 14554                           
 14555                           ; BSR set to: 0
 14556  00253E  0102               	movlb	2	; () banked
 14557  002540  2B51               	incf	findMaxI2CSpeed@rx_index& (0+255),f,b
 14558                           
 14559                           ; BSR set to: 2
 14560                           ;HX_ASL_BORON.c: 1081: rxBuffer[rx_index++] = i;
 14561  002542  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14562  002544  0D01               	mullw	1
 14563  002546  50F3               	movf	prodl,w,c
 14564  002548  0100               	movlb	0	; () banked
 14565  00254A  2575               	addwf	findMaxI2CSpeed@rxBuffer& (0+255),w,b
 14566  00254C  6ED9               	movwf	fsr2l,c
 14567  00254E  50F4               	movf	prodh,w,c
 14568  002550  2176               	addwfc	(findMaxI2CSpeed@rxBuffer+1)& (0+255),w,b
 14569  002552  6EDA               	movwf	fsr2h,c
 14570  002554  C209  FFDF         	movff	findMaxI2CSpeed@i,indf2
 14571  002558  0102               	movlb	2	; () banked
 14572  00255A  2B51               	incf	findMaxI2CSpeed@rx_index& (0+255),f,b
 14573  00255C                     l1233:
 14574                           
 14575                           ; BSR set to: 2
 14576                           
 14577                           ; BSR set to: 2
 14578  00255C  0709               	decf	findMaxI2CSpeed@i& (0+255),f,b
 14579  00255E  D788               	goto	l10748
 14580  002560                     u7580:
 14581                           
 14582                           ;HX_ASL_BORON.c: 1082: }
 14583                           ;HX_ASL_BORON.c: 1083: }
 14584                           ;HX_ASL_BORON.c: 1085: hx_mainDataIndex += rx_index;
 14585                           
 14586                           ; BSR set to: 2
 14587  002560  0102               	movlb	2	; () banked
 14588  002562  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14589  002564  263F               	addwf	_hx_mainDataIndex,f,c
 14590                           
 14591                           ; BSR set to: 2
 14592  002566  0012               	return		;funcret
 14593  002568                     __end_of_findMaxI2CSpeed:
 14594                           	opt stack 0
 14595                           tblptru	equ	0xFF8
 14596                           tblptrh	equ	0xFF7
 14597                           tblptrl	equ	0xFF6
 14598                           tablat	equ	0xFF5
 14599                           prodh	equ	0xFF4
 14600                           prodl	equ	0xFF3
 14601                           intcon	equ	0xFF2
 14602                           postinc0	equ	0xFEE
 14603                           wreg	equ	0xFE8
 14604                           indf1	equ	0xFE7
 14605                           postinc1	equ	0xFE6
 14606                           postdec1	equ	0xFE5
 14607                           fsr1h	equ	0xFE2
 14608                           fsr1l	equ	0xFE1
 14609                           indf2	equ	0xFDF
 14610                           postinc2	equ	0xFDE
 14611                           postdec2	equ	0xFDD
 14612                           fsr2h	equ	0xFDA
 14613                           fsr2l	equ	0xFD9
 14614                           status	equ	0xFD8
 14615                           
 14616 ;; *************** function _calcBaudRate *****************
 14617 ;; Defined at:
 14618 ;;		line 1088 in file "HX_ASL_BORON.c"
 14619 ;; Parameters:    Size  Location     Type
 14620 ;;  bd              1    wreg     unsigned char 
 14621 ;; Auto vars:     Size  Location     Type
 14622 ;;  bd              1   18[BANK0 ] unsigned char 
 14623 ;;  bRate           2   19[BANK0 ] unsigned int 
 14624 ;; Return value:  Size  Location     Type
 14625 ;;                  2   14[BANK0 ] unsigned int 
 14626 ;; Registers used:
 14627 ;;		wreg, status,2, status,0, cstack
 14628 ;; Tracked objects:
 14629 ;;		On entry : 0/0
 14630 ;;		On exit  : 0/0
 14631 ;;		Unchanged: 0/0
 14632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14633 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14634 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14635 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14636 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14637 ;;Total ram usage:        7 bytes
 14638 ;; Hardware stack levels used:    1
 14639 ;; Hardware stack levels required when called:    8
 14640 ;; This function calls:
 14641 ;;		___aldiv
 14642 ;; This function is called by:
 14643 ;;		_findMaxI2CSpeed
 14644 ;; This function uses a non-reentrant model
 14645 ;;
 14646                           
 14647                           	psect	text52
 14648  0035D6                     __ptext52:
 14649                           	opt stack 0
 14650  0035D6                     _calcBaudRate:
 14651                           	opt stack 19
 14652                           
 14653                           ; BSR set to: 2
 14654                           ;incstack = 0
 14655                           ;calcBaudRate@bd stored from wreg
 14656  0035D6  0100               	movlb	0	; () banked
 14657  0035D8  6F72               	movwf	calcBaudRate@bd& (0+255),b
 14658                           
 14659                           ;HX_ASL_BORON.c: 1090: uint16_t bRate = 64000000 / (4 * (bd + 1));
 14660  0035DA  0E00               	movlw	0
 14661  0035DC  0100               	movlb	0	; () banked
 14662  0035DE  6F60               	movwf	___aldiv@dividend& (0+255),b
 14663  0035E0  0E90               	movlw	144
 14664  0035E2  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
 14665  0035E4  0ED0               	movlw	208
 14666  0035E6  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
 14667  0035E8  0E03               	movlw	3
 14668  0035EA  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
 14669  0035EC  5172               	movf	calcBaudRate@bd& (0+255),w,b
 14670  0035EE  6F70               	movwf	??_calcBaudRate& (0+255),b
 14671  0035F0  6B71               	clrf	(??_calcBaudRate+1)& (0+255),b
 14672  0035F2  90D8               	bcf	status,0,c
 14673  0035F4  3770               	rlcf	??_calcBaudRate& (0+255),f,b
 14674  0035F6  3771               	rlcf	(??_calcBaudRate+1)& (0+255),f,b
 14675  0035F8  90D8               	bcf	status,0,c
 14676  0035FA  3770               	rlcf	??_calcBaudRate& (0+255),f,b
 14677  0035FC  3771               	rlcf	(??_calcBaudRate+1)& (0+255),f,b
 14678  0035FE  0E04               	movlw	4
 14679  003600  2770               	addwf	??_calcBaudRate& (0+255),f,b
 14680  003602  0E00               	movlw	0
 14681  003604  2371               	addwfc	(??_calcBaudRate+1)& (0+255),f,b
 14682  003606  C070  F064         	movff	??_calcBaudRate,___aldiv@divisor
 14683  00360A  C071  F065         	movff	??_calcBaudRate+1,___aldiv@divisor+1
 14684  00360E  0E00               	movlw	0
 14685  003610  BF65               	btfsc	(___aldiv@divisor+1)& (0+255),7,b
 14686  003612  0EFF               	movlw	-1
 14687  003614  6F66               	movwf	(___aldiv@divisor+2)& (0+255),b
 14688  003616  6F67               	movwf	(___aldiv@divisor+3)& (0+255),b
 14689  003618  EC96  F015         	call	___aldiv	;wreg free
 14690  00361C  C060  F073         	movff	?___aldiv,calcBaudRate@bRate
 14691  003620  C061  F074         	movff	?___aldiv+1,calcBaudRate@bRate+1
 14692                           
 14693                           ;HX_ASL_BORON.c: 1091: return bRate;
 14694  003624  C073  F06E         	movff	calcBaudRate@bRate,?_calcBaudRate
 14695  003628  C074  F06F         	movff	calcBaudRate@bRate+1,?_calcBaudRate+1
 14696  00362C  0012               	return	
 14697  00362E                     __end_of_calcBaudRate:
 14698                           	opt stack 0
 14699                           tblptru	equ	0xFF8
 14700                           tblptrh	equ	0xFF7
 14701                           tblptrl	equ	0xFF6
 14702                           tablat	equ	0xFF5
 14703                           prodh	equ	0xFF4
 14704                           prodl	equ	0xFF3
 14705                           intcon	equ	0xFF2
 14706                           postinc0	equ	0xFEE
 14707                           wreg	equ	0xFE8
 14708                           indf1	equ	0xFE7
 14709                           postinc1	equ	0xFE6
 14710                           postdec1	equ	0xFE5
 14711                           fsr1h	equ	0xFE2
 14712                           fsr1l	equ	0xFE1
 14713                           indf2	equ	0xFDF
 14714                           postinc2	equ	0xFDE
 14715                           postdec2	equ	0xFDD
 14716                           fsr2h	equ	0xFDA
 14717                           fsr2l	equ	0xFD9
 14718                           status	equ	0xFD8
 14719                           
 14720 ;; *************** function ___aldiv *****************
 14721 ;; Defined at:
 14722 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
 14723 ;; Parameters:    Size  Location     Type
 14724 ;;  dividend        4    0[BANK0 ] long 
 14725 ;;  divisor         4    4[BANK0 ] long 
 14726 ;; Auto vars:     Size  Location     Type
 14727 ;;  quotient        4   10[BANK0 ] long 
 14728 ;;  sign            1    9[BANK0 ] unsigned char 
 14729 ;;  counter         1    8[BANK0 ] unsigned char 
 14730 ;; Return value:  Size  Location     Type
 14731 ;;                  4    0[BANK0 ] long 
 14732 ;; Registers used:
 14733 ;;		wreg, status,2, status,0
 14734 ;; Tracked objects:
 14735 ;;		On entry : 0/0
 14736 ;;		On exit  : 0/0
 14737 ;;		Unchanged: 0/0
 14738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14739 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14740 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14742 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14743 ;;Total ram usage:       14 bytes
 14744 ;; Hardware stack levels used:    1
 14745 ;; Hardware stack levels required when called:    7
 14746 ;; This function calls:
 14747 ;;		Nothing
 14748 ;; This function is called by:
 14749 ;;		_calcBaudRate
 14750 ;; This function uses a non-reentrant model
 14751 ;;
 14752                           
 14753                           	psect	text53
 14754  002B2C                     __ptext53:
 14755                           	opt stack 0
 14756  002B2C                     ___aldiv:
 14757                           	opt stack 19
 14758                           
 14759                           ;incstack = 0
 14760  002B2C  0E00               	movlw	0
 14761  002B2E  0100               	movlb	0	; () banked
 14762  002B30  6F69               	movwf	___aldiv@sign& (0+255),b
 14763                           
 14764                           ; BSR set to: 0
 14765  002B32  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 14766  002B34  D00A               	goto	l2152
 14767                           
 14768                           ; BSR set to: 0
 14769  002B36  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
 14770  002B38  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
 14771  002B3A  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
 14772  002B3C  6D64               	negf	___aldiv@divisor& (0+255),b
 14773  002B3E  0E00               	movlw	0
 14774  002B40  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 14775  002B42  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 14776  002B44  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 14777                           
 14778                           ; BSR set to: 0
 14779  002B46  0E01               	movlw	1
 14780  002B48  6F69               	movwf	___aldiv@sign& (0+255),b
 14781  002B4A                     l2152:
 14782                           
 14783                           ; BSR set to: 0
 14784                           
 14785                           ; BSR set to: 0
 14786  002B4A  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 14787  002B4C  D00A               	goto	l2153
 14788                           
 14789                           ; BSR set to: 0
 14790  002B4E  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
 14791  002B50  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
 14792  002B52  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
 14793  002B54  6D60               	negf	___aldiv@dividend& (0+255),b
 14794  002B56  0E00               	movlw	0
 14795  002B58  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 14796  002B5A  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 14797  002B5C  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 14798                           
 14799                           ; BSR set to: 0
 14800  002B5E  0E01               	movlw	1
 14801  002B60  1B69               	xorwf	___aldiv@sign& (0+255),f,b
 14802  002B62                     l2153:
 14803                           
 14804                           ; BSR set to: 0
 14805                           
 14806                           ; BSR set to: 0
 14807  002B62  0E00               	movlw	0
 14808  002B64  6F6A               	movwf	___aldiv@quotient& (0+255),b
 14809  002B66  0E00               	movlw	0
 14810  002B68  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
 14811  002B6A  0E00               	movlw	0
 14812  002B6C  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
 14813  002B6E  0E00               	movlw	0
 14814  002B70  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
 14815                           
 14816                           ; BSR set to: 0
 14817  002B72  5164               	movf	___aldiv@divisor& (0+255),w,b
 14818  002B74  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 14819  002B76  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 14820  002B78  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 14821  002B7A  B4D8               	btfsc	status,2,c
 14822  002B7C  D02A               	goto	l2160
 14823                           
 14824                           ; BSR set to: 0
 14825  002B7E  0E01               	movlw	1
 14826  002B80  6F68               	movwf	___aldiv@counter& (0+255),b
 14827  002B82  D006               	goto	l2155
 14828  002B84                     
 14829                           ; BSR set to: 0
 14830                           
 14831                           ; BSR set to: 0
 14832  002B84  90D8               	bcf	status,0,c
 14833  002B86  3764               	rlcf	___aldiv@divisor& (0+255),f,b
 14834  002B88  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 14835  002B8A  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 14836  002B8C  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 14837  002B8E  2B68               	incf	___aldiv@counter& (0+255),f,b
 14838  002B90                     l2155:
 14839                           
 14840                           ; BSR set to: 0
 14841                           
 14842                           ; BSR set to: 0
 14843  002B90  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 14844  002B92  D7F8               	goto	l2156
 14845  002B94                     u6750:
 14846                           
 14847                           ; BSR set to: 0
 14848                           
 14849                           ; BSR set to: 0
 14850                           
 14851                           ; BSR set to: 0
 14852  002B94  90D8               	bcf	status,0,c
 14853  002B96  376A               	rlcf	___aldiv@quotient& (0+255),f,b
 14854  002B98  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 14855  002B9A  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 14856  002B9C  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 14857                           
 14858                           ; BSR set to: 0
 14859  002B9E  5164               	movf	___aldiv@divisor& (0+255),w,b
 14860  002BA0  5D60               	subwf	___aldiv@dividend& (0+255),w,b
 14861  002BA2  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 14862  002BA4  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 14863  002BA6  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 14864  002BA8  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 14865  002BAA  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 14866  002BAC  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 14867  002BAE  A0D8               	btfss	status,0,c
 14868  002BB0  D009               	goto	l2159
 14869                           
 14870                           ; BSR set to: 0
 14871  002BB2  5164               	movf	___aldiv@divisor& (0+255),w,b
 14872  002BB4  5F60               	subwf	___aldiv@dividend& (0+255),f,b
 14873  002BB6  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 14874  002BB8  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 14875  002BBA  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 14876  002BBC  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 14877  002BBE  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 14878  002BC0  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 14879                           
 14880                           ; BSR set to: 0
 14881  002BC2  816A               	bsf	___aldiv@quotient& (0+255),0,b
 14882  002BC4                     l2159:
 14883                           
 14884                           ; BSR set to: 0
 14885                           
 14886                           ; BSR set to: 0
 14887  002BC4  90D8               	bcf	status,0,c
 14888  002BC6  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 14889  002BC8  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 14890  002BCA  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 14891  002BCC  3364               	rrcf	___aldiv@divisor& (0+255),f,b
 14892                           
 14893                           ; BSR set to: 0
 14894  002BCE  2F68               	decfsz	___aldiv@counter& (0+255),f,b
 14895  002BD0  D7E1               	goto	u6750
 14896  002BD2                     l2160:
 14897                           
 14898                           ; BSR set to: 0
 14899                           
 14900                           ; BSR set to: 0
 14901                           
 14902                           ; BSR set to: 0
 14903  002BD2  5169               	movf	___aldiv@sign& (0+255),w,b
 14904  002BD4  B4D8               	btfsc	status,2,c
 14905  002BD6  D008               	goto	l2161
 14906                           
 14907                           ; BSR set to: 0
 14908  002BD8  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 14909  002BDA  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 14910  002BDC  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 14911  002BDE  6D6A               	negf	___aldiv@quotient& (0+255),b
 14912  002BE0  0E00               	movlw	0
 14913  002BE2  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 14914  002BE4  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 14915  002BE6  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 14916  002BE8                     l2161:
 14917                           
 14918                           ; BSR set to: 0
 14919                           
 14920                           ; BSR set to: 0
 14921  002BE8  C06A  F060         	movff	___aldiv@quotient,?___aldiv
 14922  002BEC  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
 14923  002BF0  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
 14924  002BF4  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
 14925  002BF8  0012               	return	
 14926  002BFA                     __end_of___aldiv:
 14927                           	opt stack 0
 14928                           tblptru	equ	0xFF8
 14929                           tblptrh	equ	0xFF7
 14930                           tblptrl	equ	0xFF6
 14931                           tablat	equ	0xFF5
 14932                           prodh	equ	0xFF4
 14933                           prodl	equ	0xFF3
 14934                           intcon	equ	0xFF2
 14935                           postinc0	equ	0xFEE
 14936                           wreg	equ	0xFE8
 14937                           indf1	equ	0xFE7
 14938                           postinc1	equ	0xFE6
 14939                           postdec1	equ	0xFE5
 14940                           fsr1h	equ	0xFE2
 14941                           fsr1l	equ	0xFE1
 14942                           indf2	equ	0xFDF
 14943                           postinc2	equ	0xFDE
 14944                           postdec2	equ	0xFDD
 14945                           fsr2h	equ	0xFDA
 14946                           fsr2l	equ	0xFD9
 14947                           status	equ	0xFD8
 14948                           
 14949 ;; *************** function _cycleBoronPower *****************
 14950 ;; Defined at:
 14951 ;;		line 1120 in file "HX_ASL_BORON.c"
 14952 ;; Parameters:    Size  Location     Type
 14953 ;;		None
 14954 ;; Auto vars:     Size  Location     Type
 14955 ;;		None
 14956 ;; Return value:  Size  Location     Type
 14957 ;;                  1    wreg      void 
 14958 ;; Registers used:
 14959 ;;		wreg
 14960 ;; Tracked objects:
 14961 ;;		On entry : 0/0
 14962 ;;		On exit  : 0/0
 14963 ;;		Unchanged: 0/0
 14964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14968 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14969 ;;Total ram usage:        1 bytes
 14970 ;; Hardware stack levels used:    1
 14971 ;; Hardware stack levels required when called:    7
 14972 ;; This function calls:
 14973 ;;		Nothing
 14974 ;; This function is called by:
 14975 ;;		_write_ASLBoron_debug
 14976 ;; This function uses a non-reentrant model
 14977 ;;
 14978                           
 14979                           	psect	text54
 14980  003F10                     __ptext54:
 14981                           	opt stack 0
 14982  003F10                     _cycleBoronPower:
 14983                           	opt stack 21
 14984                           
 14985                           ;HX_ASL_BORON.c: 1122: PORTBbits.RB2 = 1;
 14986                           
 14987                           ; BSR set to: 0
 14988                           ;incstack = 0
 14989  003F10  848E               	bsf	3982,2,c	;volatile
 14990                           
 14991                           ;HX_ASL_BORON.c: 1123: _delay((unsigned long)((1)*(64000000/4000.0)));
 14992  003F12  0E15               	movlw	21
 14993  003F14  0100               	movlb	0	; () banked
 14994  003F16  6F60               	movwf	??_cycleBoronPower& (0+255),b
 14995  003F18  0EC6               	movlw	198
 14996  003F1A                     u9687:
 14997  003F1A  2EE8               	decfsz	wreg,f,c
 14998  003F1C  D7FE               	bra	u9687
 14999  003F1E  2F60               	decfsz	??_cycleBoronPower& (0+255),f,b
 15000  003F20  D7FC               	bra	u9687
 15001  003F22  F000               	nop	
 15002                           
 15003                           ;HX_ASL_BORON.c: 1124: PORTBbits.RB2 = 0;
 15004  003F24  948E               	bcf	3982,2,c	;volatile
 15005  003F26  0012               	return		;funcret
 15006  003F28                     __end_of_cycleBoronPower:
 15007                           	opt stack 0
 15008                           tblptru	equ	0xFF8
 15009                           tblptrh	equ	0xFF7
 15010                           tblptrl	equ	0xFF6
 15011                           tablat	equ	0xFF5
 15012                           prodh	equ	0xFF4
 15013                           prodl	equ	0xFF3
 15014                           intcon	equ	0xFF2
 15015                           postinc0	equ	0xFEE
 15016                           wreg	equ	0xFE8
 15017                           indf1	equ	0xFE7
 15018                           postinc1	equ	0xFE6
 15019                           postdec1	equ	0xFE5
 15020                           fsr1h	equ	0xFE2
 15021                           fsr1l	equ	0xFE1
 15022                           indf2	equ	0xFDF
 15023                           postinc2	equ	0xFDE
 15024                           postdec2	equ	0xFDD
 15025                           fsr2h	equ	0xFDA
 15026                           fsr2l	equ	0xFD9
 15027                           status	equ	0xFD8
 15028                           
 15029 ;; *************** function _ASLB_debug3 *****************
 15030 ;; Defined at:
 15031 ;;		line 989 in file "HX_ASL_BORON.c"
 15032 ;; Parameters:    Size  Location     Type
 15033 ;;  dataByte        1    wreg     unsigned char 
 15034 ;;  rxBuffer        2    1[BANK0 ] PTR unsigned char 
 15035 ;;		 -> hx_mainData(61), 
 15036 ;; Auto vars:     Size  Location     Type
 15037 ;;  dataByte        1    3[BANK0 ] unsigned char 
 15038 ;;  rx_index        1    4[BANK0 ] unsigned char 
 15039 ;; Return value:  Size  Location     Type
 15040 ;;                  1    wreg      void 
 15041 ;; Registers used:
 15042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15043 ;; Tracked objects:
 15044 ;;		On entry : 0/0
 15045 ;;		On exit  : 0/0
 15046 ;;		Unchanged: 0/0
 15047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15048 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15049 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15051 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15052 ;;Total ram usage:        4 bytes
 15053 ;; Hardware stack levels used:    1
 15054 ;; Hardware stack levels required when called:    8
 15055 ;; This function calls:
 15056 ;;		_adjustI2CBaudRate
 15057 ;; This function is called by:
 15058 ;;		_write_ASLBoron_debug
 15059 ;; This function uses a non-reentrant model
 15060 ;;
 15061                           
 15062                           	psect	text55
 15063  0034BA                     __ptext55:
 15064                           	opt stack 0
 15065  0034BA                     _ASLB_debug3:
 15066                           	opt stack 20
 15067                           
 15068                           ;incstack = 0
 15069                           ;ASLB_debug3@dataByte stored from wreg
 15070  0034BA  0100               	movlb	0	; () banked
 15071  0034BC  6F63               	movwf	ASLB_debug3@dataByte& (0+255),b
 15072                           
 15073                           ;HX_ASL_BORON.c: 995: uint8_t rx_index = 0;
 15074  0034BE  0E00               	movlw	0
 15075  0034C0  0100               	movlb	0	; () banked
 15076  0034C2  6F64               	movwf	ASLB_debug3@rx_index& (0+255),b
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;HX_ASL_BORON.c: 996: if (!adjustI2CBaudRate(dataByte))
 15080  0034C4  5163               	movf	ASLB_debug3@dataByte& (0+255),w,b
 15081  0034C6  EC38  F01F         	call	_adjustI2CBaudRate
 15082  0034CA  0900               	iorlw	0
 15083  0034CC  A4D8               	btfss	status,2,c
 15084  0034CE  D00B               	goto	l1216
 15085                           
 15086                           ;HX_ASL_BORON.c: 997: {
 15087                           ;HX_ASL_BORON.c: 998: rxBuffer[rx_index++] = 0x00;
 15088  0034D0  0100               	movlb	0	; () banked
 15089  0034D2  5164               	movf	ASLB_debug3@rx_index& (0+255),w,b
 15090  0034D4  0D01               	mullw	1
 15091  0034D6  50F3               	movf	prodl,w,c
 15092  0034D8  2561               	addwf	ASLB_debug3@rxBuffer& (0+255),w,b
 15093  0034DA  6ED9               	movwf	fsr2l,c
 15094  0034DC  50F4               	movf	prodh,w,c
 15095  0034DE  2162               	addwfc	(ASLB_debug3@rxBuffer+1)& (0+255),w,b
 15096  0034E0  6EDA               	movwf	fsr2h,c
 15097  0034E2  0E00               	movlw	0
 15098  0034E4  D00A               	goto	L27
 15099  0034E6                     l1216:
 15100                           
 15101                           ;HX_ASL_BORON.c: 1001: else
 15102                           ;HX_ASL_BORON.c: 1002: {
 15103                           ;HX_ASL_BORON.c: 1003: rxBuffer[rx_index++] = 0x01;
 15104                           
 15105                           ; BSR set to: 0
 15106  0034E6  0100               	movlb	0	; () banked
 15107  0034E8  5164               	movf	ASLB_debug3@rx_index& (0+255),w,b
 15108  0034EA  0D01               	mullw	1
 15109  0034EC  50F3               	movf	prodl,w,c
 15110  0034EE  2561               	addwf	ASLB_debug3@rxBuffer& (0+255),w,b
 15111  0034F0  6ED9               	movwf	fsr2l,c
 15112  0034F2  50F4               	movf	prodh,w,c
 15113  0034F4  2162               	addwfc	(ASLB_debug3@rxBuffer+1)& (0+255),w,b
 15114  0034F6  6EDA               	movwf	fsr2h,c
 15115  0034F8  0E01               	movlw	1
 15116  0034FA                     L27:
 15117  0034FA  6EDF               	movwf	indf2,c
 15118                           
 15119                           ; BSR set to: 0
 15120  0034FC  2B64               	incf	ASLB_debug3@rx_index& (0+255),f,b
 15121                           
 15122                           ; BSR set to: 0
 15123                           ;HX_ASL_BORON.c: 1004: rxBuffer[rx_index++] = dataByte;
 15124  0034FE  5164               	movf	ASLB_debug3@rx_index& (0+255),w,b
 15125  003500  0D01               	mullw	1
 15126  003502  50F3               	movf	prodl,w,c
 15127  003504  2561               	addwf	ASLB_debug3@rxBuffer& (0+255),w,b
 15128  003506  6ED9               	movwf	fsr2l,c
 15129  003508  50F4               	movf	prodh,w,c
 15130  00350A  2162               	addwfc	(ASLB_debug3@rxBuffer+1)& (0+255),w,b
 15131  00350C  6EDA               	movwf	fsr2h,c
 15132  00350E  C063  FFDF         	movff	ASLB_debug3@dataByte,indf2
 15133  003512  2B64               	incf	ASLB_debug3@rx_index& (0+255),f,b
 15134                           
 15135                           ; BSR set to: 0
 15136                           ;HX_ASL_BORON.c: 1005: }
 15137                           ;HX_ASL_BORON.c: 1006: hx_mainDataIndex += rx_index;
 15138                           
 15139                           ; BSR set to: 0
 15140  003514  5164               	movf	ASLB_debug3@rx_index& (0+255),w,b
 15141  003516  263F               	addwf	_hx_mainDataIndex,f,c
 15142                           
 15143                           ; BSR set to: 0
 15144  003518  0012               	return		;funcret
 15145  00351A                     __end_of_ASLB_debug3:
 15146                           	opt stack 0
 15147                           tblptru	equ	0xFF8
 15148                           tblptrh	equ	0xFF7
 15149                           tblptrl	equ	0xFF6
 15150                           tablat	equ	0xFF5
 15151                           prodh	equ	0xFF4
 15152                           prodl	equ	0xFF3
 15153                           intcon	equ	0xFF2
 15154                           postinc0	equ	0xFEE
 15155                           wreg	equ	0xFE8
 15156                           indf1	equ	0xFE7
 15157                           postinc1	equ	0xFE6
 15158                           postdec1	equ	0xFE5
 15159                           fsr1h	equ	0xFE2
 15160                           fsr1l	equ	0xFE1
 15161                           indf2	equ	0xFDF
 15162                           postinc2	equ	0xFDE
 15163                           postdec2	equ	0xFDD
 15164                           fsr2h	equ	0xFDA
 15165                           fsr2l	equ	0xFD9
 15166                           status	equ	0xFD8
 15167                           
 15168 ;; *************** function _adjustI2CBaudRate *****************
 15169 ;; Defined at:
 15170 ;;		line 1127 in file "HX_ASL_BORON.c"
 15171 ;; Parameters:    Size  Location     Type
 15172 ;;  bd              1    wreg     unsigned char 
 15173 ;; Auto vars:     Size  Location     Type
 15174 ;;  bd              1    0[BANK0 ] unsigned char 
 15175 ;; Return value:  Size  Location     Type
 15176 ;;                  1    wreg      unsigned char 
 15177 ;; Registers used:
 15178 ;;		wreg, status,2, status,0
 15179 ;; Tracked objects:
 15180 ;;		On entry : 0/0
 15181 ;;		On exit  : 0/0
 15182 ;;		Unchanged: 0/0
 15183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15187 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15188 ;;Total ram usage:        1 bytes
 15189 ;; Hardware stack levels used:    1
 15190 ;; Hardware stack levels required when called:    7
 15191 ;; This function calls:
 15192 ;;		Nothing
 15193 ;; This function is called by:
 15194 ;;		_ASLB_debug3
 15195 ;;		_findMaxI2CSpeed
 15196 ;; This function uses a non-reentrant model
 15197 ;;
 15198                           
 15199                           	psect	text56
 15200  003E70                     __ptext56:
 15201                           	opt stack 0
 15202  003E70                     _adjustI2CBaudRate:
 15203                           	opt stack 20
 15204                           
 15205                           ; BSR set to: 0
 15206                           ;incstack = 0
 15207                           ;adjustI2CBaudRate@bd stored from wreg
 15208  003E70  0100               	movlb	0	; () banked
 15209  003E72  6F60               	movwf	adjustI2CBaudRate@bd& (0+255),b
 15210                           
 15211                           ;HX_ASL_BORON.c: 1134: if (bd < 0x03)
 15212  003E74  0E03               	movlw	3
 15213  003E76  0100               	movlb	0	; () banked
 15214  003E78  6160               	cpfslt	adjustI2CBaudRate@bd& (0+255),b
 15215  003E7A  D004               	goto	l1243
 15216                           
 15217                           ; BSR set to: 0
 15218                           ;HX_ASL_BORON.c: 1135: {
 15219                           ;HX_ASL_BORON.c: 1136: SSP1ADD = 0x9F;
 15220  003E7C  0E9F               	movlw	159
 15221  003E7E  6E93               	movwf	3987,c	;volatile
 15222                           
 15223                           ; BSR set to: 0
 15224                           ;HX_ASL_BORON.c: 1137: return 0;
 15225  003E80  0E00               	movlw	0
 15226                           
 15227                           ; BSR set to: 0
 15228  003E82  0012               	return	
 15229  003E84                     l1243:
 15230                           
 15231                           ; BSR set to: 0
 15232                           ;HX_ASL_BORON.c: 1138: }
 15233                           ;HX_ASL_BORON.c: 1140: SSP1ADD = bd;
 15234  003E84  C060  FF93         	movff	adjustI2CBaudRate@bd,3987	;volatile
 15235                           
 15236                           ; BSR set to: 0
 15237                           ;HX_ASL_BORON.c: 1141: return 1;
 15238  003E88  0E01               	movlw	1
 15239  003E8A  0012               	return	
 15240  003E8C                     __end_of_adjustI2CBaudRate:
 15241                           	opt stack 0
 15242                           tblptru	equ	0xFF8
 15243                           tblptrh	equ	0xFF7
 15244                           tblptrl	equ	0xFF6
 15245                           tablat	equ	0xFF5
 15246                           prodh	equ	0xFF4
 15247                           prodl	equ	0xFF3
 15248                           intcon	equ	0xFF2
 15249                           postinc0	equ	0xFEE
 15250                           wreg	equ	0xFE8
 15251                           indf1	equ	0xFE7
 15252                           postinc1	equ	0xFE6
 15253                           postdec1	equ	0xFE5
 15254                           fsr1h	equ	0xFE2
 15255                           fsr1l	equ	0xFE1
 15256                           indf2	equ	0xFDF
 15257                           postinc2	equ	0xFDE
 15258                           postdec2	equ	0xFDD
 15259                           fsr2h	equ	0xFDA
 15260                           fsr2l	equ	0xFD9
 15261                           status	equ	0xFD8
 15262                           
 15263 ;; *************** function _ASLB_debug2 *****************
 15264 ;; Defined at:
 15265 ;;		line 976 in file "HX_ASL_BORON.c"
 15266 ;; Parameters:    Size  Location     Type
 15267 ;;  rxBuffer        2   24[BANK0 ] PTR unsigned char 
 15268 ;;		 -> hx_mainData(61), 
 15269 ;; Auto vars:     Size  Location     Type
 15270 ;;  zeros          10   26[BANK0 ] unsigned char [10]
 15271 ;;  wr_status       1   37[BANK0 ] unsigned char 
 15272 ;;  rx_index        1   36[BANK0 ] unsigned char 
 15273 ;;  rd_status       1    0        unsigned char 
 15274 ;; Return value:  Size  Location     Type
 15275 ;;                  1    wreg      void 
 15276 ;; Registers used:
 15277 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15278 ;; Tracked objects:
 15279 ;;		On entry : 0/0
 15280 ;;		On exit  : 0/0
 15281 ;;		Unchanged: 0/0
 15282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15283 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15284 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15286 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15287 ;;Total ram usage:       14 bytes
 15288 ;; Hardware stack levels used:    1
 15289 ;; Hardware stack levels required when called:   10
 15290 ;; This function calls:
 15291 ;;		_writeI2C
 15292 ;; This function is called by:
 15293 ;;		_write_ASLBoron_debug
 15294 ;; This function uses a non-reentrant model
 15295 ;;
 15296                           
 15297                           	psect	text57
 15298  003A98                     __ptext57:
 15299                           	opt stack 0
 15300  003A98                     _ASLB_debug2:
 15301                           	opt stack 18
 15302                           
 15303                           ;HX_ASL_BORON.c: 982: uint8_t rx_index = 0;
 15304                           
 15305                           ; BSR set to: 0
 15306                           ;incstack = 0
 15307  003A98  0E00               	movlw	0
 15308  003A9A  0100               	movlb	0	; () banked
 15309  003A9C  6F84               	movwf	ASLB_debug2@rx_index& (0+255),b
 15310                           
 15311                           ; BSR set to: 0
 15312                           ;HX_ASL_BORON.c: 983: uint8_t wr_status;
 15313                           ;HX_ASL_BORON.c: 984: uint8_t rd_status;
 15314                           ;HX_ASL_BORON.c: 985: uint8_t zeros[10] = {0};
 15315  003A9E  EE24  F0F5         	lfsr	2,ASLB_debug2@F12373
 15316  003AA2  EE10  F07A         	lfsr	1,ASLB_debug2@zeros
 15317  003AA6  0E09               	movlw	9
 15318  003AA8                     u7521:
 15319  003AA8  CFDB FFE3          	movff	plusw2,plusw1
 15320  003AAC  06E8               	decf	wreg,f,c
 15321  003AAE  E2FC               	bc	u7521
 15322                           
 15323                           ; BSR set to: 0
 15324                           ;HX_ASL_BORON.c: 986: wr_status = writeI2C(zeros, 10, 0x00);
 15325  003AB0  0E7A               	movlw	low ASLB_debug2@zeros
 15326  003AB2  6F70               	movwf	writeI2C@txData& (0+255),b
 15327  003AB4  0E00               	movlw	high ASLB_debug2@zeros
 15328  003AB6  6F71               	movwf	(writeI2C@txData+1)& (0+255),b
 15329  003AB8  0E0A               	movlw	10
 15330  003ABA  6F72               	movwf	writeI2C@size& (0+255),b
 15331  003ABC  0E00               	movlw	0
 15332  003ABE  6F74               	movwf	(writeI2C@slaveAddr+1)& (0+255),b
 15333  003AC0  0E00               	movlw	0
 15334  003AC2  6F73               	movwf	writeI2C@slaveAddr& (0+255),b
 15335  003AC4  EC8D  F01A         	call	_writeI2C	;wreg free
 15336  003AC8  0100               	movlb	0	; () banked
 15337  003ACA  6F85               	movwf	ASLB_debug2@wr_status& (0+255),b
 15338                           
 15339                           ; BSR set to: 0
 15340  003ACC  0012               	return		;funcret
 15341  003ACE                     __end_of_ASLB_debug2:
 15342                           	opt stack 0
 15343                           tblptru	equ	0xFF8
 15344                           tblptrh	equ	0xFF7
 15345                           tblptrl	equ	0xFF6
 15346                           tablat	equ	0xFF5
 15347                           prodh	equ	0xFF4
 15348                           prodl	equ	0xFF3
 15349                           intcon	equ	0xFF2
 15350                           postinc0	equ	0xFEE
 15351                           wreg	equ	0xFE8
 15352                           indf1	equ	0xFE7
 15353                           postinc1	equ	0xFE6
 15354                           postdec1	equ	0xFE5
 15355                           plusw1	equ	0xFE3
 15356                           fsr1h	equ	0xFE2
 15357                           fsr1l	equ	0xFE1
 15358                           indf2	equ	0xFDF
 15359                           postinc2	equ	0xFDE
 15360                           postdec2	equ	0xFDD
 15361                           plusw2	equ	0xFDB
 15362                           fsr2h	equ	0xFDA
 15363                           fsr2l	equ	0xFD9
 15364                           status	equ	0xFD8
 15365                           
 15366 ;; *************** function _writeI2C *****************
 15367 ;; Defined at:
 15368 ;;		line 5 in file "Utils.c"
 15369 ;; Parameters:    Size  Location     Type
 15370 ;;  txData          2   16[BANK0 ] PTR unsigned char 
 15371 ;;		 -> ASLB_debug2@zeros(10), 
 15372 ;;  size            1   18[BANK0 ] unsigned char 
 15373 ;;  slaveAddr       2   19[BANK0 ] unsigned int 
 15374 ;; Auto vars:     Size  Location     Type
 15375 ;;  timeOut         2   21[BANK0 ] unsigned int 
 15376 ;;  status          1   23[BANK0 ] enum E11632
 15377 ;; Return value:  Size  Location     Type
 15378 ;;                  1    wreg      unsigned char 
 15379 ;; Registers used:
 15380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15381 ;; Tracked objects:
 15382 ;;		On entry : 0/0
 15383 ;;		On exit  : 0/0
 15384 ;;		Unchanged: 0/0
 15385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15386 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15387 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15389 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15390 ;;Total ram usage:        8 bytes
 15391 ;; Hardware stack levels used:    1
 15392 ;; Hardware stack levels required when called:    9
 15393 ;; This function calls:
 15394 ;;		_I2C1_MasterWrite
 15395 ;; This function is called by:
 15396 ;;		_ASLB_debug2
 15397 ;;		_run_I2C
 15398 ;; This function uses a non-reentrant model
 15399 ;;
 15400                           
 15401                           	psect	text58
 15402  00351A                     __ptext58:
 15403                           	opt stack 0
 15404  00351A                     _writeI2C:
 15405                           	opt stack 20
 15406                           
 15407                           ;Utils.c: 7: I2C1_MESSAGE_STATUS status = I2C1_MESSAGE_PENDING;
 15408                           
 15409                           ; BSR set to: 0
 15410                           ;incstack = 0
 15411  00351A  0E02               	movlw	2
 15412  00351C  0100               	movlb	0	; () banked
 15413  00351E  6F77               	movwf	writeI2C@status& (0+255),b
 15414                           
 15415                           ;Utils.c: 8: uint16_t timeOut;
 15416                           ;Utils.c: 10: timeOut = 0;
 15417  003520  0E00               	movlw	0
 15418  003522  6F76               	movwf	(writeI2C@timeOut+1)& (0+255),b
 15419  003524  0E00               	movlw	0
 15420  003526  6F75               	movwf	writeI2C@timeOut& (0+255),b
 15421                           
 15422                           ;Utils.c: 12: while(status != I2C1_MESSAGE_FAIL)
 15423  003528  D023               	goto	l253
 15424  00352A                     
 15425                           ; BSR set to: 0
 15426                           ;Utils.c: 13: {
 15427                           ;Utils.c: 14: I2C1_MasterWrite( txData,
 15428                           ;Utils.c: 15: size,
 15429                           ;Utils.c: 16: slaveAddr,
 15430                           ;Utils.c: 17: &status);
 15431                           
 15432                           ; BSR set to: 0
 15433  00352A  C070  F069         	movff	writeI2C@txData,I2C1_MasterWrite@pdata
 15434  00352E  C071  F06A         	movff	writeI2C@txData+1,I2C1_MasterWrite@pdata+1
 15435  003532  C072  F06B         	movff	writeI2C@size,I2C1_MasterWrite@length
 15436  003536  C073  F06C         	movff	writeI2C@slaveAddr,I2C1_MasterWrite@address
 15437  00353A  C074  F06D         	movff	writeI2C@slaveAddr+1,I2C1_MasterWrite@address+1
 15438  00353E  0E77               	movlw	low writeI2C@status
 15439  003540  6F6E               	movwf	I2C1_MasterWrite@pflag& (0+255),b
 15440  003542  0E00               	movlw	high writeI2C@status
 15441  003544  6F6F               	movwf	(I2C1_MasterWrite@pflag+1)& (0+255),b
 15442  003546  EC91  F01B         	call	_I2C1_MasterWrite	;wreg free
 15443  00354A  0E02               	movlw	2
 15444  00354C  0100               	movlb	0	; () banked
 15445  00354E  1977               	xorwf	writeI2C@status& (0+255),w,b
 15446  003550  B4D8               	btfsc	status,2,c
 15447  003552  D7FB               	goto	l248
 15448                           
 15449                           ; BSR set to: 0
 15450                           ;Utils.c: 22: if (status == I2C1_MESSAGE_COMPLETE)
 15451                           
 15452                           ; BSR set to: 0
 15453  003554  5177               	movf	writeI2C@status& (0+255),w,b
 15454  003556  A4D8               	btfss	status,2,c
 15455  003558  D002               	goto	l250
 15456                           
 15457                           ; BSR set to: 0
 15458                           ;Utils.c: 23: {
 15459                           ;Utils.c: 24: return 0;
 15460  00355A  0E00               	movlw	0
 15461                           
 15462                           ; BSR set to: 0
 15463  00355C  0012               	return	
 15464  00355E                     l250:
 15465                           
 15466                           ; BSR set to: 0
 15467                           ;Utils.c: 25: }
 15468                           ;Utils.c: 33: if (timeOut == 100)
 15469                           
 15470                           ; BSR set to: 0
 15471  00355E  0E64               	movlw	100
 15472  003560  1975               	xorwf	writeI2C@timeOut& (0+255),w,b
 15473  003562  1176               	iorwf	(writeI2C@timeOut+1)& (0+255),w,b
 15474  003564  A4D8               	btfss	status,2,c
 15475  003566  D002               	goto	l252
 15476                           
 15477                           ; BSR set to: 0
 15478                           ;Utils.c: 34: return 0;
 15479  003568  0E00               	movlw	0
 15480                           
 15481                           ; BSR set to: 0
 15482  00356A  0012               	return	
 15483  00356C                     l252:
 15484                           
 15485                           ; BSR set to: 0
 15486                           ;Utils.c: 35: else
 15487                           ;Utils.c: 36: timeOut++;
 15488                           
 15489                           ; BSR set to: 0
 15490  00356C  4B75               	infsnz	writeI2C@timeOut& (0+255),f,b
 15491  00356E  2B76               	incf	(writeI2C@timeOut+1)& (0+255),f,b
 15492  003570                     l253:
 15493                           
 15494                           ; BSR set to: 0
 15495                           
 15496                           ; BSR set to: 0
 15497                           
 15498                           ; BSR set to: 0
 15499  003570  0577               	decf	writeI2C@status& (0+255),w,b
 15500  003572  A4D8               	btfss	status,2,c
 15501  003574  D7DA               	goto	l246
 15502                           
 15503                           ; BSR set to: 0
 15504                           ;Utils.c: 37: }
 15505                           ;Utils.c: 38: return 0;
 15506                           
 15507                           ; BSR set to: 0
 15508  003576  0E00               	movlw	0
 15509  003578  0012               	return	
 15510  00357A                     __end_of_writeI2C:
 15511                           	opt stack 0
 15512                           tblptru	equ	0xFF8
 15513                           tblptrh	equ	0xFF7
 15514                           tblptrl	equ	0xFF6
 15515                           tablat	equ	0xFF5
 15516                           prodh	equ	0xFF4
 15517                           prodl	equ	0xFF3
 15518                           intcon	equ	0xFF2
 15519                           postinc0	equ	0xFEE
 15520                           wreg	equ	0xFE8
 15521                           indf1	equ	0xFE7
 15522                           postinc1	equ	0xFE6
 15523                           postdec1	equ	0xFE5
 15524                           plusw1	equ	0xFE3
 15525                           fsr1h	equ	0xFE2
 15526                           fsr1l	equ	0xFE1
 15527                           indf2	equ	0xFDF
 15528                           postinc2	equ	0xFDE
 15529                           postdec2	equ	0xFDD
 15530                           plusw2	equ	0xFDB
 15531                           fsr2h	equ	0xFDA
 15532                           fsr2l	equ	0xFD9
 15533                           status	equ	0xFD8
 15534                           
 15535 ;; *************** function _I2C1_MasterWrite *****************
 15536 ;; Defined at:
 15537 ;;		line 600 in file "mcc_generated_files/i2c1.c"
 15538 ;; Parameters:    Size  Location     Type
 15539 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
 15540 ;;		 -> ASLB_debug2@zeros(10), 
 15541 ;;  length          1   11[BANK0 ] unsigned char 
 15542 ;;  address         2   12[BANK0 ] unsigned int 
 15543 ;;  pflag           2   14[BANK0 ] PTR enum E11632
 15544 ;;		 -> writeI2C@status(1), 
 15545 ;; Auto vars:     Size  Location     Type
 15546 ;;		None
 15547 ;; Return value:  Size  Location     Type
 15548 ;;                  1    wreg      void 
 15549 ;; Registers used:
 15550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15551 ;; Tracked objects:
 15552 ;;		On entry : 0/0
 15553 ;;		On exit  : 0/0
 15554 ;;		Unchanged: 0/0
 15555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15556 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15559 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15560 ;;Total ram usage:        7 bytes
 15561 ;; Hardware stack levels used:    1
 15562 ;; Hardware stack levels required when called:    8
 15563 ;; This function calls:
 15564 ;;		_I2C1_MasterTRBInsert
 15565 ;;		_I2C1_MasterWriteTRBBuild
 15566 ;; This function is called by:
 15567 ;;		_writeI2C
 15568 ;; This function uses a non-reentrant model
 15569 ;;
 15570                           
 15571                           	psect	text59
 15572  003722                     __ptext59:
 15573                           	opt stack 0
 15574  003722                     _I2C1_MasterWrite:
 15575                           	opt stack 20
 15576                           
 15577                           ;i2c1.c: 606: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
 15578                           ;i2c1.c: 609: if (i2c1_object.trStatus.s.full != 1)
 15579                           
 15580                           ; BSR set to: 0
 15581                           ;incstack = 0
 15582  003722  0102               	movlb	2	; () banked
 15583  003724  B1DF               	btfsc	(_i2c1_object+4)& (0+255),0,b
 15584  003726  D01E               	goto	l1488
 15585                           
 15586                           ; BSR set to: 2
 15587                           ;i2c1.c: 610: {
 15588                           ;i2c1.c: 611: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
 15589  003728  0EF1               	movlw	low I2C1_MasterWrite@trBlock
 15590  00372A  0100               	movlb	0	; () banked
 15591  00372C  6F60               	movwf	I2C1_MasterWriteTRBBuild@ptrb& (0+255),b
 15592  00372E  0E03               	movlw	high I2C1_MasterWrite@trBlock
 15593  003730  6F61               	movwf	(I2C1_MasterWriteTRBBuild@ptrb+1)& (0+255),b
 15594  003732  C069  F062         	movff	I2C1_MasterWrite@pdata,I2C1_MasterWriteTRBBuild@pdata
 15595  003736  C06A  F063         	movff	I2C1_MasterWrite@pdata+1,I2C1_MasterWriteTRBBuild@pdata+1
 15596  00373A  C06B  F064         	movff	I2C1_MasterWrite@length,I2C1_MasterWriteTRBBuild@length
 15597  00373E  C06C  F065         	movff	I2C1_MasterWrite@address,I2C1_MasterWriteTRBBuild@address
 15598  003742  C06D  F066         	movff	I2C1_MasterWrite@address+1,I2C1_MasterWriteTRBBuild@address+1
 15599  003746  EC72  F01C         	call	_I2C1_MasterWriteTRBBuild	;wreg free
 15600                           
 15601                           ;i2c1.c: 612: I2C1_MasterTRBInsert(1, &trBlock, pflag);
 15602  00374A  0EF1               	movlw	low I2C1_MasterWrite@trBlock
 15603  00374C  0100               	movlb	0	; () banked
 15604  00374E  6F60               	movwf	I2C1_MasterTRBInsert@ptrb_list& (0+255),b
 15605  003750  0E03               	movlw	high I2C1_MasterWrite@trBlock
 15606  003752  6F61               	movwf	(I2C1_MasterTRBInsert@ptrb_list+1)& (0+255),b
 15607  003754  C06E  F062         	movff	I2C1_MasterWrite@pflag,I2C1_MasterTRBInsert@pflag
 15608  003758  C06F  F063         	movff	I2C1_MasterWrite@pflag+1,I2C1_MasterTRBInsert@pflag+1
 15609  00375C  0E01               	movlw	1
 15610  00375E  ECD0  F017         	call	_I2C1_MasterTRBInsert
 15611                           
 15612                           ;i2c1.c: 613: }
 15613  003762  0012               	return	
 15614  003764                     l1488:
 15615                           
 15616                           ;i2c1.c: 614: else
 15617                           ;i2c1.c: 615: {
 15618                           ;i2c1.c: 616: *pflag = I2C1_MESSAGE_FAIL;
 15619  003764  C06E  FFD9         	movff	I2C1_MasterWrite@pflag,fsr2l
 15620  003768  C06F  FFDA         	movff	I2C1_MasterWrite@pflag+1,fsr2h
 15621  00376C  0E01               	movlw	1
 15622  00376E  6EDF               	movwf	indf2,c
 15623  003770  0012               	return	
 15624  003772                     __end_of_I2C1_MasterWrite:
 15625                           	opt stack 0
 15626                           tblptru	equ	0xFF8
 15627                           tblptrh	equ	0xFF7
 15628                           tblptrl	equ	0xFF6
 15629                           tablat	equ	0xFF5
 15630                           prodh	equ	0xFF4
 15631                           prodl	equ	0xFF3
 15632                           intcon	equ	0xFF2
 15633                           postinc0	equ	0xFEE
 15634                           wreg	equ	0xFE8
 15635                           indf1	equ	0xFE7
 15636                           postinc1	equ	0xFE6
 15637                           postdec1	equ	0xFE5
 15638                           plusw1	equ	0xFE3
 15639                           fsr1h	equ	0xFE2
 15640                           fsr1l	equ	0xFE1
 15641                           indf2	equ	0xFDF
 15642                           postinc2	equ	0xFDE
 15643                           postdec2	equ	0xFDD
 15644                           plusw2	equ	0xFDB
 15645                           fsr2h	equ	0xFDA
 15646                           fsr2l	equ	0xFD9
 15647                           status	equ	0xFD8
 15648                           
 15649 ;; *************** function _ASLB_debug1 *****************
 15650 ;; Defined at:
 15651 ;;		line 896 in file "HX_ASL_BORON.c"
 15652 ;; Parameters:    Size  Location     Type
 15653 ;;  rxBuffer        2   18[BANK0 ] PTR unsigned char 
 15654 ;;		 -> hx_mainData(61), 
 15655 ;; Auto vars:     Size  Location     Type
 15656 ;;  ramWrPkt       71   71[BANK2 ] struct TxRxPacket
 15657 ;;  ramRdPkt       71    0[BANK2 ] struct TxRxPacket
 15658 ;;  ramReadbackP   71  162[BANK1 ] struct TxRxPacket
 15659 ;;  cmdReadbackP   71   33[BANK0 ] struct TxRxPacket
 15660 ;;  stream          8   22[BANK0 ] PTR struct TxRxPacket[4]
 15661 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
 15662 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
 15663 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
 15664 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
 15665 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
 15666 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
 15667 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
 15668 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
 15669 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
 15670 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
 15671 ;;  rx_index        1   32[BANK0 ] unsigned char 
 15672 ;;  ramAddrLo       1   31[BANK0 ] unsigned char 
 15673 ;;  ramAddrHi       1   30[BANK0 ] unsigned char 
 15674 ;;  stream_statu    1   21[BANK0 ] unsigned char 
 15675 ;;  ramData         1   20[BANK0 ] unsigned char 
 15676 ;; Return value:  Size  Location     Type
 15677 ;;                  1    wreg      void 
 15678 ;; Registers used:
 15679 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15680 ;; Tracked objects:
 15681 ;;		On entry : 0/0
 15682 ;;		On exit  : 0/0
 15683 ;;		Unchanged: 0/0
 15684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15685 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15686 ;;      Locals:         0      84      71     142       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15688 ;;      Totals:         0      86      71     142       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15689 ;;Total ram usage:      299 bytes
 15690 ;; Hardware stack levels used:    1
 15691 ;; Hardware stack levels required when called:   10
 15692 ;; This function calls:
 15693 ;;		_calcChecksum
 15694 ;;		_memcpy
 15695 ;;		_streamBoronComm
 15696 ;; This function is called by:
 15697 ;;		_write_ASLBoron_debug
 15698 ;; This function uses a non-reentrant model
 15699 ;;
 15700                           
 15701                           	psect	text60
 15702  0020F8                     __ptext60:
 15703                           	opt stack 0
 15704  0020F8                     _ASLB_debug1:
 15705                           	opt stack 18
 15706                           
 15707                           ;HX_ASL_BORON.c: 902: uint8_t rx_index = 0;
 15708                           
 15709                           ;incstack = 0
 15710  0020F8  0E00               	movlw	0
 15711  0020FA  0100               	movlb	0	; () banked
 15712  0020FC  6F80               	movwf	ASLB_debug1@rx_index& (0+255),b
 15713                           
 15714                           ;HX_ASL_BORON.c: 903: uint8_t stream_status = 0;
 15715  0020FE  0E00               	movlw	0
 15716  002100  6F75               	movwf	ASLB_debug1@stream_status& (0+255),b
 15717                           
 15718                           ;HX_ASL_BORON.c: 904: uint8_t ramAddrHi = 0x00;
 15719  002102  0E00               	movlw	0
 15720  002104  6F7E               	movwf	ASLB_debug1@ramAddrHi& (0+255),b
 15721                           
 15722                           ;HX_ASL_BORON.c: 905: uint8_t ramAddrLo = 0x31;
 15723  002106  0E31               	movlw	49
 15724  002108  6F7F               	movwf	ASLB_debug1@ramAddrLo& (0+255),b
 15725                           
 15726                           ;HX_ASL_BORON.c: 906: uint8_t ramData = 0xBB;
 15727  00210A  0EBB               	movlw	187
 15728  00210C  6F74               	movwf	ASLB_debug1@ramData& (0+255),b
 15729                           
 15730                           ;HX_ASL_BORON.c: 908: txRxPkt ramRdPkt;
 15731                           ;HX_ASL_BORON.c: 909: txRxPkt cmdReadbackPkt;
 15732                           ;HX_ASL_BORON.c: 910: txRxPkt ramReadbackPkt;
 15733                           ;HX_ASL_BORON.c: 913: txRxPkt ramWrPkt;
 15734                           ;HX_ASL_BORON.c: 914: ramWrPkt.txOrRx = 0;
 15735  00210E  0E00               	movlw	0
 15736  002110  0102               	movlb	2	; () banked
 15737  002112  6F47               	movwf	ASLB_debug1@ramWrPkt& (0+255),b
 15738                           
 15739                           ;HX_ASL_BORON.c: 915: ramWrPkt.slaveAddr = 0x5A;
 15740  002114  0E00               	movlw	0
 15741  002116  6F49               	movwf	(ASLB_debug1@ramWrPkt+2)& (0+255),b
 15742  002118  0E5A               	movlw	90
 15743  00211A  6F48               	movwf	(ASLB_debug1@ramWrPkt+1)& (0+255),b
 15744                           
 15745                           ;HX_ASL_BORON.c: 916: ramWrPkt.numOfBytes = 6;
 15746  00211C  0E06               	movlw	6
 15747  00211E  6F8A               	movwf	(ASLB_debug1@ramWrPkt+67)& (0+255),b
 15748                           
 15749                           ;HX_ASL_BORON.c: 917: ramWrPkt.data[0] = 0x32;
 15750  002120  0E32               	movlw	50
 15751  002122  6F4A               	movwf	(ASLB_debug1@ramWrPkt+3)& (0+255),b
 15752                           
 15753                           ; BSR set to: 2
 15754                           ;HX_ASL_BORON.c: 918: ramWrPkt.data[1] = ramAddrLo;
 15755  002124  C07F  F24B         	movff	ASLB_debug1@ramAddrLo,ASLB_debug1@ramWrPkt+4
 15756                           
 15757                           ; BSR set to: 2
 15758                           ;HX_ASL_BORON.c: 919: ramWrPkt.data[2] = ramAddrHi;
 15759  002128  C07E  F24C         	movff	ASLB_debug1@ramAddrHi,ASLB_debug1@ramWrPkt+5
 15760                           
 15761                           ;HX_ASL_BORON.c: 920: ramWrPkt.data[3] = 1;
 15762  00212C  0E01               	movlw	1
 15763  00212E  6F4D               	movwf	(ASLB_debug1@ramWrPkt+6)& (0+255),b
 15764                           
 15765                           ; BSR set to: 2
 15766                           ;HX_ASL_BORON.c: 921: ramWrPkt.data[4] = ramData;
 15767  002130  C074  F24E         	movff	ASLB_debug1@ramData,ASLB_debug1@ramWrPkt+7
 15768                           
 15769                           ; BSR set to: 2
 15770                           ;HX_ASL_BORON.c: 922: ramWrPkt.data[5] = calcChecksum(ramWrPkt.data, ramWrPkt.numOfBytes
      +                          -1);
 15771  002134  0E4A               	movlw	low (ASLB_debug1@ramWrPkt+3)
 15772  002136  0100               	movlb	0	; () banked
 15773  002138  6F60               	movwf	calcChecksum@data& (0+255),b
 15774  00213A  0E02               	movlw	high (ASLB_debug1@ramWrPkt+3)
 15775  00213C  6F61               	movwf	(calcChecksum@data+1)& (0+255),b
 15776  00213E  0102               	movlb	2	; () banked
 15777  002140  058A               	decf	(ASLB_debug1@ramWrPkt+67)& (0+255),w,b
 15778  002142  0100               	movlb	0	; () banked
 15779  002144  6F62               	movwf	calcChecksum@size& (0+255),b
 15780  002146  EC67  F01E         	call	_calcChecksum	;wreg free
 15781  00214A  0102               	movlb	2	; () banked
 15782  00214C  6F4F               	movwf	(ASLB_debug1@ramWrPkt+8)& (0+255),b
 15783                           
 15784                           ; BSR set to: 2
 15785                           ;HX_ASL_BORON.c: 925: cmdReadbackPkt.txOrRx = 1;
 15786  00214E  0E01               	movlw	1
 15787  002150  0100               	movlb	0	; () banked
 15788  002152  6F81               	movwf	ASLB_debug1@cmdReadbackPkt& (0+255),b
 15789                           
 15790                           ; BSR set to: 0
 15791                           ;HX_ASL_BORON.c: 926: cmdReadbackPkt.slaveAddr = 0x5A;
 15792  002154  0E00               	movlw	0
 15793  002156  6F83               	movwf	(ASLB_debug1@cmdReadbackPkt+2)& (0+255),b
 15794  002158  0E5A               	movlw	90
 15795  00215A  6F82               	movwf	(ASLB_debug1@cmdReadbackPkt+1)& (0+255),b
 15796                           
 15797                           ; BSR set to: 0
 15798                           ;HX_ASL_BORON.c: 927: cmdReadbackPkt.numOfBytes = 3;
 15799  00215C  0E03               	movlw	3
 15800  00215E  6FC4               	movwf	(ASLB_debug1@cmdReadbackPkt+67)& (0+255),b
 15801                           
 15802                           ; BSR set to: 0
 15803                           ;HX_ASL_BORON.c: 930: ramRdPkt.txOrRx = 0;
 15804  002160  0E00               	movlw	0
 15805  002162  0102               	movlb	2	; () banked
 15806  002164  6F00               	movwf	ASLB_debug1@ramRdPkt& (0+255),b
 15807                           
 15808                           ; BSR set to: 2
 15809                           ;HX_ASL_BORON.c: 931: ramRdPkt.slaveAddr = 0x5A;
 15810  002166  0E00               	movlw	0
 15811  002168  6F02               	movwf	(ASLB_debug1@ramRdPkt+2)& (0+255),b
 15812  00216A  0E5A               	movlw	90
 15813  00216C  6F01               	movwf	(ASLB_debug1@ramRdPkt+1)& (0+255),b
 15814                           
 15815                           ; BSR set to: 2
 15816                           ;HX_ASL_BORON.c: 932: ramRdPkt.numOfBytes = 5;
 15817  00216E  0E05               	movlw	5
 15818  002170  6F43               	movwf	(ASLB_debug1@ramRdPkt+67)& (0+255),b
 15819                           
 15820                           ; BSR set to: 2
 15821                           ;HX_ASL_BORON.c: 933: ramRdPkt.data[0] = 0x22;
 15822  002172  0E22               	movlw	34
 15823  002174  6F03               	movwf	(ASLB_debug1@ramRdPkt+3)& (0+255),b
 15824                           
 15825                           ; BSR set to: 2
 15826                           ;HX_ASL_BORON.c: 934: ramRdPkt.data[1] = ramAddrLo;
 15827  002176  C07F  F204         	movff	ASLB_debug1@ramAddrLo,ASLB_debug1@ramRdPkt+4
 15828                           
 15829                           ; BSR set to: 2
 15830                           ;HX_ASL_BORON.c: 935: ramRdPkt.data[2] = ramAddrHi;
 15831  00217A  C07E  F205         	movff	ASLB_debug1@ramAddrHi,ASLB_debug1@ramRdPkt+5
 15832                           
 15833                           ; BSR set to: 2
 15834                           ;HX_ASL_BORON.c: 936: ramRdPkt.data[3] = 1;
 15835  00217E  0E01               	movlw	1
 15836  002180  6F06               	movwf	(ASLB_debug1@ramRdPkt+6)& (0+255),b
 15837                           
 15838                           ; BSR set to: 2
 15839                           ;HX_ASL_BORON.c: 937: ramRdPkt.data[4] = calcChecksum(ramRdPkt.data, ramRdPkt.numOfBytes
      +                          -1);
 15840  002182  0E03               	movlw	low (ASLB_debug1@ramRdPkt+3)
 15841  002184  0100               	movlb	0	; () banked
 15842  002186  6F60               	movwf	calcChecksum@data& (0+255),b
 15843  002188  0E02               	movlw	high (ASLB_debug1@ramRdPkt+3)
 15844  00218A  6F61               	movwf	(calcChecksum@data+1)& (0+255),b
 15845  00218C  0102               	movlb	2	; () banked
 15846  00218E  0543               	decf	(ASLB_debug1@ramRdPkt+67)& (0+255),w,b
 15847  002190  0100               	movlb	0	; () banked
 15848  002192  6F62               	movwf	calcChecksum@size& (0+255),b
 15849  002194  EC67  F01E         	call	_calcChecksum	;wreg free
 15850  002198  0102               	movlb	2	; () banked
 15851  00219A  6F07               	movwf	(ASLB_debug1@ramRdPkt+7)& (0+255),b
 15852                           
 15853                           ;HX_ASL_BORON.c: 940: ramReadbackPkt.txOrRx = 1;
 15854  00219C  0E01               	movlw	1
 15855  00219E  0101               	movlb	1	; () banked
 15856  0021A0  6FA2               	movwf	ASLB_debug1@ramReadbackPkt& (0+255),b
 15857                           
 15858                           ;HX_ASL_BORON.c: 941: ramReadbackPkt.slaveAddr = 0x5A;
 15859  0021A2  0E00               	movlw	0
 15860  0021A4  6FA4               	movwf	(ASLB_debug1@ramReadbackPkt+2)& (0+255),b
 15861  0021A6  0E5A               	movlw	90
 15862  0021A8  6FA3               	movwf	(ASLB_debug1@ramReadbackPkt+1)& (0+255),b
 15863                           
 15864                           ;HX_ASL_BORON.c: 942: ramReadbackPkt.numOfBytes = 3;
 15865  0021AA  0E03               	movlw	3
 15866  0021AC  6FE5               	movwf	(ASLB_debug1@ramReadbackPkt+67)& (0+255),b
 15867                           
 15868                           ; BSR set to: 1
 15869                           ;HX_ASL_BORON.c: 945: txRxPkt* stream[4];
 15870                           ;HX_ASL_BORON.c: 946: stream[0] = &ramWrPkt;
 15871  0021AE  0E47               	movlw	low ASLB_debug1@ramWrPkt
 15872  0021B0  0100               	movlb	0	; () banked
 15873  0021B2  6F76               	movwf	ASLB_debug1@stream& (0+255),b
 15874  0021B4  0E02               	movlw	high ASLB_debug1@ramWrPkt
 15875  0021B6  6F77               	movwf	(ASLB_debug1@stream+1)& (0+255),b
 15876                           
 15877                           ; BSR set to: 0
 15878                           ;HX_ASL_BORON.c: 947: stream[1] = &cmdReadbackPkt;
 15879  0021B8  0E81               	movlw	low ASLB_debug1@cmdReadbackPkt
 15880  0021BA  6F78               	movwf	(ASLB_debug1@stream+2)& (0+255),b
 15881  0021BC  0E00               	movlw	high ASLB_debug1@cmdReadbackPkt
 15882  0021BE  6F79               	movwf	(ASLB_debug1@stream+3)& (0+255),b
 15883                           
 15884                           ; BSR set to: 0
 15885                           ;HX_ASL_BORON.c: 948: stream[2] = &ramRdPkt;
 15886  0021C0  0E00               	movlw	low ASLB_debug1@ramRdPkt
 15887  0021C2  6F7A               	movwf	(ASLB_debug1@stream+4)& (0+255),b
 15888  0021C4  0E02               	movlw	high ASLB_debug1@ramRdPkt
 15889  0021C6  6F7B               	movwf	(ASLB_debug1@stream+5)& (0+255),b
 15890                           
 15891                           ; BSR set to: 0
 15892                           ;HX_ASL_BORON.c: 949: stream[3] = &ramReadbackPkt;
 15893  0021C8  0EA2               	movlw	low ASLB_debug1@ramReadbackPkt
 15894  0021CA  6F7C               	movwf	(ASLB_debug1@stream+6)& (0+255),b
 15895  0021CC  0E01               	movlw	high ASLB_debug1@ramReadbackPkt
 15896  0021CE  6F7D               	movwf	(ASLB_debug1@stream+7)& (0+255),b
 15897                           
 15898                           ; BSR set to: 0
 15899                           ;HX_ASL_BORON.c: 951: stream_status = streamBoronComm(BORON_COMM_TYPE ,stream, 4);
 15900  0021D0  0E76               	movlw	low ASLB_debug1@stream
 15901  0021D2  6F6E               	movwf	streamBoronComm@pktArr& (0+255),b
 15902  0021D4  0E00               	movlw	high ASLB_debug1@stream
 15903  0021D6  6F6F               	movwf	(streamBoronComm@pktArr+1)& (0+255),b
 15904  0021D8  0E04               	movlw	4
 15905  0021DA  6F70               	movwf	streamBoronComm@pktSize& (0+255),b
 15906  0021DC  5030               	movf	_BORON_COMM_TYPE,w,c
 15907  0021DE  EC4F  F01E         	call	_streamBoronComm
 15908  0021E2  0100               	movlb	0	; () banked
 15909  0021E4  6F75               	movwf	ASLB_debug1@stream_status& (0+255),b
 15910                           
 15911                           ; BSR set to: 0
 15912                           ;HX_ASL_BORON.c: 953: if (stream_status != 0)
 15913  0021E6  5175               	movf	ASLB_debug1@stream_status& (0+255),w,b
 15914  0021E8  B4D8               	btfsc	status,2,c
 15915  0021EA  D02D               	goto	l1206
 15916                           
 15917                           ; BSR set to: 0
 15918                           ;HX_ASL_BORON.c: 954: {
 15919                           ;HX_ASL_BORON.c: 955: memcpy(&rxBuffer[rx_index], cmdReadbackPkt.data, 3);
 15920  0021EC  5180               	movf	ASLB_debug1@rx_index& (0+255),w,b
 15921  0021EE  0D01               	mullw	1
 15922  0021F0  50F3               	movf	prodl,w,c
 15923  0021F2  2572               	addwf	ASLB_debug1@rxBuffer& (0+255),w,b
 15924  0021F4  6F60               	movwf	memcpy@d1& (0+255),b
 15925  0021F6  50F4               	movf	prodh,w,c
 15926  0021F8  2173               	addwfc	(ASLB_debug1@rxBuffer+1)& (0+255),w,b
 15927  0021FA  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 15928  0021FC  0E84               	movlw	low (ASLB_debug1@cmdReadbackPkt+3)
 15929  0021FE  6F62               	movwf	memcpy@s1& (0+255),b
 15930  002200  0E00               	movlw	high (ASLB_debug1@cmdReadbackPkt+3)
 15931  002202  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 15932  002204  0E00               	movlw	0
 15933  002206  6F65               	movwf	(memcpy@n+1)& (0+255),b
 15934  002208  0E03               	movlw	3
 15935  00220A  6F64               	movwf	memcpy@n& (0+255),b
 15936  00220C  EC2B  F01C         	call	_memcpy	;wreg free
 15937                           
 15938                           ;HX_ASL_BORON.c: 956: rx_index += 3;
 15939  002210  0E03               	movlw	3
 15940  002212  0100               	movlb	0	; () banked
 15941  002214  2780               	addwf	ASLB_debug1@rx_index& (0+255),f,b
 15942                           
 15943                           ; BSR set to: 0
 15944                           ;HX_ASL_BORON.c: 957: memcpy(&rxBuffer[rx_index], ramReadbackPkt.data, 3);
 15945  002216  5180               	movf	ASLB_debug1@rx_index& (0+255),w,b
 15946  002218  0D01               	mullw	1
 15947  00221A  50F3               	movf	prodl,w,c
 15948  00221C  2572               	addwf	ASLB_debug1@rxBuffer& (0+255),w,b
 15949  00221E  6F60               	movwf	memcpy@d1& (0+255),b
 15950  002220  50F4               	movf	prodh,w,c
 15951  002222  2173               	addwfc	(ASLB_debug1@rxBuffer+1)& (0+255),w,b
 15952  002224  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 15953  002226  0EA5               	movlw	low (ASLB_debug1@ramReadbackPkt+3)
 15954  002228  6F62               	movwf	memcpy@s1& (0+255),b
 15955  00222A  0E01               	movlw	high (ASLB_debug1@ramReadbackPkt+3)
 15956  00222C  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 15957  00222E  0E00               	movlw	0
 15958  002230  6F65               	movwf	(memcpy@n+1)& (0+255),b
 15959  002232  0E03               	movlw	3
 15960  002234  6F64               	movwf	memcpy@n& (0+255),b
 15961  002236  EC2B  F01C         	call	_memcpy	;wreg free
 15962                           
 15963                           ;HX_ASL_BORON.c: 958: rx_index += 3;
 15964  00223A  0E03               	movlw	3
 15965  00223C  0100               	movlb	0	; () banked
 15966  00223E  2780               	addwf	ASLB_debug1@rx_index& (0+255),f,b
 15967                           
 15968                           ;HX_ASL_BORON.c: 959: hx_mainDataIndex += rx_index;
 15969  002240  5180               	movf	ASLB_debug1@rx_index& (0+255),w,b
 15970  002242  263F               	addwf	_hx_mainDataIndex,f,c
 15971                           
 15972                           ;HX_ASL_BORON.c: 967: }
 15973  002244  0012               	return	
 15974  002246                     l1206:
 15975                           
 15976                           ; BSR set to: 0
 15977                           ;HX_ASL_BORON.c: 968: else
 15978                           ;HX_ASL_BORON.c: 969: {
 15979                           ;HX_ASL_BORON.c: 970: rxBuffer[rx_index++] = 0x41;
 15980                           
 15981                           ; BSR set to: 0
 15982  002246  5180               	movf	ASLB_debug1@rx_index& (0+255),w,b
 15983  002248  0D01               	mullw	1
 15984  00224A  50F3               	movf	prodl,w,c
 15985  00224C  2572               	addwf	ASLB_debug1@rxBuffer& (0+255),w,b
 15986  00224E  6ED9               	movwf	fsr2l,c
 15987  002250  50F4               	movf	prodh,w,c
 15988  002252  2173               	addwfc	(ASLB_debug1@rxBuffer+1)& (0+255),w,b
 15989  002254  6EDA               	movwf	fsr2h,c
 15990  002256  0E41               	movlw	65
 15991  002258  6EDF               	movwf	indf2,c
 15992                           
 15993                           ; BSR set to: 0
 15994  00225A  2B80               	incf	ASLB_debug1@rx_index& (0+255),f,b
 15995                           
 15996                           ; BSR set to: 0
 15997                           ;HX_ASL_BORON.c: 971: rxBuffer[rx_index++] = 0xEE;
 15998  00225C  5180               	movf	ASLB_debug1@rx_index& (0+255),w,b
 15999  00225E  0D01               	mullw	1
 16000  002260  50F3               	movf	prodl,w,c
 16001  002262  2572               	addwf	ASLB_debug1@rxBuffer& (0+255),w,b
 16002  002264  6ED9               	movwf	fsr2l,c
 16003  002266  50F4               	movf	prodh,w,c
 16004  002268  2173               	addwfc	(ASLB_debug1@rxBuffer+1)& (0+255),w,b
 16005  00226A  6EDA               	movwf	fsr2h,c
 16006  00226C  0EEE               	movlw	238
 16007  00226E  6EDF               	movwf	indf2,c
 16008  002270  2B80               	incf	ASLB_debug1@rx_index& (0+255),f,b
 16009                           
 16010                           ; BSR set to: 0
 16011                           ;HX_ASL_BORON.c: 972: hx_mainDataIndex += rx_index;
 16012  002272  5180               	movf	ASLB_debug1@rx_index& (0+255),w,b
 16013  002274  263F               	addwf	_hx_mainDataIndex,f,c
 16014  002276  0012               	return	
 16015  002278                     __end_of_ASLB_debug1:
 16016                           	opt stack 0
 16017                           tblptru	equ	0xFF8
 16018                           tblptrh	equ	0xFF7
 16019                           tblptrl	equ	0xFF6
 16020                           tablat	equ	0xFF5
 16021                           prodh	equ	0xFF4
 16022                           prodl	equ	0xFF3
 16023                           intcon	equ	0xFF2
 16024                           postinc0	equ	0xFEE
 16025                           wreg	equ	0xFE8
 16026                           indf1	equ	0xFE7
 16027                           postinc1	equ	0xFE6
 16028                           postdec1	equ	0xFE5
 16029                           plusw1	equ	0xFE3
 16030                           fsr1h	equ	0xFE2
 16031                           fsr1l	equ	0xFE1
 16032                           indf2	equ	0xFDF
 16033                           postinc2	equ	0xFDE
 16034                           postdec2	equ	0xFDD
 16035                           plusw2	equ	0xFDB
 16036                           fsr2h	equ	0xFDA
 16037                           fsr2l	equ	0xFD9
 16038                           status	equ	0xFD8
 16039                           
 16040 ;; *************** function _streamBoronComm *****************
 16041 ;; Defined at:
 16042 ;;		line 77 in file "Utils.c"
 16043 ;; Parameters:    Size  Location     Type
 16044 ;;  boron_comm_t    1    wreg     unsigned char 
 16045 ;;  pktArr          2   14[BANK0 ] PTR PTR struct TxRxPacke
 16046 ;;		 -> checkAndSendLatchData@stream(48), ASLB_debug1@stream(8), ASLB_AnalogMuxReadingSetup@stream(4), ASLB_HeaterFuncti
      +onality@stream(4), 
 16047 ;;  pktSize         1   16[BANK0 ] unsigned char 
 16048 ;; Auto vars:     Size  Location     Type
 16049 ;;  boron_comm_t    1   17[BANK0 ] unsigned char 
 16050 ;; Return value:  Size  Location     Type
 16051 ;;                  1    wreg      unsigned char 
 16052 ;; Registers used:
 16053 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16054 ;; Tracked objects:
 16055 ;;		On entry : 0/0
 16056 ;;		On exit  : 0/0
 16057 ;;		Unchanged: 0/0
 16058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16059 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16060 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16062 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16063 ;;Total ram usage:        4 bytes
 16064 ;; Hardware stack levels used:    1
 16065 ;; Hardware stack levels required when called:    9
 16066 ;; This function calls:
 16067 ;;		_streamI2C
 16068 ;;		_streamSW
 16069 ;; This function is called by:
 16070 ;;		_ASLB_HeaterFunctionality
 16071 ;;		_ASLB_AnalogMuxReadingSetup
 16072 ;;		_ASLB_debug1
 16073 ;;		_checkAndSendLatchData
 16074 ;; This function uses a non-reentrant model
 16075 ;;
 16076                           
 16077                           	psect	text61
 16078  003C9E                     __ptext61:
 16079                           	opt stack 0
 16080  003C9E                     _streamBoronComm:
 16081                           	opt stack 17
 16082                           
 16083                           ; BSR set to: 0
 16084                           ;incstack = 0
 16085                           ;streamBoronComm@boron_comm_type stored from wreg
 16086  003C9E  0100               	movlb	0	; () banked
 16087  003CA0  6F71               	movwf	streamBoronComm@boron_comm_type& (0+255),b
 16088                           
 16089                           ;Utils.c: 79: if (boron_comm_type == 0)
 16090  003CA2  0100               	movlb	0	; () banked
 16091  003CA4  5171               	movf	streamBoronComm@boron_comm_type& (0+255),w,b
 16092  003CA6  A4D8               	btfss	status,2,c
 16093  003CA8  D009               	goto	l269
 16094                           
 16095                           ; BSR set to: 0
 16096                           ;Utils.c: 80: {
 16097                           ;Utils.c: 81: return streamI2C(pktArr, pktSize);
 16098  003CAA  C06E  F069         	movff	streamBoronComm@pktArr,streamI2C@pktArr
 16099  003CAE  C06F  F06A         	movff	streamBoronComm@pktArr+1,streamI2C@pktArr+1
 16100  003CB2  C070  F06B         	movff	streamBoronComm@pktSize,streamI2C@pktSize
 16101  003CB6  ECED  F00E         	call	_streamI2C	;wreg free
 16102                           
 16103                           ;Utils.c: 82: }
 16104  003CBA  0012               	return	
 16105  003CBC                     l269:
 16106                           
 16107                           ;Utils.c: 83: else
 16108                           ;Utils.c: 84: {
 16109                           ;Utils.c: 85: return streamSW(pktArr, pktSize);
 16110  003CBC  C06E  F060         	movff	streamBoronComm@pktArr,streamSW@pktArr
 16111  003CC0  C06F  F061         	movff	streamBoronComm@pktArr+1,streamSW@pktArr+1
 16112  003CC4  C070  F062         	movff	streamBoronComm@pktSize,streamSW@pktSize
 16113  003CC8  EC48  F020         	call	_streamSW	;wreg free
 16114  003CCC  0012               	return	
 16115  003CCE                     __end_of_streamBoronComm:
 16116                           	opt stack 0
 16117                           tblptru	equ	0xFF8
 16118                           tblptrh	equ	0xFF7
 16119                           tblptrl	equ	0xFF6
 16120                           tablat	equ	0xFF5
 16121                           prodh	equ	0xFF4
 16122                           prodl	equ	0xFF3
 16123                           intcon	equ	0xFF2
 16124                           postinc0	equ	0xFEE
 16125                           wreg	equ	0xFE8
 16126                           indf1	equ	0xFE7
 16127                           postinc1	equ	0xFE6
 16128                           postdec1	equ	0xFE5
 16129                           plusw1	equ	0xFE3
 16130                           fsr1h	equ	0xFE2
 16131                           fsr1l	equ	0xFE1
 16132                           indf2	equ	0xFDF
 16133                           postinc2	equ	0xFDE
 16134                           postdec2	equ	0xFDD
 16135                           plusw2	equ	0xFDB
 16136                           fsr2h	equ	0xFDA
 16137                           fsr2l	equ	0xFD9
 16138                           status	equ	0xFD8
 16139                           
 16140 ;; *************** function _streamSW *****************
 16141 ;; Defined at:
 16142 ;;		line 89 in file "Utils.c"
 16143 ;; Parameters:    Size  Location     Type
 16144 ;;  pktArr          2    0[BANK0 ] PTR PTR struct TxRxPacke
 16145 ;;		 -> checkAndSendLatchData@stream(48), ASLB_debug1@stream(8), ASLB_AnalogMuxReadingSetup@stream(4), ASLB_HeaterFuncti
      +onality@stream(4), 
 16146 ;;  pktSize         1    2[BANK0 ] unsigned char 
 16147 ;; Auto vars:     Size  Location     Type
 16148 ;;		None
 16149 ;; Return value:  Size  Location     Type
 16150 ;;                  1    wreg      unsigned char 
 16151 ;; Registers used:
 16152 ;;		wreg
 16153 ;; Tracked objects:
 16154 ;;		On entry : 0/0
 16155 ;;		On exit  : 0/0
 16156 ;;		Unchanged: 0/0
 16157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16158 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16161 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16162 ;;Total ram usage:        3 bytes
 16163 ;; Hardware stack levels used:    1
 16164 ;; Hardware stack levels required when called:    7
 16165 ;; This function calls:
 16166 ;;		Nothing
 16167 ;; This function is called by:
 16168 ;;		_streamBoronComm
 16169 ;; This function uses a non-reentrant model
 16170 ;;
 16171                           
 16172                           	psect	text62
 16173  004090                     __ptext62:
 16174                           	opt stack 0
 16175  004090                     _streamSW:
 16176                           	opt stack 18
 16177                           
 16178                           ;Utils.c: 93: return 0;
 16179                           
 16180                           ;incstack = 0
 16181  004090  0E00               	movlw	0
 16182  004092  0012               	return	
 16183  004094                     __end_of_streamSW:
 16184                           	opt stack 0
 16185                           tblptru	equ	0xFF8
 16186                           tblptrh	equ	0xFF7
 16187                           tblptrl	equ	0xFF6
 16188                           tablat	equ	0xFF5
 16189                           prodh	equ	0xFF4
 16190                           prodl	equ	0xFF3
 16191                           intcon	equ	0xFF2
 16192                           postinc0	equ	0xFEE
 16193                           wreg	equ	0xFE8
 16194                           indf1	equ	0xFE7
 16195                           postinc1	equ	0xFE6
 16196                           postdec1	equ	0xFE5
 16197                           plusw1	equ	0xFE3
 16198                           fsr1h	equ	0xFE2
 16199                           fsr1l	equ	0xFE1
 16200                           indf2	equ	0xFDF
 16201                           postinc2	equ	0xFDE
 16202                           postdec2	equ	0xFDD
 16203                           plusw2	equ	0xFDB
 16204                           fsr2h	equ	0xFDA
 16205                           fsr2l	equ	0xFD9
 16206                           status	equ	0xFD8
 16207                           
 16208 ;; *************** function _streamI2C *****************
 16209 ;; Defined at:
 16210 ;;		line 96 in file "Utils.c"
 16211 ;; Parameters:    Size  Location     Type
 16212 ;;  pktArr          2    9[BANK0 ] PTR PTR struct TxRxPacke
 16213 ;;		 -> run_I2C@stream(4), checkAndSendLatchData@stream(48), findMaxI2CSpeed@stream(4), ASLB_debug1@stream(8), 
 16214 ;;		 -> ASLB_AnalogMuxReadingSetup@stream(4), ASLB_HeaterFunctionality@stream(4), 
 16215 ;;  pktSize         1   11[BANK0 ] unsigned char 
 16216 ;; Auto vars:     Size  Location     Type
 16217 ;;  trBlock       160    0[BANK1 ] struct .[32]
 16218 ;;  i               1  161[BANK1 ] unsigned char 
 16219 ;;  status          1  160[BANK1 ] enum E11632
 16220 ;; Return value:  Size  Location     Type
 16221 ;;                  1    wreg      unsigned char 
 16222 ;; Registers used:
 16223 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16224 ;; Tracked objects:
 16225 ;;		On entry : 0/0
 16226 ;;		On exit  : 0/0
 16227 ;;		Unchanged: 0/0
 16228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16229 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16230 ;;      Locals:         0       0     162       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16231 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16232 ;;      Totals:         0       5     162       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16233 ;;Total ram usage:      167 bytes
 16234 ;; Hardware stack levels used:    1
 16235 ;; Hardware stack levels required when called:    8
 16236 ;; This function calls:
 16237 ;;		_I2C1_MasterReadTRBBuild
 16238 ;;		_I2C1_MasterTRBInsert
 16239 ;;		_I2C1_MasterWriteTRBBuild
 16240 ;; This function is called by:
 16241 ;;		_streamBoronComm
 16242 ;;		_findMaxI2CSpeed
 16243 ;;		_run_I2C
 16244 ;; This function uses a non-reentrant model
 16245 ;;
 16246                           
 16247                           	psect	text63
 16248  001DDA                     __ptext63:
 16249                           	opt stack 0
 16250  001DDA                     _streamI2C:
 16251                           	opt stack 21
 16252                           
 16253                           ;Utils.c: 98: I2C1_TRANSACTION_REQUEST_BLOCK trBlock[32];
 16254                           ;Utils.c: 99: I2C1_MESSAGE_STATUS status = I2C1_MESSAGE_PENDING;
 16255                           
 16256                           ;incstack = 0
 16257  001DDA  0E02               	movlw	2
 16258  001DDC  0101               	movlb	1	; () banked
 16259  001DDE  6FA0               	movwf	streamI2C@status& (0+255),b
 16260                           
 16261                           ;Utils.c: 100: uint8_t i = 0;
 16262  001DE0  0E00               	movlw	0
 16263  001DE2  6FA1               	movwf	streamI2C@i& (0+255),b
 16264                           
 16265                           ;Utils.c: 102: for (i = 0; i < pktSize; i++)
 16266  001DE4  0E00               	movlw	0
 16267  001DE6  6FA1               	movwf	streamI2C@i& (0+255),b
 16268  001DE8  D0A3               	goto	l277
 16269  001DEA                     
 16270                           ; BSR set to: 1
 16271                           ;Utils.c: 103: {
 16272                           ;Utils.c: 104: if (pktArr[i]->txOrRx == 0)
 16273                           
 16274                           ; BSR set to: 1
 16275  001DEA  51A1               	movf	streamI2C@i& (0+255),w,b
 16276  001DEC  0D02               	mullw	2
 16277  001DEE  50F3               	movf	prodl,w,c
 16278  001DF0  0100               	movlb	0	; () banked
 16279  001DF2  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16280  001DF4  6ED9               	movwf	fsr2l,c
 16281  001DF6  50F4               	movf	prodh,w,c
 16282  001DF8  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16283  001DFA  6EDA               	movwf	fsr2h,c
 16284  001DFC  CFDE F06C          	movff	postinc2,??_streamI2C
 16285  001E00  CFDD F06D          	movff	postdec2,??_streamI2C+1
 16286  001E04  C06C  FFD9         	movff	??_streamI2C,fsr2l
 16287  001E08  C06D  FFDA         	movff	??_streamI2C+1,fsr2h
 16288  001E0C  50DF               	movf	indf2,w,c
 16289  001E0E  A4D8               	btfss	status,2,c
 16290  001E10  D047               	goto	l279
 16291                           
 16292                           ; BSR set to: 0
 16293                           ;Utils.c: 105: {
 16294                           ;Utils.c: 106: I2C1_MasterWriteTRBBuild(&trBlock[i], pktArr[i]->data, pktArr[i]->numOfBy
      +                          tes, pktArr[i]->slaveAddr);
 16295  001E12  0101               	movlb	1	; () banked
 16296  001E14  51A1               	movf	streamI2C@i& (0+255),w,b
 16297  001E16  0D05               	mullw	5
 16298  001E18  0E00               	movlw	low streamI2C@trBlock
 16299  001E1A  24F3               	addwf	prodl,w,c
 16300  001E1C  0100               	movlb	0	; () banked
 16301  001E1E  6F60               	movwf	I2C1_MasterWriteTRBBuild@ptrb& (0+255),b
 16302  001E20  0E01               	movlw	high streamI2C@trBlock
 16303  001E22  20F4               	addwfc	prodh,w,c
 16304  001E24  6F61               	movwf	(I2C1_MasterWriteTRBBuild@ptrb+1)& (0+255),b
 16305  001E26  0101               	movlb	1	; () banked
 16306  001E28  51A1               	movf	streamI2C@i& (0+255),w,b
 16307  001E2A  0D02               	mullw	2
 16308  001E2C  50F3               	movf	prodl,w,c
 16309  001E2E  0100               	movlb	0	; () banked
 16310  001E30  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16311  001E32  6ED9               	movwf	fsr2l,c
 16312  001E34  50F4               	movf	prodh,w,c
 16313  001E36  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16314  001E38  6EDA               	movwf	fsr2h,c
 16315  001E3A  CFDE F06C          	movff	postinc2,??_streamI2C
 16316  001E3E  CFDD F06D          	movff	postdec2,??_streamI2C+1
 16317  001E42  0E03               	movlw	3
 16318  001E44  256C               	addwf	??_streamI2C& (0+255),w,b
 16319  001E46  6F62               	movwf	I2C1_MasterWriteTRBBuild@pdata& (0+255),b
 16320  001E48  0E00               	movlw	0
 16321  001E4A  216D               	addwfc	(??_streamI2C+1)& (0+255),w,b
 16322  001E4C  6F63               	movwf	(I2C1_MasterWriteTRBBuild@pdata+1)& (0+255),b
 16323  001E4E  0101               	movlb	1	; () banked
 16324  001E50  51A1               	movf	streamI2C@i& (0+255),w,b
 16325  001E52  0D02               	mullw	2
 16326  001E54  50F3               	movf	prodl,w,c
 16327  001E56  0100               	movlb	0	; () banked
 16328  001E58  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16329  001E5A  6ED9               	movwf	fsr2l,c
 16330  001E5C  50F4               	movf	prodh,w,c
 16331  001E5E  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16332  001E60  6EDA               	movwf	fsr2h,c
 16333  001E62  EE10 F043          	lfsr	1,67
 16334  001E66  50DE               	movf	postinc2,w,c
 16335  001E68  26E1               	addwf	fsr1l,f,c
 16336  001E6A  50DD               	movf	postdec2,w,c
 16337  001E6C  22E2               	addwfc	fsr1h,f,c
 16338  001E6E  50E7               	movf	indf1,w,c
 16339  001E70  6F64               	movwf	I2C1_MasterWriteTRBBuild@length& (0+255),b
 16340  001E72  0101               	movlb	1	; () banked
 16341  001E74  51A1               	movf	streamI2C@i& (0+255),w,b
 16342  001E76  0D02               	mullw	2
 16343  001E78  50F3               	movf	prodl,w,c
 16344  001E7A  0100               	movlb	0	; () banked
 16345  001E7C  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16346  001E7E  6ED9               	movwf	fsr2l,c
 16347  001E80  50F4               	movf	prodh,w,c
 16348  001E82  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16349  001E84  6EDA               	movwf	fsr2h,c
 16350  001E86  EE10 F001          	lfsr	1,1
 16351  001E8A  50DE               	movf	postinc2,w,c
 16352  001E8C  26E1               	addwf	fsr1l,f,c
 16353  001E8E  50DD               	movf	postdec2,w,c
 16354  001E90  22E2               	addwfc	fsr1h,f,c
 16355  001E92  CFE6 F065          	movff	postinc1,I2C1_MasterWriteTRBBuild@address
 16356  001E96  CFE5 F066          	movff	postdec1,I2C1_MasterWriteTRBBuild@address+1
 16357  001E9A  EC72  F01C         	call	_I2C1_MasterWriteTRBBuild	;wreg free
 16358                           
 16359                           ;Utils.c: 107: }
 16360  001E9E  D046               	goto	l280
 16361  001EA0                     l279:
 16362                           
 16363                           ;Utils.c: 108: else
 16364                           ;Utils.c: 109: {
 16365                           ;Utils.c: 110: I2C1_MasterReadTRBBuild(&trBlock[i], pktArr[i]->data, pktArr[i]->numOfByt
      +                          es, pktArr[i]->slaveAddr);
 16366  001EA0  0101               	movlb	1	; () banked
 16367  001EA2  51A1               	movf	streamI2C@i& (0+255),w,b
 16368  001EA4  0D05               	mullw	5
 16369  001EA6  0E00               	movlw	low streamI2C@trBlock
 16370  001EA8  24F3               	addwf	prodl,w,c
 16371  001EAA  0100               	movlb	0	; () banked
 16372  001EAC  6F60               	movwf	I2C1_MasterReadTRBBuild@ptrb& (0+255),b
 16373  001EAE  0E01               	movlw	high streamI2C@trBlock
 16374  001EB0  20F4               	addwfc	prodh,w,c
 16375  001EB2  6F61               	movwf	(I2C1_MasterReadTRBBuild@ptrb+1)& (0+255),b
 16376  001EB4  0101               	movlb	1	; () banked
 16377  001EB6  51A1               	movf	streamI2C@i& (0+255),w,b
 16378  001EB8  0D02               	mullw	2
 16379  001EBA  50F3               	movf	prodl,w,c
 16380  001EBC  0100               	movlb	0	; () banked
 16381  001EBE  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16382  001EC0  6ED9               	movwf	fsr2l,c
 16383  001EC2  50F4               	movf	prodh,w,c
 16384  001EC4  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16385  001EC6  6EDA               	movwf	fsr2h,c
 16386  001EC8  CFDE F06C          	movff	postinc2,??_streamI2C
 16387  001ECC  CFDD F06D          	movff	postdec2,??_streamI2C+1
 16388  001ED0  0E03               	movlw	3
 16389  001ED2  256C               	addwf	??_streamI2C& (0+255),w,b
 16390  001ED4  6F62               	movwf	I2C1_MasterReadTRBBuild@pdata& (0+255),b
 16391  001ED6  0E00               	movlw	0
 16392  001ED8  216D               	addwfc	(??_streamI2C+1)& (0+255),w,b
 16393  001EDA  6F63               	movwf	(I2C1_MasterReadTRBBuild@pdata+1)& (0+255),b
 16394  001EDC  0101               	movlb	1	; () banked
 16395  001EDE  51A1               	movf	streamI2C@i& (0+255),w,b
 16396  001EE0  0D02               	mullw	2
 16397  001EE2  50F3               	movf	prodl,w,c
 16398  001EE4  0100               	movlb	0	; () banked
 16399  001EE6  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16400  001EE8  6ED9               	movwf	fsr2l,c
 16401  001EEA  50F4               	movf	prodh,w,c
 16402  001EEC  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16403  001EEE  6EDA               	movwf	fsr2h,c
 16404  001EF0  EE10 F043          	lfsr	1,67
 16405  001EF4  50DE               	movf	postinc2,w,c
 16406  001EF6  26E1               	addwf	fsr1l,f,c
 16407  001EF8  50DD               	movf	postdec2,w,c
 16408  001EFA  22E2               	addwfc	fsr1h,f,c
 16409  001EFC  50E7               	movf	indf1,w,c
 16410  001EFE  6F64               	movwf	I2C1_MasterReadTRBBuild@length& (0+255),b
 16411  001F00  0101               	movlb	1	; () banked
 16412  001F02  51A1               	movf	streamI2C@i& (0+255),w,b
 16413  001F04  0D02               	mullw	2
 16414  001F06  50F3               	movf	prodl,w,c
 16415  001F08  0100               	movlb	0	; () banked
 16416  001F0A  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16417  001F0C  6ED9               	movwf	fsr2l,c
 16418  001F0E  50F4               	movf	prodh,w,c
 16419  001F10  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16420  001F12  6EDA               	movwf	fsr2h,c
 16421  001F14  EE10 F001          	lfsr	1,1
 16422  001F18  50DE               	movf	postinc2,w,c
 16423  001F1A  26E1               	addwf	fsr1l,f,c
 16424  001F1C  50DD               	movf	postdec2,w,c
 16425  001F1E  22E2               	addwfc	fsr1h,f,c
 16426  001F20  CFE6 F065          	movff	postinc1,I2C1_MasterReadTRBBuild@address
 16427  001F24  CFE5 F066          	movff	postdec1,I2C1_MasterReadTRBBuild@address+1
 16428  001F28  EC40  F01B         	call	_I2C1_MasterReadTRBBuild	;wreg free
 16429  001F2C                     l280:
 16430  001F2C  0101               	movlb	1	; () banked
 16431  001F2E  2BA1               	incf	streamI2C@i& (0+255),f,b
 16432  001F30                     l277:
 16433                           
 16434                           ; BSR set to: 1
 16435                           
 16436                           ; BSR set to: 1
 16437  001F30  0100               	movlb	0	; () banked
 16438  001F32  516B               	movf	streamI2C@pktSize& (0+255),w,b
 16439  001F34  0101               	movlb	1	; () banked
 16440  001F36  5DA1               	subwf	streamI2C@i& (0+255),w,b
 16441  001F38  B0D8               	btfsc	status,0,c
 16442  001F3A  D013               	goto	l289
 16443  001F3C  D756               	goto	l278
 16444  001F3E                     
 16445                           ; BSR set to: 1
 16446                           ;Utils.c: 115: {
 16447                           ;Utils.c: 117: I2C1_MasterTRBInsert(pktSize, trBlock, &status);
 16448                           
 16449                           ; BSR set to: 1
 16450  001F3E  0E00               	movlw	low streamI2C@trBlock
 16451  001F40  0100               	movlb	0	; () banked
 16452  001F42  6F60               	movwf	I2C1_MasterTRBInsert@ptrb_list& (0+255),b
 16453  001F44  0E01               	movlw	high streamI2C@trBlock
 16454  001F46  6F61               	movwf	(I2C1_MasterTRBInsert@ptrb_list+1)& (0+255),b
 16455  001F48  0EA0               	movlw	low streamI2C@status
 16456  001F4A  6F62               	movwf	I2C1_MasterTRBInsert@pflag& (0+255),b
 16457  001F4C  0E01               	movlw	high streamI2C@status
 16458  001F4E  6F63               	movwf	(I2C1_MasterTRBInsert@pflag+1)& (0+255),b
 16459  001F50  516B               	movf	streamI2C@pktSize& (0+255),w,b
 16460  001F52  ECD0  F017         	call	_I2C1_MasterTRBInsert
 16461  001F56  0E02               	movlw	2
 16462  001F58  0101               	movlb	1	; () banked
 16463  001F5A  19A0               	xorwf	streamI2C@status& (0+255),w,b
 16464  001F5C  A4D8               	btfss	status,2,c
 16465  001F5E  D004               	goto	u6590
 16466  001F60  D7FA               	goto	l285
 16467  001F62                     l289:
 16468                           
 16469                           ; BSR set to: 1
 16470                           
 16471                           ; BSR set to: 1
 16472                           
 16473                           ; BSR set to: 1
 16474  001F62  05A0               	decf	streamI2C@status& (0+255),w,b
 16475  001F64  A4D8               	btfss	status,2,c
 16476  001F66  D7EB               	goto	l283
 16477  001F68                     u6590:
 16478                           
 16479                           ; BSR set to: 1
 16480                           ;Utils.c: 129: }
 16481                           ;Utils.c: 130: }
 16482                           ;Utils.c: 131: return status;
 16483                           
 16484                           ; BSR set to: 1
 16485  001F68  51A0               	movf	streamI2C@status& (0+255),w,b
 16486  001F6A  0012               	return	
 16487  001F6C                     __end_of_streamI2C:
 16488                           	opt stack 0
 16489                           tblptru	equ	0xFF8
 16490                           tblptrh	equ	0xFF7
 16491                           tblptrl	equ	0xFF6
 16492                           tablat	equ	0xFF5
 16493                           prodh	equ	0xFF4
 16494                           prodl	equ	0xFF3
 16495                           intcon	equ	0xFF2
 16496                           postinc0	equ	0xFEE
 16497                           wreg	equ	0xFE8
 16498                           indf1	equ	0xFE7
 16499                           postinc1	equ	0xFE6
 16500                           postdec1	equ	0xFE5
 16501                           plusw1	equ	0xFE3
 16502                           fsr1h	equ	0xFE2
 16503                           fsr1l	equ	0xFE1
 16504                           indf2	equ	0xFDF
 16505                           postinc2	equ	0xFDE
 16506                           postdec2	equ	0xFDD
 16507                           plusw2	equ	0xFDB
 16508                           fsr2h	equ	0xFDA
 16509                           fsr2l	equ	0xFD9
 16510                           status	equ	0xFD8
 16511                           
 16512 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
 16513 ;; Defined at:
 16514 ;;		line 708 in file "mcc_generated_files/i2c1.c"
 16515 ;; Parameters:    Size  Location     Type
 16516 ;;  ptrb            2    0[BANK0 ] PTR struct .
 16517 ;;		 -> I2C1_MasterWrite@trBlock(5), streamI2C@trBlock(160), 
 16518 ;;  pdata           2    2[BANK0 ] PTR unsigned char 
 16519 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
 16520 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
 16521 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
 16522 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
 16523 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
 16524 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
 16525 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
 16526 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug2@zeros(10), ASLB_debug1@ramReadback
      +Pkt(71), 
 16527 ;;		 -> ASLB_debug1@ramRdPkt(71), ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@o
      +venWrPkt(71), 
 16528 ;;		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(71), ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@
      +cmdReadbackPkt(71), 
 16529 ;;  length          1    4[BANK0 ] unsigned char 
 16530 ;;  address         2    5[BANK0 ] unsigned int 
 16531 ;; Auto vars:     Size  Location     Type
 16532 ;;		None
 16533 ;; Return value:  Size  Location     Type
 16534 ;;                  1    wreg      void 
 16535 ;; Registers used:
 16536 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16537 ;; Tracked objects:
 16538 ;;		On entry : 0/0
 16539 ;;		On exit  : 0/0
 16540 ;;		Unchanged: 0/0
 16541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16542 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16544 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16545 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16546 ;;Total ram usage:        9 bytes
 16547 ;; Hardware stack levels used:    1
 16548 ;; Hardware stack levels required when called:    7
 16549 ;; This function calls:
 16550 ;;		Nothing
 16551 ;; This function is called by:
 16552 ;;		_streamI2C
 16553 ;;		_I2C1_MasterWrite
 16554 ;; This function uses a non-reentrant model
 16555 ;;
 16556                           
 16557                           	psect	text64
 16558  0038E4                     __ptext64:
 16559                           	opt stack 0
 16560  0038E4                     _I2C1_MasterWriteTRBBuild:
 16561                           	opt stack 20
 16562                           
 16563                           ;i2c1.c: 714: ptrb->address = address << 1;
 16564                           
 16565                           ; BSR set to: 1
 16566                           ;incstack = 0
 16567  0038E4  C065  F067         	movff	I2C1_MasterWriteTRBBuild@address,??_I2C1_MasterWriteTRBBuild
 16568  0038E8  C066  F068         	movff	I2C1_MasterWriteTRBBuild@address+1,??_I2C1_MasterWriteTRBBuild+1
 16569  0038EC  90D8               	bcf	status,0,c
 16570  0038EE  0100               	movlb	0	; () banked
 16571  0038F0  3767               	rlcf	??_I2C1_MasterWriteTRBBuild& (0+255),f,b
 16572  0038F2  3768               	rlcf	(??_I2C1_MasterWriteTRBBuild+1)& (0+255),f,b
 16573  0038F4  C060  FFD9         	movff	I2C1_MasterWriteTRBBuild@ptrb,fsr2l
 16574  0038F8  C061  FFDA         	movff	I2C1_MasterWriteTRBBuild@ptrb+1,fsr2h
 16575  0038FC  C067  FFDE         	movff	??_I2C1_MasterWriteTRBBuild,postinc2
 16576  003900  C068  FFDD         	movff	??_I2C1_MasterWriteTRBBuild+1,postdec2
 16577                           
 16578                           ; BSR set to: 0
 16579                           ;i2c1.c: 715: ptrb->length = length;
 16580  003904  EE20 F002          	lfsr	2,2
 16581  003908  5160               	movf	I2C1_MasterWriteTRBBuild@ptrb& (0+255),w,b
 16582  00390A  26D9               	addwf	fsr2l,f,c
 16583  00390C  5161               	movf	(I2C1_MasterWriteTRBBuild@ptrb+1)& (0+255),w,b
 16584  00390E  22DA               	addwfc	fsr2h,f,c
 16585  003910  C064  FFDF         	movff	I2C1_MasterWriteTRBBuild@length,indf2
 16586                           
 16587                           ; BSR set to: 0
 16588                           ;i2c1.c: 716: ptrb->pbuffer = pdata;
 16589  003914  EE20 F003          	lfsr	2,3
 16590  003918  5160               	movf	I2C1_MasterWriteTRBBuild@ptrb& (0+255),w,b
 16591  00391A  26D9               	addwf	fsr2l,f,c
 16592  00391C  5161               	movf	(I2C1_MasterWriteTRBBuild@ptrb+1)& (0+255),w,b
 16593  00391E  22DA               	addwfc	fsr2h,f,c
 16594  003920  C062  FFDE         	movff	I2C1_MasterWriteTRBBuild@pdata,postinc2
 16595  003924  C063  FFDD         	movff	I2C1_MasterWriteTRBBuild@pdata+1,postdec2
 16596                           
 16597                           ; BSR set to: 0
 16598  003928  0012               	return		;funcret
 16599  00392A                     __end_of_I2C1_MasterWriteTRBBuild:
 16600                           	opt stack 0
 16601                           tblptru	equ	0xFF8
 16602                           tblptrh	equ	0xFF7
 16603                           tblptrl	equ	0xFF6
 16604                           tablat	equ	0xFF5
 16605                           prodh	equ	0xFF4
 16606                           prodl	equ	0xFF3
 16607                           intcon	equ	0xFF2
 16608                           postinc0	equ	0xFEE
 16609                           wreg	equ	0xFE8
 16610                           indf1	equ	0xFE7
 16611                           postinc1	equ	0xFE6
 16612                           postdec1	equ	0xFE5
 16613                           plusw1	equ	0xFE3
 16614                           fsr1h	equ	0xFE2
 16615                           fsr1l	equ	0xFE1
 16616                           indf2	equ	0xFDF
 16617                           postinc2	equ	0xFDE
 16618                           postdec2	equ	0xFDD
 16619                           plusw2	equ	0xFDB
 16620                           fsr2h	equ	0xFDA
 16621                           fsr2l	equ	0xFD9
 16622                           status	equ	0xFD8
 16623                           
 16624 ;; *************** function _I2C1_MasterTRBInsert *****************
 16625 ;; Defined at:
 16626 ;;		line 642 in file "mcc_generated_files/i2c1.c"
 16627 ;; Parameters:    Size  Location     Type
 16628 ;;  count           1    wreg     unsigned char 
 16629 ;;  ptrb_list       2    0[BANK0 ] PTR struct .
 16630 ;;		 -> I2C1_MasterRead@trBlock(5), I2C1_MasterWrite@trBlock(5), streamI2C@trBlock(160), 
 16631 ;;  pflag           2    2[BANK0 ] PTR enum E11632
 16632 ;;		 -> streamI2C@status(1), readI2C@status(1), writeI2C@status(1), 
 16633 ;; Auto vars:     Size  Location     Type
 16634 ;;  count           1    5[BANK0 ] unsigned char 
 16635 ;; Return value:  Size  Location     Type
 16636 ;;                  1    wreg      void 
 16637 ;; Registers used:
 16638 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16639 ;; Tracked objects:
 16640 ;;		On entry : 0/0
 16641 ;;		On exit  : 0/0
 16642 ;;		Unchanged: 0/0
 16643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16644 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16647 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16648 ;;Total ram usage:        6 bytes
 16649 ;; Hardware stack levels used:    1
 16650 ;; Hardware stack levels required when called:    7
 16651 ;; This function calls:
 16652 ;;		Nothing
 16653 ;; This function is called by:
 16654 ;;		_streamI2C
 16655 ;;		_I2C1_MasterWrite
 16656 ;;		_I2C1_MasterRead
 16657 ;; This function uses a non-reentrant model
 16658 ;;
 16659                           
 16660                           	psect	text65
 16661  002FA0                     __ptext65:
 16662                           	opt stack 0
 16663  002FA0                     _I2C1_MasterTRBInsert:
 16664                           	opt stack 20
 16665                           
 16666                           ; BSR set to: 0
 16667                           ;incstack = 0
 16668                           ;I2C1_MasterTRBInsert@count stored from wreg
 16669  002FA0  0100               	movlb	0	; () banked
 16670  002FA2  6F65               	movwf	I2C1_MasterTRBInsert@count& (0+255),b
 16671                           
 16672                           ;i2c1.c: 649: if (i2c1_object.trStatus.s.full != 1)
 16673  002FA4  0102               	movlb	2	; () banked
 16674  002FA6  B1DF               	btfsc	(_i2c1_object+4)& (0+255),0,b
 16675  002FA8  D039               	goto	l1500
 16676                           
 16677                           ; BSR set to: 2
 16678                           ;i2c1.c: 650: {
 16679                           ;i2c1.c: 651: *pflag = I2C1_MESSAGE_PENDING;
 16680  002FAA  C062  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
 16681  002FAE  C063  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
 16682  002FB2  0E02               	movlw	2
 16683  002FB4  6EDF               	movwf	indf2,c
 16684                           
 16685                           ; BSR set to: 2
 16686                           ;i2c1.c: 653: i2c1_object.pTrTail->ptrb_list = ptrb_list;
 16687  002FB6  EE20 F001          	lfsr	2,1
 16688  002FBA  51DB               	movf	_i2c1_object& (0+255),w,b
 16689  002FBC  26D9               	addwf	fsr2l,f,c
 16690  002FBE  51DC               	movf	(_i2c1_object+1)& (0+255),w,b
 16691  002FC0  22DA               	addwfc	fsr2h,f,c
 16692  002FC2  C060  FFDE         	movff	I2C1_MasterTRBInsert@ptrb_list,postinc2
 16693  002FC6  C061  FFDD         	movff	I2C1_MasterTRBInsert@ptrb_list+1,postdec2
 16694                           
 16695                           ; BSR set to: 2
 16696                           ;i2c1.c: 654: i2c1_object.pTrTail->count = count;
 16697  002FCA  C2DB  FFD9         	movff	_i2c1_object,fsr2l
 16698  002FCE  C2DC  FFDA         	movff	_i2c1_object+1,fsr2h
 16699  002FD2  C065  FFDF         	movff	I2C1_MasterTRBInsert@count,indf2
 16700                           
 16701                           ; BSR set to: 2
 16702                           ;i2c1.c: 655: i2c1_object.pTrTail->pTrFlag = pflag;
 16703  002FD6  EE20 F003          	lfsr	2,3
 16704  002FDA  51DB               	movf	_i2c1_object& (0+255),w,b
 16705  002FDC  26D9               	addwf	fsr2l,f,c
 16706  002FDE  51DC               	movf	(_i2c1_object+1)& (0+255),w,b
 16707  002FE0  22DA               	addwfc	fsr2h,f,c
 16708  002FE2  C062  FFDE         	movff	I2C1_MasterTRBInsert@pflag,postinc2
 16709  002FE6  C063  FFDD         	movff	I2C1_MasterTRBInsert@pflag+1,postdec2
 16710                           
 16711                           ; BSR set to: 2
 16712                           ;i2c1.c: 656: i2c1_object.pTrTail++;
 16713  002FEA  0E05               	movlw	5
 16714  002FEC  27DB               	addwf	_i2c1_object& (0+255),f,b
 16715  002FEE  0E00               	movlw	0
 16716  002FF0  23DC               	addwfc	(_i2c1_object+1)& (0+255),f,b
 16717                           
 16718                           ; BSR set to: 2
 16719                           ;i2c1.c: 659: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
 16720  002FF2  0EFB               	movlw	low (_i2c1_tr_queue+5)
 16721  002FF4  19DB               	xorwf	_i2c1_object& (0+255),w,b
 16722  002FF6  E108               	bnz	l9510
 16723  002FF8  0E03               	movlw	high (_i2c1_tr_queue+5)
 16724  002FFA  19DC               	xorwf	(_i2c1_object+1)& (0+255),w,b
 16725  002FFC  A4D8               	btfss	status,2,c
 16726  002FFE  D004               	goto	l1501
 16727                           
 16728                           ; BSR set to: 2
 16729                           ;i2c1.c: 660: {
 16730                           ;i2c1.c: 662: i2c1_object.pTrTail = i2c1_tr_queue;
 16731  003000  0EF6               	movlw	low _i2c1_tr_queue
 16732  003002  6FDB               	movwf	_i2c1_object& (0+255),b
 16733  003004  0E03               	movlw	high _i2c1_tr_queue
 16734  003006  6FDC               	movwf	(_i2c1_object+1)& (0+255),b
 16735  003008                     l1501:
 16736  003008                     l9510:
 16737                           
 16738                           ; BSR set to: 2
 16739                           ;i2c1.c: 663: }
 16740                           ;i2c1.c: 667: i2c1_object.trStatus.s.empty = 0;
 16741  003008  93DF               	bcf	(_i2c1_object+4)& (0+255),1,b
 16742                           
 16743                           ;i2c1.c: 670: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
 16744  00300A  51DB               	movf	_i2c1_object& (0+255),w,b
 16745  00300C  19DD               	xorwf	(_i2c1_object+2)& (0+255),w,b
 16746  00300E  E10C               	bnz	l9516
 16747  003010  51DC               	movf	(_i2c1_object+1)& (0+255),w,b
 16748  003012  19DE               	xorwf	(_i2c1_object+3)& (0+255),w,b
 16749  003014  A4D8               	btfss	status,2,c
 16750  003016  D008               	goto	l1503
 16751                           
 16752                           ; BSR set to: 2
 16753                           ;i2c1.c: 671: {
 16754                           ;i2c1.c: 673: i2c1_object.trStatus.s.full = 1;
 16755  003018  81DF               	bsf	(_i2c1_object+4)& (0+255),0,b
 16756                           
 16757                           ; BSR set to: 2
 16758                           ;i2c1.c: 674: }
 16759                           ;i2c1.c: 676: }
 16760  00301A  D006               	goto	l1503
 16761  00301C                     l1500:
 16762                           
 16763                           ; BSR set to: 2
 16764                           ;i2c1.c: 677: else
 16765                           ;i2c1.c: 678: {
 16766                           ;i2c1.c: 679: *pflag = I2C1_MESSAGE_FAIL;
 16767                           
 16768                           ; BSR set to: 2
 16769  00301C  C062  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
 16770  003020  C063  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
 16771  003024  0E01               	movlw	1
 16772  003026  6EDF               	movwf	indf2,c
 16773  003028                     l1503:
 16774  003028                     l9516:
 16775                           
 16776                           ; BSR set to: 2
 16777                           ;i2c1.c: 680: }
 16778                           ;i2c1.c: 683: if (*pflag == I2C1_MESSAGE_PENDING)
 16779  003028  C062  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
 16780  00302C  C063  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
 16781  003030  0E02               	movlw	2
 16782  003032  18DE               	xorwf	postinc2,w,c
 16783  003034  A4D8               	btfss	status,2,c
 16784  003036  0012               	return	
 16785  003038                     u6540:
 16786                           
 16787                           ; BSR set to: 2
 16788                           
 16789                           ; BSR set to: 2
 16790                           
 16791                           ; BSR set to: 2
 16792                           ;i2c1.c: 684: {
 16793                           ;i2c1.c: 685: while(i2c1_state != S_MASTER_IDLE);
 16794  003038  502F               	movf	_i2c1_state,w,c
 16795  00303A  A4D8               	btfss	status,2,c
 16796  00303C  D7FD               	goto	u6540
 16797                           
 16798                           ;i2c1.c: 686: {
 16799                           ;i2c1.c: 689: PIR3bits.SSP1IF = 1;
 16800  00303E  010E               	movlb	14	; () banked
 16801  003040  81CD               	bsf	205,0,b	;volatile
 16802  003042  0012               	return	
 16803  003044                     __end_of_I2C1_MasterTRBInsert:
 16804                           	opt stack 0
 16805                           tblptru	equ	0xFF8
 16806                           tblptrh	equ	0xFF7
 16807                           tblptrl	equ	0xFF6
 16808                           tablat	equ	0xFF5
 16809                           prodh	equ	0xFF4
 16810                           prodl	equ	0xFF3
 16811                           intcon	equ	0xFF2
 16812                           postinc0	equ	0xFEE
 16813                           wreg	equ	0xFE8
 16814                           indf1	equ	0xFE7
 16815                           postinc1	equ	0xFE6
 16816                           postdec1	equ	0xFE5
 16817                           plusw1	equ	0xFE3
 16818                           fsr1h	equ	0xFE2
 16819                           fsr1l	equ	0xFE1
 16820                           indf2	equ	0xFDF
 16821                           postinc2	equ	0xFDE
 16822                           postdec2	equ	0xFDD
 16823                           plusw2	equ	0xFDB
 16824                           fsr2h	equ	0xFDA
 16825                           fsr2l	equ	0xFD9
 16826                           status	equ	0xFD8
 16827                           
 16828 ;; *************** function _I2C1_MasterReadTRBBuild *****************
 16829 ;; Defined at:
 16830 ;;		line 695 in file "mcc_generated_files/i2c1.c"
 16831 ;; Parameters:    Size  Location     Type
 16832 ;;  ptrb            2    0[BANK0 ] PTR struct .
 16833 ;;		 -> I2C1_MasterRead@trBlock(5), streamI2C@trBlock(160), 
 16834 ;;  pdata           2    2[BANK0 ] PTR unsigned char 
 16835 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
 16836 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
 16837 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
 16838 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
 16839 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
 16840 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
 16841 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
 16842 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
 16843 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
 16844 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), hx_mainData(61), 
 16845 ;;  length          1    4[BANK0 ] unsigned char 
 16846 ;;  address         2    5[BANK0 ] unsigned int 
 16847 ;; Auto vars:     Size  Location     Type
 16848 ;;		None
 16849 ;; Return value:  Size  Location     Type
 16850 ;;                  1    wreg      void 
 16851 ;; Registers used:
 16852 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16853 ;; Tracked objects:
 16854 ;;		On entry : 0/0
 16855 ;;		On exit  : 0/0
 16856 ;;		Unchanged: 0/0
 16857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16858 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16860 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16861 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16862 ;;Total ram usage:        9 bytes
 16863 ;; Hardware stack levels used:    1
 16864 ;; Hardware stack levels required when called:    7
 16865 ;; This function calls:
 16866 ;;		Nothing
 16867 ;; This function is called by:
 16868 ;;		_streamI2C
 16869 ;;		_I2C1_MasterRead
 16870 ;; This function uses a non-reentrant model
 16871 ;;
 16872                           
 16873                           	psect	text66
 16874  003680                     __ptext66:
 16875                           	opt stack 0
 16876  003680                     _I2C1_MasterReadTRBBuild:
 16877                           	opt stack 21
 16878                           
 16879                           ;i2c1.c: 701: ptrb->address = address << 1;
 16880                           
 16881                           ;incstack = 0
 16882  003680  C065  F067         	movff	I2C1_MasterReadTRBBuild@address,??_I2C1_MasterReadTRBBuild
 16883  003684  C066  F068         	movff	I2C1_MasterReadTRBBuild@address+1,??_I2C1_MasterReadTRBBuild+1
 16884  003688  90D8               	bcf	status,0,c
 16885  00368A  0100               	movlb	0	; () banked
 16886  00368C  3767               	rlcf	??_I2C1_MasterReadTRBBuild& (0+255),f,b
 16887  00368E  3768               	rlcf	(??_I2C1_MasterReadTRBBuild+1)& (0+255),f,b
 16888  003690  C060  FFD9         	movff	I2C1_MasterReadTRBBuild@ptrb,fsr2l
 16889  003694  C061  FFDA         	movff	I2C1_MasterReadTRBBuild@ptrb+1,fsr2h
 16890  003698  C067  FFDE         	movff	??_I2C1_MasterReadTRBBuild,postinc2
 16891  00369C  C068  FFDD         	movff	??_I2C1_MasterReadTRBBuild+1,postdec2
 16892                           
 16893                           ; BSR set to: 0
 16894                           ;i2c1.c: 703: ptrb->address |= 0x01;
 16895  0036A0  C060  FFD9         	movff	I2C1_MasterReadTRBBuild@ptrb,fsr2l
 16896  0036A4  C061  FFDA         	movff	I2C1_MasterReadTRBBuild@ptrb+1,fsr2h
 16897  0036A8  0E00               	movlw	0
 16898  0036AA  80DB               	bsf	plusw2,0,c
 16899                           
 16900                           ; BSR set to: 0
 16901                           ;i2c1.c: 704: ptrb->length = length;
 16902  0036AC  EE20 F002          	lfsr	2,2
 16903  0036B0  5160               	movf	I2C1_MasterReadTRBBuild@ptrb& (0+255),w,b
 16904  0036B2  26D9               	addwf	fsr2l,f,c
 16905  0036B4  5161               	movf	(I2C1_MasterReadTRBBuild@ptrb+1)& (0+255),w,b
 16906  0036B6  22DA               	addwfc	fsr2h,f,c
 16907  0036B8  C064  FFDF         	movff	I2C1_MasterReadTRBBuild@length,indf2
 16908                           
 16909                           ; BSR set to: 0
 16910                           ;i2c1.c: 705: ptrb->pbuffer = pdata;
 16911  0036BC  EE20 F003          	lfsr	2,3
 16912  0036C0  5160               	movf	I2C1_MasterReadTRBBuild@ptrb& (0+255),w,b
 16913  0036C2  26D9               	addwf	fsr2l,f,c
 16914  0036C4  5161               	movf	(I2C1_MasterReadTRBBuild@ptrb+1)& (0+255),w,b
 16915  0036C6  22DA               	addwfc	fsr2h,f,c
 16916  0036C8  C062  FFDE         	movff	I2C1_MasterReadTRBBuild@pdata,postinc2
 16917  0036CC  C063  FFDD         	movff	I2C1_MasterReadTRBBuild@pdata+1,postdec2
 16918                           
 16919                           ; BSR set to: 0
 16920  0036D0  0012               	return		;funcret
 16921  0036D2                     __end_of_I2C1_MasterReadTRBBuild:
 16922                           	opt stack 0
 16923                           tblptru	equ	0xFF8
 16924                           tblptrh	equ	0xFF7
 16925                           tblptrl	equ	0xFF6
 16926                           tablat	equ	0xFF5
 16927                           prodh	equ	0xFF4
 16928                           prodl	equ	0xFF3
 16929                           intcon	equ	0xFF2
 16930                           postinc0	equ	0xFEE
 16931                           wreg	equ	0xFE8
 16932                           indf1	equ	0xFE7
 16933                           postinc1	equ	0xFE6
 16934                           postdec1	equ	0xFE5
 16935                           plusw1	equ	0xFE3
 16936                           fsr1h	equ	0xFE2
 16937                           fsr1l	equ	0xFE1
 16938                           indf2	equ	0xFDF
 16939                           postinc2	equ	0xFDE
 16940                           postdec2	equ	0xFDD
 16941                           plusw2	equ	0xFDB
 16942                           fsr2h	equ	0xFDA
 16943                           fsr2l	equ	0xFD9
 16944                           status	equ	0xFD8
 16945                           
 16946 ;; *************** function _memcpy *****************
 16947 ;; Defined at:
 16948 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memcpy.c"
 16949 ;; Parameters:    Size  Location     Type
 16950 ;;  d1              2    0[BANK0 ] PTR void 
 16951 ;;		 -> hx_mainData(61), 
 16952 ;;  s1              2    2[BANK0 ] PTR const void 
 16953 ;;		 -> ramReadbackPkt.data(64), cmdReadbackPkt.data(64), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@cmdReadbackPkt(71)
      +, 
 16954 ;;  n               2    4[BANK0 ] unsigned int 
 16955 ;; Auto vars:     Size  Location     Type
 16956 ;;  s               2    9[BANK0 ] PTR const unsigned char 
 16957 ;;		 -> ramReadbackPkt.data(64), cmdReadbackPkt.data(64), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@cmdReadbackPkt(71)
      +, 
 16958 ;;  d               2    7[BANK0 ] PTR unsigned char 
 16959 ;;		 -> hx_mainData(61), 
 16960 ;;  tmp             1    6[BANK0 ] unsigned char 
 16961 ;; Return value:  Size  Location     Type
 16962 ;;                  2    0[BANK0 ] PTR void 
 16963 ;; Registers used:
 16964 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16965 ;; Tracked objects:
 16966 ;;		On entry : 0/0
 16967 ;;		On exit  : 0/0
 16968 ;;		Unchanged: 0/0
 16969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16970 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16971 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16973 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16974 ;;Total ram usage:       11 bytes
 16975 ;; Hardware stack levels used:    1
 16976 ;; Hardware stack levels required when called:    7
 16977 ;; This function calls:
 16978 ;;		Nothing
 16979 ;; This function is called by:
 16980 ;;		_ASLB_debug1
 16981 ;; This function uses a non-reentrant model
 16982 ;;
 16983                           
 16984                           	psect	text67
 16985  003856                     __ptext67:
 16986                           	opt stack 0
 16987  003856                     _memcpy:
 16988                           	opt stack 20
 16989                           
 16990                           ; BSR set to: 0
 16991                           ;incstack = 0
 16992  003856  C062  F069         	movff	memcpy@s1,memcpy@s
 16993  00385A  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
 16994  00385E  C060  F067         	movff	memcpy@d1,memcpy@d
 16995  003862  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
 16996  003866  D011               	goto	l2524
 16997  003868                     l10062:
 16998  003868  C069  FFD9         	movff	memcpy@s,fsr2l
 16999  00386C  C06A  FFDA         	movff	memcpy@s+1,fsr2h
 17000  003870  50DF               	movf	indf2,w,c
 17001  003872  0100               	movlb	0	; () banked
 17002  003874  6F66               	movwf	memcpy@tmp& (0+255),b
 17003                           
 17004                           ; BSR set to: 0
 17005  003876  4B69               	infsnz	memcpy@s& (0+255),f,b
 17006  003878  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
 17007                           
 17008                           ; BSR set to: 0
 17009  00387A  C067  FFD9         	movff	memcpy@d,fsr2l
 17010  00387E  C068  FFDA         	movff	memcpy@d+1,fsr2h
 17011  003882  C066  FFDF         	movff	memcpy@tmp,indf2
 17012                           
 17013                           ; BSR set to: 0
 17014  003886  4B67               	infsnz	memcpy@d& (0+255),f,b
 17015  003888  2B68               	incf	(memcpy@d+1)& (0+255),f,b
 17016  00388A                     l2524:
 17017                           
 17018                           ; BSR set to: 0
 17019  00388A  0100               	movlb	0	; () banked
 17020  00388C  0764               	decf	memcpy@n& (0+255),f,b
 17021  00388E  A0D8               	btfss	status,0,c
 17022  003890  0765               	decf	(memcpy@n+1)& (0+255),f,b
 17023  003892  2964               	incf	memcpy@n& (0+255),w,b
 17024  003894  E1E9               	bnz	l10062
 17025  003896  2965               	incf	(memcpy@n+1)& (0+255),w,b
 17026  003898  B4D8               	btfsc	status,2,c
 17027  00389A  0012               	return	
 17028  00389C  D7E5               	goto	l2525
 17029  00389E                     __end_of_memcpy:
 17030                           	opt stack 0
 17031                           tblptru	equ	0xFF8
 17032                           tblptrh	equ	0xFF7
 17033                           tblptrl	equ	0xFF6
 17034                           tablat	equ	0xFF5
 17035                           prodh	equ	0xFF4
 17036                           prodl	equ	0xFF3
 17037                           intcon	equ	0xFF2
 17038                           postinc0	equ	0xFEE
 17039                           wreg	equ	0xFE8
 17040                           indf1	equ	0xFE7
 17041                           postinc1	equ	0xFE6
 17042                           postdec1	equ	0xFE5
 17043                           plusw1	equ	0xFE3
 17044                           fsr1h	equ	0xFE2
 17045                           fsr1l	equ	0xFE1
 17046                           indf2	equ	0xFDF
 17047                           postinc2	equ	0xFDE
 17048                           postdec2	equ	0xFDD
 17049                           plusw2	equ	0xFDB
 17050                           fsr2h	equ	0xFDA
 17051                           fsr2l	equ	0xFD9
 17052                           status	equ	0xFD8
 17053                           
 17054 ;; *************** function _calcChecksum *****************
 17055 ;; Defined at:
 17056 ;;		line 180 in file "Utils.c"
 17057 ;; Parameters:    Size  Location     Type
 17058 ;;  data            2    0[BANK0 ] PTR unsigned char 
 17059 ;;		 -> checkAndSendLatchData@clock_select_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLatchData@ad
      +c_mux_pkt(71), checkAndSendLatchData@adc_pkt(71), 
 17060 ;;		 -> checkAndSendLatchData@cmos_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@varactor_dac_pkt(7
      +1), checkAndSendLatchData@heat_dac_pkt(71), 
 17061 ;;		 -> checkAndSendLatchData@oven_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@osc2_pkt(71), ch
      +eckAndSendLatchData@osc1_pkt(71), 
 17062 ;;		 -> checkAndSendLatchData@osc0_pkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramRdPkt(71), ASLB_debug1@ramWrPkt
      +(71), 
 17063 ;;		 -> ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_HeaterFunctionality@heatDacWrPkt(71), ASLB_HeaterFunctionality@ov
      +enWrPkt(71), hx_inData(64), 
 17064 ;;  size            1    2[BANK0 ] unsigned char 
 17065 ;; Auto vars:     Size  Location     Type
 17066 ;;  i               1    3[BANK0 ] unsigned char 
 17067 ;;  temp_checksu    1    4[BANK0 ] unsigned char 
 17068 ;; Return value:  Size  Location     Type
 17069 ;;                  1    wreg      unsigned char 
 17070 ;; Registers used:
 17071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17072 ;; Tracked objects:
 17073 ;;		On entry : 0/0
 17074 ;;		On exit  : 0/0
 17075 ;;		Unchanged: 0/0
 17076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17077 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17078 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17080 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17081 ;;Total ram usage:        5 bytes
 17082 ;; Hardware stack levels used:    1
 17083 ;; Hardware stack levels required when called:    7
 17084 ;; This function calls:
 17085 ;;		Nothing
 17086 ;; This function is called by:
 17087 ;;		_run_ASLBoron
 17088 ;;		_ASLB_debug1
 17089 ;;		_findMaxI2CSpeed
 17090 ;;		_setupLatchPkt
 17091 ;;		_run_I2C
 17092 ;;		_setupLrgWrPkt
 17093 ;; This function uses a non-reentrant model
 17094 ;;
 17095                           
 17096                           	psect	text68
 17097  003CCE                     __ptext68:
 17098                           	opt stack 0
 17099  003CCE                     _calcChecksum:
 17100                           	opt stack 22
 17101                           
 17102                           ;Utils.c: 182: uint8_t temp_checksum = 0;
 17103                           
 17104                           ; BSR set to: 0
 17105                           ;incstack = 0
 17106  003CCE  0E00               	movlw	0
 17107  003CD0  0100               	movlb	0	; () banked
 17108  003CD2  6F64               	movwf	calcChecksum@temp_checksum& (0+255),b
 17109                           
 17110                           ;Utils.c: 183: for(uint8_t i = 0; i < size; i++)
 17111  003CD4  0E00               	movlw	0
 17112  003CD6  6F63               	movwf	calcChecksum@i& (0+255),b
 17113  003CD8  D00B               	goto	l293
 17114  003CDA                     
 17115                           ; BSR set to: 0
 17116                           ;Utils.c: 184: {
 17117                           ;Utils.c: 185: temp_checksum += data[i];
 17118                           
 17119                           ; BSR set to: 0
 17120  003CDA  5163               	movf	calcChecksum@i& (0+255),w,b
 17121  003CDC  0D01               	mullw	1
 17122  003CDE  50F3               	movf	prodl,w,c
 17123  003CE0  2560               	addwf	calcChecksum@data& (0+255),w,b
 17124  003CE2  6ED9               	movwf	fsr2l,c
 17125  003CE4  50F4               	movf	prodh,w,c
 17126  003CE6  2161               	addwfc	(calcChecksum@data+1)& (0+255),w,b
 17127  003CE8  6EDA               	movwf	fsr2h,c
 17128  003CEA  50DF               	movf	indf2,w,c
 17129  003CEC  2764               	addwf	calcChecksum@temp_checksum& (0+255),f,b
 17130                           
 17131                           ; BSR set to: 0
 17132  003CEE  2B63               	incf	calcChecksum@i& (0+255),f,b
 17133  003CF0                     l293:
 17134                           
 17135                           ; BSR set to: 0
 17136                           
 17137                           ; BSR set to: 0
 17138  003CF0  5162               	movf	calcChecksum@size& (0+255),w,b
 17139  003CF2  5D63               	subwf	calcChecksum@i& (0+255),w,b
 17140  003CF4  A0D8               	btfss	status,0,c
 17141  003CF6  D7F1               	goto	l294
 17142                           
 17143                           ; BSR set to: 0
 17144                           ;Utils.c: 186: }
 17145                           ;Utils.c: 187: temp_checksum = (temp_checksum ^ 0xFF) + 1;
 17146                           
 17147                           ; BSR set to: 0
 17148  003CF8  6D64               	negf	calcChecksum@temp_checksum& (0+255),b
 17149                           
 17150                           ; BSR set to: 0
 17151                           ;Utils.c: 188: return temp_checksum;
 17152  003CFA  5164               	movf	calcChecksum@temp_checksum& (0+255),w,b
 17153  003CFC  0012               	return	
 17154  003CFE                     __end_of_calcChecksum:
 17155                           	opt stack 0
 17156                           tblptru	equ	0xFF8
 17157                           tblptrh	equ	0xFF7
 17158                           tblptrl	equ	0xFF6
 17159                           tablat	equ	0xFF5
 17160                           prodh	equ	0xFF4
 17161                           prodl	equ	0xFF3
 17162                           intcon	equ	0xFF2
 17163                           postinc0	equ	0xFEE
 17164                           wreg	equ	0xFE8
 17165                           indf1	equ	0xFE7
 17166                           postinc1	equ	0xFE6
 17167                           postdec1	equ	0xFE5
 17168                           plusw1	equ	0xFE3
 17169                           fsr1h	equ	0xFE2
 17170                           fsr1l	equ	0xFE1
 17171                           indf2	equ	0xFDF
 17172                           postinc2	equ	0xFDE
 17173                           postdec2	equ	0xFDD
 17174                           plusw2	equ	0xFDB
 17175                           fsr2h	equ	0xFDA
 17176                           fsr2l	equ	0xFD9
 17177                           status	equ	0xFD8
 17178                           
 17179 ;; *************** function _ASLB_debug0 *****************
 17180 ;; Defined at:
 17181 ;;		line 884 in file "HX_ASL_BORON.c"
 17182 ;; Parameters:    Size  Location     Type
 17183 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 17184 ;;		 -> hx_mainData(61), 
 17185 ;; Auto vars:     Size  Location     Type
 17186 ;;  rx_index        1    2[BANK0 ] unsigned char 
 17187 ;; Return value:  Size  Location     Type
 17188 ;;                  1    wreg      void 
 17189 ;; Registers used:
 17190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17191 ;; Tracked objects:
 17192 ;;		On entry : 0/0
 17193 ;;		On exit  : 0/0
 17194 ;;		Unchanged: 0/0
 17195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17196 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17199 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17200 ;;Total ram usage:        3 bytes
 17201 ;; Hardware stack levels used:    1
 17202 ;; Hardware stack levels required when called:    7
 17203 ;; This function calls:
 17204 ;;		Nothing
 17205 ;; This function is called by:
 17206 ;;		_write_ASLBoron_debug
 17207 ;; This function uses a non-reentrant model
 17208 ;;
 17209                           
 17210                           	psect	text69
 17211  003E4E                     __ptext69:
 17212                           	opt stack 0
 17213  003E4E                     _ASLB_debug0:
 17214                           	opt stack 21
 17215                           
 17216                           ;HX_ASL_BORON.c: 891: uint8_t rx_index = 0;
 17217                           
 17218                           ; BSR set to: 0
 17219                           ;incstack = 0
 17220  003E4E  0E00               	movlw	0
 17221  003E50  0100               	movlb	0	; () banked
 17222  003E52  6F62               	movwf	ASLB_debug0@rx_index& (0+255),b
 17223                           
 17224                           ; BSR set to: 0
 17225                           ;HX_ASL_BORON.c: 892: rxBuffer[rx_index++] = 0xAA;
 17226  003E54  5162               	movf	ASLB_debug0@rx_index& (0+255),w,b
 17227  003E56  0D01               	mullw	1
 17228  003E58  50F3               	movf	prodl,w,c
 17229  003E5A  2560               	addwf	ASLB_debug0@rxBuffer& (0+255),w,b
 17230  003E5C  6ED9               	movwf	fsr2l,c
 17231  003E5E  50F4               	movf	prodh,w,c
 17232  003E60  2161               	addwfc	(ASLB_debug0@rxBuffer+1)& (0+255),w,b
 17233  003E62  6EDA               	movwf	fsr2h,c
 17234  003E64  0EAA               	movlw	170
 17235  003E66  6EDF               	movwf	indf2,c
 17236                           
 17237                           ; BSR set to: 0
 17238  003E68  2B62               	incf	ASLB_debug0@rx_index& (0+255),f,b
 17239                           
 17240                           ; BSR set to: 0
 17241                           ;HX_ASL_BORON.c: 893: hx_mainDataIndex += rx_index;
 17242  003E6A  5162               	movf	ASLB_debug0@rx_index& (0+255),w,b
 17243  003E6C  263F               	addwf	_hx_mainDataIndex,f,c
 17244                           
 17245                           ; BSR set to: 0
 17246  003E6E  0012               	return		;funcret
 17247  003E70                     __end_of_ASLB_debug0:
 17248                           	opt stack 0
 17249                           tblptru	equ	0xFF8
 17250                           tblptrh	equ	0xFF7
 17251                           tblptrl	equ	0xFF6
 17252                           tablat	equ	0xFF5
 17253                           prodh	equ	0xFF4
 17254                           prodl	equ	0xFF3
 17255                           intcon	equ	0xFF2
 17256                           postinc0	equ	0xFEE
 17257                           wreg	equ	0xFE8
 17258                           indf1	equ	0xFE7
 17259                           postinc1	equ	0xFE6
 17260                           postdec1	equ	0xFE5
 17261                           plusw1	equ	0xFE3
 17262                           fsr1h	equ	0xFE2
 17263                           fsr1l	equ	0xFE1
 17264                           indf2	equ	0xFDF
 17265                           postinc2	equ	0xFDE
 17266                           postdec2	equ	0xFDD
 17267                           plusw2	equ	0xFDB
 17268                           fsr2h	equ	0xFDA
 17269                           fsr2l	equ	0xFD9
 17270                           status	equ	0xFD8
 17271                           
 17272 ;; *************** function _write_ASLBoron_cstm_cnfg *****************
 17273 ;; Defined at:
 17274 ;;		line 272 in file "HX_ASL_BORON.c"
 17275 ;; Parameters:    Size  Location     Type
 17276 ;;  cnfg_arr        2    0[BANK0 ] PTR unsigned char 
 17277 ;;		 -> run_ASLBoron@cnfg_arr(256), 
 17278 ;;  cnfg_arr_siz    2    2[BANK0 ] unsigned int 
 17279 ;;  rxBuffer        2    4[BANK0 ] PTR unsigned char 
 17280 ;;		 -> hx_mainData(61), 
 17281 ;; Auto vars:     Size  Location     Type
 17282 ;;		None
 17283 ;; Return value:  Size  Location     Type
 17284 ;;                  1    wreg      void 
 17285 ;; Registers used:
 17286 ;;		None
 17287 ;; Tracked objects:
 17288 ;;		On entry : 0/0
 17289 ;;		On exit  : 0/0
 17290 ;;		Unchanged: 0/0
 17291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17292 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17295 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17296 ;;Total ram usage:        6 bytes
 17297 ;; Hardware stack levels used:    1
 17298 ;; Hardware stack levels required when called:    7
 17299 ;; This function calls:
 17300 ;;		Nothing
 17301 ;; This function is called by:
 17302 ;;		_run_ASLBoron
 17303 ;; This function uses a non-reentrant model
 17304 ;;
 17305                           
 17306                           	psect	text70
 17307  0040A6                     __ptext70:
 17308                           	opt stack 0
 17309  0040A6                     _write_ASLBoron_cstm_cnfg:
 17310                           	opt stack 22
 17311                           
 17312                           ; BSR set to: 0
 17313                           ;incstack = 0
 17314  0040A6  0012               	return		;funcret
 17315  0040A8                     __end_of_write_ASLBoron_cstm_cnfg:
 17316                           	opt stack 0
 17317                           tblptru	equ	0xFF8
 17318                           tblptrh	equ	0xFF7
 17319                           tblptrl	equ	0xFF6
 17320                           tablat	equ	0xFF5
 17321                           prodh	equ	0xFF4
 17322                           prodl	equ	0xFF3
 17323                           intcon	equ	0xFF2
 17324                           postinc0	equ	0xFEE
 17325                           wreg	equ	0xFE8
 17326                           indf1	equ	0xFE7
 17327                           postinc1	equ	0xFE6
 17328                           postdec1	equ	0xFE5
 17329                           plusw1	equ	0xFE3
 17330                           fsr1h	equ	0xFE2
 17331                           fsr1l	equ	0xFE1
 17332                           indf2	equ	0xFDF
 17333                           postinc2	equ	0xFDE
 17334                           postdec2	equ	0xFDD
 17335                           plusw2	equ	0xFDB
 17336                           fsr2h	equ	0xFDA
 17337                           fsr2l	equ	0xFD9
 17338                           status	equ	0xFD8
 17339                           
 17340 ;; *************** function _write_ASLBoron_cnfg *****************
 17341 ;; Defined at:
 17342 ;;		line 251 in file "HX_ASL_BORON.c"
 17343 ;; Parameters:    Size  Location     Type
 17344 ;;  run_cnfg        1    wreg     unsigned char 
 17345 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 17346 ;;		 -> hx_mainData(61), 
 17347 ;; Auto vars:     Size  Location     Type
 17348 ;;  run_cnfg        1    4[BANK0 ] unsigned char 
 17349 ;; Return value:  Size  Location     Type
 17350 ;;                  1    wreg      void 
 17351 ;; Registers used:
 17352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17353 ;; Tracked objects:
 17354 ;;		On entry : 0/0
 17355 ;;		On exit  : 0/0
 17356 ;;		Unchanged: 0/0
 17357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17358 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17359 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17361 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17362 ;;Total ram usage:        3 bytes
 17363 ;; Hardware stack levels used:    1
 17364 ;; Hardware stack levels required when called:    8
 17365 ;; This function calls:
 17366 ;;		_ASLB_cnfg0
 17367 ;;		_ASLB_cnfg1
 17368 ;; This function is called by:
 17369 ;;		_run_ASLBoron
 17370 ;; This function uses a non-reentrant model
 17371 ;;
 17372                           
 17373                           	psect	text71
 17374  0033EC                     __ptext71:
 17375                           	opt stack 0
 17376  0033EC                     _write_ASLBoron_cnfg:
 17377                           	opt stack 21
 17378                           
 17379                           ;incstack = 0
 17380                           ;write_ASLBoron_cnfg@run_cnfg stored from wreg
 17381  0033EC  0100               	movlb	0	; () banked
 17382  0033EE  6F64               	movwf	write_ASLBoron_cnfg@run_cnfg& (0+255),b
 17383                           
 17384                           ;HX_ASL_BORON.c: 253: switch (run_cnfg)
 17385  0033F0  D029               	goto	l1088
 17386  0033F2                     
 17387                           ;HX_ASL_BORON.c: 256: ASLB_cnfg0(&rxBuffer[1]);
 17388  0033F2  0E01               	movlw	1
 17389  0033F4  0100               	movlb	0	; () banked
 17390  0033F6  2562               	addwf	write_ASLBoron_cnfg@rxBuffer& (0+255),w,b
 17391  0033F8  6F60               	movwf	ASLB_cnfg0@rxBuffer& (0+255),b
 17392  0033FA  0E00               	movlw	0
 17393  0033FC  2163               	addwfc	(write_ASLBoron_cnfg@rxBuffer+1)& (0+255),w,b
 17394  0033FE  6F61               	movwf	(ASLB_cnfg0@rxBuffer+1)& (0+255),b
 17395  003400  EC55  F020         	call	_ASLB_cnfg0	;wreg free
 17396                           
 17397                           ;HX_ASL_BORON.c: 257: rxBuffer[0] = 0x10;
 17398  003404  C062  FFD9         	movff	write_ASLBoron_cnfg@rxBuffer,fsr2l
 17399  003408  C063  FFDA         	movff	write_ASLBoron_cnfg@rxBuffer+1,fsr2h
 17400  00340C  0E10               	movlw	16
 17401  00340E  6EDF               	movwf	indf2,c
 17402                           
 17403                           ;HX_ASL_BORON.c: 258: break;
 17404  003410  0012               	return	
 17405  003412                     
 17406                           ;HX_ASL_BORON.c: 261: ASLB_cnfg1(&rxBuffer[1]);
 17407  003412  0E01               	movlw	1
 17408  003414  0100               	movlb	0	; () banked
 17409  003416  2562               	addwf	write_ASLBoron_cnfg@rxBuffer& (0+255),w,b
 17410  003418  6F60               	movwf	ASLB_cnfg1@rxBuffer& (0+255),b
 17411  00341A  0E00               	movlw	0
 17412  00341C  2163               	addwfc	(write_ASLBoron_cnfg@rxBuffer+1)& (0+255),w,b
 17413  00341E  6F61               	movwf	(ASLB_cnfg1@rxBuffer+1)& (0+255),b
 17414  003420  EC54  F020         	call	_ASLB_cnfg1	;wreg free
 17415                           
 17416                           ;HX_ASL_BORON.c: 262: rxBuffer[0] = 0x10;
 17417  003424  C062  FFD9         	movff	write_ASLBoron_cnfg@rxBuffer,fsr2l
 17418  003428  C063  FFDA         	movff	write_ASLBoron_cnfg@rxBuffer+1,fsr2h
 17419  00342C  0E10               	movlw	16
 17420  00342E  6EDF               	movwf	indf2,c
 17421                           
 17422                           ;HX_ASL_BORON.c: 263: break;
 17423  003430  0012               	return	
 17424  003432                     
 17425                           ;HX_ASL_BORON.c: 266: hx_state = 0x40;
 17426  003432  0E40               	movlw	64
 17427  003434  6E45               	movwf	_hx_state,c
 17428                           
 17429                           ;HX_ASL_BORON.c: 267: rxBuffer[0] = 0x00;
 17430  003436  C062  FFD9         	movff	write_ASLBoron_cnfg@rxBuffer,fsr2l
 17431  00343A  C063  FFDA         	movff	write_ASLBoron_cnfg@rxBuffer+1,fsr2h
 17432  00343E  0E00               	movlw	0
 17433  003440  6EDF               	movwf	indf2,c
 17434                           
 17435                           ;HX_ASL_BORON.c: 269: }
 17436                           
 17437                           ;HX_ASL_BORON.c: 268: break;
 17438  003442  0012               	return	
 17439  003444                     l1088:
 17440  003444  0100               	movlb	0	; () banked
 17441  003446  5164               	movf	write_ASLBoron_cnfg@run_cnfg& (0+255),w,b
 17442                           
 17443                           ; Switch size 1, requested type "space"
 17444                           ; Number of cases is 2, Range of values is 0 to 1
 17445                           ; switch strategies available:
 17446                           ; Name         Instructions Cycles
 17447                           ; simple_byte            7     4 (average)
 17448                           ;	Chosen strategy is simple_byte
 17449  003448  0A00               	xorlw	0	; case 0
 17450  00344A  B4D8               	btfsc	status,2,c
 17451  00344C  D7D2               	goto	l1089
 17452  00344E  0A01               	xorlw	1	; case 1
 17453  003450  B4D8               	btfsc	status,2,c
 17454  003452  D7DF               	goto	l1091
 17455  003454  D7EE               	goto	l1092
 17456  003456                     __end_of_write_ASLBoron_cnfg:
 17457                           	opt stack 0
 17458                           tblptru	equ	0xFF8
 17459                           tblptrh	equ	0xFF7
 17460                           tblptrl	equ	0xFF6
 17461                           tablat	equ	0xFF5
 17462                           prodh	equ	0xFF4
 17463                           prodl	equ	0xFF3
 17464                           intcon	equ	0xFF2
 17465                           postinc0	equ	0xFEE
 17466                           wreg	equ	0xFE8
 17467                           indf1	equ	0xFE7
 17468                           postinc1	equ	0xFE6
 17469                           postdec1	equ	0xFE5
 17470                           plusw1	equ	0xFE3
 17471                           fsr1h	equ	0xFE2
 17472                           fsr1l	equ	0xFE1
 17473                           indf2	equ	0xFDF
 17474                           postinc2	equ	0xFDE
 17475                           postdec2	equ	0xFDD
 17476                           plusw2	equ	0xFDB
 17477                           fsr2h	equ	0xFDA
 17478                           fsr2l	equ	0xFD9
 17479                           status	equ	0xFD8
 17480                           
 17481 ;; *************** function _ASLB_cnfg1 *****************
 17482 ;; Defined at:
 17483 ;;		line 879 in file "HX_ASL_BORON.c"
 17484 ;; Parameters:    Size  Location     Type
 17485 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 17486 ;;		 -> hx_mainData(61), 
 17487 ;; Auto vars:     Size  Location     Type
 17488 ;;		None
 17489 ;; Return value:  Size  Location     Type
 17490 ;;                  1    wreg      void 
 17491 ;; Registers used:
 17492 ;;		None
 17493 ;; Tracked objects:
 17494 ;;		On entry : 0/0
 17495 ;;		On exit  : 0/0
 17496 ;;		Unchanged: 0/0
 17497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17498 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17501 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17502 ;;Total ram usage:        2 bytes
 17503 ;; Hardware stack levels used:    1
 17504 ;; Hardware stack levels required when called:    7
 17505 ;; This function calls:
 17506 ;;		Nothing
 17507 ;; This function is called by:
 17508 ;;		_write_ASLBoron_cnfg
 17509 ;; This function uses a non-reentrant model
 17510 ;;
 17511                           
 17512                           	psect	text72
 17513  0040A8                     __ptext72:
 17514                           	opt stack 0
 17515  0040A8                     _ASLB_cnfg1:
 17516                           	opt stack 21
 17517                           
 17518                           ;incstack = 0
 17519  0040A8  0012               	return		;funcret
 17520  0040AA                     __end_of_ASLB_cnfg1:
 17521                           	opt stack 0
 17522                           tblptru	equ	0xFF8
 17523                           tblptrh	equ	0xFF7
 17524                           tblptrl	equ	0xFF6
 17525                           tablat	equ	0xFF5
 17526                           prodh	equ	0xFF4
 17527                           prodl	equ	0xFF3
 17528                           intcon	equ	0xFF2
 17529                           postinc0	equ	0xFEE
 17530                           wreg	equ	0xFE8
 17531                           indf1	equ	0xFE7
 17532                           postinc1	equ	0xFE6
 17533                           postdec1	equ	0xFE5
 17534                           plusw1	equ	0xFE3
 17535                           fsr1h	equ	0xFE2
 17536                           fsr1l	equ	0xFE1
 17537                           indf2	equ	0xFDF
 17538                           postinc2	equ	0xFDE
 17539                           postdec2	equ	0xFDD
 17540                           plusw2	equ	0xFDB
 17541                           fsr2h	equ	0xFDA
 17542                           fsr2l	equ	0xFD9
 17543                           status	equ	0xFD8
 17544                           
 17545 ;; *************** function _ASLB_cnfg0 *****************
 17546 ;; Defined at:
 17547 ;;		line 874 in file "HX_ASL_BORON.c"
 17548 ;; Parameters:    Size  Location     Type
 17549 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 17550 ;;		 -> hx_mainData(61), 
 17551 ;; Auto vars:     Size  Location     Type
 17552 ;;		None
 17553 ;; Return value:  Size  Location     Type
 17554 ;;                  1    wreg      void 
 17555 ;; Registers used:
 17556 ;;		None
 17557 ;; Tracked objects:
 17558 ;;		On entry : 0/0
 17559 ;;		On exit  : 0/0
 17560 ;;		Unchanged: 0/0
 17561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17562 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17565 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17566 ;;Total ram usage:        2 bytes
 17567 ;; Hardware stack levels used:    1
 17568 ;; Hardware stack levels required when called:    7
 17569 ;; This function calls:
 17570 ;;		Nothing
 17571 ;; This function is called by:
 17572 ;;		_write_ASLBoron_cnfg
 17573 ;; This function uses a non-reentrant model
 17574 ;;
 17575                           
 17576                           	psect	text73
 17577  0040AA                     __ptext73:
 17578                           	opt stack 0
 17579  0040AA                     _ASLB_cnfg0:
 17580                           	opt stack 21
 17581                           
 17582                           ;incstack = 0
 17583  0040AA  0012               	return		;funcret
 17584  0040AC                     __end_of_ASLB_cnfg0:
 17585                           	opt stack 0
 17586                           tblptru	equ	0xFF8
 17587                           tblptrh	equ	0xFF7
 17588                           tblptrl	equ	0xFF6
 17589                           tablat	equ	0xFF5
 17590                           prodh	equ	0xFF4
 17591                           prodl	equ	0xFF3
 17592                           intcon	equ	0xFF2
 17593                           postinc0	equ	0xFEE
 17594                           wreg	equ	0xFE8
 17595                           indf1	equ	0xFE7
 17596                           postinc1	equ	0xFE6
 17597                           postdec1	equ	0xFE5
 17598                           plusw1	equ	0xFE3
 17599                           fsr1h	equ	0xFE2
 17600                           fsr1l	equ	0xFE1
 17601                           indf2	equ	0xFDF
 17602                           postinc2	equ	0xFDE
 17603                           postdec2	equ	0xFDD
 17604                           plusw2	equ	0xFDB
 17605                           fsr2h	equ	0xFDA
 17606                           fsr2l	equ	0xFD9
 17607                           status	equ	0xFD8
 17608                           
 17609 ;; *************** function _hxHandleTxUART *****************
 17610 ;; Defined at:
 17611 ;;		line 229 in file "HX_CommInterface.c"
 17612 ;; Parameters:    Size  Location     Type
 17613 ;;		None
 17614 ;; Auto vars:     Size  Location     Type
 17615 ;;  i               2    7[BANK0 ] int 
 17616 ;; Return value:  Size  Location     Type
 17617 ;;                  1    wreg      void 
 17618 ;; Registers used:
 17619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17620 ;; Tracked objects:
 17621 ;;		On entry : 0/0
 17622 ;;		On exit  : 0/0
 17623 ;;		Unchanged: 0/0
 17624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17626 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17627 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17628 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17629 ;;Total ram usage:        5 bytes
 17630 ;; Hardware stack levels used:    1
 17631 ;; Hardware stack levels required when called:    9
 17632 ;; This function calls:
 17633 ;;		_EUSART1_Write
 17634 ;;		_hxFlushOutputBuffer
 17635 ;;		_hxStopTimer
 17636 ;; This function is called by:
 17637 ;;		_main
 17638 ;; This function uses a non-reentrant model
 17639 ;;
 17640                           
 17641                           	psect	text74
 17642  00357A                     __ptext74:
 17643                           	opt stack 0
 17644  00357A                     _hxHandleTxUART:
 17645                           	opt stack 21
 17646                           
 17647                           ;HX_CommInterface.c: 231: if (hx_txPacketFlag)
 17648                           
 17649                           ;incstack = 0
 17650  00357A  5046               	movf	_hx_txPacketFlag,w,c
 17651  00357C  B4D8               	btfsc	status,2,c
 17652  00357E  0012               	return	
 17653                           
 17654                           ;HX_CommInterface.c: 232: {
 17655                           ;HX_CommInterface.c: 233: LATBbits.LB5 = 1;
 17656  003580  8A84               	bsf	3972,5,c	;volatile
 17657                           
 17658                           ;HX_CommInterface.c: 234: for (int i = 0; i < hx_outDataIndex; i++)
 17659  003582  0E00               	movlw	0
 17660  003584  0100               	movlb	0	; () banked
 17661  003586  6F68               	movwf	(hxHandleTxUART@i+1)& (0+255),b
 17662  003588  0E00               	movlw	0
 17663  00358A  6F67               	movwf	hxHandleTxUART@i& (0+255),b
 17664  00358C  D00C               	goto	l188
 17665  00358E                     
 17666                           ; BSR set to: 0
 17667                           ;HX_CommInterface.c: 235: {
 17668                           ;HX_CommInterface.c: 236: EUSART1_Write(hx_outData[i]);
 17669                           
 17670                           ; BSR set to: 0
 17671  00358E  0E80               	movlw	low _hx_outData
 17672  003590  2567               	addwf	hxHandleTxUART@i& (0+255),w,b
 17673  003592  6ED9               	movwf	fsr2l,c
 17674  003594  0E0B               	movlw	high _hx_outData
 17675  003596  2168               	addwfc	(hxHandleTxUART@i+1)& (0+255),w,b
 17676  003598  6EDA               	movwf	fsr2h,c
 17677  00359A  50DF               	movf	indf2,w,c
 17678  00359C  EC95  F01C         	call	_EUSART1_Write
 17679  0035A0  0100               	movlb	0	; () banked
 17680  0035A2  4B67               	infsnz	hxHandleTxUART@i& (0+255),f,b
 17681  0035A4  2B68               	incf	(hxHandleTxUART@i+1)& (0+255),f,b
 17682  0035A6                     l188:
 17683                           
 17684                           ; BSR set to: 0
 17685                           
 17686                           ; BSR set to: 0
 17687  0035A6  5040               	movf	_hx_outDataIndex,w,c
 17688  0035A8  6F64               	movwf	??_hxHandleTxUART& (0+255),b
 17689  0035AA  6B65               	clrf	(??_hxHandleTxUART+1)& (0+255),b
 17690  0035AC  5164               	movf	??_hxHandleTxUART& (0+255),w,b
 17691  0035AE  5D67               	subwf	hxHandleTxUART@i& (0+255),w,b
 17692  0035B0  5168               	movf	(hxHandleTxUART@i+1)& (0+255),w,b
 17693  0035B2  0A80               	xorlw	128
 17694  0035B4  6F66               	movwf	(??_hxHandleTxUART+2)& (0+255),b
 17695  0035B6  5165               	movf	(??_hxHandleTxUART+1)& (0+255),w,b
 17696  0035B8  0A80               	xorlw	128
 17697  0035BA  5966               	subwfb	(??_hxHandleTxUART+2)& (0+255),w,b
 17698  0035BC  A0D8               	btfss	status,0,c
 17699  0035BE  D7E7               	goto	l189
 17700  0035C0                     u8220:
 17701                           
 17702                           ; BSR set to: 0
 17703                           
 17704                           ; BSR set to: 0
 17705                           ;HX_CommInterface.c: 237: }
 17706                           ;HX_CommInterface.c: 238: while (PIE3bits.TX1IE == 1);
 17707  0035C0  010E               	movlb	14	; () banked
 17708  0035C2  B9C5               	btfsc	197,4,b	;volatile
 17709  0035C4  D7FD               	goto	u8220
 17710                           
 17711                           ; BSR set to: 14
 17712                           ;HX_CommInterface.c: 239: LATBbits.LB5 = 0;
 17713  0035C6  9A84               	bcf	3972,5,c	;volatile
 17714                           
 17715                           ; BSR set to: 14
 17716                           ;HX_CommInterface.c: 241: hxStopTimer();
 17717  0035C8  ECEF  F01F         	call	_hxStopTimer	;wreg free
 17718                           
 17719                           ;HX_CommInterface.c: 242: hx_txPacketFlag = 0;
 17720  0035CC  0E00               	movlw	0
 17721  0035CE  6E46               	movwf	_hx_txPacketFlag,c
 17722                           
 17723                           ;HX_CommInterface.c: 243: hxFlushOutputBuffer();
 17724  0035D0  ECA0  F01F         	call	_hxFlushOutputBuffer	;wreg free
 17725  0035D4  0012               	return	
 17726  0035D6                     __end_of_hxHandleTxUART:
 17727                           	opt stack 0
 17728                           tblptru	equ	0xFF8
 17729                           tblptrh	equ	0xFF7
 17730                           tblptrl	equ	0xFF6
 17731                           tablat	equ	0xFF5
 17732                           prodh	equ	0xFF4
 17733                           prodl	equ	0xFF3
 17734                           intcon	equ	0xFF2
 17735                           postinc0	equ	0xFEE
 17736                           wreg	equ	0xFE8
 17737                           indf1	equ	0xFE7
 17738                           postinc1	equ	0xFE6
 17739                           postdec1	equ	0xFE5
 17740                           plusw1	equ	0xFE3
 17741                           fsr1h	equ	0xFE2
 17742                           fsr1l	equ	0xFE1
 17743                           indf2	equ	0xFDF
 17744                           postinc2	equ	0xFDE
 17745                           postdec2	equ	0xFDD
 17746                           plusw2	equ	0xFDB
 17747                           fsr2h	equ	0xFDA
 17748                           fsr2l	equ	0xFD9
 17749                           status	equ	0xFD8
 17750                           
 17751 ;; *************** function _hxStopTimer *****************
 17752 ;; Defined at:
 17753 ;;		line 270 in file "HX_CommInterface.c"
 17754 ;; Parameters:    Size  Location     Type
 17755 ;;		None
 17756 ;; Auto vars:     Size  Location     Type
 17757 ;;		None
 17758 ;; Return value:  Size  Location     Type
 17759 ;;                  1    wreg      void 
 17760 ;; Registers used:
 17761 ;;		wreg, status,2, cstack
 17762 ;; Tracked objects:
 17763 ;;		On entry : 0/0
 17764 ;;		On exit  : 0/0
 17765 ;;		Unchanged: 0/0
 17766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17771 ;;Total ram usage:        0 bytes
 17772 ;; Hardware stack levels used:    1
 17773 ;; Hardware stack levels required when called:    8
 17774 ;; This function calls:
 17775 ;;		_TMR0_StopTimer
 17776 ;;		_TMR0_Write16bitTimer
 17777 ;; This function is called by:
 17778 ;;		_hxHandleTxUART
 17779 ;; This function uses a non-reentrant model
 17780 ;;
 17781                           
 17782                           	psect	text75
 17783  003FDE                     __ptext75:
 17784                           	opt stack 0
 17785  003FDE                     _hxStopTimer:
 17786                           	opt stack 21
 17787                           
 17788                           ;HX_CommInterface.c: 272: TMR0_StopTimer();
 17789                           
 17790                           ;incstack = 0
 17791  003FDE  EC4A  F020         	call	_TMR0_StopTimer	;wreg free
 17792                           
 17793                           ;HX_CommInterface.c: 273: TMR0_Write16bitTimer(0xF63C);
 17794  003FE2  0EF6               	movlw	246
 17795  003FE4  0100               	movlb	0	; () banked
 17796  003FE6  6F61               	movwf	(TMR0_Write16bitTimer@timerVal+1)& (0+255),b
 17797  003FE8  0E3C               	movlw	60
 17798  003FEA  6F60               	movwf	TMR0_Write16bitTimer@timerVal& (0+255),b
 17799  003FEC  EC1A  F020         	call	_TMR0_Write16bitTimer	;wreg free
 17800  003FF0  0012               	return		;funcret
 17801  003FF2                     __end_of_hxStopTimer:
 17802                           	opt stack 0
 17803                           tblptru	equ	0xFF8
 17804                           tblptrh	equ	0xFF7
 17805                           tblptrl	equ	0xFF6
 17806                           tablat	equ	0xFF5
 17807                           prodh	equ	0xFF4
 17808                           prodl	equ	0xFF3
 17809                           intcon	equ	0xFF2
 17810                           postinc0	equ	0xFEE
 17811                           wreg	equ	0xFE8
 17812                           indf1	equ	0xFE7
 17813                           postinc1	equ	0xFE6
 17814                           postdec1	equ	0xFE5
 17815                           plusw1	equ	0xFE3
 17816                           fsr1h	equ	0xFE2
 17817                           fsr1l	equ	0xFE1
 17818                           indf2	equ	0xFDF
 17819                           postinc2	equ	0xFDE
 17820                           postdec2	equ	0xFDD
 17821                           plusw2	equ	0xFDB
 17822                           fsr2h	equ	0xFDA
 17823                           fsr2l	equ	0xFD9
 17824                           status	equ	0xFD8
 17825                           
 17826 ;; *************** function _TMR0_Write16bitTimer *****************
 17827 ;; Defined at:
 17828 ;;		line 119 in file "mcc_generated_files/tmr0.c"
 17829 ;; Parameters:    Size  Location     Type
 17830 ;;  timerVal        2    0[BANK0 ] unsigned int 
 17831 ;; Auto vars:     Size  Location     Type
 17832 ;;		None
 17833 ;; Return value:  Size  Location     Type
 17834 ;;                  1    wreg      void 
 17835 ;; Registers used:
 17836 ;;		wreg, status,2
 17837 ;; Tracked objects:
 17838 ;;		On entry : 0/0
 17839 ;;		On exit  : 0/0
 17840 ;;		Unchanged: 0/0
 17841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17842 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17845 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17846 ;;Total ram usage:        2 bytes
 17847 ;; Hardware stack levels used:    1
 17848 ;; Hardware stack levels required when called:    7
 17849 ;; This function calls:
 17850 ;;		Nothing
 17851 ;; This function is called by:
 17852 ;;		_hxStopTimer
 17853 ;; This function uses a non-reentrant model
 17854 ;;
 17855                           
 17856                           	psect	text76
 17857  004034                     __ptext76:
 17858                           	opt stack 0
 17859  004034                     _TMR0_Write16bitTimer:
 17860                           	opt stack 21
 17861                           
 17862                           ;tmr0.c: 122: TMR0H = timerVal >> 8;
 17863                           
 17864                           ;incstack = 0
 17865  004034  0100               	movlb	0	; () banked
 17866  004036  5161               	movf	(TMR0_Write16bitTimer@timerVal+1)& (0+255),w,b
 17867  004038  6ED4               	movwf	4052,c	;volatile
 17868                           
 17869                           ; BSR set to: 0
 17870                           ;tmr0.c: 123: TMR0L = (uint8_t) timerVal;
 17871  00403A  C060  FFD3         	movff	TMR0_Write16bitTimer@timerVal,4051	;volatile
 17872                           
 17873                           ; BSR set to: 0
 17874  00403E  0012               	return		;funcret
 17875  004040                     __end_of_TMR0_Write16bitTimer:
 17876                           	opt stack 0
 17877                           tblptru	equ	0xFF8
 17878                           tblptrh	equ	0xFF7
 17879                           tblptrl	equ	0xFF6
 17880                           tablat	equ	0xFF5
 17881                           prodh	equ	0xFF4
 17882                           prodl	equ	0xFF3
 17883                           intcon	equ	0xFF2
 17884                           postinc0	equ	0xFEE
 17885                           wreg	equ	0xFE8
 17886                           indf1	equ	0xFE7
 17887                           postinc1	equ	0xFE6
 17888                           postdec1	equ	0xFE5
 17889                           plusw1	equ	0xFE3
 17890                           fsr1h	equ	0xFE2
 17891                           fsr1l	equ	0xFE1
 17892                           indf2	equ	0xFDF
 17893                           postinc2	equ	0xFDE
 17894                           postdec2	equ	0xFDD
 17895                           plusw2	equ	0xFDB
 17896                           fsr2h	equ	0xFDA
 17897                           fsr2l	equ	0xFD9
 17898                           status	equ	0xFD8
 17899                           
 17900 ;; *************** function _TMR0_StopTimer *****************
 17901 ;; Defined at:
 17902 ;;		line 100 in file "mcc_generated_files/tmr0.c"
 17903 ;; Parameters:    Size  Location     Type
 17904 ;;		None
 17905 ;; Auto vars:     Size  Location     Type
 17906 ;;		None
 17907 ;; Return value:  Size  Location     Type
 17908 ;;                  1    wreg      void 
 17909 ;; Registers used:
 17910 ;;		None
 17911 ;; Tracked objects:
 17912 ;;		On entry : 0/0
 17913 ;;		On exit  : 0/0
 17914 ;;		Unchanged: 0/0
 17915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17920 ;;Total ram usage:        0 bytes
 17921 ;; Hardware stack levels used:    1
 17922 ;; Hardware stack levels required when called:    7
 17923 ;; This function calls:
 17924 ;;		Nothing
 17925 ;; This function is called by:
 17926 ;;		_hxStopTimer
 17927 ;; This function uses a non-reentrant model
 17928 ;;
 17929                           
 17930                           	psect	text77
 17931  004094                     __ptext77:
 17932                           	opt stack 0
 17933  004094                     _TMR0_StopTimer:
 17934                           	opt stack 21
 17935                           
 17936                           ;tmr0.c: 103: T0CON0bits.T0EN = 0;
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;incstack = 0
 17940  004094  9ED5               	bcf	4053,7,c	;volatile
 17941  004096  0012               	return		;funcret
 17942  004098                     __end_of_TMR0_StopTimer:
 17943                           	opt stack 0
 17944                           tblptru	equ	0xFF8
 17945                           tblptrh	equ	0xFF7
 17946                           tblptrl	equ	0xFF6
 17947                           tablat	equ	0xFF5
 17948                           prodh	equ	0xFF4
 17949                           prodl	equ	0xFF3
 17950                           intcon	equ	0xFF2
 17951                           postinc0	equ	0xFEE
 17952                           wreg	equ	0xFE8
 17953                           indf1	equ	0xFE7
 17954                           postinc1	equ	0xFE6
 17955                           postdec1	equ	0xFE5
 17956                           plusw1	equ	0xFE3
 17957                           fsr1h	equ	0xFE2
 17958                           fsr1l	equ	0xFE1
 17959                           indf2	equ	0xFDF
 17960                           postinc2	equ	0xFDE
 17961                           postdec2	equ	0xFDD
 17962                           plusw2	equ	0xFDB
 17963                           fsr2h	equ	0xFDA
 17964                           fsr2l	equ	0xFD9
 17965                           status	equ	0xFD8
 17966                           
 17967 ;; *************** function _EUSART1_Write *****************
 17968 ;; Defined at:
 17969 ;;		line 144 in file "mcc_generated_files/eusart1.c"
 17970 ;; Parameters:    Size  Location     Type
 17971 ;;  txData          1    wreg     unsigned char 
 17972 ;; Auto vars:     Size  Location     Type
 17973 ;;  txData          1    0[BANK0 ] unsigned char 
 17974 ;; Return value:  Size  Location     Type
 17975 ;;                  1    wreg      void 
 17976 ;; Registers used:
 17977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17978 ;; Tracked objects:
 17979 ;;		On entry : 0/0
 17980 ;;		On exit  : 0/0
 17981 ;;		Unchanged: 0/0
 17982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17984 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17986 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17987 ;;Total ram usage:        1 bytes
 17988 ;; Hardware stack levels used:    1
 17989 ;; Hardware stack levels required when called:    7
 17990 ;; This function calls:
 17991 ;;		Nothing
 17992 ;; This function is called by:
 17993 ;;		_hxHandleTxUART
 17994 ;; This function uses a non-reentrant model
 17995 ;;
 17996                           
 17997                           	psect	text78
 17998  00392A                     __ptext78:
 17999                           	opt stack 0
 18000  00392A                     _EUSART1_Write:
 18001                           	opt stack 22
 18002                           
 18003                           ;incstack = 0
 18004                           ;EUSART1_Write@txData stored from wreg
 18005  00392A  0100               	movlb	0	; () banked
 18006  00392C  6F60               	movwf	EUSART1_Write@txData& (0+255),b
 18007  00392E                     
 18008                           ;eusart1.c: 147: {
 18009                           
 18010                           ;eusart1.c: 146: while(0 == eusart1TxBufferRemaining)
 18011  00392E  0103               	movlb	3	; () banked
 18012  003930  51FE               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 18013  003932  B4D8               	btfsc	status,2,c
 18014  003934  D7FC               	goto	l10812
 18015                           
 18016                           ; BSR set to: 3
 18017                           ;eusart1.c: 148: }
 18018                           ;eusart1.c: 150: if(0 == PIE3bits.TX1IE)
 18019  003936  010E               	movlb	14	; () banked
 18020  003938  B9C5               	btfsc	197,4,b	;volatile
 18021  00393A  D003               	goto	l1737
 18022                           
 18023                           ; BSR set to: 14
 18024                           ;eusart1.c: 151: {
 18025                           ;eusart1.c: 152: TX1REG = txData;
 18026  00393C  C060  FF9A         	movff	EUSART1_Write@txData,3994	;volatile
 18027                           
 18028                           ;eusart1.c: 153: }
 18029  003940  D013               	goto	l1738
 18030  003942                     l1737:
 18031                           
 18032                           ; BSR set to: 14
 18033                           ;eusart1.c: 154: else
 18034                           ;eusart1.c: 155: {
 18035                           ;eusart1.c: 156: PIE3bits.TX1IE = 0;
 18036  003942  99C5               	bcf	197,4,b	;volatile
 18037                           
 18038                           ; BSR set to: 14
 18039                           ;eusart1.c: 157: eusart1TxBuffer[eusart1TxHead++] = txData;
 18040  003944  502B               	movf	_eusart1TxHead,w,c
 18041  003946  0D01               	mullw	1
 18042  003948  0E00               	movlw	low _eusart1TxBuffer
 18043  00394A  24F3               	addwf	prodl,w,c
 18044  00394C  6ED9               	movwf	fsr2l,c
 18045  00394E  0E0B               	movlw	high _eusart1TxBuffer
 18046  003950  20F4               	addwfc	prodh,w,c
 18047  003952  6EDA               	movwf	fsr2h,c
 18048  003954  C060  FFDF         	movff	EUSART1_Write@txData,indf2
 18049                           
 18050                           ; BSR set to: 14
 18051  003958  2A2B               	incf	_eusart1TxHead,f,c
 18052                           
 18053                           ; BSR set to: 14
 18054                           ;eusart1.c: 158: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 18055  00395A  0E3F               	movlw	63
 18056  00395C  642B               	cpfsgt	_eusart1TxHead,c
 18057  00395E  D002               	goto	l1739
 18058                           
 18059                           ; BSR set to: 14
 18060                           ;eusart1.c: 159: {
 18061                           ;eusart1.c: 160: eusart1TxHead = 0;
 18062  003960  0E00               	movlw	0
 18063  003962  6E2B               	movwf	_eusart1TxHead,c
 18064  003964                     l1739:
 18065                           
 18066                           ; BSR set to: 14
 18067                           ;eusart1.c: 162: }
 18068                           ;eusart1.c: 163: eusart1TxBufferRemaining--;
 18069                           
 18070                           ; BSR set to: 14
 18071  003964  0103               	movlb	3	; () banked
 18072  003966  07FE               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 18073  003968                     l1738:
 18074                           
 18075                           ;eusart1.c: 164: }
 18076                           ;eusart1.c: 166: PIE3bits.TX1IE = 1;
 18077                           
 18078                           ; BSR set to: 3
 18079  003968  010E               	movlb	14	; () banked
 18080  00396A  89C5               	bsf	197,4,b	;volatile
 18081                           
 18082                           ; BSR set to: 14
 18083  00396C  0012               	return		;funcret
 18084  00396E                     __end_of_EUSART1_Write:
 18085                           	opt stack 0
 18086                           tblptru	equ	0xFF8
 18087                           tblptrh	equ	0xFF7
 18088                           tblptrl	equ	0xFF6
 18089                           tablat	equ	0xFF5
 18090                           prodh	equ	0xFF4
 18091                           prodl	equ	0xFF3
 18092                           intcon	equ	0xFF2
 18093                           postinc0	equ	0xFEE
 18094                           wreg	equ	0xFE8
 18095                           indf1	equ	0xFE7
 18096                           postinc1	equ	0xFE6
 18097                           postdec1	equ	0xFE5
 18098                           plusw1	equ	0xFE3
 18099                           fsr1h	equ	0xFE2
 18100                           fsr1l	equ	0xFE1
 18101                           indf2	equ	0xFDF
 18102                           postinc2	equ	0xFDE
 18103                           postdec2	equ	0xFDD
 18104                           plusw2	equ	0xFDB
 18105                           fsr2h	equ	0xFDA
 18106                           fsr2l	equ	0xFD9
 18107                           status	equ	0xFD8
 18108                           
 18109 ;; *************** function _SYSTEM_Initialize *****************
 18110 ;; Defined at:
 18111 ;;		line 115 in file "mcc_generated_files/mcc.c"
 18112 ;; Parameters:    Size  Location     Type
 18113 ;;		None
 18114 ;; Auto vars:     Size  Location     Type
 18115 ;;		None
 18116 ;; Return value:  Size  Location     Type
 18117 ;;                  1    wreg      void 
 18118 ;; Registers used:
 18119 ;;		wreg, status,2, status,0, cstack
 18120 ;; Tracked objects:
 18121 ;;		On entry : 0/0
 18122 ;;		On exit  : 0/0
 18123 ;;		Unchanged: 0/0
 18124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18129 ;;Total ram usage:        0 bytes
 18130 ;; Hardware stack levels used:    1
 18131 ;; Hardware stack levels required when called:    9
 18132 ;; This function calls:
 18133 ;;		_EUSART1_Initialize
 18134 ;;		_I2C1_Initialize
 18135 ;;		_INTERRUPT_Initialize
 18136 ;;		_OSCILLATOR_Initialize
 18137 ;;		_PIN_MANAGER_Initialize
 18138 ;;		_TMR0_Initialize
 18139 ;; This function is called by:
 18140 ;;		_main
 18141 ;; This function uses a non-reentrant model
 18142 ;;
 18143                           
 18144                           	psect	text79
 18145  003EDC                     __ptext79:
 18146                           	opt stack 0
 18147  003EDC                     _SYSTEM_Initialize:
 18148                           	opt stack 21
 18149                           
 18150                           ;mcc.c: 118: INTERRUPT_Initialize();
 18151                           
 18152                           ; BSR set to: 14
 18153                           ;incstack = 0
 18154  003EDC  EC4C  F020         	call	_INTERRUPT_Initialize	;wreg free
 18155                           
 18156                           ;mcc.c: 119: PIN_MANAGER_Initialize();
 18157  003EE0  ECC7  F016         	call	_PIN_MANAGER_Initialize	;wreg free
 18158                           
 18159                           ;mcc.c: 120: OSCILLATOR_Initialize();
 18160  003EE4  EC94  F01F         	call	_OSCILLATOR_Initialize	;wreg free
 18161                           
 18162                           ;mcc.c: 121: I2C1_Initialize();
 18163  003EE8  EC1D  F01E         	call	_I2C1_Initialize	;wreg free
 18164                           
 18165                           ;mcc.c: 122: TMR0_Initialize();
 18166  003EEC  ECB7  F01C         	call	_TMR0_Initialize	;wreg free
 18167                           
 18168                           ;mcc.c: 123: EUSART1_Initialize();
 18169  003EF0  EC13  F01D         	call	_EUSART1_Initialize	;wreg free
 18170  003EF4  0012               	return		;funcret
 18171  003EF6                     __end_of_SYSTEM_Initialize:
 18172                           	opt stack 0
 18173                           tblptru	equ	0xFF8
 18174                           tblptrh	equ	0xFF7
 18175                           tblptrl	equ	0xFF6
 18176                           tablat	equ	0xFF5
 18177                           prodh	equ	0xFF4
 18178                           prodl	equ	0xFF3
 18179                           intcon	equ	0xFF2
 18180                           postinc0	equ	0xFEE
 18181                           wreg	equ	0xFE8
 18182                           indf1	equ	0xFE7
 18183                           postinc1	equ	0xFE6
 18184                           postdec1	equ	0xFE5
 18185                           plusw1	equ	0xFE3
 18186                           fsr1h	equ	0xFE2
 18187                           fsr1l	equ	0xFE1
 18188                           indf2	equ	0xFDF
 18189                           postinc2	equ	0xFDE
 18190                           postdec2	equ	0xFDD
 18191                           plusw2	equ	0xFDB
 18192                           fsr2h	equ	0xFDA
 18193                           fsr2l	equ	0xFD9
 18194                           status	equ	0xFD8
 18195                           
 18196 ;; *************** function _TMR0_Initialize *****************
 18197 ;; Defined at:
 18198 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 18199 ;; Parameters:    Size  Location     Type
 18200 ;;		None
 18201 ;; Auto vars:     Size  Location     Type
 18202 ;;		None
 18203 ;; Return value:  Size  Location     Type
 18204 ;;                  1    wreg      void 
 18205 ;; Registers used:
 18206 ;;		wreg, status,2, status,0, cstack
 18207 ;; Tracked objects:
 18208 ;;		On entry : 0/0
 18209 ;;		On exit  : 0/0
 18210 ;;		Unchanged: 0/0
 18211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18214 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18216 ;;Total ram usage:        2 bytes
 18217 ;; Hardware stack levels used:    1
 18218 ;; Hardware stack levels required when called:    8
 18219 ;; This function calls:
 18220 ;;		_TMR0_SetInterruptHandler
 18221 ;; This function is called by:
 18222 ;;		_SYSTEM_Initialize
 18223 ;; This function uses a non-reentrant model
 18224 ;;
 18225                           
 18226                           	psect	text80
 18227  00396E                     __ptext80:
 18228                           	opt stack 0
 18229  00396E                     _TMR0_Initialize:
 18230                           	opt stack 21
 18231                           
 18232                           ;tmr0.c: 70: T0CON0 = 0x10;
 18233                           
 18234                           ;incstack = 0
 18235  00396E  0E10               	movlw	16
 18236  003970  6ED5               	movwf	4053,c	;volatile
 18237                           
 18238                           ;tmr0.c: 73: T0CON1 = 0x68;
 18239  003972  0E68               	movlw	104
 18240  003974  6ED6               	movwf	4054,c	;volatile
 18241                           
 18242                           ;tmr0.c: 76: TMR0H = 0xF6;
 18243  003976  0EF6               	movlw	246
 18244  003978  6ED4               	movwf	4052,c	;volatile
 18245                           
 18246                           ;tmr0.c: 79: TMR0L = 0x3C;
 18247  00397A  0E3C               	movlw	60
 18248  00397C  6ED3               	movwf	4051,c	;volatile
 18249                           
 18250                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 18251  00397E  50D3               	movf	4051,w,c	;volatile
 18252  003980  CFD4 F063          	movff	4052,??_TMR0_Initialize	;volatile
 18253  003984  0100               	movlb	0	; () banked
 18254  003986  6B64               	clrf	(??_TMR0_Initialize+1)& (0+255),b
 18255  003988  C063  F064         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 18256  00398C  6B63               	clrf	??_TMR0_Initialize& (0+255),b
 18257  00398E  1163               	iorwf	??_TMR0_Initialize& (0+255),w,b
 18258  003990  6E43               	movwf	_timer0ReloadVal16bit,c	;volatile
 18259  003992  5164               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
 18260  003994  6E44               	movwf	_timer0ReloadVal16bit+1,c	;volatile
 18261                           
 18262                           ; BSR set to: 0
 18263                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
 18264  003996  010E               	movlb	14	; () banked
 18265  003998  9BCA               	bcf	202,5,b	;volatile
 18266                           
 18267                           ; BSR set to: 14
 18268                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
 18269  00399A  8BC2               	bsf	194,5,b	;volatile
 18270                           
 18271                           ; BSR set to: 14
 18272                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 18273  00399C  0E86               	movlw	low _TMR0_DefaultInterruptHandler
 18274  00399E  0100               	movlb	0	; () banked
 18275  0039A0  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
 18276  0039A2  0E40               	movlw	high _TMR0_DefaultInterruptHandler
 18277  0039A4  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
 18278  0039A6  EC13  F020         	call	_TMR0_SetInterruptHandler	;wreg free
 18279  0039AA  0012               	return		;funcret
 18280  0039AC                     __end_of_TMR0_Initialize:
 18281                           	opt stack 0
 18282                           tblptru	equ	0xFF8
 18283                           tblptrh	equ	0xFF7
 18284                           tblptrl	equ	0xFF6
 18285                           tablat	equ	0xFF5
 18286                           prodh	equ	0xFF4
 18287                           prodl	equ	0xFF3
 18288                           intcon	equ	0xFF2
 18289                           postinc0	equ	0xFEE
 18290                           wreg	equ	0xFE8
 18291                           indf1	equ	0xFE7
 18292                           postinc1	equ	0xFE6
 18293                           postdec1	equ	0xFE5
 18294                           plusw1	equ	0xFE3
 18295                           fsr1h	equ	0xFE2
 18296                           fsr1l	equ	0xFE1
 18297                           indf2	equ	0xFDF
 18298                           postinc2	equ	0xFDE
 18299                           postdec2	equ	0xFDD
 18300                           plusw2	equ	0xFDB
 18301                           fsr2h	equ	0xFDA
 18302                           fsr2l	equ	0xFD9
 18303                           status	equ	0xFD8
 18304                           
 18305 ;; *************** function _TMR0_SetInterruptHandler *****************
 18306 ;; Defined at:
 18307 ;;		line 150 in file "mcc_generated_files/tmr0.c"
 18308 ;; Parameters:    Size  Location     Type
 18309 ;;  InterruptHan    3    0[BANK0 ] PTR void 
 18310 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 18311 ;; Auto vars:     Size  Location     Type
 18312 ;;		None
 18313 ;; Return value:  Size  Location     Type
 18314 ;;                  1    wreg      void 
 18315 ;; Registers used:
 18316 ;;		wreg, status,2, status,0
 18317 ;; Tracked objects:
 18318 ;;		On entry : 0/0
 18319 ;;		On exit  : 0/0
 18320 ;;		Unchanged: 0/0
 18321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18322 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18325 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18326 ;;Total ram usage:        3 bytes
 18327 ;; Hardware stack levels used:    1
 18328 ;; Hardware stack levels required when called:    7
 18329 ;; This function calls:
 18330 ;;		Nothing
 18331 ;; This function is called by:
 18332 ;;		_TMR0_Initialize
 18333 ;; This function uses a non-reentrant model
 18334 ;;
 18335                           
 18336                           	psect	text81
 18337  004026                     __ptext81:
 18338                           	opt stack 0
 18339  004026                     _TMR0_SetInterruptHandler:
 18340                           	opt stack 21
 18341                           
 18342                           ;tmr0.c: 151: TMR0_InterruptHandler = InterruptHandler;
 18343                           
 18344                           ;incstack = 0
 18345  004026  C060  F3FB         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
 18346  00402A  C061  F3FC         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
 18347  00402E  C062  F3FD         	movff	TMR0_SetInterruptHandler@InterruptHandler+2,_TMR0_InterruptHandler+2
 18348  004032  0012               	return		;funcret
 18349  004034                     __end_of_TMR0_SetInterruptHandler:
 18350                           	opt stack 0
 18351                           tblptru	equ	0xFF8
 18352                           tblptrh	equ	0xFF7
 18353                           tblptrl	equ	0xFF6
 18354                           tablat	equ	0xFF5
 18355                           prodh	equ	0xFF4
 18356                           prodl	equ	0xFF3
 18357                           intcon	equ	0xFF2
 18358                           postinc0	equ	0xFEE
 18359                           wreg	equ	0xFE8
 18360                           indf1	equ	0xFE7
 18361                           postinc1	equ	0xFE6
 18362                           postdec1	equ	0xFE5
 18363                           plusw1	equ	0xFE3
 18364                           fsr1h	equ	0xFE2
 18365                           fsr1l	equ	0xFE1
 18366                           indf2	equ	0xFDF
 18367                           postinc2	equ	0xFDE
 18368                           postdec2	equ	0xFDD
 18369                           plusw2	equ	0xFDB
 18370                           fsr2h	equ	0xFDA
 18371                           fsr2l	equ	0xFD9
 18372                           status	equ	0xFD8
 18373                           
 18374 ;; *************** function _PIN_MANAGER_Initialize *****************
 18375 ;; Defined at:
 18376 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 18377 ;; Parameters:    Size  Location     Type
 18378 ;;		None
 18379 ;; Auto vars:     Size  Location     Type
 18380 ;;  state           1    0[BANK0 ] unsigned char 
 18381 ;; Return value:  Size  Location     Type
 18382 ;;                  1    wreg      void 
 18383 ;; Registers used:
 18384 ;;		wreg, status,2
 18385 ;; Tracked objects:
 18386 ;;		On entry : 0/0
 18387 ;;		On exit  : 0/0
 18388 ;;		Unchanged: 0/0
 18389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18393 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18394 ;;Total ram usage:        1 bytes
 18395 ;; Hardware stack levels used:    1
 18396 ;; Hardware stack levels required when called:    7
 18397 ;; This function calls:
 18398 ;;		Nothing
 18399 ;; This function is called by:
 18400 ;;		_SYSTEM_Initialize
 18401 ;; This function uses a non-reentrant model
 18402 ;;
 18403                           
 18404                           	psect	text82
 18405  002D8E                     __ptext82:
 18406                           	opt stack 0
 18407  002D8E                     _PIN_MANAGER_Initialize:
 18408                           	opt stack 22
 18409                           
 18410                           ;pin_manager.c: 56: LATE = 0x00;
 18411                           
 18412                           ;incstack = 0
 18413  002D8E  0E00               	movlw	0
 18414  002D90  6E87               	movwf	3975,c	;volatile
 18415                           
 18416                           ;pin_manager.c: 57: LATD = 0x00;
 18417  002D92  0E00               	movlw	0
 18418  002D94  6E86               	movwf	3974,c	;volatile
 18419                           
 18420                           ;pin_manager.c: 58: LATA = 0x00;
 18421  002D96  0E00               	movlw	0
 18422  002D98  6E83               	movwf	3971,c	;volatile
 18423                           
 18424                           ;pin_manager.c: 59: LATB = 0x00;
 18425  002D9A  0E00               	movlw	0
 18426  002D9C  6E84               	movwf	3972,c	;volatile
 18427                           
 18428                           ;pin_manager.c: 60: LATC = 0x00;
 18429  002D9E  0E00               	movlw	0
 18430  002DA0  6E85               	movwf	3973,c	;volatile
 18431                           
 18432                           ;pin_manager.c: 67: TRISE = 0x03;
 18433  002DA2  0E03               	movlw	3
 18434  002DA4  6E8C               	movwf	3980,c	;volatile
 18435                           
 18436                           ;pin_manager.c: 68: TRISA = 0xF0;
 18437  002DA6  0EF0               	movlw	240
 18438  002DA8  6E88               	movwf	3976,c	;volatile
 18439                           
 18440                           ;pin_manager.c: 69: TRISB = 0xD9;
 18441  002DAA  0ED9               	movlw	217
 18442  002DAC  6E89               	movwf	3977,c	;volatile
 18443                           
 18444                           ;pin_manager.c: 70: TRISC = 0xDF;
 18445  002DAE  0EDF               	movlw	223
 18446  002DB0  6E8A               	movwf	3978,c	;volatile
 18447                           
 18448                           ;pin_manager.c: 71: TRISD = 0xFF;
 18449  002DB2  688B               	setf	3979,c	;volatile
 18450                           
 18451                           ;pin_manager.c: 76: ANSELC = 0xF9;
 18452  002DB4  0EF9               	movlw	249
 18453  002DB6  010F               	movlb	15	; () banked
 18454  002DB8  6F21               	movwf	33,b	;volatile
 18455                           
 18456                           ;pin_manager.c: 77: ANSELB = 0xFE;
 18457  002DBA  0EFE               	movlw	254
 18458  002DBC  6F19               	movwf	25,b	;volatile
 18459                           
 18460                           ; BSR set to: 15
 18461                           ;pin_manager.c: 78: ANSELD = 0xFF;
 18462  002DBE  6926               	setf	38,b	;volatile
 18463                           
 18464                           ;pin_manager.c: 79: ANSELE = 0x07;
 18465  002DC0  0E07               	movlw	7
 18466  002DC2  6F2E               	movwf	46,b	;volatile
 18467                           
 18468                           ;pin_manager.c: 80: ANSELA = 0x00;
 18469  002DC4  0E00               	movlw	0
 18470  002DC6  6F11               	movwf	17,b	;volatile
 18471                           
 18472                           ;pin_manager.c: 85: WPUD = 0x00;
 18473  002DC8  0E00               	movlw	0
 18474  002DCA  6F25               	movwf	37,b	;volatile
 18475                           
 18476                           ;pin_manager.c: 86: WPUE = 0x00;
 18477  002DCC  0E00               	movlw	0
 18478  002DCE  6F2D               	movwf	45,b	;volatile
 18479                           
 18480                           ;pin_manager.c: 87: WPUB = 0x00;
 18481  002DD0  0E00               	movlw	0
 18482  002DD2  6F18               	movwf	24,b	;volatile
 18483                           
 18484                           ;pin_manager.c: 88: WPUA = 0x00;
 18485  002DD4  0E00               	movlw	0
 18486  002DD6  6F10               	movwf	16,b	;volatile
 18487                           
 18488                           ;pin_manager.c: 89: WPUC = 0x00;
 18489  002DD8  0E00               	movlw	0
 18490  002DDA  6F20               	movwf	32,b	;volatile
 18491                           
 18492                           ;pin_manager.c: 94: ODCONE = 0x00;
 18493  002DDC  0E00               	movlw	0
 18494  002DDE  6F2C               	movwf	44,b	;volatile
 18495                           
 18496                           ;pin_manager.c: 95: ODCONA = 0x00;
 18497  002DE0  0E00               	movlw	0
 18498  002DE2  6F0F               	movwf	15,b	;volatile
 18499                           
 18500                           ;pin_manager.c: 96: ODCONB = 0x00;
 18501  002DE4  0E00               	movlw	0
 18502  002DE6  6F17               	movwf	23,b	;volatile
 18503                           
 18504                           ;pin_manager.c: 97: ODCONC = 0x00;
 18505  002DE8  0E00               	movlw	0
 18506  002DEA  6F1F               	movwf	31,b	;volatile
 18507                           
 18508                           ;pin_manager.c: 98: ODCOND = 0x00;
 18509  002DEC  0E00               	movlw	0
 18510  002DEE  6F24               	movwf	36,b	;volatile
 18511                           
 18512                           ;pin_manager.c: 105: bool state = GIE;
 18513  002DF0  0E00               	movlw	0
 18514  002DF2  BEF2               	btfsc	intcon,7,c	;volatile
 18515  002DF4  0E01               	movlw	1
 18516  002DF6  0100               	movlb	0	; () banked
 18517  002DF8  6F60               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
 18518                           
 18519                           ; BSR set to: 0
 18520                           ;pin_manager.c: 106: GIE = 0;
 18521  002DFA  9EF2               	bcf	intcon,7,c	;volatile
 18522                           
 18523                           ;pin_manager.c: 107: PPSLOCK = 0x55;
 18524  002DFC  0E55               	movlw	85
 18525  002DFE  010E               	movlb	14	; () banked
 18526  002E00  6FA0               	movwf	160,b	;volsfr
 18527                           
 18528                           ;pin_manager.c: 108: PPSLOCK = 0xAA;
 18529  002E02  0EAA               	movlw	170
 18530  002E04  6FA0               	movwf	160,b	;volsfr
 18531                           
 18532                           ; BSR set to: 14
 18533                           ;pin_manager.c: 109: PPSLOCKbits.PPSLOCKED = 0x00;
 18534  002E06  91A0               	bcf	160,0,b	;volsfr
 18535                           
 18536                           ;pin_manager.c: 111: RB1PPS = 0x09;
 18537  002E08  0E09               	movlw	9
 18538  002E0A  6FF0               	movwf	240,b	;volatile
 18539                           
 18540                           ;pin_manager.c: 112: RC1PPS = 0x0F;
 18541  002E0C  0E0F               	movlw	15
 18542  002E0E  6FF8               	movwf	248,b	;volatile
 18543                           
 18544                           ;pin_manager.c: 113: RC2PPS = 0x10;
 18545  002E10  0E10               	movlw	16
 18546  002E12  6FF9               	movwf	249,b	;volatile
 18547                           
 18548                           ; BSR set to: 14
 18549                           ;pin_manager.c: 114: RX1PPSbits.RXPPS = 0x08;
 18550  002E14  91B5               	bcf	181,0,b	;volatile
 18551  002E16  93B5               	bcf	181,1,b	;volatile
 18552  002E18  95B5               	bcf	181,2,b	;volatile
 18553  002E1A  87B5               	bsf	181,3,b	;volatile
 18554  002E1C  99B5               	bcf	181,4,b	;volatile
 18555                           
 18556                           ; BSR set to: 14
 18557                           ;pin_manager.c: 115: SSP1CLKPPSbits.SSPCLKPPS = 0x11;
 18558  002E1E  81B7               	bsf	183,0,b	;volatile
 18559  002E20  93B7               	bcf	183,1,b	;volatile
 18560  002E22  95B7               	bcf	183,2,b	;volatile
 18561  002E24  97B7               	bcf	183,3,b	;volatile
 18562  002E26  89B7               	bsf	183,4,b	;volatile
 18563                           
 18564                           ; BSR set to: 14
 18565                           ;pin_manager.c: 116: SSP1DATPPSbits.SSPDATPPS = 0x12;
 18566  002E28  91B8               	bcf	184,0,b	;volatile
 18567  002E2A  83B8               	bsf	184,1,b	;volatile
 18568  002E2C  95B8               	bcf	184,2,b	;volatile
 18569  002E2E  97B8               	bcf	184,3,b	;volatile
 18570  002E30  89B8               	bsf	184,4,b	;volatile
 18571                           
 18572                           ;pin_manager.c: 118: PPSLOCK = 0x55;
 18573  002E32  0E55               	movlw	85
 18574  002E34  6FA0               	movwf	160,b	;volsfr
 18575                           
 18576                           ;pin_manager.c: 119: PPSLOCK = 0xAA;
 18577  002E36  0EAA               	movlw	170
 18578  002E38  6FA0               	movwf	160,b	;volsfr
 18579                           
 18580                           ; BSR set to: 14
 18581                           ;pin_manager.c: 120: PPSLOCKbits.PPSLOCKED = 0x01;
 18582  002E3A  81A0               	bsf	160,0,b	;volsfr
 18583                           
 18584                           ; BSR set to: 14
 18585                           ;pin_manager.c: 122: GIE = state;
 18586  002E3C  0100               	movlb	0	; () banked
 18587  002E3E  A160               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
 18588  002E40  D002               	goto	u8190
 18589  002E42  8EF2               	bsf	intcon,7,c	;volatile
 18590  002E44  0012               	return	
 18591  002E46                     u8190:
 18592  002E46  9EF2               	bcf	intcon,7,c	;volatile
 18593  002E48  0012               	return		;funcret
 18594  002E4A                     __end_of_PIN_MANAGER_Initialize:
 18595                           	opt stack 0
 18596                           tblptru	equ	0xFF8
 18597                           tblptrh	equ	0xFF7
 18598                           tblptrl	equ	0xFF6
 18599                           tablat	equ	0xFF5
 18600                           prodh	equ	0xFF4
 18601                           prodl	equ	0xFF3
 18602                           intcon	equ	0xFF2
 18603                           postinc0	equ	0xFEE
 18604                           wreg	equ	0xFE8
 18605                           indf1	equ	0xFE7
 18606                           postinc1	equ	0xFE6
 18607                           postdec1	equ	0xFE5
 18608                           plusw1	equ	0xFE3
 18609                           fsr1h	equ	0xFE2
 18610                           fsr1l	equ	0xFE1
 18611                           indf2	equ	0xFDF
 18612                           postinc2	equ	0xFDE
 18613                           postdec2	equ	0xFDD
 18614                           plusw2	equ	0xFDB
 18615                           fsr2h	equ	0xFDA
 18616                           fsr2l	equ	0xFD9
 18617                           status	equ	0xFD8
 18618                           
 18619 ;; *************** function _OSCILLATOR_Initialize *****************
 18620 ;; Defined at:
 18621 ;;		line 126 in file "mcc_generated_files/mcc.c"
 18622 ;; Parameters:    Size  Location     Type
 18623 ;;		None
 18624 ;; Auto vars:     Size  Location     Type
 18625 ;;		None
 18626 ;; Return value:  Size  Location     Type
 18627 ;;                  1    wreg      void 
 18628 ;; Registers used:
 18629 ;;		wreg, status,2
 18630 ;; Tracked objects:
 18631 ;;		On entry : 0/0
 18632 ;;		On exit  : 0/0
 18633 ;;		Unchanged: 0/0
 18634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18639 ;;Total ram usage:        0 bytes
 18640 ;; Hardware stack levels used:    1
 18641 ;; Hardware stack levels required when called:    7
 18642 ;; This function calls:
 18643 ;;		Nothing
 18644 ;; This function is called by:
 18645 ;;		_SYSTEM_Initialize
 18646 ;; This function uses a non-reentrant model
 18647 ;;
 18648                           
 18649                           	psect	text83
 18650  003F28                     __ptext83:
 18651                           	opt stack 0
 18652  003F28                     _OSCILLATOR_Initialize:
 18653                           	opt stack 22
 18654                           
 18655                           ;mcc.c: 129: OSCCON1 = 0x60;
 18656                           
 18657                           ;incstack = 0
 18658  003F28  0E60               	movlw	96
 18659  003F2A  010E               	movlb	14	; () banked
 18660  003F2C  6FD8               	movwf	216,b	;volatile
 18661                           
 18662                           ;mcc.c: 131: OSCCON3 = 0x00;
 18663  003F2E  0E00               	movlw	0
 18664  003F30  6FDA               	movwf	218,b	;volatile
 18665                           
 18666                           ;mcc.c: 133: OSCEN = 0x00;
 18667  003F32  0E00               	movlw	0
 18668  003F34  6FDC               	movwf	220,b	;volatile
 18669                           
 18670                           ;mcc.c: 135: OSCFRQ = 0x08;
 18671  003F36  0E08               	movlw	8
 18672  003F38  6FDE               	movwf	222,b	;volatile
 18673                           
 18674                           ;mcc.c: 137: OSCTUNE = 0x00;
 18675  003F3A  0E00               	movlw	0
 18676  003F3C  6FDD               	movwf	221,b	;volatile
 18677                           
 18678                           ; BSR set to: 14
 18679  003F3E  0012               	return		;funcret
 18680  003F40                     __end_of_OSCILLATOR_Initialize:
 18681                           	opt stack 0
 18682                           tblptru	equ	0xFF8
 18683                           tblptrh	equ	0xFF7
 18684                           tblptrl	equ	0xFF6
 18685                           tablat	equ	0xFF5
 18686                           prodh	equ	0xFF4
 18687                           prodl	equ	0xFF3
 18688                           intcon	equ	0xFF2
 18689                           postinc0	equ	0xFEE
 18690                           wreg	equ	0xFE8
 18691                           indf1	equ	0xFE7
 18692                           postinc1	equ	0xFE6
 18693                           postdec1	equ	0xFE5
 18694                           plusw1	equ	0xFE3
 18695                           fsr1h	equ	0xFE2
 18696                           fsr1l	equ	0xFE1
 18697                           indf2	equ	0xFDF
 18698                           postinc2	equ	0xFDE
 18699                           postdec2	equ	0xFDD
 18700                           plusw2	equ	0xFDB
 18701                           fsr2h	equ	0xFDA
 18702                           fsr2l	equ	0xFD9
 18703                           status	equ	0xFD8
 18704                           
 18705 ;; *************** function _INTERRUPT_Initialize *****************
 18706 ;; Defined at:
 18707 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 18708 ;; Parameters:    Size  Location     Type
 18709 ;;		None
 18710 ;; Auto vars:     Size  Location     Type
 18711 ;;		None
 18712 ;; Return value:  Size  Location     Type
 18713 ;;                  1    wreg      void 
 18714 ;; Registers used:
 18715 ;;		None
 18716 ;; Tracked objects:
 18717 ;;		On entry : 0/0
 18718 ;;		On exit  : 0/0
 18719 ;;		Unchanged: 0/0
 18720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18725 ;;Total ram usage:        0 bytes
 18726 ;; Hardware stack levels used:    1
 18727 ;; Hardware stack levels required when called:    7
 18728 ;; This function calls:
 18729 ;;		Nothing
 18730 ;; This function is called by:
 18731 ;;		_SYSTEM_Initialize
 18732 ;; This function uses a non-reentrant model
 18733 ;;
 18734                           
 18735                           	psect	text84
 18736  004098                     __ptext84:
 18737                           	opt stack 0
 18738  004098                     _INTERRUPT_Initialize:
 18739                           	opt stack 22
 18740                           
 18741                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
 18742                           
 18743                           ; BSR set to: 14
 18744                           ;incstack = 0
 18745  004098  9AF2               	bcf	intcon,5,c	;volatile
 18746  00409A  0012               	return		;funcret
 18747  00409C                     __end_of_INTERRUPT_Initialize:
 18748                           	opt stack 0
 18749                           tblptru	equ	0xFF8
 18750                           tblptrh	equ	0xFF7
 18751                           tblptrl	equ	0xFF6
 18752                           tablat	equ	0xFF5
 18753                           prodh	equ	0xFF4
 18754                           prodl	equ	0xFF3
 18755                           intcon	equ	0xFF2
 18756                           postinc0	equ	0xFEE
 18757                           wreg	equ	0xFE8
 18758                           indf1	equ	0xFE7
 18759                           postinc1	equ	0xFE6
 18760                           postdec1	equ	0xFE5
 18761                           plusw1	equ	0xFE3
 18762                           fsr1h	equ	0xFE2
 18763                           fsr1l	equ	0xFE1
 18764                           indf2	equ	0xFDF
 18765                           postinc2	equ	0xFDE
 18766                           postdec2	equ	0xFDD
 18767                           plusw2	equ	0xFDB
 18768                           fsr2h	equ	0xFDA
 18769                           fsr2l	equ	0xFD9
 18770                           status	equ	0xFD8
 18771                           
 18772 ;; *************** function _I2C1_Initialize *****************
 18773 ;; Defined at:
 18774 ;;		line 198 in file "mcc_generated_files/i2c1.c"
 18775 ;; Parameters:    Size  Location     Type
 18776 ;;		None
 18777 ;; Auto vars:     Size  Location     Type
 18778 ;;		None
 18779 ;; Return value:  Size  Location     Type
 18780 ;;                  1    wreg      void 
 18781 ;; Registers used:
 18782 ;;		wreg, status,2, status,0
 18783 ;; Tracked objects:
 18784 ;;		On entry : 0/0
 18785 ;;		On exit  : 0/0
 18786 ;;		Unchanged: 0/0
 18787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18792 ;;Total ram usage:        0 bytes
 18793 ;; Hardware stack levels used:    1
 18794 ;; Hardware stack levels required when called:    7
 18795 ;; This function calls:
 18796 ;;		Nothing
 18797 ;; This function is called by:
 18798 ;;		_SYSTEM_Initialize
 18799 ;; This function uses a non-reentrant model
 18800 ;;
 18801                           
 18802                           	psect	text85
 18803  003C3A                     __ptext85:
 18804                           	opt stack 0
 18805  003C3A                     _I2C1_Initialize:
 18806                           	opt stack 22
 18807                           
 18808                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
 18809                           
 18810                           ;incstack = 0
 18811  003C3A  0EF6               	movlw	low _i2c1_tr_queue
 18812  003C3C  0102               	movlb	2	; () banked
 18813  003C3E  6FDD               	movwf	(_i2c1_object+2)& (0+255),b
 18814  003C40  0E03               	movlw	high _i2c1_tr_queue
 18815  003C42  6FDE               	movwf	(_i2c1_object+3)& (0+255),b
 18816                           
 18817                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
 18818  003C44  0EF6               	movlw	low _i2c1_tr_queue
 18819  003C46  6FDB               	movwf	_i2c1_object& (0+255),b
 18820  003C48  0E03               	movlw	high _i2c1_tr_queue
 18821  003C4A  6FDC               	movwf	(_i2c1_object+1)& (0+255),b
 18822                           
 18823                           ; BSR set to: 2
 18824                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
 18825  003C4C  83DF               	bsf	(_i2c1_object+4)& (0+255),1,b
 18826                           
 18827                           ; BSR set to: 2
 18828                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
 18829  003C4E  91DF               	bcf	(_i2c1_object+4)& (0+255),0,b
 18830                           
 18831                           ; BSR set to: 2
 18832                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
 18833  003C50  0E00               	movlw	0
 18834  003C52  6FE1               	movwf	(_i2c1_object+6)& (0+255),b
 18835                           
 18836                           ; BSR set to: 2
 18837                           ;i2c1.c: 208: SSP1STAT = 0x00;
 18838  003C54  0E00               	movlw	0
 18839  003C56  6E95               	movwf	3989,c	;volatile
 18840                           
 18841                           ; BSR set to: 2
 18842                           ;i2c1.c: 210: SSP1CON1 = 0x28;
 18843  003C58  0E28               	movlw	40
 18844  003C5A  6E96               	movwf	3990,c	;volatile
 18845                           
 18846                           ; BSR set to: 2
 18847                           ;i2c1.c: 212: SSP1CON3 = 0x00;
 18848  003C5C  0E00               	movlw	0
 18849  003C5E  6E98               	movwf	3992,c	;volatile
 18850                           
 18851                           ; BSR set to: 2
 18852                           ;i2c1.c: 214: SSP1ADD = 0x9F;
 18853  003C60  0E9F               	movlw	159
 18854  003C62  6E93               	movwf	3987,c	;volatile
 18855                           
 18856                           ; BSR set to: 2
 18857                           ;i2c1.c: 220: PIR3bits.SSP1IF = 0;
 18858  003C64  010E               	movlb	14	; () banked
 18859  003C66  91CD               	bcf	205,0,b	;volatile
 18860                           
 18861                           ; BSR set to: 14
 18862                           ;i2c1.c: 222: PIE3bits.SSP1IE = 1;
 18863  003C68  81C5               	bsf	197,0,b	;volatile
 18864                           
 18865                           ; BSR set to: 14
 18866  003C6A  0012               	return		;funcret
 18867  003C6C                     __end_of_I2C1_Initialize:
 18868                           	opt stack 0
 18869                           tblptru	equ	0xFF8
 18870                           tblptrh	equ	0xFF7
 18871                           tblptrl	equ	0xFF6
 18872                           tablat	equ	0xFF5
 18873                           prodh	equ	0xFF4
 18874                           prodl	equ	0xFF3
 18875                           intcon	equ	0xFF2
 18876                           postinc0	equ	0xFEE
 18877                           wreg	equ	0xFE8
 18878                           indf1	equ	0xFE7
 18879                           postinc1	equ	0xFE6
 18880                           postdec1	equ	0xFE5
 18881                           plusw1	equ	0xFE3
 18882                           fsr1h	equ	0xFE2
 18883                           fsr1l	equ	0xFE1
 18884                           indf2	equ	0xFDF
 18885                           postinc2	equ	0xFDE
 18886                           postdec2	equ	0xFDD
 18887                           plusw2	equ	0xFDB
 18888                           fsr2h	equ	0xFDA
 18889                           fsr2l	equ	0xFD9
 18890                           status	equ	0xFD8
 18891                           
 18892 ;; *************** function _EUSART1_Initialize *****************
 18893 ;; Defined at:
 18894 ;;		line 76 in file "mcc_generated_files/eusart1.c"
 18895 ;; Parameters:    Size  Location     Type
 18896 ;;		None
 18897 ;; Auto vars:     Size  Location     Type
 18898 ;;		None
 18899 ;; Return value:  Size  Location     Type
 18900 ;;                  1    wreg      void 
 18901 ;; Registers used:
 18902 ;;		wreg, status,2
 18903 ;; Tracked objects:
 18904 ;;		On entry : 0/0
 18905 ;;		On exit  : 0/0
 18906 ;;		Unchanged: 0/0
 18907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18912 ;;Total ram usage:        0 bytes
 18913 ;; Hardware stack levels used:    1
 18914 ;; Hardware stack levels required when called:    7
 18915 ;; This function calls:
 18916 ;;		Nothing
 18917 ;; This function is called by:
 18918 ;;		_SYSTEM_Initialize
 18919 ;; This function uses a non-reentrant model
 18920 ;;
 18921                           
 18922                           	psect	text86
 18923  003A26                     __ptext86:
 18924                           	opt stack 0
 18925  003A26                     _EUSART1_Initialize:
 18926                           	opt stack 22
 18927                           
 18928                           ;eusart1.c: 79: PIE3bits.RC1IE = 0;
 18929                           
 18930                           ; BSR set to: 14
 18931                           ;incstack = 0
 18932  003A26  010E               	movlb	14	; () banked
 18933  003A28  9BC5               	bcf	197,5,b	;volatile
 18934                           
 18935                           ;eusart1.c: 80: PIE3bits.TX1IE = 0;
 18936  003A2A  99C5               	bcf	197,4,b	;volatile
 18937                           
 18938                           ; BSR set to: 14
 18939                           ;eusart1.c: 85: BAUD1CON = 0x08;
 18940  003A2C  0E08               	movlw	8
 18941  003A2E  6E9F               	movwf	3999,c	;volatile
 18942                           
 18943                           ;eusart1.c: 88: RC1STA = 0x90;
 18944  003A30  0E90               	movlw	144
 18945  003A32  6E9D               	movwf	3997,c	;volatile
 18946                           
 18947                           ;eusart1.c: 91: TX1STA = 0x24;
 18948  003A34  0E24               	movlw	36
 18949  003A36  6E9E               	movwf	3998,c	;volatile
 18950                           
 18951                           ;eusart1.c: 95: SP1BRGL = 0x82;
 18952  003A38  0E82               	movlw	130
 18953  003A3A  6E9B               	movwf	3995,c	;volatile
 18954                           
 18955                           ;eusart1.c: 97: SP1BRGH = 0x06;
 18956  003A3C  0E06               	movlw	6
 18957  003A3E  6E9C               	movwf	3996,c	;volatile
 18958                           
 18959                           ;eusart1.c: 112: eusart1TxHead = 0;
 18960  003A40  0E00               	movlw	0
 18961  003A42  6E2B               	movwf	_eusart1TxHead,c
 18962                           
 18963                           ;eusart1.c: 113: eusart1TxTail = 0;
 18964  003A44  0E00               	movlw	0
 18965  003A46  6E2A               	movwf	_eusart1TxTail,c
 18966                           
 18967                           ;eusart1.c: 114: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
 18968  003A48  0E40               	movlw	64
 18969  003A4A  0103               	movlb	3	; () banked
 18970  003A4C  6FFE               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
 18971                           
 18972                           ;eusart1.c: 116: eusart1RxHead = 0;
 18973  003A4E  0E00               	movlw	0
 18974  003A50  6FD9               	movwf	_eusart1RxHead& (0+255),b
 18975                           
 18976                           ;eusart1.c: 117: eusart1RxTail = 0;
 18977  003A52  0E00               	movlw	0
 18978  003A54  6FD8               	movwf	_eusart1RxTail& (0+255),b
 18979                           
 18980                           ;eusart1.c: 118: eusart1RxCount = 0;
 18981  003A56  0E00               	movlw	0
 18982  003A58  6FD7               	movwf	_eusart1RxCount& (0+255),b	;volatile
 18983                           
 18984                           ; BSR set to: 3
 18985                           ;eusart1.c: 121: PIE3bits.RC1IE = 1;
 18986  003A5A  010E               	movlb	14	; () banked
 18987  003A5C  8BC5               	bsf	197,5,b	;volatile
 18988                           
 18989                           ; BSR set to: 14
 18990  003A5E  0012               	return		;funcret
 18991  003A60                     __end_of_EUSART1_Initialize:
 18992                           	opt stack 0
 18993                           tblptru	equ	0xFF8
 18994                           tblptrh	equ	0xFF7
 18995                           tblptrl	equ	0xFF6
 18996                           tablat	equ	0xFF5
 18997                           prodh	equ	0xFF4
 18998                           prodl	equ	0xFF3
 18999                           intcon	equ	0xFF2
 19000                           postinc0	equ	0xFEE
 19001                           wreg	equ	0xFE8
 19002                           indf1	equ	0xFE7
 19003                           postinc1	equ	0xFE6
 19004                           postdec1	equ	0xFE5
 19005                           plusw1	equ	0xFE3
 19006                           fsr1h	equ	0xFE2
 19007                           fsr1l	equ	0xFE1
 19008                           indf2	equ	0xFDF
 19009                           postinc2	equ	0xFDE
 19010                           postdec2	equ	0xFDD
 19011                           plusw2	equ	0xFDB
 19012                           fsr2h	equ	0xFDA
 19013                           fsr2l	equ	0xFD9
 19014                           status	equ	0xFD8
 19015                           
 19016 ;; *************** function _HX_Initialize *****************
 19017 ;; Defined at:
 19018 ;;		line 18 in file "HX_CommInterface.c"
 19019 ;; Parameters:    Size  Location     Type
 19020 ;;		None
 19021 ;; Auto vars:     Size  Location     Type
 19022 ;;		None
 19023 ;; Return value:  Size  Location     Type
 19024 ;;                  1    wreg      void 
 19025 ;; Registers used:
 19026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19027 ;; Tracked objects:
 19028 ;;		On entry : 0/0
 19029 ;;		On exit  : 0/0
 19030 ;;		Unchanged: 0/0
 19031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19036 ;;Total ram usage:        0 bytes
 19037 ;; Hardware stack levels used:    1
 19038 ;; Hardware stack levels required when called:    9
 19039 ;; This function calls:
 19040 ;;		_hxFlushInputBuffer
 19041 ;;		_hxFlushMainDataBuffer
 19042 ;;		_hxFlushOutputBuffer
 19043 ;; This function is called by:
 19044 ;;		_main
 19045 ;; This function uses a non-reentrant model
 19046 ;;
 19047                           
 19048                           	psect	text87
 19049  003F88                     __ptext87:
 19050                           	opt stack 0
 19051  003F88                     _HX_Initialize:
 19052                           	opt stack 21
 19053                           
 19054                           ;HX_CommInterface.c: 20: hx_state = 0x10;
 19055                           
 19056                           ; BSR set to: 14
 19057                           ;incstack = 0
 19058  003F88  0E10               	movlw	16
 19059  003F8A  6E45               	movwf	_hx_state,c
 19060                           
 19061                           ;HX_CommInterface.c: 22: LATA = 0x03;
 19062  003F8C  0E03               	movlw	3
 19063  003F8E  6E83               	movwf	3971,c	;volatile
 19064                           
 19065                           ;HX_CommInterface.c: 23: hxFlushInputBuffer();
 19066  003F90  EC46  F01F         	call	_hxFlushInputBuffer	;wreg free
 19067                           
 19068                           ;HX_CommInterface.c: 24: hxFlushOutputBuffer();
 19069  003F94  ECA0  F01F         	call	_hxFlushOutputBuffer	;wreg free
 19070                           
 19071                           ;HX_CommInterface.c: 25: hxFlushMainDataBuffer();
 19072  003F98  ECAC  F01F         	call	_hxFlushMainDataBuffer	;wreg free
 19073  003F9C  0012               	return		;funcret
 19074  003F9E                     __end_of_HX_Initialize:
 19075                           	opt stack 0
 19076                           tblptru	equ	0xFF8
 19077                           tblptrh	equ	0xFF7
 19078                           tblptrl	equ	0xFF6
 19079                           tablat	equ	0xFF5
 19080                           prodh	equ	0xFF4
 19081                           prodl	equ	0xFF3
 19082                           intcon	equ	0xFF2
 19083                           postinc0	equ	0xFEE
 19084                           wreg	equ	0xFE8
 19085                           indf1	equ	0xFE7
 19086                           postinc1	equ	0xFE6
 19087                           postdec1	equ	0xFE5
 19088                           plusw1	equ	0xFE3
 19089                           fsr1h	equ	0xFE2
 19090                           fsr1l	equ	0xFE1
 19091                           indf2	equ	0xFDF
 19092                           postinc2	equ	0xFDE
 19093                           postdec2	equ	0xFDD
 19094                           plusw2	equ	0xFDB
 19095                           fsr2h	equ	0xFDA
 19096                           fsr2l	equ	0xFD9
 19097                           status	equ	0xFD8
 19098                           
 19099 ;; *************** function _hxFlushOutputBuffer *****************
 19100 ;; Defined at:
 19101 ;;		line 283 in file "HX_CommInterface.c"
 19102 ;; Parameters:    Size  Location     Type
 19103 ;;		None
 19104 ;; Auto vars:     Size  Location     Type
 19105 ;;		None
 19106 ;; Return value:  Size  Location     Type
 19107 ;;                  1    wreg      void 
 19108 ;; Registers used:
 19109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19110 ;; Tracked objects:
 19111 ;;		On entry : 0/0
 19112 ;;		On exit  : 0/0
 19113 ;;		Unchanged: 0/0
 19114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19119 ;;Total ram usage:        0 bytes
 19120 ;; Hardware stack levels used:    1
 19121 ;; Hardware stack levels required when called:    8
 19122 ;; This function calls:
 19123 ;;		_hxClearArray
 19124 ;; This function is called by:
 19125 ;;		_HX_Initialize
 19126 ;;		_hxHandleTxUART
 19127 ;; This function uses a non-reentrant model
 19128 ;;
 19129                           
 19130                           	psect	text88
 19131  003F40                     __ptext88:
 19132                           	opt stack 0
 19133  003F40                     _hxFlushOutputBuffer:
 19134                           	opt stack 21
 19135                           
 19136                           ;HX_CommInterface.c: 285: hxClearArray(hx_outData, 64);
 19137                           
 19138                           ;incstack = 0
 19139  003F40  0E80               	movlw	low _hx_outData
 19140  003F42  0100               	movlb	0	; () banked
 19141  003F44  6F60               	movwf	hxClearArray@arr& (0+255),b
 19142  003F46  0E0B               	movlw	high _hx_outData
 19143  003F48  6F61               	movwf	(hxClearArray@arr+1)& (0+255),b
 19144  003F4A  0E40               	movlw	64
 19145  003F4C  6F62               	movwf	hxClearArray@size& (0+255),b
 19146  003F4E  EC00  F01F         	call	_hxClearArray	;wreg free
 19147                           
 19148                           ;HX_CommInterface.c: 286: hx_outDataIndex = 2;
 19149  003F52  0E02               	movlw	2
 19150  003F54  6E40               	movwf	_hx_outDataIndex,c
 19151  003F56  0012               	return		;funcret
 19152  003F58                     __end_of_hxFlushOutputBuffer:
 19153                           	opt stack 0
 19154                           tblptru	equ	0xFF8
 19155                           tblptrh	equ	0xFF7
 19156                           tblptrl	equ	0xFF6
 19157                           tablat	equ	0xFF5
 19158                           prodh	equ	0xFF4
 19159                           prodl	equ	0xFF3
 19160                           intcon	equ	0xFF2
 19161                           postinc0	equ	0xFEE
 19162                           wreg	equ	0xFE8
 19163                           indf1	equ	0xFE7
 19164                           postinc1	equ	0xFE6
 19165                           postdec1	equ	0xFE5
 19166                           plusw1	equ	0xFE3
 19167                           fsr1h	equ	0xFE2
 19168                           fsr1l	equ	0xFE1
 19169                           indf2	equ	0xFDF
 19170                           postinc2	equ	0xFDE
 19171                           postdec2	equ	0xFDD
 19172                           plusw2	equ	0xFDB
 19173                           fsr2h	equ	0xFDA
 19174                           fsr2l	equ	0xFD9
 19175                           status	equ	0xFD8
 19176                           
 19177 ;; *************** function _hxFlushMainDataBuffer *****************
 19178 ;; Defined at:
 19179 ;;		line 289 in file "HX_CommInterface.c"
 19180 ;; Parameters:    Size  Location     Type
 19181 ;;		None
 19182 ;; Auto vars:     Size  Location     Type
 19183 ;;		None
 19184 ;; Return value:  Size  Location     Type
 19185 ;;                  1    wreg      void 
 19186 ;; Registers used:
 19187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19188 ;; Tracked objects:
 19189 ;;		On entry : 0/0
 19190 ;;		On exit  : 0/0
 19191 ;;		Unchanged: 0/0
 19192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19197 ;;Total ram usage:        0 bytes
 19198 ;; Hardware stack levels used:    1
 19199 ;; Hardware stack levels required when called:    8
 19200 ;; This function calls:
 19201 ;;		_hxClearArray
 19202 ;; This function is called by:
 19203 ;;		_HX_Initialize
 19204 ;; This function uses a non-reentrant model
 19205 ;;
 19206                           
 19207                           	psect	text89
 19208  003F58                     __ptext89:
 19209                           	opt stack 0
 19210  003F58                     _hxFlushMainDataBuffer:
 19211                           	opt stack 21
 19212                           
 19213                           ;HX_CommInterface.c: 291: hxClearArray(hx_mainData, 61);
 19214                           
 19215                           ;incstack = 0
 19216  003F58  0EC0               	movlw	low _hx_mainData
 19217  003F5A  0100               	movlb	0	; () banked
 19218  003F5C  6F60               	movwf	hxClearArray@arr& (0+255),b
 19219  003F5E  0E0B               	movlw	high _hx_mainData
 19220  003F60  6F61               	movwf	(hxClearArray@arr+1)& (0+255),b
 19221  003F62  0E3D               	movlw	61
 19222  003F64  6F62               	movwf	hxClearArray@size& (0+255),b
 19223  003F66  EC00  F01F         	call	_hxClearArray	;wreg free
 19224                           
 19225                           ;HX_CommInterface.c: 292: hx_mainDataIndex = 0;
 19226  003F6A  0E00               	movlw	0
 19227  003F6C  6E3F               	movwf	_hx_mainDataIndex,c
 19228  003F6E  0012               	return		;funcret
 19229  003F70                     __end_of_hxFlushMainDataBuffer:
 19230                           	opt stack 0
 19231                           tblptru	equ	0xFF8
 19232                           tblptrh	equ	0xFF7
 19233                           tblptrl	equ	0xFF6
 19234                           tablat	equ	0xFF5
 19235                           prodh	equ	0xFF4
 19236                           prodl	equ	0xFF3
 19237                           intcon	equ	0xFF2
 19238                           postinc0	equ	0xFEE
 19239                           wreg	equ	0xFE8
 19240                           indf1	equ	0xFE7
 19241                           postinc1	equ	0xFE6
 19242                           postdec1	equ	0xFE5
 19243                           plusw1	equ	0xFE3
 19244                           fsr1h	equ	0xFE2
 19245                           fsr1l	equ	0xFE1
 19246                           indf2	equ	0xFDF
 19247                           postinc2	equ	0xFDE
 19248                           postdec2	equ	0xFDD
 19249                           plusw2	equ	0xFDB
 19250                           fsr2h	equ	0xFDA
 19251                           fsr2l	equ	0xFD9
 19252                           status	equ	0xFD8
 19253                           
 19254 ;; *************** function _hxFlushInputBuffer *****************
 19255 ;; Defined at:
 19256 ;;		line 276 in file "HX_CommInterface.c"
 19257 ;; Parameters:    Size  Location     Type
 19258 ;;		None
 19259 ;; Auto vars:     Size  Location     Type
 19260 ;;		None
 19261 ;; Return value:  Size  Location     Type
 19262 ;;                  1    wreg      void 
 19263 ;; Registers used:
 19264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19265 ;; Tracked objects:
 19266 ;;		On entry : 0/0
 19267 ;;		On exit  : 0/0
 19268 ;;		Unchanged: 0/0
 19269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19274 ;;Total ram usage:        0 bytes
 19275 ;; Hardware stack levels used:    1
 19276 ;; Hardware stack levels required when called:    8
 19277 ;; This function calls:
 19278 ;;		_hxClearArray
 19279 ;; This function is called by:
 19280 ;;		_HX_Initialize
 19281 ;; This function uses a non-reentrant model
 19282 ;;
 19283                           
 19284                           	psect	text90
 19285  003E8C                     __ptext90:
 19286                           	opt stack 0
 19287  003E8C                     _hxFlushInputBuffer:
 19288                           	opt stack 21
 19289                           
 19290                           ;HX_CommInterface.c: 278: hxClearArray(hx_inData, 64);
 19291                           
 19292                           ;incstack = 0
 19293  003E8C  0E40               	movlw	low _hx_inData
 19294  003E8E  0100               	movlb	0	; () banked
 19295  003E90  6F60               	movwf	hxClearArray@arr& (0+255),b
 19296  003E92  0E0B               	movlw	high _hx_inData
 19297  003E94  6F61               	movwf	(hxClearArray@arr+1)& (0+255),b
 19298  003E96  0E40               	movlw	64
 19299  003E98  6F62               	movwf	hxClearArray@size& (0+255),b
 19300  003E9A  EC00  F01F         	call	_hxClearArray	;wreg free
 19301                           
 19302                           ;HX_CommInterface.c: 279: hx_inDataIndex = 0;
 19303  003E9E  0E00               	movlw	0
 19304  003EA0  6E3E               	movwf	_hx_inDataIndex,c
 19305                           
 19306                           ;HX_CommInterface.c: 280: hx_pktCmd = 0;
 19307  003EA2  0E00               	movlw	0
 19308  003EA4  6E3B               	movwf	_hx_pktCmd,c
 19309  003EA6  0012               	return		;funcret
 19310  003EA8                     __end_of_hxFlushInputBuffer:
 19311                           	opt stack 0
 19312                           tblptru	equ	0xFF8
 19313                           tblptrh	equ	0xFF7
 19314                           tblptrl	equ	0xFF6
 19315                           tablat	equ	0xFF5
 19316                           prodh	equ	0xFF4
 19317                           prodl	equ	0xFF3
 19318                           intcon	equ	0xFF2
 19319                           postinc0	equ	0xFEE
 19320                           wreg	equ	0xFE8
 19321                           indf1	equ	0xFE7
 19322                           postinc1	equ	0xFE6
 19323                           postdec1	equ	0xFE5
 19324                           plusw1	equ	0xFE3
 19325                           fsr1h	equ	0xFE2
 19326                           fsr1l	equ	0xFE1
 19327                           indf2	equ	0xFDF
 19328                           postinc2	equ	0xFDE
 19329                           postdec2	equ	0xFDD
 19330                           plusw2	equ	0xFDB
 19331                           fsr2h	equ	0xFDA
 19332                           fsr2l	equ	0xFD9
 19333                           status	equ	0xFD8
 19334                           
 19335 ;; *************** function _hxClearArray *****************
 19336 ;; Defined at:
 19337 ;;		line 306 in file "HX_CommInterface.c"
 19338 ;; Parameters:    Size  Location     Type
 19339 ;;  arr             2    0[BANK0 ] PTR unsigned char 
 19340 ;;		 -> hx_outData(64), hx_mainData(61), hx_inData(64), 
 19341 ;;  size            1    2[BANK0 ] unsigned char 
 19342 ;; Auto vars:     Size  Location     Type
 19343 ;;  i               1    3[BANK0 ] unsigned char 
 19344 ;; Return value:  Size  Location     Type
 19345 ;;                  1    wreg      void 
 19346 ;; Registers used:
 19347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19348 ;; Tracked objects:
 19349 ;;		On entry : 0/0
 19350 ;;		On exit  : 0/0
 19351 ;;		Unchanged: 0/0
 19352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19353 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19356 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19357 ;;Total ram usage:        4 bytes
 19358 ;; Hardware stack levels used:    1
 19359 ;; Hardware stack levels required when called:    7
 19360 ;; This function calls:
 19361 ;;		Nothing
 19362 ;; This function is called by:
 19363 ;;		_hxFlushInputBuffer
 19364 ;;		_hxFlushOutputBuffer
 19365 ;;		_hxFlushMainDataBuffer
 19366 ;; This function uses a non-reentrant model
 19367 ;;
 19368                           
 19369                           	psect	text91
 19370  003E00                     __ptext91:
 19371                           	opt stack 0
 19372  003E00                     _hxClearArray:
 19373                           	opt stack 21
 19374                           
 19375                           ;HX_CommInterface.c: 308: for(uint8_t i = 0; i < size; i++)
 19376                           
 19377                           ;incstack = 0
 19378  003E00  0E00               	movlw	0
 19379  003E02  0100               	movlb	0	; () banked
 19380  003E04  6F63               	movwf	hxClearArray@i& (0+255),b
 19381  003E06  D00B               	goto	l225
 19382  003E08                     
 19383                           ; BSR set to: 0
 19384                           ;HX_CommInterface.c: 309: {
 19385                           ;HX_CommInterface.c: 310: arr[i] = 0;
 19386                           
 19387                           ; BSR set to: 0
 19388  003E08  5163               	movf	hxClearArray@i& (0+255),w,b
 19389  003E0A  0D01               	mullw	1
 19390  003E0C  50F3               	movf	prodl,w,c
 19391  003E0E  2560               	addwf	hxClearArray@arr& (0+255),w,b
 19392  003E10  6ED9               	movwf	fsr2l,c
 19393  003E12  50F4               	movf	prodh,w,c
 19394  003E14  2161               	addwfc	(hxClearArray@arr+1)& (0+255),w,b
 19395  003E16  6EDA               	movwf	fsr2h,c
 19396  003E18  0E00               	movlw	0
 19397  003E1A  6EDF               	movwf	indf2,c
 19398                           
 19399                           ; BSR set to: 0
 19400  003E1C  2B63               	incf	hxClearArray@i& (0+255),f,b
 19401  003E1E                     l225:
 19402                           
 19403                           ; BSR set to: 0
 19404                           
 19405                           ; BSR set to: 0
 19406  003E1E  5162               	movf	hxClearArray@size& (0+255),w,b
 19407  003E20  5D63               	subwf	hxClearArray@i& (0+255),w,b
 19408  003E22  B0D8               	btfsc	status,0,c
 19409  003E24  0012               	return	
 19410  003E26  D7F0               	goto	l226
 19411  003E28                     __end_of_hxClearArray:
 19412                           	opt stack 0
 19413                           tblptru	equ	0xFF8
 19414                           tblptrh	equ	0xFF7
 19415                           tblptrl	equ	0xFF6
 19416                           tablat	equ	0xFF5
 19417                           prodh	equ	0xFF4
 19418                           prodl	equ	0xFF3
 19419                           intcon	equ	0xFF2
 19420                           postinc0	equ	0xFEE
 19421                           wreg	equ	0xFE8
 19422                           indf1	equ	0xFE7
 19423                           postinc1	equ	0xFE6
 19424                           postdec1	equ	0xFE5
 19425                           plusw1	equ	0xFE3
 19426                           fsr1h	equ	0xFE2
 19427                           fsr1l	equ	0xFE1
 19428                           indf2	equ	0xFDF
 19429                           postinc2	equ	0xFDE
 19430                           postdec2	equ	0xFDD
 19431                           plusw2	equ	0xFDB
 19432                           fsr2h	equ	0xFDA
 19433                           fsr2l	equ	0xFD9
 19434                           status	equ	0xFD8
 19435                           
 19436 ;; *************** function _INTERRUPT_InterruptManager *****************
 19437 ;; Defined at:
 19438 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 19439 ;; Parameters:    Size  Location     Type
 19440 ;;		None
 19441 ;; Auto vars:     Size  Location     Type
 19442 ;;		None
 19443 ;; Return value:  Size  Location     Type
 19444 ;;                  1    wreg      void 
 19445 ;; Registers used:
 19446 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19447 ;; Tracked objects:
 19448 ;;		On entry : 0/0
 19449 ;;		On exit  : 0/0
 19450 ;;		Unchanged: 0/0
 19451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19454 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19455 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19456 ;;Total ram usage:       18 bytes
 19457 ;; Hardware stack levels used:    1
 19458 ;; Hardware stack levels required when called:    6
 19459 ;; This function calls:
 19460 ;;		_EUSART1_Receive_ISR
 19461 ;;		_EUSART1_Transmit_ISR
 19462 ;;		_I2C1_BusCollisionISR
 19463 ;;		_I2C1_ISR
 19464 ;;		_TMR0_ISR
 19465 ;; This function is called by:
 19466 ;;		Interrupt level 2
 19467 ;; This function uses a non-reentrant model
 19468 ;;
 19469                           
 19470                           	psect	intcode
 19471  000008                     __pintcode:
 19472                           	opt stack 0
 19473  000008                     _INTERRUPT_InterruptManager:
 19474                           	opt stack 17
 19475                           
 19476                           ; BSR set to: 0
 19477                           ;incstack = 0
 19478  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19479  00000A  CFFA F012          	movff	pclath,??_INTERRUPT_InterruptManager
 19480  00000E  CFFB F013          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 19481  000012  CFE9 F014          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 19482  000016  CFEA F015          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 19483  00001A  CFE1 F016          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 19484  00001E  CFE2 F017          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 19485  000022  CFD9 F018          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 19486  000026  CFDA F019          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 19487  00002A  CFF3 F01A          	movff	prodl,??_INTERRUPT_InterruptManager+8
 19488  00002E  CFF4 F01B          	movff	prodh,??_INTERRUPT_InterruptManager+9
 19489  000032  CFF6 F01C          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 19490  000036  CFF7 F01D          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 19491  00003A  CFF8 F01E          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 19492  00003E  CFF5 F01F          	movff	tablat,??_INTERRUPT_InterruptManager+13
 19493  000042  C047  F020         	movff	btemp,??_INTERRUPT_InterruptManager+14
 19494  000046  C048  F021         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 19495  00004A  C049  F022         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 19496  00004E  C04A  F023         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 19497                           
 19498                           ;interrupt_manager.c: 60: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 19499  000052  010E               	movlb	14	; () banked
 19500  000054  BBC2               	btfsc	194,5,b	;volatile
 19501                           
 19502                           ; BSR set to: 14
 19503  000056  ABCA               	btfss	202,5,b	;volatile
 19504  000058  D003               	goto	i2l1585
 19505                           
 19506                           ; BSR set to: 14
 19507                           ;interrupt_manager.c: 61: {
 19508                           ;interrupt_manager.c: 62: TMR0_ISR();
 19509  00005A  EC7F  F01E         	call	_TMR0_ISR	;wreg free
 19510                           
 19511                           ;interrupt_manager.c: 63: }
 19512  00005E  D01E               	goto	i2l1593
 19513  000060                     i2l1585:
 19514                           
 19515                           ; BSR set to: 14
 19516                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE3bits.BCL1IE == 1 && PIR3bi
      +                          ts.BCL1IF == 1)
 19517  000060  BCF2               	btfsc	intcon,6,c	;volatile
 19518                           
 19519                           ; BSR set to: 14
 19520  000062  A3C5               	btfss	197,1,b	;volatile
 19521  000064  D005               	goto	i2l1587
 19522                           
 19523                           ; BSR set to: 14
 19524  000066  A3CD               	btfss	205,1,b	;volatile
 19525  000068  D003               	goto	i2l1587
 19526                           
 19527                           ; BSR set to: 14
 19528                           ;interrupt_manager.c: 65: {
 19529                           ;interrupt_manager.c: 66: I2C1_BusCollisionISR();
 19530  00006A  EC56  F020         	call	_I2C1_BusCollisionISR	;wreg free
 19531                           
 19532                           ;interrupt_manager.c: 67: }
 19533  00006E  D016               	goto	i2l1593
 19534  000070                     i2l1587:
 19535                           
 19536                           ; BSR set to: 14
 19537                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE3bits.SSP1IE == 1 && PIR3bi
      +                          ts.SSP1IF == 1)
 19538  000070  BCF2               	btfsc	intcon,6,c	;volatile
 19539                           
 19540                           ; BSR set to: 14
 19541  000072  A1C5               	btfss	197,0,b	;volatile
 19542  000074  D005               	goto	i2l1589
 19543                           
 19544                           ; BSR set to: 14
 19545  000076  A1CD               	btfss	205,0,b	;volatile
 19546  000078  D003               	goto	i2l1589
 19547                           
 19548                           ; BSR set to: 14
 19549                           ;interrupt_manager.c: 69: {
 19550                           ;interrupt_manager.c: 70: I2C1_ISR();
 19551  00007A  ECC5  F00D         	call	_I2C1_ISR	;wreg free
 19552                           
 19553                           ;interrupt_manager.c: 71: }
 19554  00007E  D00E               	goto	i2l1593
 19555  000080                     i2l1589:
 19556                           
 19557                           ; BSR set to: 14
 19558                           ;interrupt_manager.c: 72: else if(INTCONbits.PEIE == 1 && PIE3bits.TX1IE == 1 && PIR3bit
      +                          s.TX1IF == 1)
 19559  000080  BCF2               	btfsc	intcon,6,c	;volatile
 19560                           
 19561                           ; BSR set to: 14
 19562  000082  A9C5               	btfss	197,4,b	;volatile
 19563  000084  D005               	goto	i2l1591
 19564                           
 19565                           ; BSR set to: 14
 19566  000086  A9CD               	btfss	205,4,b	;volatile
 19567  000088  D003               	goto	i2l1591
 19568                           
 19569                           ; BSR set to: 14
 19570                           ;interrupt_manager.c: 73: {
 19571                           ;interrupt_manager.c: 74: EUSART1_Transmit_ISR();
 19572  00008A  EC36  F01E         	call	_EUSART1_Transmit_ISR	;wreg free
 19573                           
 19574                           ;interrupt_manager.c: 75: }
 19575  00008E  D006               	goto	i2l1593
 19576  000090                     i2l1591:
 19577                           
 19578                           ; BSR set to: 14
 19579                           ;interrupt_manager.c: 76: else if(INTCONbits.PEIE == 1 && PIE3bits.RC1IE == 1 && PIR3bit
      +                          s.RC1IF == 1)
 19580  000090  BCF2               	btfsc	intcon,6,c	;volatile
 19581                           
 19582                           ; BSR set to: 14
 19583  000092  ABC5               	btfss	197,5,b	;volatile
 19584  000094  D003               	goto	i2l1593
 19585                           
 19586                           ; BSR set to: 14
 19587  000096  BBCD               	btfsc	205,5,b	;volatile
 19588                           
 19589                           ; BSR set to: 14
 19590                           ;interrupt_manager.c: 77: {
 19591                           ;interrupt_manager.c: 78: EUSART1_Receive_ISR();
 19592  000098  EC0B  F020         	call	_EUSART1_Receive_ISR	;wreg free
 19593  00009C                     i2l1593:
 19594                           
 19595                           ;interrupt_manager.c: 80: else
 19596                           ;interrupt_manager.c: 81: {
 19597  00009C  C023  F04A         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 19598  0000A0  C022  F049         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 19599  0000A4  C021  F048         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 19600  0000A8  C020  F047         	movff	??_INTERRUPT_InterruptManager+14,btemp
 19601  0000AC  C01F  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 19602  0000B0  C01E  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 19603  0000B4  C01D  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 19604  0000B8  C01C  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 19605  0000BC  C01B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 19606  0000C0  C01A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 19607  0000C4  C019  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 19608  0000C8  C018  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 19609  0000CC  C017  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 19610  0000D0  C016  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 19611  0000D4  C015  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 19612  0000D8  C014  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 19613  0000DC  C013  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 19614  0000E0  C012  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 19615  0000E4  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19616  0000E6  0011               	retfie		f
 19617  0000E8                     __end_of_INTERRUPT_InterruptManager:
 19618                           	opt stack 0
 19619                           pclatu	equ	0xFFB
 19620                           pclath	equ	0xFFA
 19621                           tblptru	equ	0xFF8
 19622                           tblptrh	equ	0xFF7
 19623                           tblptrl	equ	0xFF6
 19624                           tablat	equ	0xFF5
 19625                           prodh	equ	0xFF4
 19626                           prodl	equ	0xFF3
 19627                           intcon	equ	0xFF2
 19628                           postinc0	equ	0xFEE
 19629                           fsr0h	equ	0xFEA
 19630                           fsr0l	equ	0xFE9
 19631                           wreg	equ	0xFE8
 19632                           indf1	equ	0xFE7
 19633                           postinc1	equ	0xFE6
 19634                           postdec1	equ	0xFE5
 19635                           plusw1	equ	0xFE3
 19636                           fsr1h	equ	0xFE2
 19637                           fsr1l	equ	0xFE1
 19638                           indf2	equ	0xFDF
 19639                           postinc2	equ	0xFDE
 19640                           postdec2	equ	0xFDD
 19641                           plusw2	equ	0xFDB
 19642                           fsr2h	equ	0xFDA
 19643                           fsr2l	equ	0xFD9
 19644                           status	equ	0xFD8
 19645                           
 19646 ;; *************** function _TMR0_ISR *****************
 19647 ;; Defined at:
 19648 ;;		line 133 in file "mcc_generated_files/tmr0.c"
 19649 ;; Parameters:    Size  Location     Type
 19650 ;;		None
 19651 ;; Auto vars:     Size  Location     Type
 19652 ;;		None
 19653 ;; Return value:  Size  Location     Type
 19654 ;;                  1    wreg      void 
 19655 ;; Registers used:
 19656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19657 ;; Tracked objects:
 19658 ;;		On entry : 0/0
 19659 ;;		On exit  : 0/0
 19660 ;;		Unchanged: 0/0
 19661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19666 ;;Total ram usage:        0 bytes
 19667 ;; Hardware stack levels used:    1
 19668 ;; Hardware stack levels required when called:    5
 19669 ;; This function calls:
 19670 ;;		Absolute function
 19671 ;;		_TMR0_DefaultInterruptHandler
 19672 ;; This function is called by:
 19673 ;;		_INTERRUPT_InterruptManager
 19674 ;; This function uses a non-reentrant model
 19675 ;;
 19676                           
 19677                           	psect	text93
 19678  003CFE                     __ptext93:
 19679                           	opt stack 0
 19680  003CFE                     _TMR0_ISR:
 19681                           	opt stack 17
 19682                           
 19683                           ;tmr0.c: 136: PIR0bits.TMR0IF = 0;
 19684                           
 19685                           ;incstack = 0
 19686  003CFE  010E               	movlb	14	; () banked
 19687  003D00  9BCA               	bcf	202,5,b	;volatile
 19688                           
 19689                           ; BSR set to: 14
 19690                           ;tmr0.c: 138: TMR0H = timer0ReloadVal16bit >> 8;
 19691  003D02  5044               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
 19692  003D04  6ED4               	movwf	4052,c	;volatile
 19693                           
 19694                           ; BSR set to: 14
 19695                           ;tmr0.c: 139: TMR0L = (uint8_t) timer0ReloadVal16bit;
 19696  003D06  C043  FFD3         	movff	_timer0ReloadVal16bit,4051	;volatile
 19697                           
 19698                           ; BSR set to: 14
 19699                           ;tmr0.c: 141: if(TMR0_InterruptHandler)
 19700  003D0A  0103               	movlb	3	; () banked
 19701  003D0C  51FB               	movf	_TMR0_InterruptHandler& (0+255),w,b
 19702  003D0E  11FC               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 19703  003D10  11FD               	iorwf	(_TMR0_InterruptHandler+2)& (0+255),w,b
 19704  003D12  B4D8               	btfsc	status,2,c
 19705  003D14  0012               	return	
 19706                           
 19707                           ; BSR set to: 3
 19708                           ;tmr0.c: 142: {
 19709                           ;tmr0.c: 143: TMR0_InterruptHandler();
 19710  003D16  D801               	call	i2u580_48
 19711  003D18  0012               	return	
 19712  003D1A                     i2u580_48:
 19713  003D1A  0005               	push	
 19714  003D1C  6EFA               	movwf	pclath,c
 19715  003D1E  51FB               	movf	_TMR0_InterruptHandler& (0+255),w,b
 19716  003D20  6EFD               	movwf	tosl,c
 19717  003D22  51FC               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 19718  003D24  6EFE               	movwf	tosh,c
 19719  003D26  51FD               	movf	(_TMR0_InterruptHandler+2)& (0+255),w,b
 19720  003D28  6EFF               	movwf	tosu,c
 19721  003D2A  50FA               	movf	pclath,w,c
 19722  003D2C  0012               	return		;indir
 19723  003D2E                     __end_of_TMR0_ISR:
 19724                           	opt stack 0
 19725                           tosu	equ	0xFFF
 19726                           tosh	equ	0xFFE
 19727                           tosl	equ	0xFFD
 19728                           pclatu	equ	0xFFB
 19729                           pclath	equ	0xFFA
 19730                           tblptru	equ	0xFF8
 19731                           tblptrh	equ	0xFF7
 19732                           tblptrl	equ	0xFF6
 19733                           tablat	equ	0xFF5
 19734                           prodh	equ	0xFF4
 19735                           prodl	equ	0xFF3
 19736                           intcon	equ	0xFF2
 19737                           postinc0	equ	0xFEE
 19738                           fsr0h	equ	0xFEA
 19739                           fsr0l	equ	0xFE9
 19740                           wreg	equ	0xFE8
 19741                           indf1	equ	0xFE7
 19742                           postinc1	equ	0xFE6
 19743                           postdec1	equ	0xFE5
 19744                           plusw1	equ	0xFE3
 19745                           fsr1h	equ	0xFE2
 19746                           fsr1l	equ	0xFE1
 19747                           indf2	equ	0xFDF
 19748                           postinc2	equ	0xFDE
 19749                           postdec2	equ	0xFDD
 19750                           plusw2	equ	0xFDB
 19751                           fsr2h	equ	0xFDA
 19752                           fsr2l	equ	0xFD9
 19753                           status	equ	0xFD8
 19754                           
 19755 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 19756 ;; Defined at:
 19757 ;;		line 154 in file "mcc_generated_files/tmr0.c"
 19758 ;; Parameters:    Size  Location     Type
 19759 ;;		None
 19760 ;; Auto vars:     Size  Location     Type
 19761 ;;		None
 19762 ;; Return value:  Size  Location     Type
 19763 ;;                  1    wreg      void 
 19764 ;; Registers used:
 19765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19766 ;; Tracked objects:
 19767 ;;		On entry : 0/0
 19768 ;;		On exit  : 0/0
 19769 ;;		Unchanged: 0/0
 19770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19775 ;;Total ram usage:        0 bytes
 19776 ;; Hardware stack levels used:    1
 19777 ;; Hardware stack levels required when called:    4
 19778 ;; This function calls:
 19779 ;;		_hxHandleTmr0
 19780 ;; This function is called by:
 19781 ;;		_TMR0_Initialize
 19782 ;;		_TMR0_ISR
 19783 ;; This function uses a non-reentrant model
 19784 ;;
 19785                           
 19786                           	psect	text94
 19787  004086                     __ptext94:
 19788                           	opt stack 0
 19789  004086                     _TMR0_DefaultInterruptHandler:
 19790                           	opt stack 17
 19791                           
 19792                           ;tmr0.c: 157: hxHandleTmr0();
 19793                           
 19794                           ;incstack = 0
 19795  004086  ECF5  F01C         	call	_hxHandleTmr0	;wreg free
 19796  00408A  0012               	return		;funcret
 19797  00408C                     __end_of_TMR0_DefaultInterruptHandler:
 19798                           	opt stack 0
 19799                           tosu	equ	0xFFF
 19800                           tosh	equ	0xFFE
 19801                           tosl	equ	0xFFD
 19802                           pclatu	equ	0xFFB
 19803                           pclath	equ	0xFFA
 19804                           tblptru	equ	0xFF8
 19805                           tblptrh	equ	0xFF7
 19806                           tblptrl	equ	0xFF6
 19807                           tablat	equ	0xFF5
 19808                           prodh	equ	0xFF4
 19809                           prodl	equ	0xFF3
 19810                           intcon	equ	0xFF2
 19811                           postinc0	equ	0xFEE
 19812                           fsr0h	equ	0xFEA
 19813                           fsr0l	equ	0xFE9
 19814                           wreg	equ	0xFE8
 19815                           indf1	equ	0xFE7
 19816                           postinc1	equ	0xFE6
 19817                           postdec1	equ	0xFE5
 19818                           plusw1	equ	0xFE3
 19819                           fsr1h	equ	0xFE2
 19820                           fsr1l	equ	0xFE1
 19821                           indf2	equ	0xFDF
 19822                           postinc2	equ	0xFDE
 19823                           postdec2	equ	0xFDD
 19824                           plusw2	equ	0xFDB
 19825                           fsr2h	equ	0xFDA
 19826                           fsr2l	equ	0xFD9
 19827                           status	equ	0xFD8
 19828                           
 19829 ;; *************** function _hxHandleTmr0 *****************
 19830 ;; Defined at:
 19831 ;;		line 248 in file "HX_CommInterface.c"
 19832 ;; Parameters:    Size  Location     Type
 19833 ;;		None
 19834 ;; Auto vars:     Size  Location     Type
 19835 ;;		None
 19836 ;; Return value:  Size  Location     Type
 19837 ;;                  1    wreg      void 
 19838 ;; Registers used:
 19839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19840 ;; Tracked objects:
 19841 ;;		On entry : 0/0
 19842 ;;		On exit  : 0/0
 19843 ;;		Unchanged: 0/0
 19844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19846 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19848 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19849 ;;Total ram usage:        2 bytes
 19850 ;; Hardware stack levels used:    1
 19851 ;; Hardware stack levels required when called:    3
 19852 ;; This function calls:
 19853 ;;		_hxSetupPacket1
 19854 ;;		i2_hxFlushInputBuffer
 19855 ;;		i2_hxFlushOutputBuffer
 19856 ;; This function is called by:
 19857 ;;		_TMR0_DefaultInterruptHandler
 19858 ;; This function uses a non-reentrant model
 19859 ;;
 19860                           
 19861                           	psect	text95
 19862  0039EA                     __ptext95:
 19863                           	opt stack 0
 19864  0039EA                     _hxHandleTmr0:
 19865                           	opt stack 17
 19866                           
 19867                           ;HX_CommInterface.c: 250: hxFlushOutputBuffer();
 19868                           
 19869                           ;incstack = 0
 19870  0039EA  ECDA  F01F         	call	i2_hxFlushOutputBuffer	;wreg free
 19871                           
 19872                           ;HX_CommInterface.c: 251: hxFlushInputBuffer();
 19873  0039EE  EC7B  F01F         	call	i2_hxFlushInputBuffer	;wreg free
 19874                           
 19875                           ;HX_CommInterface.c: 255: hx_state = hx_state == 0x11 ? 0x42:
 19876                           ;HX_CommInterface.c: 256: 0x22;
 19877  0039F2  0E11               	movlw	17
 19878  0039F4  1845               	xorwf	_hx_state,w,c
 19879  0039F6  B4D8               	btfsc	status,2,c
 19880  0039F8  D004               	goto	i2l198
 19881  0039FA  0E00               	movlw	0
 19882  0039FC  6E0A               	movwf	_hxHandleTmr0$364+1,c
 19883  0039FE  0E22               	movlw	34
 19884  003A00  D003               	goto	L28
 19885  003A02                     i2l198:
 19886  003A02  0E00               	movlw	0
 19887  003A04  6E0A               	movwf	_hxHandleTmr0$364+1,c
 19888  003A06  0E42               	movlw	66
 19889  003A08                     L28:
 19890  003A08  6E09               	movwf	_hxHandleTmr0$364,c
 19891  003A0A  C009  F045         	movff	_hxHandleTmr0$364,_hx_state
 19892                           
 19893                           ;HX_CommInterface.c: 257: hxSetupPacket1(0x01, hx_state);
 19894  003A0E  C045  F006         	movff	_hx_state,hxSetupPacket1@data
 19895  003A12  0E01               	movlw	1
 19896  003A14  ECB9  F01B         	call	_hxSetupPacket1
 19897                           
 19898                           ;HX_CommInterface.c: 259: hx_startMain = 0;
 19899  003A18  0E00               	movlw	0
 19900  003A1A  6E38               	movwf	_hx_startMain,c
 19901                           
 19902                           ;HX_CommInterface.c: 260: hx_txPacketFlag = 1;
 19903  003A1C  0E01               	movlw	1
 19904  003A1E  6E46               	movwf	_hx_txPacketFlag,c
 19905                           
 19906                           ;HX_CommInterface.c: 261: hx_abort = 1;
 19907  003A20  0E01               	movlw	1
 19908  003A22  6E36               	movwf	_hx_abort,c
 19909  003A24  0012               	return		;funcret
 19910  003A26                     __end_of_hxHandleTmr0:
 19911                           	opt stack 0
 19912                           tosu	equ	0xFFF
 19913                           tosh	equ	0xFFE
 19914                           tosl	equ	0xFFD
 19915                           pclatu	equ	0xFFB
 19916                           pclath	equ	0xFFA
 19917                           tblptru	equ	0xFF8
 19918                           tblptrh	equ	0xFF7
 19919                           tblptrl	equ	0xFF6
 19920                           tablat	equ	0xFF5
 19921                           prodh	equ	0xFF4
 19922                           prodl	equ	0xFF3
 19923                           intcon	equ	0xFF2
 19924                           postinc0	equ	0xFEE
 19925                           fsr0h	equ	0xFEA
 19926                           fsr0l	equ	0xFE9
 19927                           wreg	equ	0xFE8
 19928                           indf1	equ	0xFE7
 19929                           postinc1	equ	0xFE6
 19930                           postdec1	equ	0xFE5
 19931                           plusw1	equ	0xFE3
 19932                           fsr1h	equ	0xFE2
 19933                           fsr1l	equ	0xFE1
 19934                           indf2	equ	0xFDF
 19935                           postinc2	equ	0xFDE
 19936                           postdec2	equ	0xFDD
 19937                           plusw2	equ	0xFDB
 19938                           fsr2h	equ	0xFDA
 19939                           fsr2l	equ	0xFD9
 19940                           status	equ	0xFD8
 19941                           
 19942 ;; *************** function _I2C1_ISR *****************
 19943 ;; Defined at:
 19944 ;;		line 235 in file "mcc_generated_files/i2c1.c"
 19945 ;; Parameters:    Size  Location     Type
 19946 ;;		None
 19947 ;; Auto vars:     Size  Location     Type
 19948 ;;		None
 19949 ;; Return value:  Size  Location     Type
 19950 ;;                  1    wreg      void 
 19951 ;; Registers used:
 19952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19953 ;; Tracked objects:
 19954 ;;		On entry : 0/0
 19955 ;;		On exit  : 0/0
 19956 ;;		Unchanged: 0/0
 19957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19959 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19960 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19961 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19962 ;;Total ram usage:        2 bytes
 19963 ;; Hardware stack levels used:    1
 19964 ;; Hardware stack levels required when called:    1
 19965 ;; This function calls:
 19966 ;;		_I2C1_FunctionComplete
 19967 ;;		_I2C1_Stop
 19968 ;; This function is called by:
 19969 ;;		_INTERRUPT_InterruptManager
 19970 ;; This function uses a non-reentrant model
 19971 ;;
 19972                           
 19973                           	psect	text96
 19974  001B8A                     __ptext96:
 19975                           	opt stack 0
 19976  001B8A                     _I2C1_ISR:
 19977                           	opt stack 21
 19978                           
 19979                           ;i2c1.c: 238: static uint8_t *pi2c_buf_ptr;
 19980                           ;i2c1.c: 239: static uint16_t i2c_address = 0;
 19981                           ;i2c1.c: 240: static uint8_t i2c_bytes_left = 0;
 19982                           ;i2c1.c: 241: static uint8_t i2c_10bit_address_restart = 0;
 19983                           ;i2c1.c: 243: PIR3bits.SSP1IF = 0;
 19984                           
 19985                           ;incstack = 0
 19986  001B8A  010E               	movlb	14	; () banked
 19987  001B8C  91CD               	bcf	205,0,b	;volatile
 19988                           
 19989                           ;i2c1.c: 247: if(SSP1CON1bits.WCOL)
 19990  001B8E  AE96               	btfss	3990,7,c	;volatile
 19991  001B90  D101               	goto	i2l1435
 19992                           
 19993                           ; BSR set to: 14
 19994                           ;i2c1.c: 248: {
 19995                           ;i2c1.c: 250: SSP1CON1bits.WCOL = 0;
 19996  001B92  9E96               	bcf	3990,7,c	;volatile
 19997                           
 19998                           ; BSR set to: 14
 19999                           ;i2c1.c: 251: i2c1_state = S_MASTER_IDLE;
 20000  001B94  0E00               	movlw	0
 20001  001B96  6E2F               	movwf	_i2c1_state,c
 20002                           
 20003                           ; BSR set to: 14
 20004                           ;i2c1.c: 252: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 20005  001B98  EE20 F003          	lfsr	2,3
 20006  001B9C  5024               	movf	_p_i2c1_current,w,c
 20007  001B9E  26D9               	addwf	fsr2l,f,c
 20008  001BA0  5025               	movf	_p_i2c1_current+1,w,c
 20009  001BA2  22DA               	addwfc	fsr2h,f,c
 20010  001BA4  CFDE F004          	movff	postinc2,??_I2C1_ISR
 20011  001BA8  CFDD F005          	movff	postdec2,??_I2C1_ISR+1
 20012  001BAC  C004  FFD9         	movff	??_I2C1_ISR,fsr2l
 20013  001BB0  C005  FFDA         	movff	??_I2C1_ISR+1,fsr2h
 20014  001BB4  0E01               	movlw	1
 20015  001BB6  6EDF               	movwf	indf2,c
 20016                           
 20017                           ; BSR set to: 14
 20018                           ;i2c1.c: 255: p_i2c1_current = (0);
 20019  001BB8  0E00               	movlw	0
 20020  001BBA  6E24               	movwf	_p_i2c1_current,c
 20021  001BBC  0E00               	movlw	0
 20022  001BBE  6E25               	movwf	_p_i2c1_current+1,c
 20023                           
 20024                           ; BSR set to: 14
 20025                           ;i2c1.c: 257: return;
 20026  001BC0  0012               	return	
 20027  001BC2                     i2l1436:
 20028                           
 20029                           ;i2c1.c: 265: if(i2c1_object.trStatus.s.empty != 1)
 20030  001BC2  0102               	movlb	2	; () banked
 20031  001BC4  B3DF               	btfsc	(_i2c1_object+4)& (0+255),1,b
 20032  001BC6  0012               	return	
 20033                           
 20034                           ; BSR set to: 2
 20035                           ;i2c1.c: 266: {
 20036                           ;i2c1.c: 268: p_i2c1_current = i2c1_object.pTrHead;
 20037  001BC8  C2DD  F024         	movff	_i2c1_object+2,_p_i2c1_current
 20038  001BCC  C2DE  F025         	movff	_i2c1_object+3,_p_i2c1_current+1
 20039                           
 20040                           ; BSR set to: 2
 20041                           ;i2c1.c: 269: i2c1_trb_count = i2c1_object.pTrHead->count;
 20042  001BD0  C2DD  FFD9         	movff	_i2c1_object+2,fsr2l
 20043  001BD4  C2DE  FFDA         	movff	_i2c1_object+3,fsr2h
 20044  001BD8  50DF               	movf	indf2,w,c
 20045  001BDA  6E2E               	movwf	_i2c1_trb_count,c
 20046                           
 20047                           ; BSR set to: 2
 20048                           ;i2c1.c: 270: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 20049  001BDC  EE20 F001          	lfsr	2,1
 20050  001BE0  51DD               	movf	(_i2c1_object+2)& (0+255),w,b
 20051  001BE2  26D9               	addwf	fsr2l,f,c
 20052  001BE4  51DE               	movf	(_i2c1_object+3)& (0+255),w,b
 20053  001BE6  22DA               	addwfc	fsr2h,f,c
 20054  001BE8  CFDE F026          	movff	postinc2,_p_i2c1_trb_current
 20055  001BEC  CFDD F027          	movff	postdec2,_p_i2c1_trb_current+1
 20056                           
 20057                           ; BSR set to: 2
 20058                           ;i2c1.c: 272: i2c1_object.pTrHead++;
 20059  001BF0  0E05               	movlw	5
 20060  001BF2  27DD               	addwf	(_i2c1_object+2)& (0+255),f,b
 20061  001BF4  0E00               	movlw	0
 20062  001BF6  23DE               	addwfc	(_i2c1_object+3)& (0+255),f,b
 20063                           
 20064                           ; BSR set to: 2
 20065                           ;i2c1.c: 275: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 20066  001BF8  0EFB               	movlw	low (_i2c1_tr_queue+5)
 20067  001BFA  19DD               	xorwf	(_i2c1_object+2)& (0+255),w,b
 20068  001BFC  E108               	bnz	i2l11952
 20069  001BFE  0E03               	movlw	high (_i2c1_tr_queue+5)
 20070  001C00  19DE               	xorwf	(_i2c1_object+3)& (0+255),w,b
 20071  001C02  A4D8               	btfss	status,2,c
 20072  001C04  D004               	goto	i2l1438
 20073                           
 20074                           ; BSR set to: 2
 20075                           ;i2c1.c: 276: {
 20076                           ;i2c1.c: 278: i2c1_object.pTrHead = i2c1_tr_queue;
 20077  001C06  0EF6               	movlw	low _i2c1_tr_queue
 20078  001C08  6FDD               	movwf	(_i2c1_object+2)& (0+255),b
 20079  001C0A  0E03               	movlw	high _i2c1_tr_queue
 20080  001C0C  6FDE               	movwf	(_i2c1_object+3)& (0+255),b
 20081  001C0E                     i2l1438:
 20082  001C0E                     i2l11952:
 20083                           
 20084                           ; BSR set to: 2
 20085                           ;i2c1.c: 279: }
 20086                           ;i2c1.c: 283: i2c1_object.trStatus.s.full = 0;
 20087  001C0E  91DF               	bcf	(_i2c1_object+4)& (0+255),0,b
 20088                           
 20089                           ;i2c1.c: 286: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 20090  001C10  51DB               	movf	_i2c1_object& (0+255),w,b
 20091  001C12  19DD               	xorwf	(_i2c1_object+2)& (0+255),w,b
 20092  001C14  E104               	bnz	i2l1439
 20093  001C16  51DC               	movf	(_i2c1_object+1)& (0+255),w,b
 20094  001C18  19DE               	xorwf	(_i2c1_object+3)& (0+255),w,b
 20095  001C1A  B4D8               	btfsc	status,2,c
 20096                           
 20097                           ; BSR set to: 2
 20098                           ;i2c1.c: 287: {
 20099                           ;i2c1.c: 289: i2c1_object.trStatus.s.empty = 1;
 20100  001C1C  83DF               	bsf	(_i2c1_object+4)& (0+255),1,b
 20101  001C1E                     i2l1439:
 20102                           
 20103                           ; BSR set to: 2
 20104                           ;i2c1.c: 290: }
 20105                           ;i2c1.c: 293: SSP1CON2bits.SEN = 1;
 20106  001C1E  8097               	bsf	3991,0,c	;volatile
 20107                           
 20108                           ; BSR set to: 2
 20109                           ;i2c1.c: 296: i2c1_state = S_MASTER_SEND_ADDR;
 20110  001C20  0E02               	movlw	2
 20111  001C22  6E2F               	movwf	_i2c1_state,c
 20112                           
 20113                           ; BSR set to: 2
 20114                           ;i2c1.c: 297: }
 20115                           ;i2c1.c: 299: break;
 20116  001C24  0012               	return	
 20117  001C26                     i2l1441:
 20118                           
 20119                           ;i2c1.c: 306: SSP1CON2bits.RSEN = 1;
 20120  001C26  8297               	bsf	3991,1,c	;volatile
 20121                           
 20122                           ;i2c1.c: 309: i2c1_state = S_MASTER_SEND_ADDR;
 20123  001C28  0E02               	movlw	2
 20124  001C2A  6E2F               	movwf	_i2c1_state,c
 20125                           
 20126                           ;i2c1.c: 311: break;
 20127  001C2C  0012               	return	
 20128  001C2E                     i2l1442:
 20129                           
 20130                           ;i2c1.c: 315: if(SSP1CON2bits.ACKSTAT)
 20131  001C2E  AC97               	btfss	3991,6,c	;volatile
 20132  001C30  D006               	goto	i2l1443
 20133                           
 20134                           ;i2c1.c: 316: {
 20135                           ;i2c1.c: 317: i2c1_object.i2cErrors++;
 20136  001C32  0102               	movlb	2	; () banked
 20137  001C34  2BE1               	incf	(_i2c1_object+6)& (0+255),f,b
 20138                           
 20139                           ; BSR set to: 2
 20140                           ;i2c1.c: 318: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 20141  001C36  0E04               	movlw	4
 20142  001C38  ECD6  F01C         	call	_I2C1_Stop
 20143                           
 20144                           ;i2c1.c: 319: }
 20145  001C3C  0012               	return	
 20146  001C3E                     i2l1443:
 20147                           
 20148                           ;i2c1.c: 320: else
 20149                           ;i2c1.c: 321: {
 20150                           ;i2c1.c: 323: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 20151  001C3E  90D8               	bcf	status,0,c
 20152  001C40  3042               	rrcf	I2C1_ISR@i2c_address+1,w,c
 20153  001C42  6E05               	movwf	(??_I2C1_ISR+1)& (0+255),c
 20154  001C44  3041               	rrcf	I2C1_ISR@i2c_address,w,c
 20155  001C46  6E04               	movwf	??_I2C1_ISR& (0+255),c
 20156  001C48  5004               	movf	??_I2C1_ISR,w,c
 20157  001C4A  6E92               	movwf	3986,c	;volatile
 20158                           
 20159                           ;i2c1.c: 326: if(i2c_address & 0x01)
 20160  001C4C  A041               	btfss	I2C1_ISR@i2c_address,0,c
 20161  001C4E  D003               	goto	i2l1445
 20162                           
 20163                           ;i2c1.c: 327: {
 20164                           ;i2c1.c: 330: i2c1_state = S_MASTER_10BIT_RESTART;
 20165  001C50  0E0B               	movlw	11
 20166  001C52  6E2F               	movwf	_i2c1_state,c
 20167                           
 20168                           ;i2c1.c: 331: }
 20169  001C54  0012               	return	
 20170  001C56                     i2l1445:
 20171                           
 20172                           ;i2c1.c: 332: else
 20173                           ;i2c1.c: 333: {
 20174                           ;i2c1.c: 335: i2c1_state = S_MASTER_SEND_DATA;
 20175  001C56  0E03               	movlw	3
 20176  001C58  6E2F               	movwf	_i2c1_state,c
 20177                           
 20178                           ;i2c1.c: 336: }
 20179                           ;i2c1.c: 337: }
 20180                           ;i2c1.c: 339: break;
 20181  001C5A  0012               	return	
 20182  001C5C                     i2l1447:
 20183                           
 20184                           ;i2c1.c: 343: if(SSP1CON2bits.ACKSTAT)
 20185  001C5C  AC97               	btfss	3991,6,c	;volatile
 20186  001C5E  D006               	goto	i2l1448
 20187                           
 20188                           ;i2c1.c: 344: {
 20189                           ;i2c1.c: 345: i2c1_object.i2cErrors++;
 20190  001C60  0102               	movlb	2	; () banked
 20191  001C62  2BE1               	incf	(_i2c1_object+6)& (0+255),f,b
 20192                           
 20193                           ; BSR set to: 2
 20194                           ;i2c1.c: 346: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 20195  001C64  0E04               	movlw	4
 20196  001C66  ECD6  F01C         	call	_I2C1_Stop
 20197                           
 20198                           ;i2c1.c: 347: }
 20199  001C6A  0012               	return	
 20200  001C6C                     i2l1448:
 20201                           
 20202                           ;i2c1.c: 348: else
 20203                           ;i2c1.c: 349: {
 20204                           ;i2c1.c: 352: SSP1CON2bits.RSEN = 1;
 20205  001C6C  8297               	bsf	3991,1,c	;volatile
 20206                           
 20207                           ;i2c1.c: 356: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 20208  001C6E  C041  F004         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
 20209  001C72  C042  F005         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
 20210  001C76  C005  F004         	movff	??_I2C1_ISR+1,??_I2C1_ISR
 20211  001C7A  6A05               	clrf	??_I2C1_ISR+1,c
 20212  001C7C  0E06               	movlw	6
 20213  001C7E  1604               	andwf	??_I2C1_ISR,f,c
 20214  001C80  0E00               	movlw	0
 20215  001C82  1605               	andwf	??_I2C1_ISR+1,f,c
 20216  001C84  0EF0               	movlw	240
 20217  001C86  1004               	iorwf	??_I2C1_ISR,w,c
 20218  001C88  6E41               	movwf	I2C1_ISR@i2c_address,c
 20219  001C8A  5005               	movf	??_I2C1_ISR+1,w,c
 20220  001C8C  6E42               	movwf	I2C1_ISR@i2c_address+1,c
 20221                           
 20222                           ;i2c1.c: 359: i2c_address |= 0x0001;
 20223  001C8E  8041               	bsf	I2C1_ISR@i2c_address,0,c
 20224                           
 20225                           ;i2c1.c: 362: i2c_10bit_address_restart = 1;
 20226  001C90  0E01               	movlw	1
 20227  001C92  6E2C               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
 20228                           
 20229                           ;i2c1.c: 365: i2c1_state = S_MASTER_SEND_ADDR;
 20230  001C94  0E02               	movlw	2
 20231  001C96  6E2F               	movwf	_i2c1_state,c
 20232                           
 20233                           ;i2c1.c: 366: }
 20234                           ;i2c1.c: 368: break;
 20235  001C98  0012               	return	
 20236  001C9A                     
 20237                           ;i2c1.c: 383: if(i2c_10bit_address_restart != 1)
 20238  001C9A  042C               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
 20239  001C9C  B4D8               	btfsc	status,2,c
 20240  001C9E  D01A               	goto	i2l1452
 20241                           
 20242                           ;i2c1.c: 384: {
 20243                           ;i2c1.c: 386: i2c_address = p_i2c1_trb_current->address;
 20244  001CA0  C026  FFD9         	movff	_p_i2c1_trb_current,fsr2l
 20245  001CA4  C027  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
 20246  001CA8  CFDE F041          	movff	postinc2,I2C1_ISR@i2c_address
 20247  001CAC  CFDD F042          	movff	postdec2,I2C1_ISR@i2c_address+1
 20248                           
 20249                           ;i2c1.c: 387: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 20250  001CB0  EE20 F003          	lfsr	2,3
 20251  001CB4  5026               	movf	_p_i2c1_trb_current,w,c
 20252  001CB6  26D9               	addwf	fsr2l,f,c
 20253  001CB8  5027               	movf	_p_i2c1_trb_current+1,w,c
 20254  001CBA  22DA               	addwfc	fsr2h,f,c
 20255  001CBC  CFDE F3D5          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
 20256  001CC0  CFDD F3D6          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
 20257                           
 20258                           ;i2c1.c: 388: i2c_bytes_left = p_i2c1_trb_current->length;
 20259  001CC4  EE20 F002          	lfsr	2,2
 20260  001CC8  5026               	movf	_p_i2c1_trb_current,w,c
 20261  001CCA  26D9               	addwf	fsr2l,f,c
 20262  001CCC  5027               	movf	_p_i2c1_trb_current+1,w,c
 20263  001CCE  22DA               	addwfc	fsr2h,f,c
 20264  001CD0  50DF               	movf	indf2,w,c
 20265  001CD2  6E2D               	movwf	I2C1_ISR@i2c_bytes_left,c
 20266  001CD4                     i2l1452:
 20267                           
 20268                           ;i2c1.c: 411: else
 20269                           ;i2c1.c: 412: {
 20270                           ;i2c1.c: 414: SSP1BUF = i2c_address;
 20271  001CD4  C041  FF92         	movff	I2C1_ISR@i2c_address,3986	;volatile
 20272                           
 20273                           ;i2c1.c: 415: if(i2c_address & 0x01)
 20274  001CD8  A041               	btfss	I2C1_ISR@i2c_address,0,c
 20275  001CDA  D003               	goto	i2l1456
 20276                           
 20277                           ;i2c1.c: 416: {
 20278                           ;i2c1.c: 418: i2c1_state = S_MASTER_ACK_ADDR;
 20279  001CDC  0E05               	movlw	5
 20280  001CDE  6E2F               	movwf	_i2c1_state,c
 20281                           
 20282                           ;i2c1.c: 419: }
 20283  001CE0  0012               	return	
 20284  001CE2                     i2l1456:
 20285                           
 20286                           ;i2c1.c: 420: else
 20287                           ;i2c1.c: 421: {
 20288                           ;i2c1.c: 423: i2c1_state = S_MASTER_SEND_DATA;
 20289  001CE2  0E03               	movlw	3
 20290  001CE4  6E2F               	movwf	_i2c1_state,c
 20291                           
 20292                           ;i2c1.c: 424: }
 20293                           ;i2c1.c: 425: }
 20294                           ;i2c1.c: 426: break;
 20295  001CE6  0012               	return	
 20296  001CE8                     i2l1458:
 20297                           
 20298                           ;i2c1.c: 431: if(SSP1CON2bits.ACKSTAT)
 20299  001CE8  AC97               	btfss	3991,6,c	;volatile
 20300  001CEA  D007               	goto	i2l1459
 20301                           
 20302                           ;i2c1.c: 432: {
 20303                           ;i2c1.c: 434: i2c1_object.i2cErrors++;
 20304  001CEC  0102               	movlb	2	; () banked
 20305  001CEE  2BE1               	incf	(_i2c1_object+6)& (0+255),f,b
 20306                           
 20307                           ; BSR set to: 2
 20308                           ;i2c1.c: 437: SSP1CON2bits.ACKSTAT = 0;
 20309  001CF0  9C97               	bcf	3991,6,c	;volatile
 20310                           
 20311                           ; BSR set to: 2
 20312                           ;i2c1.c: 440: I2C1_Stop(I2C1_DATA_NO_ACK);
 20313  001CF2  0E05               	movlw	5
 20314  001CF4  ECD6  F01C         	call	_I2C1_Stop
 20315                           
 20316                           ;i2c1.c: 442: }
 20317  001CF8  0012               	return	
 20318  001CFA                     i2l1459:
 20319                           
 20320                           ;i2c1.c: 443: else
 20321                           ;i2c1.c: 444: {
 20322                           ;i2c1.c: 446: if(i2c_bytes_left-- == 0U)
 20323  001CFA  062D               	decf	I2C1_ISR@i2c_bytes_left,f,c
 20324  001CFC  282D               	incf	I2C1_ISR@i2c_bytes_left,w,c
 20325  001CFE  A4D8               	btfss	status,2,c
 20326  001D00  D00E               	goto	i2l1461
 20327                           
 20328                           ;i2c1.c: 447: {
 20329                           ;i2c1.c: 451: p_i2c1_trb_current++;
 20330  001D02  0E05               	movlw	5
 20331  001D04  2626               	addwf	_p_i2c1_trb_current,f,c
 20332  001D06  0E00               	movlw	0
 20333  001D08  2227               	addwfc	_p_i2c1_trb_current+1,f,c
 20334                           
 20335                           ;i2c1.c: 454: if(--i2c1_trb_count == 0)
 20336  001D0A  2E2E               	decfsz	_i2c1_trb_count,f,c
 20337  001D0C  D004               	goto	i2l1462
 20338                           
 20339                           ;i2c1.c: 455: {
 20340                           ;i2c1.c: 456: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 20341  001D0E  0E00               	movlw	0
 20342  001D10  ECD6  F01C         	call	_I2C1_Stop
 20343                           
 20344                           ;i2c1.c: 457: }
 20345  001D14  0012               	return	
 20346  001D16                     i2l1462:
 20347                           
 20348                           ;i2c1.c: 458: else
 20349                           ;i2c1.c: 459: {
 20350                           ;i2c1.c: 466: SSP1CON2bits.RSEN = 1;
 20351  001D16  8297               	bsf	3991,1,c	;volatile
 20352                           
 20353                           ;i2c1.c: 469: i2c1_state = S_MASTER_SEND_ADDR;
 20354  001D18  0E02               	movlw	2
 20355  001D1A  6E2F               	movwf	_i2c1_state,c
 20356                           
 20357                           ;i2c1.c: 471: }
 20358                           ;i2c1.c: 472: }
 20359  001D1C  0012               	return	
 20360  001D1E                     i2l1461:
 20361                           
 20362                           ;i2c1.c: 473: else
 20363                           ;i2c1.c: 474: {
 20364                           ;i2c1.c: 476: SSP1BUF = *pi2c_buf_ptr++;
 20365  001D1E  C3D5  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 20366  001D22  C3D6  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 20367  001D26  50DF               	movf	indf2,w,c
 20368  001D28  6E92               	movwf	3986,c	;volatile
 20369  001D2A  0103               	movlb	3	; () banked
 20370  001D2C  4BD5               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 20371  001D2E  2BD6               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 20372                           
 20373                           ; BSR set to: 3
 20374                           ;i2c1.c: 477: }
 20375                           ;i2c1.c: 478: }
 20376                           ;i2c1.c: 479: break;
 20377                           
 20378                           ; BSR set to: 3
 20379  001D30  0012               	return	
 20380  001D32                     i2l1465:
 20381                           
 20382                           ;i2c1.c: 484: if(SSP1CON2bits.ACKSTAT)
 20383  001D32  AC97               	btfss	3991,6,c	;volatile
 20384  001D34  D007               	goto	i2l1466
 20385                           
 20386                           ;i2c1.c: 485: {
 20387                           ;i2c1.c: 488: i2c1_object.i2cErrors++;
 20388  001D36  0102               	movlb	2	; () banked
 20389  001D38  2BE1               	incf	(_i2c1_object+6)& (0+255),f,b
 20390                           
 20391                           ; BSR set to: 2
 20392                           ;i2c1.c: 491: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 20393  001D3A  0E04               	movlw	4
 20394  001D3C  ECD6  F01C         	call	_I2C1_Stop
 20395                           
 20396                           ;i2c1.c: 494: SSP1CON2bits.ACKSTAT = 0;
 20397  001D40  9C97               	bcf	3991,6,c	;volatile
 20398                           
 20399                           ;i2c1.c: 495: }
 20400  001D42  0012               	return	
 20401  001D44                     i2l1466:
 20402                           
 20403                           ;i2c1.c: 496: else
 20404                           ;i2c1.c: 497: {
 20405                           ;i2c1.c: 498: SSP1CON2bits.RCEN = 1;
 20406  001D44  8697               	bsf	3991,3,c	;volatile
 20407                           
 20408                           ;i2c1.c: 499: i2c1_state = S_MASTER_ACK_RCV_DATA;
 20409  001D46  0E08               	movlw	8
 20410  001D48  6E2F               	movwf	_i2c1_state,c
 20411                           
 20412                           ;i2c1.c: 500: }
 20413                           ;i2c1.c: 501: break;
 20414  001D4A  0012               	return	
 20415  001D4C                     
 20416                           ;i2c1.c: 508: i2c1_state = S_MASTER_ACK_RCV_DATA;
 20417  001D4C  0E08               	movlw	8
 20418  001D4E  6E2F               	movwf	_i2c1_state,c
 20419                           
 20420                           ;i2c1.c: 511: SSP1CON2bits.RCEN = 1;
 20421  001D50  8697               	bsf	3991,3,c	;volatile
 20422                           
 20423                           ;i2c1.c: 513: break;
 20424  001D52  0012               	return	
 20425  001D54                     
 20426                           ;i2c1.c: 518: *pi2c_buf_ptr++ = SSP1BUF;
 20427  001D54  C3D5  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 20428  001D58  C3D6  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 20429  001D5C  CF92 FFDF          	movff	3986,indf2	;volatile
 20430  001D60  0103               	movlb	3	; () banked
 20431  001D62  4BD5               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 20432  001D64  2BD6               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 20433                           
 20434                           ; BSR set to: 3
 20435                           ;i2c1.c: 521: if(--i2c_bytes_left)
 20436  001D66  0E01               	movlw	1
 20437  001D68  5E2D               	subwf	I2C1_ISR@i2c_bytes_left,f,c
 20438  001D6A  B4D8               	btfsc	status,2,c
 20439  001D6C  D004               	goto	i2l1470
 20440                           
 20441                           ; BSR set to: 3
 20442                           ;i2c1.c: 522: {
 20443                           ;i2c1.c: 528: SSP1CON2bits.ACKDT = 0;
 20444  001D6E  9A97               	bcf	3991,5,c	;volatile
 20445                           
 20446                           ; BSR set to: 3
 20447                           ;i2c1.c: 531: i2c1_state = S_MASTER_RCV_DATA;
 20448  001D70  0E06               	movlw	6
 20449  001D72  6E2F               	movwf	_i2c1_state,c
 20450                           
 20451                           ;i2c1.c: 532: }
 20452  001D74  D003               	goto	i2l1471
 20453  001D76                     i2l1470:
 20454                           
 20455                           ; BSR set to: 3
 20456                           ;i2c1.c: 533: else
 20457                           ;i2c1.c: 534: {
 20458                           ;i2c1.c: 538: SSP1CON2bits.ACKDT = 1;
 20459  001D76  8A97               	bsf	3991,5,c	;volatile
 20460                           
 20461                           ; BSR set to: 3
 20462                           ;i2c1.c: 540: I2C1_FunctionComplete();
 20463  001D78  ECB8  F01F         	call	_I2C1_FunctionComplete	;wreg free
 20464  001D7C                     i2l1471:
 20465                           
 20466                           ;i2c1.c: 541: }
 20467                           ;i2c1.c: 544: SSP1CON2bits.ACKEN = 1;
 20468  001D7C  8897               	bsf	3991,4,c	;volatile
 20469                           
 20470                           ;i2c1.c: 545: break;
 20471  001D7E  0012               	return	
 20472  001D80                     
 20473                           ;i2c1.c: 548: case S_MASTER_SEND_STOP:
 20474                           ;i2c1.c: 551: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 20475  001D80  0E00               	movlw	0
 20476  001D82  ECD6  F01C         	call	_I2C1_Stop
 20477                           
 20478                           ;i2c1.c: 552: break;
 20479  001D86  0012               	return	
 20480  001D88                     
 20481                           ;i2c1.c: 558: i2c1_object.i2cErrors++;
 20482  001D88  0102               	movlb	2	; () banked
 20483  001D8A  2BE1               	incf	(_i2c1_object+6)& (0+255),f,b
 20484                           
 20485                           ; BSR set to: 2
 20486                           ;i2c1.c: 559: I2C1_Stop(I2C1_LOST_STATE);
 20487  001D8C  0E06               	movlw	6
 20488  001D8E  ECD6  F01C         	call	_I2C1_Stop
 20489                           
 20490                           ;i2c1.c: 562: }
 20491                           
 20492                           ;i2c1.c: 560: break;
 20493  001D92  0012               	return	
 20494  001D94                     i2l1435:
 20495  001D94  502F               	movf	_i2c1_state,w,c
 20496                           
 20497                           ; Switch size 1, requested type "space"
 20498                           ; Number of cases is 11, Range of values is 0 to 11
 20499                           ; switch strategies available:
 20500                           ; Name         Instructions Cycles
 20501                           ; simple_byte           34    18 (average)
 20502                           ;	Chosen strategy is simple_byte
 20503  001D96  0A00               	xorlw	0	; case 0
 20504  001D98  B4D8               	btfsc	status,2,c
 20505  001D9A  D713               	goto	i2l1436
 20506  001D9C  0A01               	xorlw	1	; case 1
 20507  001D9E  B4D8               	btfsc	status,2,c
 20508  001DA0  D742               	goto	i2l1441
 20509  001DA2  0A03               	xorlw	3	; case 2
 20510  001DA4  B4D8               	btfsc	status,2,c
 20511  001DA6  D779               	goto	i2l1450
 20512  001DA8  0A01               	xorlw	1	; case 3
 20513  001DAA  B4D8               	btfsc	status,2,c
 20514  001DAC  D79D               	goto	i2l1458
 20515  001DAE  0A07               	xorlw	7	; case 4
 20516  001DB0  B4D8               	btfsc	status,2,c
 20517  001DB2  D7E6               	goto	i2l1472
 20518  001DB4  0A01               	xorlw	1	; case 5
 20519  001DB6  B4D8               	btfsc	status,2,c
 20520  001DB8  D7BC               	goto	i2l1465
 20521  001DBA  0A03               	xorlw	3	; case 6
 20522  001DBC  B4D8               	btfsc	status,2,c
 20523  001DBE  D7C6               	goto	i2l1468
 20524  001DC0  0A01               	xorlw	1	; case 7
 20525  001DC2  B4D8               	btfsc	status,2,c
 20526  001DC4  D7DD               	goto	i2l1472
 20527  001DC6  0A0F               	xorlw	15	; case 8
 20528  001DC8  B4D8               	btfsc	status,2,c
 20529  001DCA  D7C4               	goto	i2l1469
 20530  001DCC  0A02               	xorlw	2	; case 10
 20531  001DCE  B4D8               	btfsc	status,2,c
 20532  001DD0  D72E               	goto	i2l1442
 20533  001DD2  0A01               	xorlw	1	; case 11
 20534  001DD4  B4D8               	btfsc	status,2,c
 20535  001DD6  D742               	goto	i2l1447
 20536  001DD8  D7D7               	goto	i2l1474
 20537  001DDA                     __end_of_I2C1_ISR:
 20538                           	opt stack 0
 20539                           tosu	equ	0xFFF
 20540                           tosh	equ	0xFFE
 20541                           tosl	equ	0xFFD
 20542                           pclatu	equ	0xFFB
 20543                           pclath	equ	0xFFA
 20544                           tblptru	equ	0xFF8
 20545                           tblptrh	equ	0xFF7
 20546                           tblptrl	equ	0xFF6
 20547                           tablat	equ	0xFF5
 20548                           prodh	equ	0xFF4
 20549                           prodl	equ	0xFF3
 20550                           intcon	equ	0xFF2
 20551                           postinc0	equ	0xFEE
 20552                           fsr0h	equ	0xFEA
 20553                           fsr0l	equ	0xFE9
 20554                           wreg	equ	0xFE8
 20555                           indf1	equ	0xFE7
 20556                           postinc1	equ	0xFE6
 20557                           postdec1	equ	0xFE5
 20558                           plusw1	equ	0xFE3
 20559                           fsr1h	equ	0xFE2
 20560                           fsr1l	equ	0xFE1
 20561                           indf2	equ	0xFDF
 20562                           postinc2	equ	0xFDE
 20563                           postdec2	equ	0xFDD
 20564                           plusw2	equ	0xFDB
 20565                           fsr2h	equ	0xFDA
 20566                           fsr2l	equ	0xFD9
 20567                           status	equ	0xFD8
 20568                           
 20569 ;; *************** function _I2C1_Stop *****************
 20570 ;; Defined at:
 20571 ;;		line 583 in file "mcc_generated_files/i2c1.c"
 20572 ;; Parameters:    Size  Location     Type
 20573 ;;  completion_c    1    wreg     enum E11632
 20574 ;; Auto vars:     Size  Location     Type
 20575 ;;  completion_c    1    2[COMRAM] enum E11632
 20576 ;; Return value:  Size  Location     Type
 20577 ;;                  1    wreg      void 
 20578 ;; Registers used:
 20579 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20580 ;; Tracked objects:
 20581 ;;		On entry : 0/0
 20582 ;;		On exit  : 0/0
 20583 ;;		Unchanged: 0/0
 20584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20587 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20588 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20589 ;;Total ram usage:        3 bytes
 20590 ;; Hardware stack levels used:    1
 20591 ;; This function calls:
 20592 ;;		Nothing
 20593 ;; This function is called by:
 20594 ;;		_I2C1_ISR
 20595 ;; This function uses a non-reentrant model
 20596 ;;
 20597                           
 20598                           	psect	text97
 20599  0039AC                     __ptext97:
 20600                           	opt stack 0
 20601  0039AC                     _I2C1_Stop:
 20602                           	opt stack 21
 20603                           
 20604                           ;incstack = 0
 20605                           ;I2C1_Stop@completion_code stored from wreg
 20606  0039AC  6E03               	movwf	I2C1_Stop@completion_code,c
 20607                           
 20608                           ;i2c1.c: 586: SSP1CON2bits.PEN = 1;
 20609  0039AE  8497               	bsf	3991,2,c	;volatile
 20610                           
 20611                           ;i2c1.c: 589: if (p_i2c1_current->pTrFlag != (0))
 20612  0039B0  EE20 F003          	lfsr	2,3
 20613  0039B4  5024               	movf	_p_i2c1_current,w,c
 20614  0039B6  26D9               	addwf	fsr2l,f,c
 20615  0039B8  5025               	movf	_p_i2c1_current+1,w,c
 20616  0039BA  22DA               	addwfc	fsr2h,f,c
 20617  0039BC  50DE               	movf	postinc2,w,c
 20618  0039BE  10DE               	iorwf	postinc2,w,c
 20619  0039C0  B4D8               	btfsc	status,2,c
 20620  0039C2  D010               	goto	i2l1482
 20621                           
 20622                           ;i2c1.c: 590: {
 20623                           ;i2c1.c: 592: *(p_i2c1_current->pTrFlag) = completion_code;
 20624  0039C4  EE20 F003          	lfsr	2,3
 20625  0039C8  5024               	movf	_p_i2c1_current,w,c
 20626  0039CA  26D9               	addwf	fsr2l,f,c
 20627  0039CC  5025               	movf	_p_i2c1_current+1,w,c
 20628  0039CE  22DA               	addwfc	fsr2h,f,c
 20629  0039D0  CFDE F001          	movff	postinc2,??_I2C1_Stop
 20630  0039D4  CFDD F002          	movff	postdec2,??_I2C1_Stop+1
 20631  0039D8  C001  FFD9         	movff	??_I2C1_Stop,fsr2l
 20632  0039DC  C002  FFDA         	movff	??_I2C1_Stop+1,fsr2h
 20633  0039E0  C003  FFDF         	movff	I2C1_Stop@completion_code,indf2
 20634  0039E4                     i2l1482:
 20635                           
 20636                           ;i2c1.c: 593: }
 20637                           ;i2c1.c: 596: i2c1_state = S_MASTER_IDLE;
 20638  0039E4  0E00               	movlw	0
 20639  0039E6  6E2F               	movwf	_i2c1_state,c
 20640  0039E8  0012               	return		;funcret
 20641  0039EA                     __end_of_I2C1_Stop:
 20642                           	opt stack 0
 20643                           tosu	equ	0xFFF
 20644                           tosh	equ	0xFFE
 20645                           tosl	equ	0xFFD
 20646                           pclatu	equ	0xFFB
 20647                           pclath	equ	0xFFA
 20648                           tblptru	equ	0xFF8
 20649                           tblptrh	equ	0xFF7
 20650                           tblptrl	equ	0xFF6
 20651                           tablat	equ	0xFF5
 20652                           prodh	equ	0xFF4
 20653                           prodl	equ	0xFF3
 20654                           intcon	equ	0xFF2
 20655                           postinc0	equ	0xFEE
 20656                           fsr0h	equ	0xFEA
 20657                           fsr0l	equ	0xFE9
 20658                           wreg	equ	0xFE8
 20659                           indf1	equ	0xFE7
 20660                           postinc1	equ	0xFE6
 20661                           postdec1	equ	0xFE5
 20662                           plusw1	equ	0xFE3
 20663                           fsr1h	equ	0xFE2
 20664                           fsr1l	equ	0xFE1
 20665                           indf2	equ	0xFDF
 20666                           postinc2	equ	0xFDE
 20667                           postdec2	equ	0xFDD
 20668                           plusw2	equ	0xFDB
 20669                           fsr2h	equ	0xFDA
 20670                           fsr2l	equ	0xFD9
 20671                           status	equ	0xFD8
 20672                           
 20673 ;; *************** function _I2C1_FunctionComplete *****************
 20674 ;; Defined at:
 20675 ;;		line 565 in file "mcc_generated_files/i2c1.c"
 20676 ;; Parameters:    Size  Location     Type
 20677 ;;		None
 20678 ;; Auto vars:     Size  Location     Type
 20679 ;;		None
 20680 ;; Return value:  Size  Location     Type
 20681 ;;                  1    wreg      void 
 20682 ;; Registers used:
 20683 ;;		wreg, status,2, status,0
 20684 ;; Tracked objects:
 20685 ;;		On entry : 0/0
 20686 ;;		On exit  : 0/0
 20687 ;;		Unchanged: 0/0
 20688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20693 ;;Total ram usage:        0 bytes
 20694 ;; Hardware stack levels used:    1
 20695 ;; This function calls:
 20696 ;;		Nothing
 20697 ;; This function is called by:
 20698 ;;		_I2C1_ISR
 20699 ;; This function uses a non-reentrant model
 20700 ;;
 20701                           
 20702                           	psect	text98
 20703  003F70                     __ptext98:
 20704                           	opt stack 0
 20705  003F70                     _I2C1_FunctionComplete:
 20706                           	opt stack 21
 20707                           
 20708                           ;i2c1.c: 569: p_i2c1_trb_current++;
 20709                           
 20710                           ;incstack = 0
 20711  003F70  0E05               	movlw	5
 20712  003F72  2626               	addwf	_p_i2c1_trb_current,f,c
 20713  003F74  0E00               	movlw	0
 20714  003F76  2227               	addwfc	_p_i2c1_trb_current+1,f,c
 20715                           
 20716                           ;i2c1.c: 572: if(--i2c1_trb_count == 0)
 20717  003F78  2E2E               	decfsz	_i2c1_trb_count,f,c
 20718  003F7A  D003               	goto	i2l1477
 20719                           
 20720                           ;i2c1.c: 573: {
 20721                           ;i2c1.c: 574: i2c1_state = S_MASTER_SEND_STOP;
 20722  003F7C  0E04               	movlw	4
 20723  003F7E  6E2F               	movwf	_i2c1_state,c
 20724                           
 20725                           ;i2c1.c: 575: }
 20726  003F80  0012               	return	
 20727  003F82                     i2l1477:
 20728                           
 20729                           ;i2c1.c: 576: else
 20730                           ;i2c1.c: 577: {
 20731                           ;i2c1.c: 578: i2c1_state = S_MASTER_RESTART;
 20732  003F82  0E01               	movlw	1
 20733  003F84  6E2F               	movwf	_i2c1_state,c
 20734  003F86  0012               	return	
 20735  003F88                     __end_of_I2C1_FunctionComplete:
 20736                           	opt stack 0
 20737                           tosu	equ	0xFFF
 20738                           tosh	equ	0xFFE
 20739                           tosl	equ	0xFFD
 20740                           pclatu	equ	0xFFB
 20741                           pclath	equ	0xFFA
 20742                           tblptru	equ	0xFF8
 20743                           tblptrh	equ	0xFF7
 20744                           tblptrl	equ	0xFF6
 20745                           tablat	equ	0xFF5
 20746                           prodh	equ	0xFF4
 20747                           prodl	equ	0xFF3
 20748                           intcon	equ	0xFF2
 20749                           postinc0	equ	0xFEE
 20750                           fsr0h	equ	0xFEA
 20751                           fsr0l	equ	0xFE9
 20752                           wreg	equ	0xFE8
 20753                           indf1	equ	0xFE7
 20754                           postinc1	equ	0xFE6
 20755                           postdec1	equ	0xFE5
 20756                           plusw1	equ	0xFE3
 20757                           fsr1h	equ	0xFE2
 20758                           fsr1l	equ	0xFE1
 20759                           indf2	equ	0xFDF
 20760                           postinc2	equ	0xFDE
 20761                           postdec2	equ	0xFDD
 20762                           plusw2	equ	0xFDB
 20763                           fsr2h	equ	0xFDA
 20764                           fsr2l	equ	0xFD9
 20765                           status	equ	0xFD8
 20766                           
 20767 ;; *************** function _I2C1_BusCollisionISR *****************
 20768 ;; Defined at:
 20769 ;;		line 729 in file "mcc_generated_files/i2c1.c"
 20770 ;; Parameters:    Size  Location     Type
 20771 ;;		None
 20772 ;; Auto vars:     Size  Location     Type
 20773 ;;		None
 20774 ;; Return value:  Size  Location     Type
 20775 ;;                  1    wreg      void 
 20776 ;; Registers used:
 20777 ;;		None
 20778 ;; Tracked objects:
 20779 ;;		On entry : 0/0
 20780 ;;		On exit  : 0/0
 20781 ;;		Unchanged: 0/0
 20782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20787 ;;Total ram usage:        0 bytes
 20788 ;; Hardware stack levels used:    1
 20789 ;; This function calls:
 20790 ;;		Nothing
 20791 ;; This function is called by:
 20792 ;;		_INTERRUPT_InterruptManager
 20793 ;; This function uses a non-reentrant model
 20794 ;;
 20795                           
 20796                           	psect	text99
 20797  0040AC                     __ptext99:
 20798                           	opt stack 0
 20799  0040AC                     _I2C1_BusCollisionISR:
 20800                           	opt stack 22
 20801                           
 20802                           ;incstack = 0
 20803  0040AC  0012               	return		;funcret
 20804  0040AE                     __end_of_I2C1_BusCollisionISR:
 20805                           	opt stack 0
 20806                           tosu	equ	0xFFF
 20807                           tosh	equ	0xFFE
 20808                           tosl	equ	0xFFD
 20809                           pclatu	equ	0xFFB
 20810                           pclath	equ	0xFFA
 20811                           tblptru	equ	0xFF8
 20812                           tblptrh	equ	0xFF7
 20813                           tblptrl	equ	0xFF6
 20814                           tablat	equ	0xFF5
 20815                           prodh	equ	0xFF4
 20816                           prodl	equ	0xFF3
 20817                           intcon	equ	0xFF2
 20818                           postinc0	equ	0xFEE
 20819                           fsr0h	equ	0xFEA
 20820                           fsr0l	equ	0xFE9
 20821                           wreg	equ	0xFE8
 20822                           indf1	equ	0xFE7
 20823                           postinc1	equ	0xFE6
 20824                           postdec1	equ	0xFE5
 20825                           plusw1	equ	0xFE3
 20826                           fsr1h	equ	0xFE2
 20827                           fsr1l	equ	0xFE1
 20828                           indf2	equ	0xFDF
 20829                           postinc2	equ	0xFDE
 20830                           postdec2	equ	0xFDD
 20831                           plusw2	equ	0xFDB
 20832                           fsr2h	equ	0xFDA
 20833                           fsr2l	equ	0xFD9
 20834                           status	equ	0xFD8
 20835                           
 20836 ;; *************** function _EUSART1_Transmit_ISR *****************
 20837 ;; Defined at:
 20838 ;;		line 170 in file "mcc_generated_files/eusart1.c"
 20839 ;; Parameters:    Size  Location     Type
 20840 ;;		None
 20841 ;; Auto vars:     Size  Location     Type
 20842 ;;		None
 20843 ;; Return value:  Size  Location     Type
 20844 ;;                  1    wreg      void 
 20845 ;; Registers used:
 20846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20847 ;; Tracked objects:
 20848 ;;		On entry : 0/0
 20849 ;;		On exit  : 0/0
 20850 ;;		Unchanged: 0/0
 20851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20856 ;;Total ram usage:        0 bytes
 20857 ;; Hardware stack levels used:    1
 20858 ;; This function calls:
 20859 ;;		Nothing
 20860 ;; This function is called by:
 20861 ;;		_INTERRUPT_InterruptManager
 20862 ;; This function uses a non-reentrant model
 20863 ;;
 20864                           
 20865                           	psect	text100
 20866  003C6C                     __ptext100:
 20867                           	opt stack 0
 20868  003C6C                     _EUSART1_Transmit_ISR:
 20869                           	opt stack 22
 20870                           
 20871                           ;eusart1.c: 174: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 20872                           
 20873                           ;incstack = 0
 20874  003C6C  0E40               	movlw	64
 20875  003C6E  0103               	movlb	3	; () banked
 20876  003C70  61FE               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 20877  003C72  D012               	goto	i2l1743
 20878                           
 20879                           ; BSR set to: 3
 20880                           ;eusart1.c: 175: {
 20881                           ;eusart1.c: 176: TX1REG = eusart1TxBuffer[eusart1TxTail++];
 20882  003C74  502A               	movf	_eusart1TxTail,w,c
 20883  003C76  0D01               	mullw	1
 20884  003C78  0E00               	movlw	low _eusart1TxBuffer
 20885  003C7A  24F3               	addwf	prodl,w,c
 20886  003C7C  6ED9               	movwf	fsr2l,c
 20887  003C7E  0E0B               	movlw	high _eusart1TxBuffer
 20888  003C80  20F4               	addwfc	prodh,w,c
 20889  003C82  6EDA               	movwf	fsr2h,c
 20890  003C84  50DF               	movf	indf2,w,c
 20891  003C86  6E9A               	movwf	3994,c	;volatile
 20892                           
 20893                           ; BSR set to: 3
 20894  003C88  2A2A               	incf	_eusart1TxTail,f,c
 20895                           
 20896                           ; BSR set to: 3
 20897                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 20898  003C8A  0E3F               	movlw	63
 20899  003C8C  642A               	cpfsgt	_eusart1TxTail,c
 20900  003C8E  D002               	goto	i2l1744
 20901                           
 20902                           ; BSR set to: 3
 20903                           ;eusart1.c: 178: {
 20904                           ;eusart1.c: 179: eusart1TxTail = 0;
 20905  003C90  0E00               	movlw	0
 20906  003C92  6E2A               	movwf	_eusart1TxTail,c
 20907  003C94                     i2l1744:
 20908                           
 20909                           ; BSR set to: 3
 20910                           ;eusart1.c: 180: }
 20911                           ;eusart1.c: 181: eusart1TxBufferRemaining++;
 20912                           
 20913                           ; BSR set to: 3
 20914  003C94  2BFE               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 20915                           
 20916                           ;eusart1.c: 182: }
 20917  003C96  0012               	return	
 20918  003C98                     i2l1743:
 20919                           
 20920                           ; BSR set to: 3
 20921                           ;eusart1.c: 183: else
 20922                           ;eusart1.c: 184: {
 20923                           ;eusart1.c: 185: PIE3bits.TX1IE = 0;
 20924  003C98  010E               	movlb	14	; () banked
 20925  003C9A  99C5               	bcf	197,4,b	;volatile
 20926  003C9C  0012               	return	
 20927  003C9E                     __end_of_EUSART1_Transmit_ISR:
 20928                           	opt stack 0
 20929                           tosu	equ	0xFFF
 20930                           tosh	equ	0xFFE
 20931                           tosl	equ	0xFFD
 20932                           pclatu	equ	0xFFB
 20933                           pclath	equ	0xFFA
 20934                           tblptru	equ	0xFF8
 20935                           tblptrh	equ	0xFF7
 20936                           tblptrl	equ	0xFF6
 20937                           tablat	equ	0xFF5
 20938                           prodh	equ	0xFF4
 20939                           prodl	equ	0xFF3
 20940                           intcon	equ	0xFF2
 20941                           postinc0	equ	0xFEE
 20942                           fsr0h	equ	0xFEA
 20943                           fsr0l	equ	0xFE9
 20944                           wreg	equ	0xFE8
 20945                           indf1	equ	0xFE7
 20946                           postinc1	equ	0xFE6
 20947                           postdec1	equ	0xFE5
 20948                           plusw1	equ	0xFE3
 20949                           fsr1h	equ	0xFE2
 20950                           fsr1l	equ	0xFE1
 20951                           indf2	equ	0xFDF
 20952                           postinc2	equ	0xFDE
 20953                           postdec2	equ	0xFDD
 20954                           plusw2	equ	0xFDB
 20955                           fsr2h	equ	0xFDA
 20956                           fsr2l	equ	0xFD9
 20957                           status	equ	0xFD8
 20958                           
 20959 ;; *************** function _EUSART1_Receive_ISR *****************
 20960 ;; Defined at:
 20961 ;;		line 190 in file "mcc_generated_files/eusart1.c"
 20962 ;; Parameters:    Size  Location     Type
 20963 ;;		None
 20964 ;; Auto vars:     Size  Location     Type
 20965 ;;		None
 20966 ;; Return value:  Size  Location     Type
 20967 ;;                  1    wreg      void 
 20968 ;; Registers used:
 20969 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20970 ;; Tracked objects:
 20971 ;;		On entry : 0/0
 20972 ;;		On exit  : 0/0
 20973 ;;		Unchanged: 0/0
 20974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20979 ;;Total ram usage:        0 bytes
 20980 ;; Hardware stack levels used:    1
 20981 ;; Hardware stack levels required when called:    5
 20982 ;; This function calls:
 20983 ;;		_hxISRHandle
 20984 ;; This function is called by:
 20985 ;;		_INTERRUPT_InterruptManager
 20986 ;; This function uses a non-reentrant model
 20987 ;;
 20988                           
 20989                           	psect	text101
 20990  004016                     __ptext101:
 20991                           	opt stack 0
 20992  004016                     _EUSART1_Receive_ISR:
 20993                           	opt stack 17
 20994                           
 20995                           ;eusart1.c: 193: if(1 == RC1STAbits.OERR)
 20996                           
 20997                           ;incstack = 0
 20998  004016  A29D               	btfss	3997,1,c	;volatile
 20999  004018  D002               	goto	i2l1749
 21000                           
 21001                           ;eusart1.c: 194: {
 21002                           ;eusart1.c: 197: RC1STAbits.CREN = 0;
 21003  00401A  989D               	bcf	3997,4,c	;volatile
 21004                           
 21005                           ;eusart1.c: 198: RC1STAbits.CREN = 1;
 21006  00401C  889D               	bsf	3997,4,c	;volatile
 21007  00401E                     i2l1749:
 21008                           
 21009                           ;eusart1.c: 199: }
 21010                           ;eusart1.c: 201: hxISRHandle(RC1REG);
 21011  00401E  5099               	movf	3993,w,c	;volatile
 21012  004020  EC2B  F015         	call	_hxISRHandle
 21013  004024  0012               	return		;funcret
 21014  004026                     __end_of_EUSART1_Receive_ISR:
 21015                           	opt stack 0
 21016                           tosu	equ	0xFFF
 21017                           tosh	equ	0xFFE
 21018                           tosl	equ	0xFFD
 21019                           pclatu	equ	0xFFB
 21020                           pclath	equ	0xFFA
 21021                           tblptru	equ	0xFF8
 21022                           tblptrh	equ	0xFF7
 21023                           tblptrl	equ	0xFF6
 21024                           tablat	equ	0xFF5
 21025                           prodh	equ	0xFF4
 21026                           prodl	equ	0xFF3
 21027                           intcon	equ	0xFF2
 21028                           postinc0	equ	0xFEE
 21029                           fsr0h	equ	0xFEA
 21030                           fsr0l	equ	0xFE9
 21031                           wreg	equ	0xFE8
 21032                           indf1	equ	0xFE7
 21033                           postinc1	equ	0xFE6
 21034                           postdec1	equ	0xFE5
 21035                           plusw1	equ	0xFE3
 21036                           fsr1h	equ	0xFE2
 21037                           fsr1l	equ	0xFE1
 21038                           indf2	equ	0xFDF
 21039                           postinc2	equ	0xFDE
 21040                           postdec2	equ	0xFDD
 21041                           plusw2	equ	0xFDB
 21042                           fsr2h	equ	0xFDA
 21043                           fsr2l	equ	0xFD9
 21044                           status	equ	0xFD8
 21045                           
 21046 ;; *************** function _hxISRHandle *****************
 21047 ;; Defined at:
 21048 ;;		line 28 in file "HX_CommInterface.c"
 21049 ;; Parameters:    Size  Location     Type
 21050 ;;  data            1    wreg     unsigned char 
 21051 ;; Auto vars:     Size  Location     Type
 21052 ;;  data            1   16[COMRAM] unsigned char 
 21053 ;; Return value:  Size  Location     Type
 21054 ;;                  1    wreg      void 
 21055 ;; Registers used:
 21056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21057 ;; Tracked objects:
 21058 ;;		On entry : 0/0
 21059 ;;		On exit  : 0/0
 21060 ;;		Unchanged: 0/0
 21061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21063 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21064 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21065 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21066 ;;Total ram usage:        8 bytes
 21067 ;; Hardware stack levels used:    1
 21068 ;; Hardware stack levels required when called:    4
 21069 ;; This function calls:
 21070 ;;		_hxCmdFilter
 21071 ;;		_hxStartTimer
 21072 ;;		i2_hxFlushInputBuffer
 21073 ;;		i2_hxStopTimer
 21074 ;; This function is called by:
 21075 ;;		_EUSART1_Receive_ISR
 21076 ;; This function uses a non-reentrant model
 21077 ;;
 21078                           
 21079                           	psect	text102
 21080  002A56                     __ptext102:
 21081                           	opt stack 0
 21082  002A56                     _hxISRHandle:
 21083                           	opt stack 17
 21084                           
 21085                           ;incstack = 0
 21086                           ;hxISRHandle@data stored from wreg
 21087  002A56  6E11               	movwf	hxISRHandle@data,c
 21088                           
 21089                           ;HX_CommInterface.c: 30: static uint8_t currentByteCounter = 0;
 21090                           ;HX_CommInterface.c: 31: static uint8_t rxPktSizeFlag = 0;
 21091                           ;HX_CommInterface.c: 32: static uint8_t rxHxCmdFlag = 0;
 21092                           ;HX_CommInterface.c: 33: static uint8_t pktSize = 0;
 21093                           ;HX_CommInterface.c: 34: static uint8_t rxHxPktFlag = 0;
 21094                           ;HX_CommInterface.c: 36: hxStartTimer(0xF63C);
 21095  002A58  0EF6               	movlw	246
 21096  002A5A  6E04               	movwf	hxStartTimer@timerVal+1,c
 21097  002A5C  0E3C               	movlw	60
 21098  002A5E  6E03               	movwf	hxStartTimer@timerVal,c
 21099  002A60  EC02  F020         	call	_hxStartTimer	;wreg free
 21100                           
 21101                           ;HX_CommInterface.c: 38: if (0 == rxHxCmdFlag)
 21102  002A64  5033               	movf	hxISRHandle@rxHxCmdFlag,w,c
 21103  002A66  A4D8               	btfss	status,2,c
 21104  002A68  D010               	goto	i2l140
 21105                           
 21106                           ;HX_CommInterface.c: 39: {
 21107                           ;HX_CommInterface.c: 40: hx_pcCmd = data;
 21108  002A6A  C011  F03C         	movff	hxISRHandle@data,_hx_pcCmd
 21109                           
 21110                           ;HX_CommInterface.c: 41: if (hx_pcCmd == 0x00)
 21111  002A6E  503C               	movf	_hx_pcCmd,w,c
 21112  002A70  A4D8               	btfss	status,2,c
 21113  002A72  D004               	goto	i2l141
 21114                           
 21115                           ;HX_CommInterface.c: 42: {
 21116                           ;HX_CommInterface.c: 43: hxFlushInputBuffer();
 21117  002A74  EC7B  F01F         	call	i2_hxFlushInputBuffer	;wreg free
 21118                           
 21119                           ;HX_CommInterface.c: 44: rxHxPktFlag = 0;
 21120  002A78  0E00               	movlw	0
 21121  002A7A  D001               	goto	L30
 21122  002A7C                     i2l141:
 21123                           
 21124                           ;HX_CommInterface.c: 46: else
 21125                           ;HX_CommInterface.c: 47: {
 21126                           ;HX_CommInterface.c: 48: rxHxPktFlag = 1;
 21127  002A7C  0E01               	movlw	1
 21128  002A7E                     L30:
 21129  002A7E  6E31               	movwf	hxISRHandle@rxHxPktFlag,c
 21130                           
 21131                           ;HX_CommInterface.c: 49: }
 21132                           ;HX_CommInterface.c: 50: hx_checksum = data;
 21133  002A80  C011  F03D         	movff	hxISRHandle@data,_hx_checksum
 21134                           
 21135                           ;HX_CommInterface.c: 51: rxHxCmdFlag = 1;
 21136  002A84  0E01               	movlw	1
 21137  002A86  6E33               	movwf	hxISRHandle@rxHxCmdFlag,c
 21138                           
 21139                           ;HX_CommInterface.c: 52: }
 21140  002A88  0012               	return	
 21141  002A8A                     i2l140:
 21142                           
 21143                           ;HX_CommInterface.c: 53: else if (0 == rxPktSizeFlag)
 21144  002A8A  5034               	movf	hxISRHandle@rxPktSizeFlag,w,c
 21145  002A8C  A4D8               	btfss	status,2,c
 21146  002A8E  D007               	goto	i2l144
 21147                           
 21148                           ;HX_CommInterface.c: 54: {
 21149                           ;HX_CommInterface.c: 55: pktSize = data;
 21150  002A90  C011  F032         	movff	hxISRHandle@data,hxISRHandle@pktSize
 21151                           
 21152                           ;HX_CommInterface.c: 56: hx_checksum += data;
 21153  002A94  5011               	movf	hxISRHandle@data,w,c
 21154  002A96  263D               	addwf	_hx_checksum,f,c
 21155                           
 21156                           ;HX_CommInterface.c: 57: rxPktSizeFlag = 1;
 21157  002A98  0E01               	movlw	1
 21158  002A9A  6E34               	movwf	hxISRHandle@rxPktSizeFlag,c
 21159                           
 21160                           ;HX_CommInterface.c: 58: }
 21161  002A9C  0012               	return	
 21162  002A9E                     i2l144:
 21163                           
 21164                           ;HX_CommInterface.c: 59: else if (currentByteCounter >= pktSize - 1)
 21165  002A9E  0EFF               	movlw	255
 21166  002AA0  6E0A               	movwf	??_hxISRHandle& (0+255),c
 21167  002AA2  0EFF               	movlw	255
 21168  002AA4  6E0B               	movwf	(??_hxISRHandle+1)& (0+255),c
 21169  002AA6  5032               	movf	hxISRHandle@pktSize,w,c
 21170  002AA8  6E0C               	movwf	(??_hxISRHandle+2)& (0+255),c
 21171  002AAA  6A0D               	clrf	(??_hxISRHandle+3)& (0+255),c
 21172  002AAC  500A               	movf	??_hxISRHandle,w,c
 21173  002AAE  260C               	addwf	??_hxISRHandle+2,f,c
 21174  002AB0  500B               	movf	??_hxISRHandle+1,w,c
 21175  002AB2  220D               	addwfc	??_hxISRHandle+3,f,c
 21176  002AB4  5035               	movf	hxISRHandle@currentByteCounter,w,c
 21177  002AB6  6E0E               	movwf	(??_hxISRHandle+4)& (0+255),c
 21178  002AB8  6A0F               	clrf	(??_hxISRHandle+5)& (0+255),c
 21179  002ABA  500C               	movf	??_hxISRHandle+2,w,c
 21180  002ABC  5C0E               	subwf	??_hxISRHandle+4,w,c
 21181  002ABE  500F               	movf	??_hxISRHandle+5,w,c
 21182  002AC0  0A80               	xorlw	128
 21183  002AC2  6E10               	movwf	(??_hxISRHandle+6)& (0+255),c
 21184  002AC4  500D               	movf	??_hxISRHandle+3,w,c
 21185  002AC6  0A80               	xorlw	128
 21186  002AC8  5810               	subwfb	(??_hxISRHandle+6)& (0+255),w,c
 21187  002ACA  A0D8               	btfss	status,0,c
 21188  002ACC  D018               	goto	i2l146
 21189                           
 21190                           ;HX_CommInterface.c: 60: {
 21191                           ;HX_CommInterface.c: 62: hx_checksum += data;
 21192  002ACE  5011               	movf	hxISRHandle@data,w,c
 21193  002AD0  263D               	addwf	_hx_checksum,f,c
 21194                           
 21195                           ;HX_CommInterface.c: 63: if (hx_checksum == 0x00)
 21196  002AD2  503D               	movf	_hx_checksum,w,c
 21197  002AD4  A4D8               	btfss	status,2,c
 21198  002AD6  D002               	goto	i2l147
 21199                           
 21200                           ;HX_CommInterface.c: 64: {
 21201                           ;HX_CommInterface.c: 65: hx_pktState = 0x01;
 21202  002AD8  0E01               	movlw	1
 21203  002ADA  D001               	goto	L29
 21204  002ADC                     i2l147:
 21205                           
 21206                           ;HX_CommInterface.c: 67: else
 21207                           ;HX_CommInterface.c: 68: {
 21208                           ;HX_CommInterface.c: 69: hx_pktState = 0x20;
 21209  002ADC  0E20               	movlw	32
 21210  002ADE                     L29:
 21211  002ADE  6E3A               	movwf	_hx_pktState,c
 21212                           
 21213                           ;HX_CommInterface.c: 70: }
 21214                           ;HX_CommInterface.c: 73: rxHxCmdFlag = 0;
 21215  002AE0  0E00               	movlw	0
 21216  002AE2  6E33               	movwf	hxISRHandle@rxHxCmdFlag,c
 21217                           
 21218                           ;HX_CommInterface.c: 74: rxPktSizeFlag = 0;
 21219  002AE4  0E00               	movlw	0
 21220  002AE6  6E34               	movwf	hxISRHandle@rxPktSizeFlag,c
 21221                           
 21222                           ;HX_CommInterface.c: 75: currentByteCounter = 0;
 21223  002AE8  0E00               	movlw	0
 21224  002AEA  6E35               	movwf	hxISRHandle@currentByteCounter,c
 21225                           
 21226                           ;HX_CommInterface.c: 76: rxHxPktFlag = 0;
 21227  002AEC  0E00               	movlw	0
 21228  002AEE  6E31               	movwf	hxISRHandle@rxHxPktFlag,c
 21229                           
 21230                           ;HX_CommInterface.c: 79: hx_rxFullPktFlag = 1;
 21231  002AF0  0E01               	movlw	1
 21232  002AF2  6E39               	movwf	_hx_rxFullPktFlag,c
 21233                           
 21234                           ;HX_CommInterface.c: 82: hxStopTimer();
 21235  002AF4  ECF9  F01F         	call	i2_hxStopTimer	;wreg free
 21236                           
 21237                           ;HX_CommInterface.c: 85: hxCmdFilter();
 21238  002AF8  ECB6  F00F         	call	_hxCmdFilter	;wreg free
 21239                           
 21240                           ;HX_CommInterface.c: 87: }
 21241  002AFC  0012               	return	
 21242  002AFE                     i2l146:
 21243                           
 21244                           ;HX_CommInterface.c: 88: else
 21245                           ;HX_CommInterface.c: 89: {
 21246                           ;HX_CommInterface.c: 90: if (0 == rxHxPktFlag)
 21247  002AFE  5031               	movf	hxISRHandle@rxHxPktFlag,w,c
 21248  002B00  A4D8               	btfss	status,2,c
 21249  002B02  D005               	goto	i2l150
 21250                           
 21251                           ;HX_CommInterface.c: 91: {
 21252                           ;HX_CommInterface.c: 92: hx_pktCmd = data;
 21253  002B04  C011  F03B         	movff	hxISRHandle@data,_hx_pktCmd
 21254                           
 21255                           ;HX_CommInterface.c: 93: rxHxPktFlag = 1;
 21256  002B08  0E01               	movlw	1
 21257  002B0A  6E31               	movwf	hxISRHandle@rxHxPktFlag,c
 21258                           
 21259                           ;HX_CommInterface.c: 94: }
 21260  002B0C  D00B               	goto	i2l151
 21261  002B0E                     i2l150:
 21262                           
 21263                           ;HX_CommInterface.c: 95: else
 21264                           ;HX_CommInterface.c: 96: {
 21265                           ;HX_CommInterface.c: 97: hx_inData[hx_inDataIndex++] = data;
 21266  002B0E  503E               	movf	_hx_inDataIndex,w,c
 21267  002B10  0D01               	mullw	1
 21268  002B12  0E40               	movlw	low _hx_inData
 21269  002B14  24F3               	addwf	prodl,w,c
 21270  002B16  6ED9               	movwf	fsr2l,c
 21271  002B18  0E0B               	movlw	high _hx_inData
 21272  002B1A  20F4               	addwfc	prodh,w,c
 21273  002B1C  6EDA               	movwf	fsr2h,c
 21274  002B1E  C011  FFDF         	movff	hxISRHandle@data,indf2
 21275  002B22  2A3E               	incf	_hx_inDataIndex,f,c
 21276  002B24                     i2l151:
 21277                           
 21278                           ;HX_CommInterface.c: 98: }
 21279                           ;HX_CommInterface.c: 100: hx_checksum += data;
 21280  002B24  5011               	movf	hxISRHandle@data,w,c
 21281  002B26  263D               	addwf	_hx_checksum,f,c
 21282                           
 21283                           ;HX_CommInterface.c: 101: currentByteCounter++;
 21284  002B28  2A35               	incf	hxISRHandle@currentByteCounter,f,c
 21285  002B2A  0012               	return	
 21286  002B2C                     __end_of_hxISRHandle:
 21287                           	opt stack 0
 21288                           tosu	equ	0xFFF
 21289                           tosh	equ	0xFFE
 21290                           tosl	equ	0xFFD
 21291                           pclatu	equ	0xFFB
 21292                           pclath	equ	0xFFA
 21293                           tblptru	equ	0xFF8
 21294                           tblptrh	equ	0xFF7
 21295                           tblptrl	equ	0xFF6
 21296                           tablat	equ	0xFF5
 21297                           prodh	equ	0xFF4
 21298                           prodl	equ	0xFF3
 21299                           intcon	equ	0xFF2
 21300                           postinc0	equ	0xFEE
 21301                           fsr0h	equ	0xFEA
 21302                           fsr0l	equ	0xFE9
 21303                           wreg	equ	0xFE8
 21304                           indf1	equ	0xFE7
 21305                           postinc1	equ	0xFE6
 21306                           postdec1	equ	0xFE5
 21307                           plusw1	equ	0xFE3
 21308                           fsr1h	equ	0xFE2
 21309                           fsr1l	equ	0xFE1
 21310                           indf2	equ	0xFDF
 21311                           postinc2	equ	0xFDE
 21312                           postdec2	equ	0xFDD
 21313                           plusw2	equ	0xFDB
 21314                           fsr2h	equ	0xFDA
 21315                           fsr2l	equ	0xFD9
 21316                           status	equ	0xFD8
 21317                           
 21318 ;; *************** function i2_hxStopTimer *****************
 21319 ;; Defined at:
 21320 ;;		line 270 in file "HX_CommInterface.c"
 21321 ;; Parameters:    Size  Location     Type
 21322 ;;		None
 21323 ;; Auto vars:     Size  Location     Type
 21324 ;;		None
 21325 ;; Return value:  Size  Location     Type
 21326 ;;                  1    wreg      void 
 21327 ;; Registers used:
 21328 ;;		wreg, status,2, cstack
 21329 ;; Tracked objects:
 21330 ;;		On entry : 0/0
 21331 ;;		On exit  : 0/0
 21332 ;;		Unchanged: 0/0
 21333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21338 ;;Total ram usage:        0 bytes
 21339 ;; Hardware stack levels used:    1
 21340 ;; Hardware stack levels required when called:    1
 21341 ;; This function calls:
 21342 ;;		i2_TMR0_StopTimer
 21343 ;;		i2_TMR0_Write16bitTimer
 21344 ;; This function is called by:
 21345 ;;		_hxISRHandle
 21346 ;; This function uses a non-reentrant model
 21347 ;;
 21348                           
 21349                           	psect	text103
 21350  003FF2                     __ptext103:
 21351                           	opt stack 0
 21352  003FF2                     i2_hxStopTimer:
 21353                           	opt stack 19
 21354                           
 21355                           ;HX_CommInterface.c: 272: TMR0_StopTimer();
 21356                           
 21357                           ;incstack = 0
 21358  003FF2  EC4E  F020         	call	i2_TMR0_StopTimer	;wreg free
 21359                           
 21360                           ;HX_CommInterface.c: 273: TMR0_Write16bitTimer(0xF63C);
 21361  003FF6  0EF6               	movlw	246
 21362  003FF8  6E02               	movwf	i2TMR0_Write16bitTimer@timerVal+1,c
 21363  003FFA  0E3C               	movlw	60
 21364  003FFC  6E01               	movwf	i2TMR0_Write16bitTimer@timerVal,c
 21365  003FFE  EC20  F020         	call	i2_TMR0_Write16bitTimer	;wreg free
 21366  004002  0012               	return		;funcret
 21367  004004                     __end_ofi2_hxStopTimer:
 21368                           	opt stack 0
 21369                           tosu	equ	0xFFF
 21370                           tosh	equ	0xFFE
 21371                           tosl	equ	0xFFD
 21372                           pclatu	equ	0xFFB
 21373                           pclath	equ	0xFFA
 21374                           tblptru	equ	0xFF8
 21375                           tblptrh	equ	0xFF7
 21376                           tblptrl	equ	0xFF6
 21377                           tablat	equ	0xFF5
 21378                           prodh	equ	0xFF4
 21379                           prodl	equ	0xFF3
 21380                           intcon	equ	0xFF2
 21381                           postinc0	equ	0xFEE
 21382                           fsr0h	equ	0xFEA
 21383                           fsr0l	equ	0xFE9
 21384                           wreg	equ	0xFE8
 21385                           indf1	equ	0xFE7
 21386                           postinc1	equ	0xFE6
 21387                           postdec1	equ	0xFE5
 21388                           plusw1	equ	0xFE3
 21389                           fsr1h	equ	0xFE2
 21390                           fsr1l	equ	0xFE1
 21391                           indf2	equ	0xFDF
 21392                           postinc2	equ	0xFDE
 21393                           postdec2	equ	0xFDD
 21394                           plusw2	equ	0xFDB
 21395                           fsr2h	equ	0xFDA
 21396                           fsr2l	equ	0xFD9
 21397                           status	equ	0xFD8
 21398                           
 21399 ;; *************** function i2_TMR0_StopTimer *****************
 21400 ;; Defined at:
 21401 ;;		line 100 in file "mcc_generated_files/tmr0.c"
 21402 ;; Parameters:    Size  Location     Type
 21403 ;;		None
 21404 ;; Auto vars:     Size  Location     Type
 21405 ;;		None
 21406 ;; Return value:  Size  Location     Type
 21407 ;;                  1    wreg      void 
 21408 ;; Registers used:
 21409 ;;		None
 21410 ;; Tracked objects:
 21411 ;;		On entry : 0/0
 21412 ;;		On exit  : 0/0
 21413 ;;		Unchanged: 0/0
 21414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21419 ;;Total ram usage:        0 bytes
 21420 ;; Hardware stack levels used:    1
 21421 ;; This function calls:
 21422 ;;		Nothing
 21423 ;; This function is called by:
 21424 ;;		i2_hxStopTimer
 21425 ;; This function uses a non-reentrant model
 21426 ;;
 21427                           
 21428                           	psect	text104
 21429  00409C                     __ptext104:
 21430                           	opt stack 0
 21431  00409C                     i2_TMR0_StopTimer:
 21432                           	opt stack 19
 21433                           
 21434                           ;tmr0.c: 103: T0CON0bits.T0EN = 0;
 21435                           
 21436                           ;incstack = 0
 21437  00409C  9ED5               	bcf	4053,7,c	;volatile
 21438  00409E  0012               	return		;funcret
 21439  0040A0                     __end_ofi2_TMR0_StopTimer:
 21440                           	opt stack 0
 21441                           tosu	equ	0xFFF
 21442                           tosh	equ	0xFFE
 21443                           tosl	equ	0xFFD
 21444                           pclatu	equ	0xFFB
 21445                           pclath	equ	0xFFA
 21446                           tblptru	equ	0xFF8
 21447                           tblptrh	equ	0xFF7
 21448                           tblptrl	equ	0xFF6
 21449                           tablat	equ	0xFF5
 21450                           prodh	equ	0xFF4
 21451                           prodl	equ	0xFF3
 21452                           intcon	equ	0xFF2
 21453                           postinc0	equ	0xFEE
 21454                           fsr0h	equ	0xFEA
 21455                           fsr0l	equ	0xFE9
 21456                           wreg	equ	0xFE8
 21457                           indf1	equ	0xFE7
 21458                           postinc1	equ	0xFE6
 21459                           postdec1	equ	0xFE5
 21460                           plusw1	equ	0xFE3
 21461                           fsr1h	equ	0xFE2
 21462                           fsr1l	equ	0xFE1
 21463                           indf2	equ	0xFDF
 21464                           postinc2	equ	0xFDE
 21465                           postdec2	equ	0xFDD
 21466                           plusw2	equ	0xFDB
 21467                           fsr2h	equ	0xFDA
 21468                           fsr2l	equ	0xFD9
 21469                           status	equ	0xFD8
 21470                           
 21471 ;; *************** function _hxCmdFilter *****************
 21472 ;; Defined at:
 21473 ;;		line 105 in file "HX_CommInterface.c"
 21474 ;; Parameters:    Size  Location     Type
 21475 ;;		None
 21476 ;; Auto vars:     Size  Location     Type
 21477 ;;  i               1    8[COMRAM] unsigned char 
 21478 ;; Return value:  Size  Location     Type
 21479 ;;                  1    wreg      void 
 21480 ;; Registers used:
 21481 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21482 ;; Tracked objects:
 21483 ;;		On entry : 0/0
 21484 ;;		On exit  : 0/0
 21485 ;;		Unchanged: 0/0
 21486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21488 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21490 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21491 ;;Total ram usage:        1 bytes
 21492 ;; Hardware stack levels used:    1
 21493 ;; Hardware stack levels required when called:    3
 21494 ;; This function calls:
 21495 ;;		_hxSetupPacket1
 21496 ;;		_hxSetupPacket2
 21497 ;;		_hxStartTimer
 21498 ;;		i2_hxFlushInputBuffer
 21499 ;;		i2_hxFlushMainDataBuffer
 21500 ;;		i2_hxFlushOutputBuffer
 21501 ;; This function is called by:
 21502 ;;		_hxISRHandle
 21503 ;; This function uses a non-reentrant model
 21504 ;;
 21505                           
 21506                           	psect	text105
 21507  001F6C                     __ptext105:
 21508                           	opt stack 0
 21509  001F6C                     _hxCmdFilter:
 21510                           	opt stack 17
 21511                           
 21512                           ;HX_CommInterface.c: 111: if (hx_pktState == 0x00)
 21513                           
 21514                           ;incstack = 0
 21515  001F6C  503A               	movf	_hx_pktState,w,c
 21516  001F6E  A4D8               	btfss	status,2,c
 21517  001F70  D008               	goto	i2l155
 21518                           
 21519                           ;HX_CommInterface.c: 112: {
 21520                           ;HX_CommInterface.c: 113: hxSetupPacket1(hx_pcCmd, hx_pktState);
 21521  001F72  C03A  F006         	movff	_hx_pktState,hxSetupPacket1@data
 21522  001F76  503C               	movf	_hx_pcCmd,w,c
 21523  001F78  ECB9  F01B         	call	_hxSetupPacket1
 21524                           
 21525                           ;HX_CommInterface.c: 114: hx_txPacketFlag = 1;
 21526  001F7C  0E01               	movlw	1
 21527  001F7E  6E46               	movwf	_hx_txPacketFlag,c
 21528                           
 21529                           ;HX_CommInterface.c: 115: return;
 21530  001F80  0012               	return	
 21531  001F82                     i2l155:
 21532                           
 21533                           ;HX_CommInterface.c: 116: }
 21534                           ;HX_CommInterface.c: 118: if (hx_pcCmd != 0x02)
 21535  001F82  0E02               	movlw	2
 21536  001F84  183C               	xorwf	_hx_pcCmd,w,c
 21537  001F86  B4D8               	btfsc	status,2,c
 21538  001F88  D095               	goto	i2l157
 21539                           
 21540                           ;HX_CommInterface.c: 119: {
 21541                           ;HX_CommInterface.c: 120: hxStartTimer(0xF63C);
 21542  001F8A  0EF6               	movlw	246
 21543  001F8C  6E04               	movwf	hxStartTimer@timerVal+1,c
 21544  001F8E  0E3C               	movlw	60
 21545  001F90  6E03               	movwf	hxStartTimer@timerVal,c
 21546  001F92  EC02  F020         	call	_hxStartTimer	;wreg free
 21547                           
 21548                           ;HX_CommInterface.c: 122: switch (hx_pcCmd)
 21549  001F96  D071               	goto	i2l158
 21550  001F98                     
 21551                           ;HX_CommInterface.c: 125: hxSetupPacket1(hx_pcCmd, hx_pktState);
 21552  001F98  C03A  F006         	movff	_hx_pktState,hxSetupPacket1@data
 21553  001F9C  503C               	movf	_hx_pcCmd,w,c
 21554  001F9E  ECB9  F01B         	call	_hxSetupPacket1
 21555                           
 21556                           ;HX_CommInterface.c: 126: break;
 21557  001FA2  D0A7               	goto	i2l175
 21558  001FA4                     
 21559                           ;HX_CommInterface.c: 131: hxSetupPacket1(hx_pcCmd, hx_state);
 21560  001FA4  C045  F006         	movff	_hx_state,hxSetupPacket1@data
 21561  001FA8  503C               	movf	_hx_pcCmd,w,c
 21562  001FAA  ECB9  F01B         	call	_hxSetupPacket1
 21563                           
 21564                           ;HX_CommInterface.c: 132: break;
 21565  001FAE  D0A1               	goto	i2l175
 21566  001FB0                     
 21567                           ;HX_CommInterface.c: 135: hxSetupPacket2(0x03);
 21568  001FB0  0E03               	movlw	3
 21569  001FB2  EC8B  F019         	call	_hxSetupPacket2
 21570                           
 21571                           ;HX_CommInterface.c: 136: break;
 21572  001FB6  D09D               	goto	i2l175
 21573  001FB8                     
 21574                           ;HX_CommInterface.c: 139: hxFlushInputBuffer();
 21575  001FB8  EC7B  F01F         	call	i2_hxFlushInputBuffer	;wreg free
 21576                           
 21577                           ;HX_CommInterface.c: 140: hxSetupPacket1(hx_pcCmd, 0x01);
 21578  001FBC  0E01               	movlw	1
 21579  001FBE  6E06               	movwf	hxSetupPacket1@data,c
 21580  001FC0  503C               	movf	_hx_pcCmd,w,c
 21581  001FC2  ECB9  F01B         	call	_hxSetupPacket1
 21582                           
 21583                           ;HX_CommInterface.c: 141: break;
 21584  001FC6  D095               	goto	i2l175
 21585  001FC8                     
 21586                           ;HX_CommInterface.c: 145: hxSetupPacket1(hx_pcCmd, 0x01);
 21587  001FC8  0E01               	movlw	1
 21588  001FCA  6E06               	movwf	hxSetupPacket1@data,c
 21589  001FCC  503C               	movf	_hx_pcCmd,w,c
 21590  001FCE  ECB9  F01B         	call	_hxSetupPacket1
 21591                           
 21592                           ;HX_CommInterface.c: 146: hxFlushMainDataBuffer();
 21593  001FD2  ECCF  F01F         	call	i2_hxFlushMainDataBuffer	;wreg free
 21594                           
 21595                           ;HX_CommInterface.c: 147: break;
 21596  001FD6  D08D               	goto	i2l175
 21597  001FD8                     
 21598                           ;HX_CommInterface.c: 152: hxFlushMainDataBuffer();
 21599  001FD8  ECCF  F01F         	call	i2_hxFlushMainDataBuffer	;wreg free
 21600                           
 21601                           ;HX_CommInterface.c: 153: hxFlushOutputBuffer();
 21602  001FDC  ECDA  F01F         	call	i2_hxFlushOutputBuffer	;wreg free
 21603                           
 21604                           ;HX_CommInterface.c: 154: hx_mainData[hx_mainDataIndex++] = 0x01;
 21605  001FE0  503F               	movf	_hx_mainDataIndex,w,c
 21606  001FE2  0D01               	mullw	1
 21607  001FE4  0EC0               	movlw	low _hx_mainData
 21608  001FE6  24F3               	addwf	prodl,w,c
 21609  001FE8  6ED9               	movwf	fsr2l,c
 21610  001FEA  0E0B               	movlw	high _hx_mainData
 21611  001FEC  20F4               	addwfc	prodh,w,c
 21612  001FEE  6EDA               	movwf	fsr2h,c
 21613  001FF0  0E01               	movlw	1
 21614  001FF2  6EDF               	movwf	indf2,c
 21615  001FF4  2A3F               	incf	_hx_mainDataIndex,f,c
 21616                           
 21617                           ;HX_CommInterface.c: 155: hx_mainData[hx_mainDataIndex++] = 0x01;
 21618  001FF6  503F               	movf	_hx_mainDataIndex,w,c
 21619  001FF8  0D01               	mullw	1
 21620  001FFA  0EC0               	movlw	low _hx_mainData
 21621  001FFC  24F3               	addwf	prodl,w,c
 21622  001FFE  6ED9               	movwf	fsr2l,c
 21623  002000  0E0B               	movlw	high _hx_mainData
 21624  002002  20F4               	addwfc	prodh,w,c
 21625  002004  6EDA               	movwf	fsr2h,c
 21626  002006  0E01               	movlw	1
 21627  002008  6EDF               	movwf	indf2,c
 21628  00200A  2A3F               	incf	_hx_mainDataIndex,f,c
 21629                           
 21630                           ;HX_CommInterface.c: 156: hxSetupPacket2(hx_pcCmd);
 21631  00200C  503C               	movf	_hx_pcCmd,w,c
 21632  00200E  EC8B  F019         	call	_hxSetupPacket2
 21633                           
 21634                           ;HX_CommInterface.c: 157: hxFlushMainDataBuffer();
 21635  002012  ECCF  F01F         	call	i2_hxFlushMainDataBuffer	;wreg free
 21636                           
 21637                           ;HX_CommInterface.c: 158: break;
 21638  002016  D06D               	goto	i2l175
 21639  002018                     
 21640                           ;HX_CommInterface.c: 161: hxFlushOutputBuffer();
 21641  002018  ECDA  F01F         	call	i2_hxFlushOutputBuffer	;wreg free
 21642                           
 21643                           ;HX_CommInterface.c: 162: hxFlushMainDataBuffer();
 21644  00201C  ECCF  F01F         	call	i2_hxFlushMainDataBuffer	;wreg free
 21645                           
 21646                           ;HX_CommInterface.c: 163: for (uint8_t i = 0; i < hx_inDataIndex; i++)
 21647  002020  0E00               	movlw	0
 21648  002022  6E09               	movwf	hxCmdFilter@i,c
 21649  002024  D014               	goto	i2l167
 21650  002026                     
 21651                           ;HX_CommInterface.c: 164: {
 21652                           ;HX_CommInterface.c: 165: hx_mainData[hx_mainDataIndex++] = hx_inData[i];
 21653  002026  5009               	movf	hxCmdFilter@i,w,c
 21654  002028  0D01               	mullw	1
 21655  00202A  0E40               	movlw	low _hx_inData
 21656  00202C  24F3               	addwf	prodl,w,c
 21657  00202E  6ED9               	movwf	fsr2l,c
 21658  002030  0E0B               	movlw	high _hx_inData
 21659  002032  20F4               	addwfc	prodh,w,c
 21660  002034  6EDA               	movwf	fsr2h,c
 21661  002036  503F               	movf	_hx_mainDataIndex,w,c
 21662  002038  0D01               	mullw	1
 21663  00203A  0EC0               	movlw	low _hx_mainData
 21664  00203C  24F3               	addwf	prodl,w,c
 21665  00203E  6EE1               	movwf	fsr1l,c
 21666  002040  0E0B               	movlw	high _hx_mainData
 21667  002042  20F4               	addwfc	prodh,w,c
 21668  002044  6EE2               	movwf	fsr1h,c
 21669  002046  CFDF FFE7          	movff	indf2,indf1
 21670  00204A  2A3F               	incf	_hx_mainDataIndex,f,c
 21671  00204C  2A09               	incf	hxCmdFilter@i,f,c
 21672  00204E                     i2l167:
 21673  00204E  503E               	movf	_hx_inDataIndex,w,c
 21674  002050  5C09               	subwf	hxCmdFilter@i,w,c
 21675  002052  A0D8               	btfss	status,0,c
 21676  002054  D7E8               	goto	i2l168
 21677                           
 21678                           ;HX_CommInterface.c: 166: }
 21679                           ;HX_CommInterface.c: 167: hxSetupPacket2(hx_pcCmd);
 21680  002056  503C               	movf	_hx_pcCmd,w,c
 21681  002058  EC8B  F019         	call	_hxSetupPacket2
 21682                           
 21683                           ;HX_CommInterface.c: 168: hxFlushMainDataBuffer();
 21684  00205C  ECCF  F01F         	call	i2_hxFlushMainDataBuffer	;wreg free
 21685                           
 21686                           ;HX_CommInterface.c: 169: break;
 21687  002060  D048               	goto	i2l175
 21688  002062                     
 21689                           ;HX_CommInterface.c: 172: hxSetupPacket1(hx_pcCmd, hx_debugVar);
 21690  002062  C037  F006         	movff	_hx_debugVar,hxSetupPacket1@data
 21691  002066  503C               	movf	_hx_pcCmd,w,c
 21692  002068  ECB9  F01B         	call	_hxSetupPacket1
 21693                           
 21694                           ;HX_CommInterface.c: 177: break;
 21695                           
 21696                           ;HX_CommInterface.c: 175: case 0x09:
 21697                           
 21698                           ;HX_CommInterface.c: 173: break;
 21699  00206C  D042               	goto	i2l175
 21700  00206E                     
 21701                           ;HX_CommInterface.c: 180: hxSetupPacket1(hx_pcCmd, 0xFF);
 21702  00206E  0EFF               	movlw	255
 21703  002070  6E06               	movwf	hxSetupPacket1@data,c
 21704  002072  503C               	movf	_hx_pcCmd,w,c
 21705  002074  ECB9  F01B         	call	_hxSetupPacket1
 21706                           
 21707                           ;HX_CommInterface.c: 182: }
 21708                           
 21709                           ;HX_CommInterface.c: 181: break;
 21710  002078  D03C               	goto	i2l175
 21711  00207A                     i2l158:
 21712  00207A  503C               	movf	_hx_pcCmd,w,c
 21713                           
 21714                           ; Switch size 1, requested type "space"
 21715                           ; Number of cases is 9, Range of values is 0 to 9
 21716                           ; switch strategies available:
 21717                           ; Name         Instructions Cycles
 21718                           ; simple_byte           28    15 (average)
 21719                           ;	Chosen strategy is simple_byte
 21720  00207C  0A00               	xorlw	0	; case 0
 21721  00207E  B4D8               	btfsc	status,2,c
 21722  002080  D78B               	goto	i2l159
 21723  002082  0A01               	xorlw	1	; case 1
 21724  002084  B4D8               	btfsc	status,2,c
 21725  002086  D78E               	goto	i2l161
 21726  002088  0A02               	xorlw	2	; case 3
 21727  00208A  B4D8               	btfsc	status,2,c
 21728  00208C  D791               	goto	i2l162
 21729  00208E  0A07               	xorlw	7	; case 4
 21730  002090  B4D8               	btfsc	status,2,c
 21731  002092  D792               	goto	i2l163
 21732  002094  0A01               	xorlw	1	; case 5
 21733  002096  B4D8               	btfsc	status,2,c
 21734  002098  D797               	goto	i2l164
 21735  00209A  0A03               	xorlw	3	; case 6
 21736  00209C  B4D8               	btfsc	status,2,c
 21737  00209E  D79C               	goto	i2l165
 21738  0020A0  0A01               	xorlw	1	; case 7
 21739  0020A2  B4D8               	btfsc	status,2,c
 21740  0020A4  D7B9               	goto	i2l166
 21741  0020A6  0A0F               	xorlw	15	; case 8
 21742  0020A8  B4D8               	btfsc	status,2,c
 21743  0020AA  D7DB               	goto	i2l170
 21744  0020AC  0A01               	xorlw	1	; case 9
 21745  0020AE  B4D8               	btfsc	status,2,c
 21746  0020B0  D020               	goto	i2l175
 21747  0020B2  D7DD               	goto	i2l172
 21748  0020B4                     i2l157:
 21749                           
 21750                           ;HX_CommInterface.c: 184: else
 21751                           ;HX_CommInterface.c: 185: {
 21752                           ;HX_CommInterface.c: 186: hxFlushMainDataBuffer();
 21753  0020B4  ECCF  F01F         	call	i2_hxFlushMainDataBuffer	;wreg free
 21754                           
 21755                           ;HX_CommInterface.c: 188: hxStartTimer(0x3CB0);
 21756  0020B8  0E3C               	movlw	60
 21757  0020BA  6E04               	movwf	hxStartTimer@timerVal+1,c
 21758  0020BC  0EB0               	movlw	176
 21759  0020BE  6E03               	movwf	hxStartTimer@timerVal,c
 21760  0020C0  EC02  F020         	call	_hxStartTimer	;wreg free
 21761                           
 21762                           ;HX_CommInterface.c: 190: if (hx_rxFullPktFlag)
 21763  0020C4  5039               	movf	_hx_rxFullPktFlag,w,c
 21764  0020C6  B4D8               	btfsc	status,2,c
 21765  0020C8  D00B               	goto	i2l174
 21766                           
 21767                           ;HX_CommInterface.c: 191: {
 21768                           ;HX_CommInterface.c: 192: hxSetupPacket1(0x02, 0x01);
 21769  0020CA  0E01               	movlw	1
 21770  0020CC  6E06               	movwf	hxSetupPacket1@data,c
 21771  0020CE  0E02               	movlw	2
 21772  0020D0  ECB9  F01B         	call	_hxSetupPacket1
 21773                           
 21774                           ;HX_CommInterface.c: 193: hx_txPacketFlag = 1;
 21775  0020D4  0E01               	movlw	1
 21776  0020D6  6E46               	movwf	_hx_txPacketFlag,c
 21777                           
 21778                           ;HX_CommInterface.c: 194: hx_startMain = 1;
 21779  0020D8  0E01               	movlw	1
 21780  0020DA  6E38               	movwf	_hx_startMain,c
 21781                           
 21782                           ;HX_CommInterface.c: 195: hx_state = 0x11;
 21783  0020DC  0E11               	movlw	17
 21784  0020DE  D008               	goto	L31
 21785  0020E0                     i2l174:
 21786                           
 21787                           ;HX_CommInterface.c: 197: else
 21788                           ;HX_CommInterface.c: 198: {
 21789                           ;HX_CommInterface.c: 199: hx_startMain = 0;
 21790  0020E0  0E00               	movlw	0
 21791  0020E2  6E38               	movwf	_hx_startMain,c
 21792                           
 21793                           ;HX_CommInterface.c: 200: hxSetupPacket1(0x02, 0x00);
 21794  0020E4  0E00               	movlw	0
 21795  0020E6  6E06               	movwf	hxSetupPacket1@data,c
 21796  0020E8  0E02               	movlw	2
 21797  0020EA  ECB9  F01B         	call	_hxSetupPacket1
 21798                           
 21799                           ;HX_CommInterface.c: 201: hx_state = 0x43;
 21800  0020EE  0E43               	movlw	67
 21801  0020F0                     L31:
 21802  0020F0  6E45               	movwf	_hx_state,c
 21803  0020F2                     i2l175:
 21804                           
 21805                           ;HX_CommInterface.c: 202: }
 21806                           ;HX_CommInterface.c: 203: }
 21807                           ;HX_CommInterface.c: 204: hx_txPacketFlag = 1;
 21808  0020F2  0E01               	movlw	1
 21809  0020F4  6E46               	movwf	_hx_txPacketFlag,c
 21810  0020F6  0012               	return		;funcret
 21811  0020F8                     __end_of_hxCmdFilter:
 21812                           	opt stack 0
 21813                           tosu	equ	0xFFF
 21814                           tosh	equ	0xFFE
 21815                           tosl	equ	0xFFD
 21816                           pclatu	equ	0xFFB
 21817                           pclath	equ	0xFFA
 21818                           tblptru	equ	0xFF8
 21819                           tblptrh	equ	0xFF7
 21820                           tblptrl	equ	0xFF6
 21821                           tablat	equ	0xFF5
 21822                           prodh	equ	0xFF4
 21823                           prodl	equ	0xFF3
 21824                           intcon	equ	0xFF2
 21825                           postinc0	equ	0xFEE
 21826                           fsr0h	equ	0xFEA
 21827                           fsr0l	equ	0xFE9
 21828                           wreg	equ	0xFE8
 21829                           indf1	equ	0xFE7
 21830                           postinc1	equ	0xFE6
 21831                           postdec1	equ	0xFE5
 21832                           plusw1	equ	0xFE3
 21833                           fsr1h	equ	0xFE2
 21834                           fsr1l	equ	0xFE1
 21835                           indf2	equ	0xFDF
 21836                           postinc2	equ	0xFDE
 21837                           postdec2	equ	0xFDD
 21838                           plusw2	equ	0xFDB
 21839                           fsr2h	equ	0xFDA
 21840                           fsr2l	equ	0xFD9
 21841                           status	equ	0xFD8
 21842                           
 21843 ;; *************** function i2_hxFlushMainDataBuffer *****************
 21844 ;; Defined at:
 21845 ;;		line 289 in file "HX_CommInterface.c"
 21846 ;; Parameters:    Size  Location     Type
 21847 ;;		None
 21848 ;; Auto vars:     Size  Location     Type
 21849 ;;		None
 21850 ;; Return value:  Size  Location     Type
 21851 ;;                  1    wreg      void 
 21852 ;; Registers used:
 21853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21854 ;; Tracked objects:
 21855 ;;		On entry : 0/0
 21856 ;;		On exit  : 0/0
 21857 ;;		Unchanged: 0/0
 21858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21863 ;;Total ram usage:        0 bytes
 21864 ;; Hardware stack levels used:    1
 21865 ;; Hardware stack levels required when called:    1
 21866 ;; This function calls:
 21867 ;;		i2_hxClearArray
 21868 ;; This function is called by:
 21869 ;;		_hxCmdFilter
 21870 ;; This function uses a non-reentrant model
 21871 ;;
 21872                           
 21873                           	psect	text106
 21874  003F9E                     __ptext106:
 21875                           	opt stack 0
 21876  003F9E                     i2_hxFlushMainDataBuffer:
 21877                           	opt stack 18
 21878                           
 21879                           ;HX_CommInterface.c: 291: hxClearArray(hx_mainData, 61);
 21880                           
 21881                           ;incstack = 0
 21882  003F9E  0EC0               	movlw	low _hx_mainData
 21883  003FA0  6E01               	movwf	i2hxClearArray@arr,c
 21884  003FA2  0E0B               	movlw	high _hx_mainData
 21885  003FA4  6E02               	movwf	i2hxClearArray@arr+1,c
 21886  003FA6  0E3D               	movlw	61
 21887  003FA8  6E03               	movwf	i2hxClearArray@size,c
 21888  003FAA  EC14  F01F         	call	i2_hxClearArray	;wreg free
 21889                           
 21890                           ;HX_CommInterface.c: 292: hx_mainDataIndex = 0;
 21891  003FAE  0E00               	movlw	0
 21892  003FB0  6E3F               	movwf	_hx_mainDataIndex,c
 21893  003FB2  0012               	return		;funcret
 21894  003FB4                     __end_ofi2_hxFlushMainDataBuffer:
 21895                           	opt stack 0
 21896                           tosu	equ	0xFFF
 21897                           tosh	equ	0xFFE
 21898                           tosl	equ	0xFFD
 21899                           pclatu	equ	0xFFB
 21900                           pclath	equ	0xFFA
 21901                           tblptru	equ	0xFF8
 21902                           tblptrh	equ	0xFF7
 21903                           tblptrl	equ	0xFF6
 21904                           tablat	equ	0xFF5
 21905                           prodh	equ	0xFF4
 21906                           prodl	equ	0xFF3
 21907                           intcon	equ	0xFF2
 21908                           postinc0	equ	0xFEE
 21909                           fsr0h	equ	0xFEA
 21910                           fsr0l	equ	0xFE9
 21911                           wreg	equ	0xFE8
 21912                           indf1	equ	0xFE7
 21913                           postinc1	equ	0xFE6
 21914                           postdec1	equ	0xFE5
 21915                           plusw1	equ	0xFE3
 21916                           fsr1h	equ	0xFE2
 21917                           fsr1l	equ	0xFE1
 21918                           indf2	equ	0xFDF
 21919                           postinc2	equ	0xFDE
 21920                           postdec2	equ	0xFDD
 21921                           plusw2	equ	0xFDB
 21922                           fsr2h	equ	0xFDA
 21923                           fsr2l	equ	0xFD9
 21924                           status	equ	0xFD8
 21925                           
 21926 ;; *************** function i2_hxFlushInputBuffer *****************
 21927 ;; Defined at:
 21928 ;;		line 276 in file "HX_CommInterface.c"
 21929 ;; Parameters:    Size  Location     Type
 21930 ;;		None
 21931 ;; Auto vars:     Size  Location     Type
 21932 ;;		None
 21933 ;; Return value:  Size  Location     Type
 21934 ;;                  1    wreg      void 
 21935 ;; Registers used:
 21936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21937 ;; Tracked objects:
 21938 ;;		On entry : 0/0
 21939 ;;		On exit  : 0/0
 21940 ;;		Unchanged: 0/0
 21941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21946 ;;Total ram usage:        0 bytes
 21947 ;; Hardware stack levels used:    1
 21948 ;; Hardware stack levels required when called:    1
 21949 ;; This function calls:
 21950 ;;		i2_hxClearArray
 21951 ;; This function is called by:
 21952 ;;		_hxISRHandle
 21953 ;;		_hxCmdFilter
 21954 ;;		_hxHandleTmr0
 21955 ;; This function uses a non-reentrant model
 21956 ;;
 21957                           
 21958                           	psect	text107
 21959  003EF6                     __ptext107:
 21960                           	opt stack 0
 21961  003EF6                     i2_hxFlushInputBuffer:
 21962                           	opt stack 18
 21963                           
 21964                           ;HX_CommInterface.c: 278: hxClearArray(hx_inData, 64);
 21965                           
 21966                           ;incstack = 0
 21967  003EF6  0E40               	movlw	low _hx_inData
 21968  003EF8  6E01               	movwf	i2hxClearArray@arr,c
 21969  003EFA  0E0B               	movlw	high _hx_inData
 21970  003EFC  6E02               	movwf	i2hxClearArray@arr+1,c
 21971  003EFE  0E40               	movlw	64
 21972  003F00  6E03               	movwf	i2hxClearArray@size,c
 21973  003F02  EC14  F01F         	call	i2_hxClearArray	;wreg free
 21974                           
 21975                           ;HX_CommInterface.c: 279: hx_inDataIndex = 0;
 21976  003F06  0E00               	movlw	0
 21977  003F08  6E3E               	movwf	_hx_inDataIndex,c
 21978                           
 21979                           ;HX_CommInterface.c: 280: hx_pktCmd = 0;
 21980  003F0A  0E00               	movlw	0
 21981  003F0C  6E3B               	movwf	_hx_pktCmd,c
 21982  003F0E  0012               	return		;funcret
 21983  003F10                     __end_ofi2_hxFlushInputBuffer:
 21984                           	opt stack 0
 21985                           tosu	equ	0xFFF
 21986                           tosh	equ	0xFFE
 21987                           tosl	equ	0xFFD
 21988                           pclatu	equ	0xFFB
 21989                           pclath	equ	0xFFA
 21990                           tblptru	equ	0xFF8
 21991                           tblptrh	equ	0xFF7
 21992                           tblptrl	equ	0xFF6
 21993                           tablat	equ	0xFF5
 21994                           prodh	equ	0xFF4
 21995                           prodl	equ	0xFF3
 21996                           intcon	equ	0xFF2
 21997                           postinc0	equ	0xFEE
 21998                           fsr0h	equ	0xFEA
 21999                           fsr0l	equ	0xFE9
 22000                           wreg	equ	0xFE8
 22001                           indf1	equ	0xFE7
 22002                           postinc1	equ	0xFE6
 22003                           postdec1	equ	0xFE5
 22004                           plusw1	equ	0xFE3
 22005                           fsr1h	equ	0xFE2
 22006                           fsr1l	equ	0xFE1
 22007                           indf2	equ	0xFDF
 22008                           postinc2	equ	0xFDE
 22009                           postdec2	equ	0xFDD
 22010                           plusw2	equ	0xFDB
 22011                           fsr2h	equ	0xFDA
 22012                           fsr2l	equ	0xFD9
 22013                           status	equ	0xFD8
 22014                           
 22015 ;; *************** function _hxStartTimer *****************
 22016 ;; Defined at:
 22017 ;;		line 264 in file "HX_CommInterface.c"
 22018 ;; Parameters:    Size  Location     Type
 22019 ;;  timerVal        2    2[COMRAM] unsigned int 
 22020 ;; Auto vars:     Size  Location     Type
 22021 ;;		None
 22022 ;; Return value:  Size  Location     Type
 22023 ;;                  1    wreg      void 
 22024 ;; Registers used:
 22025 ;;		wreg, status,2, cstack
 22026 ;; Tracked objects:
 22027 ;;		On entry : 0/0
 22028 ;;		On exit  : 0/0
 22029 ;;		Unchanged: 0/0
 22030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22031 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22034 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22035 ;;Total ram usage:        2 bytes
 22036 ;; Hardware stack levels used:    1
 22037 ;; Hardware stack levels required when called:    1
 22038 ;; This function calls:
 22039 ;;		_TMR0_StartTimer
 22040 ;;		i2_TMR0_Write16bitTimer
 22041 ;; This function is called by:
 22042 ;;		_hxISRHandle
 22043 ;;		_hxCmdFilter
 22044 ;; This function uses a non-reentrant model
 22045 ;;
 22046                           
 22047                           	psect	text108
 22048  004004                     __ptext108:
 22049                           	opt stack 0
 22050  004004                     _hxStartTimer:
 22051                           	opt stack 19
 22052                           
 22053                           ;HX_CommInterface.c: 266: TMR0_Write16bitTimer(timerVal);
 22054                           
 22055                           ;incstack = 0
 22056  004004  C003  F001         	movff	hxStartTimer@timerVal,i2TMR0_Write16bitTimer@timerVal
 22057  004008  C004  F002         	movff	hxStartTimer@timerVal+1,i2TMR0_Write16bitTimer@timerVal+1
 22058  00400C  EC20  F020         	call	i2_TMR0_Write16bitTimer	;wreg free
 22059                           
 22060                           ;HX_CommInterface.c: 267: TMR0_StartTimer();
 22061  004010  EC50  F020         	call	_TMR0_StartTimer	;wreg free
 22062  004014  0012               	return		;funcret
 22063  004016                     __end_of_hxStartTimer:
 22064                           	opt stack 0
 22065                           tosu	equ	0xFFF
 22066                           tosh	equ	0xFFE
 22067                           tosl	equ	0xFFD
 22068                           pclatu	equ	0xFFB
 22069                           pclath	equ	0xFFA
 22070                           tblptru	equ	0xFF8
 22071                           tblptrh	equ	0xFF7
 22072                           tblptrl	equ	0xFF6
 22073                           tablat	equ	0xFF5
 22074                           prodh	equ	0xFF4
 22075                           prodl	equ	0xFF3
 22076                           intcon	equ	0xFF2
 22077                           postinc0	equ	0xFEE
 22078                           fsr0h	equ	0xFEA
 22079                           fsr0l	equ	0xFE9
 22080                           wreg	equ	0xFE8
 22081                           indf1	equ	0xFE7
 22082                           postinc1	equ	0xFE6
 22083                           postdec1	equ	0xFE5
 22084                           plusw1	equ	0xFE3
 22085                           fsr1h	equ	0xFE2
 22086                           fsr1l	equ	0xFE1
 22087                           indf2	equ	0xFDF
 22088                           postinc2	equ	0xFDE
 22089                           postdec2	equ	0xFDD
 22090                           plusw2	equ	0xFDB
 22091                           fsr2h	equ	0xFDA
 22092                           fsr2l	equ	0xFD9
 22093                           status	equ	0xFD8
 22094                           
 22095 ;; *************** function i2_TMR0_Write16bitTimer *****************
 22096 ;; Defined at:
 22097 ;;		line 119 in file "mcc_generated_files/tmr0.c"
 22098 ;; Parameters:    Size  Location     Type
 22099 ;;  timerVal        2    0[COMRAM] unsigned int 
 22100 ;; Auto vars:     Size  Location     Type
 22101 ;;		None
 22102 ;; Return value:  Size  Location     Type
 22103 ;;                  1    wreg      void 
 22104 ;; Registers used:
 22105 ;;		wreg, status,2
 22106 ;; Tracked objects:
 22107 ;;		On entry : 0/0
 22108 ;;		On exit  : 0/0
 22109 ;;		Unchanged: 0/0
 22110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22111 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22114 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22115 ;;Total ram usage:        2 bytes
 22116 ;; Hardware stack levels used:    1
 22117 ;; This function calls:
 22118 ;;		Nothing
 22119 ;; This function is called by:
 22120 ;;		_hxStartTimer
 22121 ;;		i2_hxStopTimer
 22122 ;; This function uses a non-reentrant model
 22123 ;;
 22124                           
 22125                           	psect	text109
 22126  004040                     __ptext109:
 22127                           	opt stack 0
 22128  004040                     i2_TMR0_Write16bitTimer:
 22129                           	opt stack 19
 22130                           
 22131                           ;tmr0.c: 122: TMR0H = timerVal >> 8;
 22132                           
 22133                           ;incstack = 0
 22134  004040  5002               	movf	i2TMR0_Write16bitTimer@timerVal+1,w,c
 22135  004042  6ED4               	movwf	4052,c	;volatile
 22136                           
 22137                           ;tmr0.c: 123: TMR0L = (uint8_t) timerVal;
 22138  004044  C001  FFD3         	movff	i2TMR0_Write16bitTimer@timerVal,4051	;volatile
 22139  004048  0012               	return		;funcret
 22140  00404A                     __end_ofi2_TMR0_Write16bitTimer:
 22141                           	opt stack 0
 22142                           tosu	equ	0xFFF
 22143                           tosh	equ	0xFFE
 22144                           tosl	equ	0xFFD
 22145                           pclatu	equ	0xFFB
 22146                           pclath	equ	0xFFA
 22147                           tblptru	equ	0xFF8
 22148                           tblptrh	equ	0xFF7
 22149                           tblptrl	equ	0xFF6
 22150                           tablat	equ	0xFF5
 22151                           prodh	equ	0xFF4
 22152                           prodl	equ	0xFF3
 22153                           intcon	equ	0xFF2
 22154                           postinc0	equ	0xFEE
 22155                           fsr0h	equ	0xFEA
 22156                           fsr0l	equ	0xFE9
 22157                           wreg	equ	0xFE8
 22158                           indf1	equ	0xFE7
 22159                           postinc1	equ	0xFE6
 22160                           postdec1	equ	0xFE5
 22161                           plusw1	equ	0xFE3
 22162                           fsr1h	equ	0xFE2
 22163                           fsr1l	equ	0xFE1
 22164                           indf2	equ	0xFDF
 22165                           postinc2	equ	0xFDE
 22166                           postdec2	equ	0xFDD
 22167                           plusw2	equ	0xFDB
 22168                           fsr2h	equ	0xFDA
 22169                           fsr2l	equ	0xFD9
 22170                           status	equ	0xFD8
 22171                           
 22172 ;; *************** function _TMR0_StartTimer *****************
 22173 ;; Defined at:
 22174 ;;		line 94 in file "mcc_generated_files/tmr0.c"
 22175 ;; Parameters:    Size  Location     Type
 22176 ;;		None
 22177 ;; Auto vars:     Size  Location     Type
 22178 ;;		None
 22179 ;; Return value:  Size  Location     Type
 22180 ;;                  1    wreg      void 
 22181 ;; Registers used:
 22182 ;;		None
 22183 ;; Tracked objects:
 22184 ;;		On entry : 0/0
 22185 ;;		On exit  : 0/0
 22186 ;;		Unchanged: 0/0
 22187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22192 ;;Total ram usage:        0 bytes
 22193 ;; Hardware stack levels used:    1
 22194 ;; This function calls:
 22195 ;;		Nothing
 22196 ;; This function is called by:
 22197 ;;		_hxStartTimer
 22198 ;; This function uses a non-reentrant model
 22199 ;;
 22200                           
 22201                           	psect	text110
 22202  0040A0                     __ptext110:
 22203                           	opt stack 0
 22204  0040A0                     _TMR0_StartTimer:
 22205                           	opt stack 19
 22206                           
 22207                           ;tmr0.c: 97: T0CON0bits.T0EN = 1;
 22208                           
 22209                           ;incstack = 0
 22210  0040A0  8ED5               	bsf	4053,7,c	;volatile
 22211  0040A2  0012               	return		;funcret
 22212  0040A4                     __end_of_TMR0_StartTimer:
 22213                           	opt stack 0
 22214                           tosu	equ	0xFFF
 22215                           tosh	equ	0xFFE
 22216                           tosl	equ	0xFFD
 22217                           pclatu	equ	0xFFB
 22218                           pclath	equ	0xFFA
 22219                           tblptru	equ	0xFF8
 22220                           tblptrh	equ	0xFF7
 22221                           tblptrl	equ	0xFF6
 22222                           tablat	equ	0xFF5
 22223                           prodh	equ	0xFF4
 22224                           prodl	equ	0xFF3
 22225                           intcon	equ	0xFF2
 22226                           postinc0	equ	0xFEE
 22227                           fsr0h	equ	0xFEA
 22228                           fsr0l	equ	0xFE9
 22229                           wreg	equ	0xFE8
 22230                           indf1	equ	0xFE7
 22231                           postinc1	equ	0xFE6
 22232                           postdec1	equ	0xFE5
 22233                           plusw1	equ	0xFE3
 22234                           fsr1h	equ	0xFE2
 22235                           fsr1l	equ	0xFE1
 22236                           indf2	equ	0xFDF
 22237                           postinc2	equ	0xFDE
 22238                           postdec2	equ	0xFDD
 22239                           plusw2	equ	0xFDB
 22240                           fsr2h	equ	0xFDA
 22241                           fsr2l	equ	0xFD9
 22242                           status	equ	0xFD8
 22243                           
 22244 ;; *************** function _hxSetupPacket2 *****************
 22245 ;; Defined at:
 22246 ;;		line 216 in file "HX_CommInterface.c"
 22247 ;; Parameters:    Size  Location     Type
 22248 ;;  pc_cmd          1    wreg     unsigned char 
 22249 ;; Auto vars:     Size  Location     Type
 22250 ;;  pc_cmd          1    6[COMRAM] unsigned char 
 22251 ;;  i               1    7[COMRAM] unsigned char 
 22252 ;; Return value:  Size  Location     Type
 22253 ;;                  1    wreg      void 
 22254 ;; Registers used:
 22255 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22256 ;; Tracked objects:
 22257 ;;		On entry : 0/0
 22258 ;;		On exit  : 0/0
 22259 ;;		Unchanged: 0/0
 22260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22262 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22263 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22264 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22265 ;;Total ram usage:        3 bytes
 22266 ;; Hardware stack levels used:    1
 22267 ;; Hardware stack levels required when called:    1
 22268 ;; This function calls:
 22269 ;;		_hxCalcChecksum
 22270 ;; This function is called by:
 22271 ;;		_hxCmdFilter
 22272 ;; This function uses a non-reentrant model
 22273 ;;
 22274                           
 22275                           	psect	text111
 22276  003316                     __ptext111:
 22277                           	opt stack 0
 22278  003316                     _hxSetupPacket2:
 22279                           	opt stack 18
 22280                           
 22281                           ;incstack = 0
 22282                           ;hxSetupPacket2@pc_cmd stored from wreg
 22283  003316  6E07               	movwf	hxSetupPacket2@pc_cmd,c
 22284                           
 22285                           ;HX_CommInterface.c: 218: hx_outData[0] = pc_cmd;
 22286  003318  C007  FB80         	movff	hxSetupPacket2@pc_cmd,_hx_outData
 22287                           
 22288                           ;HX_CommInterface.c: 219: for (uint8_t i = 0; i < hx_mainDataIndex; i++)
 22289  00331C  0E00               	movlw	0
 22290  00331E  6E08               	movwf	hxSetupPacket2@i,c
 22291  003320  D014               	goto	i2l181
 22292  003322                     
 22293                           ;HX_CommInterface.c: 220: {
 22294                           ;HX_CommInterface.c: 221: hx_outData[hx_outDataIndex++] = hx_mainData[i];
 22295  003322  5008               	movf	hxSetupPacket2@i,w,c
 22296  003324  0D01               	mullw	1
 22297  003326  0EC0               	movlw	low _hx_mainData
 22298  003328  24F3               	addwf	prodl,w,c
 22299  00332A  6ED9               	movwf	fsr2l,c
 22300  00332C  0E0B               	movlw	high _hx_mainData
 22301  00332E  20F4               	addwfc	prodh,w,c
 22302  003330  6EDA               	movwf	fsr2h,c
 22303  003332  5040               	movf	_hx_outDataIndex,w,c
 22304  003334  0D01               	mullw	1
 22305  003336  0E80               	movlw	low _hx_outData
 22306  003338  24F3               	addwf	prodl,w,c
 22307  00333A  6EE1               	movwf	fsr1l,c
 22308  00333C  0E0B               	movlw	high _hx_outData
 22309  00333E  20F4               	addwfc	prodh,w,c
 22310  003340  6EE2               	movwf	fsr1h,c
 22311  003342  CFDF FFE7          	movff	indf2,indf1
 22312  003346  2A40               	incf	_hx_outDataIndex,f,c
 22313  003348  2A08               	incf	hxSetupPacket2@i,f,c
 22314  00334A                     i2l181:
 22315  00334A  503F               	movf	_hx_mainDataIndex,w,c
 22316  00334C  5C08               	subwf	hxSetupPacket2@i,w,c
 22317  00334E  A0D8               	btfss	status,0,c
 22318  003350  D7E8               	goto	i2l182
 22319                           
 22320                           ;HX_CommInterface.c: 222: }
 22321                           ;HX_CommInterface.c: 224: hx_outData[1] = hx_outDataIndex - 2 + 1;
 22322  003352  0440               	decf	_hx_outDataIndex,w,c
 22323  003354  010B               	movlb	11	; () banked
 22324  003356  6F81               	movwf	(_hx_outData+1)& (0+255),b
 22325                           
 22326                           ; BSR set to: 11
 22327                           ;HX_CommInterface.c: 225: hx_outData[hx_outDataIndex++] = hxCalcChecksum(hx_outData, hx_
      +                          outDataIndex);
 22328  003358  0E80               	movlw	low _hx_outData
 22329  00335A  6E01               	movwf	hxCalcChecksum@data,c
 22330  00335C  0E0B               	movlw	high _hx_outData
 22331  00335E  6E02               	movwf	hxCalcChecksum@data+1,c
 22332  003360  C040  F003         	movff	_hx_outDataIndex,hxCalcChecksum@size
 22333  003364  EC97  F01E         	call	_hxCalcChecksum	;wreg free
 22334  003368  6E06               	movwf	??_hxSetupPacket2& (0+255),c
 22335  00336A  5040               	movf	_hx_outDataIndex,w,c
 22336  00336C  0D01               	mullw	1
 22337  00336E  0E80               	movlw	low _hx_outData
 22338  003370  24F3               	addwf	prodl,w,c
 22339  003372  6ED9               	movwf	fsr2l,c
 22340  003374  0E0B               	movlw	high _hx_outData
 22341  003376  20F4               	addwfc	prodh,w,c
 22342  003378  6EDA               	movwf	fsr2h,c
 22343  00337A  C006  FFDF         	movff	??_hxSetupPacket2,indf2
 22344  00337E  2A40               	incf	_hx_outDataIndex,f,c
 22345  003380  0012               	return		;funcret
 22346  003382                     __end_of_hxSetupPacket2:
 22347                           	opt stack 0
 22348                           tosu	equ	0xFFF
 22349                           tosh	equ	0xFFE
 22350                           tosl	equ	0xFFD
 22351                           pclatu	equ	0xFFB
 22352                           pclath	equ	0xFFA
 22353                           tblptru	equ	0xFF8
 22354                           tblptrh	equ	0xFF7
 22355                           tblptrl	equ	0xFF6
 22356                           tablat	equ	0xFF5
 22357                           prodh	equ	0xFF4
 22358                           prodl	equ	0xFF3
 22359                           intcon	equ	0xFF2
 22360                           postinc0	equ	0xFEE
 22361                           fsr0h	equ	0xFEA
 22362                           fsr0l	equ	0xFE9
 22363                           wreg	equ	0xFE8
 22364                           indf1	equ	0xFE7
 22365                           postinc1	equ	0xFE6
 22366                           postdec1	equ	0xFE5
 22367                           plusw1	equ	0xFE3
 22368                           fsr1h	equ	0xFE2
 22369                           fsr1l	equ	0xFE1
 22370                           indf2	equ	0xFDF
 22371                           postinc2	equ	0xFDE
 22372                           postdec2	equ	0xFDD
 22373                           plusw2	equ	0xFDB
 22374                           fsr2h	equ	0xFDA
 22375                           fsr2l	equ	0xFD9
 22376                           status	equ	0xFD8
 22377                           
 22378 ;; *************** function _hxSetupPacket1 *****************
 22379 ;; Defined at:
 22380 ;;		line 207 in file "HX_CommInterface.c"
 22381 ;; Parameters:    Size  Location     Type
 22382 ;;  pc_cmd          1    wreg     unsigned char 
 22383 ;;  data            1    5[COMRAM] unsigned char 
 22384 ;; Auto vars:     Size  Location     Type
 22385 ;;  pc_cmd          1    7[COMRAM] unsigned char 
 22386 ;; Return value:  Size  Location     Type
 22387 ;;                  1    wreg      void 
 22388 ;; Registers used:
 22389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22390 ;; Tracked objects:
 22391 ;;		On entry : 0/0
 22392 ;;		On exit  : 0/0
 22393 ;;		Unchanged: 0/0
 22394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22395 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22397 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22398 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22399 ;;Total ram usage:        3 bytes
 22400 ;; Hardware stack levels used:    1
 22401 ;; Hardware stack levels required when called:    2
 22402 ;; This function calls:
 22403 ;;		_hxCalcChecksum
 22404 ;;		i2_hxFlushOutputBuffer
 22405 ;; This function is called by:
 22406 ;;		_hxCmdFilter
 22407 ;;		_hxHandleTmr0
 22408 ;; This function uses a non-reentrant model
 22409 ;;
 22410                           
 22411                           	psect	text112
 22412  003772                     __ptext112:
 22413                           	opt stack 0
 22414  003772                     _hxSetupPacket1:
 22415                           	opt stack 17
 22416                           
 22417                           ;incstack = 0
 22418                           ;hxSetupPacket1@pc_cmd stored from wreg
 22419  003772  6E08               	movwf	hxSetupPacket1@pc_cmd,c
 22420                           
 22421                           ;HX_CommInterface.c: 209: hxFlushOutputBuffer();
 22422  003774  ECDA  F01F         	call	i2_hxFlushOutputBuffer	;wreg free
 22423                           
 22424                           ;HX_CommInterface.c: 210: hx_outData[0] = pc_cmd;
 22425  003778  C008  FB80         	movff	hxSetupPacket1@pc_cmd,_hx_outData
 22426                           
 22427                           ;HX_CommInterface.c: 211: hx_outData[1] = 2;
 22428  00377C  0E02               	movlw	2
 22429  00377E  010B               	movlb	11	; () banked
 22430  003780  6F81               	movwf	(_hx_outData+1)& (0+255),b
 22431                           
 22432                           ; BSR set to: 11
 22433                           ;HX_CommInterface.c: 212: hx_outData[hx_outDataIndex++] = data;
 22434  003782  5040               	movf	_hx_outDataIndex,w,c
 22435  003784  0D01               	mullw	1
 22436  003786  0E80               	movlw	low _hx_outData
 22437  003788  24F3               	addwf	prodl,w,c
 22438  00378A  6ED9               	movwf	fsr2l,c
 22439  00378C  0E0B               	movlw	high _hx_outData
 22440  00378E  20F4               	addwfc	prodh,w,c
 22441  003790  6EDA               	movwf	fsr2h,c
 22442  003792  C006  FFDF         	movff	hxSetupPacket1@data,indf2
 22443                           
 22444                           ; BSR set to: 11
 22445  003796  2A40               	incf	_hx_outDataIndex,f,c
 22446                           
 22447                           ; BSR set to: 11
 22448                           ;HX_CommInterface.c: 213: hx_outData[hx_outDataIndex++] = hxCalcChecksum(hx_outData, hx_
      +                          outDataIndex);
 22449  003798  0E80               	movlw	low _hx_outData
 22450  00379A  6E01               	movwf	hxCalcChecksum@data,c
 22451  00379C  0E0B               	movlw	high _hx_outData
 22452  00379E  6E02               	movwf	hxCalcChecksum@data+1,c
 22453  0037A0  C040  F003         	movff	_hx_outDataIndex,hxCalcChecksum@size
 22454  0037A4  EC97  F01E         	call	_hxCalcChecksum	;wreg free
 22455  0037A8  6E07               	movwf	??_hxSetupPacket1& (0+255),c
 22456  0037AA  5040               	movf	_hx_outDataIndex,w,c
 22457  0037AC  0D01               	mullw	1
 22458  0037AE  0E80               	movlw	low _hx_outData
 22459  0037B0  24F3               	addwf	prodl,w,c
 22460  0037B2  6ED9               	movwf	fsr2l,c
 22461  0037B4  0E0B               	movlw	high _hx_outData
 22462  0037B6  20F4               	addwfc	prodh,w,c
 22463  0037B8  6EDA               	movwf	fsr2h,c
 22464  0037BA  C007  FFDF         	movff	??_hxSetupPacket1,indf2
 22465  0037BE  2A40               	incf	_hx_outDataIndex,f,c
 22466  0037C0  0012               	return		;funcret
 22467  0037C2                     __end_of_hxSetupPacket1:
 22468                           	opt stack 0
 22469                           tosu	equ	0xFFF
 22470                           tosh	equ	0xFFE
 22471                           tosl	equ	0xFFD
 22472                           pclatu	equ	0xFFB
 22473                           pclath	equ	0xFFA
 22474                           tblptru	equ	0xFF8
 22475                           tblptrh	equ	0xFF7
 22476                           tblptrl	equ	0xFF6
 22477                           tablat	equ	0xFF5
 22478                           prodh	equ	0xFF4
 22479                           prodl	equ	0xFF3
 22480                           intcon	equ	0xFF2
 22481                           postinc0	equ	0xFEE
 22482                           fsr0h	equ	0xFEA
 22483                           fsr0l	equ	0xFE9
 22484                           wreg	equ	0xFE8
 22485                           indf1	equ	0xFE7
 22486                           postinc1	equ	0xFE6
 22487                           postdec1	equ	0xFE5
 22488                           plusw1	equ	0xFE3
 22489                           fsr1h	equ	0xFE2
 22490                           fsr1l	equ	0xFE1
 22491                           indf2	equ	0xFDF
 22492                           postinc2	equ	0xFDE
 22493                           postdec2	equ	0xFDD
 22494                           plusw2	equ	0xFDB
 22495                           fsr2h	equ	0xFDA
 22496                           fsr2l	equ	0xFD9
 22497                           status	equ	0xFD8
 22498                           
 22499 ;; *************** function i2_hxFlushOutputBuffer *****************
 22500 ;; Defined at:
 22501 ;;		line 283 in file "HX_CommInterface.c"
 22502 ;; Parameters:    Size  Location     Type
 22503 ;;		None
 22504 ;; Auto vars:     Size  Location     Type
 22505 ;;		None
 22506 ;; Return value:  Size  Location     Type
 22507 ;;                  1    wreg      void 
 22508 ;; Registers used:
 22509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22510 ;; Tracked objects:
 22511 ;;		On entry : 0/0
 22512 ;;		On exit  : 0/0
 22513 ;;		Unchanged: 0/0
 22514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22519 ;;Total ram usage:        0 bytes
 22520 ;; Hardware stack levels used:    1
 22521 ;; Hardware stack levels required when called:    1
 22522 ;; This function calls:
 22523 ;;		i2_hxClearArray
 22524 ;; This function is called by:
 22525 ;;		_hxCmdFilter
 22526 ;;		_hxSetupPacket1
 22527 ;;		_hxHandleTmr0
 22528 ;; This function uses a non-reentrant model
 22529 ;;
 22530                           
 22531                           	psect	text113
 22532  003FB4                     __ptext113:
 22533                           	opt stack 0
 22534  003FB4                     i2_hxFlushOutputBuffer:
 22535                           	opt stack 18
 22536                           
 22537                           ;HX_CommInterface.c: 285: hxClearArray(hx_outData, 64);
 22538                           
 22539                           ;incstack = 0
 22540  003FB4  0E80               	movlw	low _hx_outData
 22541  003FB6  6E01               	movwf	i2hxClearArray@arr,c
 22542  003FB8  0E0B               	movlw	high _hx_outData
 22543  003FBA  6E02               	movwf	i2hxClearArray@arr+1,c
 22544  003FBC  0E40               	movlw	64
 22545  003FBE  6E03               	movwf	i2hxClearArray@size,c
 22546  003FC0  EC14  F01F         	call	i2_hxClearArray	;wreg free
 22547                           
 22548                           ;HX_CommInterface.c: 286: hx_outDataIndex = 2;
 22549  003FC4  0E02               	movlw	2
 22550  003FC6  6E40               	movwf	_hx_outDataIndex,c
 22551  003FC8  0012               	return		;funcret
 22552  003FCA                     __end_ofi2_hxFlushOutputBuffer:
 22553                           	opt stack 0
 22554                           tosu	equ	0xFFF
 22555                           tosh	equ	0xFFE
 22556                           tosl	equ	0xFFD
 22557                           pclatu	equ	0xFFB
 22558                           pclath	equ	0xFFA
 22559                           tblptru	equ	0xFF8
 22560                           tblptrh	equ	0xFF7
 22561                           tblptrl	equ	0xFF6
 22562                           tablat	equ	0xFF5
 22563                           prodh	equ	0xFF4
 22564                           prodl	equ	0xFF3
 22565                           intcon	equ	0xFF2
 22566                           postinc0	equ	0xFEE
 22567                           fsr0h	equ	0xFEA
 22568                           fsr0l	equ	0xFE9
 22569                           wreg	equ	0xFE8
 22570                           indf1	equ	0xFE7
 22571                           postinc1	equ	0xFE6
 22572                           postdec1	equ	0xFE5
 22573                           plusw1	equ	0xFE3
 22574                           fsr1h	equ	0xFE2
 22575                           fsr1l	equ	0xFE1
 22576                           indf2	equ	0xFDF
 22577                           postinc2	equ	0xFDE
 22578                           postdec2	equ	0xFDD
 22579                           plusw2	equ	0xFDB
 22580                           fsr2h	equ	0xFDA
 22581                           fsr2l	equ	0xFD9
 22582                           status	equ	0xFD8
 22583                           
 22584 ;; *************** function i2_hxClearArray *****************
 22585 ;; Defined at:
 22586 ;;		line 306 in file "HX_CommInterface.c"
 22587 ;; Parameters:    Size  Location     Type
 22588 ;;  arr             2    0[COMRAM] PTR unsigned char 
 22589 ;;		 -> hx_outData(64), hx_mainData(61), hx_inData(64), 
 22590 ;;  size            1    2[COMRAM] unsigned char 
 22591 ;; Auto vars:     Size  Location     Type
 22592 ;;  hxClearArray    1    3[COMRAM] unsigned char 
 22593 ;; Return value:  Size  Location     Type
 22594 ;;                  1    wreg      void 
 22595 ;; Registers used:
 22596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22597 ;; Tracked objects:
 22598 ;;		On entry : 0/0
 22599 ;;		On exit  : 0/0
 22600 ;;		Unchanged: 0/0
 22601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22602 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22605 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22606 ;;Total ram usage:        4 bytes
 22607 ;; Hardware stack levels used:    1
 22608 ;; This function calls:
 22609 ;;		Nothing
 22610 ;; This function is called by:
 22611 ;;		i2_hxFlushInputBuffer
 22612 ;;		i2_hxFlushOutputBuffer
 22613 ;;		i2_hxFlushMainDataBuffer
 22614 ;; This function uses a non-reentrant model
 22615 ;;
 22616                           
 22617                           	psect	text114
 22618  003E28                     __ptext114:
 22619                           	opt stack 0
 22620  003E28                     i2_hxClearArray:
 22621                           	opt stack 18
 22622                           
 22623                           ;HX_CommInterface.c: 308: for(uint8_t i = 0; i < size; i++)
 22624                           
 22625                           ;incstack = 0
 22626  003E28  0E00               	movlw	0
 22627  003E2A  6E04               	movwf	i2hxClearArray@i,c
 22628  003E2C  D00B               	goto	i2l225
 22629  003E2E                     
 22630                           ;HX_CommInterface.c: 309: {
 22631                           ;HX_CommInterface.c: 310: arr[i] = 0;
 22632  003E2E  5004               	movf	i2hxClearArray@i,w,c
 22633  003E30  0D01               	mullw	1
 22634  003E32  50F3               	movf	prodl,w,c
 22635  003E34  2401               	addwf	i2hxClearArray@arr,w,c
 22636  003E36  6ED9               	movwf	fsr2l,c
 22637  003E38  50F4               	movf	prodh,w,c
 22638  003E3A  2002               	addwfc	i2hxClearArray@arr+1,w,c
 22639  003E3C  6EDA               	movwf	fsr2h,c
 22640  003E3E  0E00               	movlw	0
 22641  003E40  6EDF               	movwf	indf2,c
 22642  003E42  2A04               	incf	i2hxClearArray@i,f,c
 22643  003E44                     i2l225:
 22644  003E44  5003               	movf	i2hxClearArray@size,w,c
 22645  003E46  5C04               	subwf	i2hxClearArray@i,w,c
 22646  003E48  B0D8               	btfsc	status,0,c
 22647  003E4A  0012               	return	
 22648  003E4C  D7F0               	goto	i2l226
 22649  003E4E                     __end_ofi2_hxClearArray:
 22650                           	opt stack 0
 22651                           tosu	equ	0xFFF
 22652                           tosh	equ	0xFFE
 22653                           tosl	equ	0xFFD
 22654                           pclatu	equ	0xFFB
 22655                           pclath	equ	0xFFA
 22656                           tblptru	equ	0xFF8
 22657                           tblptrh	equ	0xFF7
 22658                           tblptrl	equ	0xFF6
 22659                           tablat	equ	0xFF5
 22660                           prodh	equ	0xFF4
 22661                           prodl	equ	0xFF3
 22662                           intcon	equ	0xFF2
 22663                           postinc0	equ	0xFEE
 22664                           fsr0h	equ	0xFEA
 22665                           fsr0l	equ	0xFE9
 22666                           wreg	equ	0xFE8
 22667                           indf1	equ	0xFE7
 22668                           postinc1	equ	0xFE6
 22669                           postdec1	equ	0xFE5
 22670                           plusw1	equ	0xFE3
 22671                           fsr1h	equ	0xFE2
 22672                           fsr1l	equ	0xFE1
 22673                           indf2	equ	0xFDF
 22674                           postinc2	equ	0xFDE
 22675                           postdec2	equ	0xFDD
 22676                           plusw2	equ	0xFDB
 22677                           fsr2h	equ	0xFDA
 22678                           fsr2l	equ	0xFD9
 22679                           status	equ	0xFD8
 22680                           
 22681 ;; *************** function _hxCalcChecksum *****************
 22682 ;; Defined at:
 22683 ;;		line 295 in file "HX_CommInterface.c"
 22684 ;; Parameters:    Size  Location     Type
 22685 ;;  data            2    0[COMRAM] PTR unsigned char 
 22686 ;;		 -> hx_outData(64), 
 22687 ;;  size            1    2[COMRAM] unsigned char 
 22688 ;; Auto vars:     Size  Location     Type
 22689 ;;  i               1    3[COMRAM] unsigned char 
 22690 ;;  temp_checksu    1    4[COMRAM] unsigned char 
 22691 ;; Return value:  Size  Location     Type
 22692 ;;                  1    wreg      unsigned char 
 22693 ;; Registers used:
 22694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22695 ;; Tracked objects:
 22696 ;;		On entry : 0/0
 22697 ;;		On exit  : 0/0
 22698 ;;		Unchanged: 0/0
 22699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22700 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22701 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22703 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22704 ;;Total ram usage:        5 bytes
 22705 ;; Hardware stack levels used:    1
 22706 ;; This function calls:
 22707 ;;		Nothing
 22708 ;; This function is called by:
 22709 ;;		_hxSetupPacket1
 22710 ;;		_hxSetupPacket2
 22711 ;; This function uses a non-reentrant model
 22712 ;;
 22713                           
 22714                           	psect	text115
 22715  003D2E                     __ptext115:
 22716                           	opt stack 0
 22717  003D2E                     _hxCalcChecksum:
 22718                           	opt stack 18
 22719                           
 22720                           ;HX_CommInterface.c: 297: uint8_t temp_checksum = 0;
 22721                           
 22722                           ;incstack = 0
 22723  003D2E  0E00               	movlw	0
 22724  003D30  6E05               	movwf	hxCalcChecksum@temp_checksum,c
 22725                           
 22726                           ;HX_CommInterface.c: 298: for(uint8_t i = 0; i < size; i++)
 22727  003D32  0E00               	movlw	0
 22728  003D34  6E04               	movwf	hxCalcChecksum@i,c
 22729  003D36  D00B               	goto	i2l219
 22730  003D38                     
 22731                           ;HX_CommInterface.c: 299: {
 22732                           ;HX_CommInterface.c: 300: temp_checksum += data[i];
 22733  003D38  5004               	movf	hxCalcChecksum@i,w,c
 22734  003D3A  0D01               	mullw	1
 22735  003D3C  50F3               	movf	prodl,w,c
 22736  003D3E  2401               	addwf	hxCalcChecksum@data,w,c
 22737  003D40  6ED9               	movwf	fsr2l,c
 22738  003D42  50F4               	movf	prodh,w,c
 22739  003D44  2002               	addwfc	hxCalcChecksum@data+1,w,c
 22740  003D46  6EDA               	movwf	fsr2h,c
 22741  003D48  50DF               	movf	indf2,w,c
 22742  003D4A  2605               	addwf	hxCalcChecksum@temp_checksum,f,c
 22743  003D4C  2A04               	incf	hxCalcChecksum@i,f,c
 22744  003D4E                     i2l219:
 22745  003D4E  5003               	movf	hxCalcChecksum@size,w,c
 22746  003D50  5C04               	subwf	hxCalcChecksum@i,w,c
 22747  003D52  A0D8               	btfss	status,0,c
 22748  003D54  D7F1               	goto	i2l220
 22749                           
 22750                           ;HX_CommInterface.c: 301: }
 22751                           ;HX_CommInterface.c: 302: temp_checksum = (~temp_checksum) + 1;
 22752  003D56  6C05               	negf	hxCalcChecksum@temp_checksum,c
 22753                           
 22754                           ;HX_CommInterface.c: 303: return temp_checksum;
 22755  003D58  5005               	movf	hxCalcChecksum@temp_checksum,w,c
 22756  003D5A  0012               	return	
 22757  003D5C                     __end_of_hxCalcChecksum:
 22758                           	opt stack 0
 22759  0000                     tosu	equ	0xFFF
 22760                           tosh	equ	0xFFE
 22761                           tosl	equ	0xFFD
 22762                           pclatu	equ	0xFFB
 22763                           pclath	equ	0xFFA
 22764                           tblptru	equ	0xFF8
 22765                           tblptrh	equ	0xFF7
 22766                           tblptrl	equ	0xFF6
 22767                           tablat	equ	0xFF5
 22768                           prodh	equ	0xFF4
 22769                           prodl	equ	0xFF3
 22770                           intcon	equ	0xFF2
 22771                           postinc0	equ	0xFEE
 22772                           fsr0h	equ	0xFEA
 22773                           fsr0l	equ	0xFE9
 22774                           wreg	equ	0xFE8
 22775                           indf1	equ	0xFE7
 22776                           postinc1	equ	0xFE6
 22777                           postdec1	equ	0xFE5
 22778                           plusw1	equ	0xFE3
 22779                           fsr1h	equ	0xFE2
 22780                           fsr1l	equ	0xFE1
 22781                           indf2	equ	0xFDF
 22782                           postinc2	equ	0xFDE
 22783                           postdec2	equ	0xFDD
 22784                           plusw2	equ	0xFDB
 22785                           fsr2h	equ	0xFDA
 22786                           fsr2l	equ	0xFD9
 22787                           status	equ	0xFD8
 22788                           tosu	equ	0xFFF
 22789                           tosh	equ	0xFFE
 22790                           tosl	equ	0xFFD
 22791                           pclatu	equ	0xFFB
 22792                           pclath	equ	0xFFA
 22793                           tblptru	equ	0xFF8
 22794                           tblptrh	equ	0xFF7
 22795                           tblptrl	equ	0xFF6
 22796                           tablat	equ	0xFF5
 22797                           prodh	equ	0xFF4
 22798                           prodl	equ	0xFF3
 22799                           intcon	equ	0xFF2
 22800                           postinc0	equ	0xFEE
 22801                           fsr0h	equ	0xFEA
 22802                           fsr0l	equ	0xFE9
 22803                           wreg	equ	0xFE8
 22804                           indf1	equ	0xFE7
 22805                           postinc1	equ	0xFE6
 22806                           postdec1	equ	0xFE5
 22807                           plusw1	equ	0xFE3
 22808                           fsr1h	equ	0xFE2
 22809                           fsr1l	equ	0xFE1
 22810                           indf2	equ	0xFDF
 22811                           postinc2	equ	0xFDE
 22812                           postdec2	equ	0xFDD
 22813                           plusw2	equ	0xFDB
 22814                           fsr2h	equ	0xFDA
 22815                           fsr2l	equ	0xFD9
 22816                           status	equ	0xFD8
 22817                           
 22818                           	psect	text116
 22819  000000                     __ptext116:
 22820                           	opt stack 0
 22821                           tosu	equ	0xFFF
 22822                           tosh	equ	0xFFE
 22823                           tosl	equ	0xFFD
 22824                           pclatu	equ	0xFFB
 22825                           pclath	equ	0xFFA
 22826                           tblptru	equ	0xFF8
 22827                           tblptrh	equ	0xFF7
 22828                           tblptrl	equ	0xFF6
 22829                           tablat	equ	0xFF5
 22830                           prodh	equ	0xFF4
 22831                           prodl	equ	0xFF3
 22832                           intcon	equ	0xFF2
 22833                           postinc0	equ	0xFEE
 22834                           fsr0h	equ	0xFEA
 22835                           fsr0l	equ	0xFE9
 22836                           wreg	equ	0xFE8
 22837                           indf1	equ	0xFE7
 22838                           postinc1	equ	0xFE6
 22839                           postdec1	equ	0xFE5
 22840                           plusw1	equ	0xFE3
 22841                           fsr1h	equ	0xFE2
 22842                           fsr1l	equ	0xFE1
 22843                           indf2	equ	0xFDF
 22844                           postinc2	equ	0xFDE
 22845                           postdec2	equ	0xFDD
 22846                           plusw2	equ	0xFDB
 22847                           fsr2h	equ	0xFDA
 22848                           fsr2l	equ	0xFD9
 22849                           status	equ	0xFD8
 22850                           
 22851                           	psect	rparam
 22852  0000                     tosu	equ	0xFFF
 22853                           tosh	equ	0xFFE
 22854                           tosl	equ	0xFFD
 22855                           pclatu	equ	0xFFB
 22856                           pclath	equ	0xFFA
 22857                           tblptru	equ	0xFF8
 22858                           tblptrh	equ	0xFF7
 22859                           tblptrl	equ	0xFF6
 22860                           tablat	equ	0xFF5
 22861                           prodh	equ	0xFF4
 22862                           prodl	equ	0xFF3
 22863                           intcon	equ	0xFF2
 22864                           postinc0	equ	0xFEE
 22865                           fsr0h	equ	0xFEA
 22866                           fsr0l	equ	0xFE9
 22867                           wreg	equ	0xFE8
 22868                           indf1	equ	0xFE7
 22869                           postinc1	equ	0xFE6
 22870                           postdec1	equ	0xFE5
 22871                           plusw1	equ	0xFE3
 22872                           fsr1h	equ	0xFE2
 22873                           fsr1l	equ	0xFE1
 22874                           indf2	equ	0xFDF
 22875                           postinc2	equ	0xFDE
 22876                           postdec2	equ	0xFDD
 22877                           plusw2	equ	0xFDB
 22878                           fsr2h	equ	0xFDA
 22879                           fsr2l	equ	0xFD9
 22880                           status	equ	0xFD8
 22881                           
 22882                           	psect	temp
 22883  000047                     btemp:
 22884                           	opt stack 0
 22885  000047                     	ds	1
 22886  0000                     int$flags	set	btemp
 22887  0000                     wtemp6	set	btemp+1
 22888                           tosu	equ	0xFFF
 22889                           tosh	equ	0xFFE
 22890                           tosl	equ	0xFFD
 22891                           pclatu	equ	0xFFB
 22892                           pclath	equ	0xFFA
 22893                           tblptru	equ	0xFF8
 22894                           tblptrh	equ	0xFF7
 22895                           tblptrl	equ	0xFF6
 22896                           tablat	equ	0xFF5
 22897                           prodh	equ	0xFF4
 22898                           prodl	equ	0xFF3
 22899                           intcon	equ	0xFF2
 22900                           postinc0	equ	0xFEE
 22901                           fsr0h	equ	0xFEA
 22902                           fsr0l	equ	0xFE9
 22903                           wreg	equ	0xFE8
 22904                           indf1	equ	0xFE7
 22905                           postinc1	equ	0xFE6
 22906                           postdec1	equ	0xFE5
 22907                           plusw1	equ	0xFE3
 22908                           fsr1h	equ	0xFE2
 22909                           fsr1l	equ	0xFE1
 22910                           indf2	equ	0xFDF
 22911                           postinc2	equ	0xFDE
 22912                           postdec2	equ	0xFDD
 22913                           plusw2	equ	0xFDB
 22914                           fsr2h	equ	0xFDA
 22915                           fsr2l	equ	0xFD9
 22916                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         471
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      70
    BANK0           160    121     121
    BANK1           256    248     248
    BANK2           256    219     256
    BANK3           256    213     255
    BANK4           256    213     255
    BANK5           256    213     253
    BANK6           256    213     247
    BANK7           256    213     213
    BANK8           256    213     213
    BANK9           256    213     213
    BANK10          256     71      71
    BANK11          256      0     253
    BANK12          256    256     256
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    streamI2C@trBlock.pbuffer	PTR unsigned char  size(2) Largest target is 0
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    i2c1_tr_queue.pTrFlag	PTR enum E11632 size(2) Largest target is 0
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    run_I2C$3586	PTR PTR struct TxRxPacket size(2) Largest target is 4
		 -> run_I2C@stream(BANK2[4]), 

    ASLB_debug2@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_cnfg1@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_cnfg0@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_ADC@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_CommonGate@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_CFCVVaricap@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_RDResistor@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_PierceOscillator@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_ColpittsOscillator@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_VaricapBiasSteering@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_ExternalReferenceVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_OscillatorRegulatorVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_MuxOpenCircuit@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_ZTCReferenceCurrent@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_DigitalRegulatorVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_CurrentLimitDACVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_TempSetDACVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_VaricapDACVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_DACReferenceVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_MuxReadingVDD@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_InternalTempSensor@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_HeaterFBSignals@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_ADCReferenceVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_CTHERM@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_AnalogMuxReadingSetup@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_HeaterFunctionality@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_ContinuityESD@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    write_ASLBoron_cstm_cnfg@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    write_ASLBoron_cstm_cnfg@cnfg_arr	PTR unsigned char  size(2) Largest target is 256
		 -> run_ASLBoron@cnfg_arr(BANK12[256]), 

    streamSW@pktArr	PTR PTR struct TxRxPacket size(2) Largest target is 48
		 -> checkAndSendLatchData@stream(BANK0[48]), ASLB_debug1@stream(BANK0[8]), ASLB_AnalogMuxReadingSetup@stream(BANK2[4]), ASLB_HeaterFunctionality@stream(BANK2[4]), 

    memcpy@d1	PTR void  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    memcpy@s1	PTR const void  size(2) Largest target is 71
		 -> ramReadbackPkt.data(COMRAM[64]), cmdReadbackPkt.data(COMRAM[64]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 71
		 -> ramReadbackPkt.data(COMRAM[64]), cmdReadbackPkt.data(COMRAM[64]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    I2C1_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), hx_mainData(BANK11[61]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    I2C1_MasterReadTRBBuild@ptrb	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E11632 size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E11632 size(2) Largest target is 1
		 -> streamI2C@status(BANK1[1]), readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), 

    I2C1_MasterRead@pflag	PTR enum E11632 size(2) Largest target is 1
		 -> readI2C@status(BANK0[1]), 

    I2C1_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    F11745.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    I2C1_MasterWrite@pflag	PTR enum E11632 size(2) Largest target is 1
		 -> writeI2C@status(BANK0[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(2) Largest target is 10
		 -> ASLB_debug2@zeros(BANK0[10]), 

    F11740.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 71
		 -> NULL(NULL[0]), run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), 
		 -> checkAndSendLatchData@clock_select_pkt(BANK10[71]), checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), 
		 -> checkAndSendLatchData@adc_mux_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), 
		 -> checkAndSendLatchData@cmos_pkt(BANK4[71]), checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), 
		 -> checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), 
		 -> checkAndSendLatchData@oven_pkt(BANK3[71]), checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), 
		 -> checkAndSendLatchData@osc2_pkt(BANK2[71]), checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@osc0_pkt(BANK1[71]), findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), 
		 -> ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 
		 -> streamI2C@status(BANK1[1]), readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), NULL(NULL[0]), streamI2C@trBlock(BANK1[160]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E11632 size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    S423$pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    p_i2c1_current.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    S2017$pTrFlag	PTR enum E11632 size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    p_i2c1_current.pTrFlag	PTR enum E11632 size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    S2017$ptrb_list	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK3[5]), NULL(NULL[0]), 

    S2028$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK3[5]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK3[5]), 

    S2028$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK3[5]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK3[5]), 

    run_I2C@hx_inData	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    run_I2C@stream.status	PTR enum E11632 size(2) Largest target is 0

    run_I2C@stream	PTR struct TxRxPacket[2] size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    rxPkt.status	PTR enum E11632 size(2) Largest target is 0

    txPkt.status	PTR enum E11632 size(2) Largest target is 0

    filterLatchPacketResponses@rx_index	PTR unsigned char  size(2) Largest target is 1
		 -> ASLB_SheetResistance@rx_index(BANK0[1]), 

    filterLatchPacketResponses@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    filterLatchPacketResponses@readbackPkts.status	PTR enum E11632 size(2) Largest target is 0

    filterLatchPacketResponses@readbackPkts	PTR PTR struct TxRxPacket size(2) Largest target is 24
		 -> checkAndSendLatchData@readbackPkts(BANK0[24]), 

    checkAndSendLatchData@rx_index	PTR unsigned char  size(2) Largest target is 1
		 -> ASLB_SheetResistance@rx_index(BANK0[1]), 

    checkAndSendLatchData@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    readback_clock_select_pkt.status	PTR enum E11632 size(2) Largest target is 0

    clock_select_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_ocxo_divisor_pkt.status	PTR enum E11632 size(2) Largest target is 0

    ocxo_divisor_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_adc_mux_pkt.status	PTR enum E11632 size(2) Largest target is 0

    adc_mux_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_adc_pkt.status	PTR enum E11632 size(2) Largest target is 0

    adc_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_cmos_pkt.status	PTR enum E11632 size(2) Largest target is 0

    cmos_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_bias_pkt.status	PTR enum E11632 size(2) Largest target is 0

    bias_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_varactor_dac_pkt.status	PTR enum E11632 size(2) Largest target is 0

    varactor_dac_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_heat_dac_pkt.status	PTR enum E11632 size(2) Largest target is 0

    heat_dac_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_oven_pkt.status	PTR enum E11632 size(2) Largest target is 0

    oven_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_analog_pkt.status	PTR enum E11632 size(2) Largest target is 0

    analog_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_osc2_pkt.status	PTR enum E11632 size(2) Largest target is 0

    osc2_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_osc1_pkt.status	PTR enum E11632 size(2) Largest target is 0

    osc1_pkt.status	PTR enum E11632 size(2) Largest target is 0

    checkAndSendLatchData@readbackPkts.status	PTR enum E11632 size(2) Largest target is 0

    checkAndSendLatchData@readbackPkts	PTR struct TxRxPacket[12] size(2) Largest target is 71
		 -> checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@readback_adc_pkt(BANK8[71]), 
		 -> checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), 
		 -> checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), 
		 -> checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), 

    readback_osc0_pkt.status	PTR enum E11632 size(2) Largest target is 0

    checkAndSendLatchData@stream.status	PTR enum E11632 size(2) Largest target is 0

    checkAndSendLatchData@stream	PTR struct TxRxPacket[24] size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    osc0_pkt.status	PTR enum E11632 size(2) Largest target is 0

    setupLrgWrPkt@pkt.status	PTR enum E11632 size(2) Largest target is 0

    setupCmdReadbackPkt@pkt.status	PTR enum E11632 size(2) Largest target is 0

    setupCmdReadbackPkt@pkt	PTR struct TxRxPacket size(2) Largest target is 71
		 -> checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@readback_adc_pkt(BANK8[71]), 
		 -> checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), 
		 -> checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), 
		 -> checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), ASLB_VaricapBiasSteering@cmdReadbackPkt(BANK0[71]), ASLB_ExternalReferenceVoltage@cmdReadbackPkt(BANK0[71]), ASLB_OscillatorRegulatorVoltage@cmdReadbackPkt(BANK0[71]), 
		 -> ASLB_MuxOpenCircuit@cmdReadbackPkt(BANK0[71]), ASLB_ZTCReferenceCurrent@cmdReadbackPkt(BANK0[71]), ASLB_DigitalRegulatorVoltage@cmdReadbackPkt(BANK0[71]), ASLB_CurrentLimitDACVoltage@cmdReadbackPkt(BANK0[71]), 
		 -> ASLB_TempSetDACVoltage@cmdReadbackPkt(BANK0[71]), ASLB_VaricapDACVoltage@cmdReadbackPkt(BANK0[71]), ASLB_DACReferenceVoltage@cmdReadbackPkt(BANK0[71]), ASLB_MuxReadingVDD@cmdReadbackPkt(BANK0[71]), 
		 -> ASLB_InternalTempSensor@cmdReadbackPkt(BANK0[71]), ASLB_HeaterFBSignals@cmdReadbackPkt(BANK0[71]), ASLB_ADCReferenceVoltage@cmdReadbackPkt(BANK0[71]), ASLB_CTHERM@cmdReadbackPkt(BANK0[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    setupLatchPkt@pkt.status	PTR enum E11632 size(2) Largest target is 0

    setupLatchPkt@pkt	PTR struct TxRxPacket size(2) Largest target is 71
		 -> checkAndSendLatchData@clock_select_pkt(BANK10[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@cmos_pkt(BANK4[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@oven_pkt(BANK3[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@osc0_pkt(BANK1[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@heatDacWrPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), 

    findMaxI2CSpeed@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    findMaxI2CSpeed@stream.status	PTR enum E11632 size(2) Largest target is 0

    findMaxI2CSpeed@stream	PTR struct TxRxPacket[2] size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    ramWrPkt.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_debug3@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    sp__memcpy	PTR void  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_debug1@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_debug1@stream.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_debug1@stream	PTR struct TxRxPacket[4] size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    ramWrPkt.status	PTR enum E11632 size(2) Largest target is 0

    ramReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    ramRdPkt.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_debug0@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_AnalogMuxReadingSetup@stream.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_AnalogMuxReadingSetup@stream	PTR struct TxRxPacket[2] size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    ovenWrPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_HeaterFunctionality@stream.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_HeaterFunctionality@stream	PTR struct TxRxPacket[2] size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    heatDacWrPkt.status	PTR enum E11632 size(2) Largest target is 0

    ovenWrPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_SheetResistance@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    write_ASLBoron_debug@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    write_ASLBoron_cnfg@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    write_ASLBoron_test@run_rpt	PTR unsigned char  size(2) Largest target is 2
		 -> run_ASLBoron@rpt_run(BANK1[2]), 

    write_ASLBoron_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    run_ASLBoron@hx_inData	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxOddParityCalc@buff	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonCheckBusy_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    hxSPPCarbonCheckBusy_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonProgram_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    hxSPPCarbonProgram_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonWriteReg_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonReadReg_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    hxSPPCarbonReadReg_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonRead_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    hxSPPCarbonRead_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonWrite_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    hxSPPCarbonWrite_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonWriteAndVerity_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    hxSPPCarbonWriteAndVerity_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    run_SPPCarbon_test@hx_inData	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    calcChecksum@data	PTR unsigned char  size(2) Largest target is 71
		 -> checkAndSendLatchData@clock_select_pkt(BANK10[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@cmos_pkt(BANK4[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@oven_pkt(BANK3[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@osc0_pkt(BANK1[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@ramWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@heatDacWrPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), hx_inData(BANK11[64]), 

    S405TxRxPacket$status	PTR enum E11632 size(2) Largest target is 0

    streamI2C@pktArr.status	PTR enum E11632 size(2) Largest target is 0

    streamI2C@pktArr	PTR PTR struct TxRxPacket size(2) Largest target is 48
		 -> run_I2C@stream(BANK2[4]), checkAndSendLatchData@stream(BANK0[48]), findMaxI2CSpeed@stream(BANK2[4]), ASLB_debug1@stream(BANK0[8]), 
		 -> ASLB_AnalogMuxReadingSetup@stream(BANK2[4]), ASLB_HeaterFunctionality@stream(BANK2[4]), 

    streamBoronComm@pktArr	PTR PTR struct TxRxPacket size(2) Largest target is 48
		 -> checkAndSendLatchData@stream(BANK0[48]), ASLB_debug1@stream(BANK0[8]), ASLB_AnalogMuxReadingSetup@stream(BANK2[4]), ASLB_HeaterFunctionality@stream(BANK2[4]), 

    readI2C@rxData	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    writeI2C@txData	PTR unsigned char  size(2) Largest target is 10
		 -> ASLB_debug2@zeros(BANK0[10]), 

    hxClearArray@arr	PTR unsigned char  size(2) Largest target is 64
		 -> hx_outData(BANK11[64]), hx_mainData(BANK11[61]), hx_inData(BANK11[64]), 

    hxCalcChecksum@data	PTR unsigned char  size(2) Largest target is 64
		 -> hx_outData(BANK11[64]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_DefaultInterruptHandler->_hxHandleTmr0
    _hxHandleTmr0->_hxSetupPacket1
    _I2C1_ISR->_I2C1_Stop
    _EUSART1_Receive_ISR->_hxISRHandle
    _hxISRHandle->_hxCmdFilter
    i2_hxStopTimer->i2_TMR0_Write16bitTimer
    _hxCmdFilter->_hxSetupPacket1
    _hxCmdFilter->_hxSetupPacket2
    i2_hxFlushMainDataBuffer->i2_hxClearArray
    i2_hxFlushInputBuffer->i2_hxClearArray
    _hxStartTimer->i2_TMR0_Write16bitTimer
    _hxSetupPacket2->_hxCalcChecksum
    _hxSetupPacket1->_hxCalcChecksum
    i2_hxFlushOutputBuffer->i2_hxClearArray

Critical Paths under _main in BANK0

    _main->_run_ASLBoron
    _run_SPPCarbon_test->_hxSPPCarbonWriteAndVerity_test
    _hxSPPCarbonWrite_test->_hxSPPCarbonWriteReg_test
    _hxSPPCarbonWriteAndVerity_test->_hxSPPCarbonReadReg_test
    _hxSPPCarbonWriteReg_test->_hxOddParityCalc
    _hxSPPCarbonRead_test->_hxSPPCarbonReadReg_test
    _hxSPPCarbonReadReg_test->_hxOddParityCalc
    _hxSPPCarbonProgram_test->_hxOddParityCalc
    _hxSPPCarbonCheckBusy_test->_hxOddParityCalc
    _run_I2C->_readI2C
    _run_I2C->_writeI2C
    _readI2C->_I2C1_MasterRead
    _I2C1_MasterRead->_I2C1_MasterReadTRBBuild
    _run_ASLBoron->_write_ASLBoron_test
    _write_ASLBoron_test->_ASLB_SheetResistance
    _ASLB_ZTCReferenceCurrent->_setupCmdReadbackPkt
    _ASLB_VaricapDACVoltage->_setupCmdReadbackPkt
    _ASLB_VaricapBiasSteering->_setupCmdReadbackPkt
    _ASLB_TempSetDACVoltage->_setTempCtrlDAC
    _ASLB_TempSetDACVoltage->_setupCmdReadbackPkt
    _ASLB_SheetResistance->_checkAndSendLatchData
    _checkAndSendLatchData->_streamBoronComm
    _ASLB_OscillatorRegulatorVoltage->_setupCmdReadbackPkt
    _ASLB_MuxReadingVDD->_setupCmdReadbackPkt
    _ASLB_MuxOpenCircuit->_setupCmdReadbackPkt
    _ASLB_InternalTempSensor->_setupCmdReadbackPkt
    _ASLB_HeaterFunctionality->_streamBoronComm
    _ASLB_HeaterFBSignals->_setupCmdReadbackPkt
    _ASLB_ExternalReferenceVoltage->_setupCmdReadbackPkt
    _ASLB_DigitalRegulatorVoltage->_setupCmdReadbackPkt
    _ASLB_DACReferenceVoltage->_setupCmdReadbackPkt
    _ASLB_CurrentLimitDACVoltage->_setCurrLimitDAC
    _ASLB_CTHERM->_setupCmdReadbackPkt
    _ASLB_AnalogMuxReadingSetup->_streamBoronComm
    _setupLatchPkt->_calcChecksum
    _ASLB_ADCReferenceVoltage->_setupCmdReadbackPkt
    _write_ASLBoron_debug->_ASLB_debug1
    _findMaxI2CSpeed->_calcBaudRate
    _calcBaudRate->___aldiv
    _ASLB_debug3->_adjustI2CBaudRate
    _ASLB_debug2->_writeI2C
    _writeI2C->_I2C1_MasterWrite
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    _ASLB_debug1->_streamBoronComm
    _streamBoronComm->_streamI2C
    _streamI2C->_I2C1_MasterReadTRBBuild
    _streamI2C->_I2C1_MasterWriteTRBBuild
    _write_ASLBoron_cnfg->_ASLB_cnfg0
    _write_ASLBoron_cnfg->_ASLB_cnfg1
    _hxStopTimer->_TMR0_Write16bitTimer
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _hxFlushOutputBuffer->_hxClearArray
    _hxFlushMainDataBuffer->_hxClearArray
    _hxFlushInputBuffer->_hxClearArray

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_run_ASLBoron
    _run_I2C->_streamI2C
    _ASLB_SheetResistance->_checkAndSendLatchData
    _write_ASLBoron_debug->_ASLB_debug1
    _findMaxI2CSpeed->_streamI2C
    _streamBoronComm->_streamI2C

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _write_ASLBoron_test->_ASLB_HeaterFunctionality
    _ASLB_SheetResistance->_checkAndSendLatchData
    _write_ASLBoron_debug->_findMaxI2CSpeed

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    _main->_run_ASLBoron

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  165173
                      _HX_Initialize
                  _SYSTEM_Initialize
                     _hxHandleTxUART
                       _run_ASLBoron
                            _run_I2C
                 _run_SPPCarbon_test
 ---------------------------------------------------------------------------------
 (1) _run_SPPCarbon_test                                   7     4      3   20095
                                             36 BANK0      7     4      3
          _hxSPPCarbonCheckBusy_test
            _hxSPPCarbonProgram_test
               _hxSPPCarbonRead_test
     _hxSPPCarbonWriteAndVerity_test
           _hxSPPCarbonWriteReg_test
              _hxSPPCarbonWrite_test
 ---------------------------------------------------------------------------------
 (2) _hxSPPCarbonWrite_test                                6     2      4    2203
                                             16 BANK0      6     2      4
           _hxSPPCarbonWriteReg_test
 ---------------------------------------------------------------------------------
 (2) _hxSPPCarbonWriteAndVerity_test                      10     6      4    5808
                                             26 BANK0     10     6      4
            _hxSPPCarbonReadReg_test
           _hxSPPCarbonWriteReg_test
 ---------------------------------------------------------------------------------
 (3) _hxSPPCarbonWriteReg_test                             9     7      2    1896
                                              7 BANK0      9     7      2
                    _hxOddParityCalc
 ---------------------------------------------------------------------------------
 (2) _hxSPPCarbonRead_test                                 7     2      5    4031
                                             26 BANK0      7     2      5
            _hxSPPCarbonReadReg_test
 ---------------------------------------------------------------------------------
 (3) _hxSPPCarbonReadReg_test                             19    14      5    2762
                                              7 BANK0     19    14      5
                    _hxOddParityCalc
 ---------------------------------------------------------------------------------
 (2) _hxSPPCarbonProgram_test                             10     6      4    1803
                                              7 BANK0     10     6      4
                    _hxOddParityCalc
 ---------------------------------------------------------------------------------
 (2) _hxSPPCarbonCheckBusy_test                           20    15      5    2666
                                              7 BANK0     20    15      5
                    _hxOddParityCalc
 ---------------------------------------------------------------------------------
 (4) _hxOddParityCalc                                      7     4      3    1060
                                              0 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (1) _run_I2C                                            165   162      3   14294
                                             24 BANK0      4     1      3
                                              0 BANK2    161   161      0
                       _calcChecksum
                            _readI2C
                          _streamI2C
                           _writeI2C
 ---------------------------------------------------------------------------------
 (2) _readI2C                                              8     3      5    2741
                                             16 BANK0      8     3      5
                    _I2C1_MasterRead
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterRead                                      7     0      7    2178
                                              9 BANK0      7     0      7
            _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (1) _run_ASLBoron                                       277   274      3  127612
                                            115 BANK0      6     3      3
                                            233 BANK1     15    15      0
                                              0 BANK12   256   256      0
                       _calcChecksum
                _write_ASLBoron_cnfg
           _write_ASLBoron_cstm_cnfg
               _write_ASLBoron_debug
                _write_ASLBoron_test
 ---------------------------------------------------------------------------------
 (2) _write_ASLBoron_test                                 12     8      4  100738
                                            103 BANK0     12     8      4
                           _ASLB_ADC
           _ASLB_ADCReferenceVoltage
         _ASLB_AnalogMuxReadingSetup
                   _ASLB_CFCVVaricap
                        _ASLB_CTHERM
            _ASLB_ColpittsOscillator
                    _ASLB_CommonGate
                 _ASLB_ContinuityESD
        _ASLB_CurrentLimitDACVoltage
           _ASLB_DACReferenceVoltage
       _ASLB_DigitalRegulatorVoltage
      _ASLB_ExternalReferenceVoltage
               _ASLB_HeaterFBSignals
           _ASLB_HeaterFunctionality
            _ASLB_InternalTempSensor
                _ASLB_MuxOpenCircuit
                 _ASLB_MuxReadingVDD
    _ASLB_OscillatorRegulatorVoltage
              _ASLB_PierceOscillator
                    _ASLB_RDResistor
               _ASLB_SheetResistance
             _ASLB_TempSetDACVoltage
           _ASLB_VaricapBiasSteering
             _ASLB_VaricapDACVoltage
           _ASLB_ZTCReferenceCurrent
 ---------------------------------------------------------------------------------
 (3) _ASLB_ZTCReferenceCurrent                            74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_VaricapDACVoltage                              74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_VaricapBiasSteering                            74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_TempSetDACVoltage                              76    74      2    3186
                                              2 BANK0     76    74      2
                     _setTempCtrlDAC
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (4) _setTempCtrlDAC                                       2     0      2     152
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_SheetResistance                                 3     1      2   23367
                                            100 BANK0      3     1      2
              _checkAndSendLatchData
 ---------------------------------------------------------------------------------
 (4) _checkAndSendLatchData                             1928  1924      4   23166
                                             18 BANK0     82    78      4
                                            162 BANK1     71    71      0
                                              0 BANK2    213   213      0
                                              0 BANK3    213   213      0
                                              0 BANK4    213   213      0
                                              0 BANK5    213   213      0
                                              0 BANK6    213   213      0
                                              0 BANK7    213   213      0
                                              0 BANK8    213   213      0
                                              0 BANK9    213   213      0
                                              0 BANK10    71    71      0
         _filterLatchPacketResponses
                _setupCmdReadbackPkt
                      _setupLatchPkt
                    _streamBoronComm
 ---------------------------------------------------------------------------------
 (5) _filterLatchPacketResponses                          13     6      7    1125
                                              0 BANK0     13     6      7
 ---------------------------------------------------------------------------------
 (3) _ASLB_RDResistor                                      3     1      2      93
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_PierceOscillator                                3     1      2      93
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_OscillatorRegulatorVoltage                     74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_MuxReadingVDD                                  74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_MuxOpenCircuit                                 74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_InternalTempSensor                             74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_HeaterFunctionality                           231   229      2   15161
                                             18 BANK0      2     0      2
                                              0 BANK2    219   219      0
                _setupCmdReadbackPkt
                      _setupLatchPkt
                    _streamBoronComm
 ---------------------------------------------------------------------------------
 (3) _ASLB_HeaterFBSignals                                74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_ExternalReferenceVoltage                       74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_DigitalRegulatorVoltage                        74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_DACReferenceVoltage                            74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_CurrentLimitDACVoltage                         76    74      2    3217
                                              8 BANK0     76    74      2
                    _setCurrLimitDAC
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (4) _setCurrLimitDAC                                      8     6      2     183
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_ContinuityESD                                   2     0      2      90
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_CommonGate                                      3     1      2      93
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_ColpittsOscillator                              3     1      2      93
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_CTHERM                                         74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_CFCVVaricap                                     3     1      2      93
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_AnalogMuxReadingSetup                         150   148      2   15076
                                             18 BANK0      2     0      2
                                              0 BANK2    148   148      0
                _setupCmdReadbackPkt
                      _setupLatchPkt
                    _streamBoronComm
 ---------------------------------------------------------------------------------
 (5) _setupLatchPkt                                        7     2      5    6364
                                              5 BANK0      7     2      5
                       _calcChecksum
 ---------------------------------------------------------------------------------
 (3) _ASLB_ADCReferenceVoltage                            74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (4) _setupCmdReadbackPkt                                  2     0      2    2793
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_ADC                                             3     1      2      93
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _write_ASLBoron_debug                                 4     1      3   22799
                                            104 BANK0      4     1      3
                        _ASLB_debug0
                        _ASLB_debug1
                        _ASLB_debug2
                        _ASLB_debug3
                    _cycleBoronPower
                    _findMaxI2CSpeed
                     _resetLATCHData
                       _resetSFRData
                         _setCommI2C
                  _setCommSingleWire
 ---------------------------------------------------------------------------------
 (3) _setCommSingleWire                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _setCommI2C                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetSFRData                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetLATCHData                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _findMaxI2CSpeed                                    155   153      2    8409
                                             21 BANK0      2     0      2
                                              0 BANK2    153   153      0
                  _adjustI2CBaudRate
                       _calcBaudRate
                       _calcChecksum
                          _streamI2C
 ---------------------------------------------------------------------------------
 (4) _calcBaudRate                                         7     5      2     690
                                             14 BANK0      7     5      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             14     6      8     625
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) _cycleBoronPower                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ASLB_debug3                                          4     2      2     539
                                              1 BANK0      4     2      2
                  _adjustI2CBaudRate
 ---------------------------------------------------------------------------------
 (4) _adjustI2CBaudRate                                    1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ASLB_debug2                                         15    13      2    3137
                                             24 BANK0     14    12      2
                           _writeI2C
 ---------------------------------------------------------------------------------
 (2) _writeI2C                                             8     3      5    2986
                                             16 BANK0      8     3      5
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterWrite                                     7     0      7    2147
                                              9 BANK0      7     0      7
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (3) _ASLB_debug1                                        299   297      2    9818
                                             18 BANK0     86    84      2
                                            162 BANK1     71    71      0
                                              0 BANK2    142   142      0
                       _calcChecksum
                             _memcpy
                    _streamBoronComm
 ---------------------------------------------------------------------------------
 (5) _streamBoronComm                                      4     1      3    5460
                                             14 BANK0      4     1      3
                          _streamI2C
                           _streamSW
 ---------------------------------------------------------------------------------
 (6) _streamSW                                             3     0      3     180
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _streamI2C                                          167   164      3    4405
                                              9 BANK0      5     2      3
                                              0 BANK1    162   162      0
            _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterWriteTRBBuild                             9     2      7     906
                                              0 BANK0      9     2      7
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterTRBInsert                                 6     2      4     726
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterReadTRBBuild                              9     2      7     937
                                              0 BANK0      9     2      7
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              11     5      6     748
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _calcChecksum                                         5     2      3    1641
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _ASLB_debug0                                          3     1      2     189
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _write_ASLBoron_cstm_cnfg                             6     0      6     270
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _write_ASLBoron_cnfg                                  3     1      2     456
                                              2 BANK0      3     1      2
                         _ASLB_cnfg0
                         _ASLB_cnfg1
 ---------------------------------------------------------------------------------
 (3) _ASLB_cnfg1                                           2     0      2      90
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_cnfg0                                           2     0      2      90
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _hxHandleTxUART                                       5     5      0    1007
                                              4 BANK0      5     5      0
                      _EUSART1_Write
                _hxFlushOutputBuffer
                        _hxStopTimer
 ---------------------------------------------------------------------------------
 (2) _hxStopTimer                                          0     0      0     207
                     _TMR0_StopTimer
               _TMR0_Write16bitTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_Write16bitTimer                                 2     0      2     207
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Write                                        1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     155
                 _EUSART1_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     121
                                              3 BANK0      2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HX_Initialize                                        0     0      0    2010
                 _hxFlushInputBuffer
              _hxFlushMainDataBuffer
                _hxFlushOutputBuffer
 ---------------------------------------------------------------------------------
 (2) _hxFlushOutputBuffer                                  0     0      0     670
                       _hxClearArray
 ---------------------------------------------------------------------------------
 (2) _hxFlushMainDataBuffer                                0     0      0     670
                       _hxClearArray
 ---------------------------------------------------------------------------------
 (2) _hxFlushInputBuffer                                   0     0      0     670
                       _hxClearArray
 ---------------------------------------------------------------------------------
 (3) _hxClearArray                                         4     1      3     670
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0    6032
                                             17 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
               _I2C1_BusCollisionISR
                           _I2C1_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0    2007
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR0_DefaultInterruptHandler                        0     0      0    2007
                       _hxHandleTmr0
 ---------------------------------------------------------------------------------
 (11) _hxHandleTmr0                                        2     2      0    2007
                                              8 COMRAM     2     2      0
                     _hxSetupPacket1
               i2_hxFlushInputBuffer
              i2_hxFlushOutputBuffer
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_ISR                                             2     2      0      31
                                              3 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (10) _I2C1_Stop                                           3     3      0      31
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) _I2C1_FunctionComplete                               0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0    3994
                        _hxISRHandle
 ---------------------------------------------------------------------------------
 (10) _hxISRHandle                                         8     8      0    3994
                                              9 COMRAM     8     8      0
                        _hxCmdFilter
                       _hxStartTimer
               i2_hxFlushInputBuffer
                      i2_hxStopTimer
 ---------------------------------------------------------------------------------
 (11) i2_hxStopTimer                                       0     0      0      96
                   i2_TMR0_StopTimer
             i2_TMR0_Write16bitTimer
 ---------------------------------------------------------------------------------
 (12) i2_TMR0_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _hxCmdFilter                                         1     1      0    3130
                                              8 COMRAM     1     1      0
                     _hxSetupPacket1
                     _hxSetupPacket2
                       _hxStartTimer
               i2_hxFlushInputBuffer
            i2_hxFlushMainDataBuffer
              i2_hxFlushOutputBuffer
 ---------------------------------------------------------------------------------
 (12) i2_hxFlushMainDataBuffer                             0     0      0     246
                     i2_hxClearArray
 ---------------------------------------------------------------------------------
 (12) i2_hxFlushInputBuffer                                0     0      0     246
                     i2_hxClearArray
 ---------------------------------------------------------------------------------
 (11) _hxStartTimer                                        2     0      2     346
                                              2 COMRAM     2     0      2
                    _TMR0_StartTimer
             i2_TMR0_Write16bitTimer
 ---------------------------------------------------------------------------------
 (12) i2_TMR0_Write16bitTimer                              2     0      2      96
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (12) _TMR0_StartTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _hxSetupPacket2                                      3     3      0     509
                                              5 COMRAM     3     3      0
                     _hxCalcChecksum
 ---------------------------------------------------------------------------------
 (12) _hxSetupPacket1                                      3     2      1    1491
                                              5 COMRAM     3     2      1
                     _hxCalcChecksum
              i2_hxFlushOutputBuffer
 ---------------------------------------------------------------------------------
 (12) i2_hxFlushOutputBuffer                               0     0      0     246
                     i2_hxClearArray
 ---------------------------------------------------------------------------------
 (13) i2_hxClearArray                                      4     1      3     246
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (13) _hxCalcChecksum                                      5     2      3     441
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _HX_Initialize
     _hxFlushInputBuffer
       _hxClearArray
     _hxFlushMainDataBuffer
       _hxClearArray
     _hxFlushOutputBuffer
       _hxClearArray
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _hxHandleTxUART
     _EUSART1_Write
     _hxFlushOutputBuffer
       _hxClearArray
     _hxStopTimer
       _TMR0_StopTimer
       _TMR0_Write16bitTimer
   _run_ASLBoron
     _calcChecksum
     _write_ASLBoron_cnfg
       _ASLB_cnfg0
       _ASLB_cnfg1
     _write_ASLBoron_cstm_cnfg
     _write_ASLBoron_debug
       _ASLB_debug0
       _ASLB_debug1
         _calcChecksum
         _memcpy
         _streamBoronComm
           _streamI2C
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
           _streamSW
       _ASLB_debug2
         _writeI2C
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
       _ASLB_debug3
         _adjustI2CBaudRate
       _cycleBoronPower
       _findMaxI2CSpeed
         _adjustI2CBaudRate
         _calcBaudRate
           ___aldiv
         _calcChecksum
         _streamI2C
           _I2C1_MasterReadTRBBuild
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
       _resetLATCHData
       _resetSFRData
       _setCommI2C
       _setCommSingleWire
     _write_ASLBoron_test
       _ASLB_ADC
       _ASLB_ADCReferenceVoltage
         _setupCmdReadbackPkt
       _ASLB_AnalogMuxReadingSetup
         _setupCmdReadbackPkt
         _setupLatchPkt
           _calcChecksum
         _streamBoronComm
           _streamI2C
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
           _streamSW
       _ASLB_CFCVVaricap
       _ASLB_CTHERM
         _setupCmdReadbackPkt
       _ASLB_ColpittsOscillator
       _ASLB_CommonGate
       _ASLB_ContinuityESD
       _ASLB_CurrentLimitDACVoltage
         _setCurrLimitDAC
         _setupCmdReadbackPkt
       _ASLB_DACReferenceVoltage
         _setupCmdReadbackPkt
       _ASLB_DigitalRegulatorVoltage
         _setupCmdReadbackPkt
       _ASLB_ExternalReferenceVoltage
         _setupCmdReadbackPkt
       _ASLB_HeaterFBSignals
         _setupCmdReadbackPkt
       _ASLB_HeaterFunctionality
         _setupCmdReadbackPkt
         _setupLatchPkt
           _calcChecksum
         _streamBoronComm
           _streamI2C
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
           _streamSW
       _ASLB_InternalTempSensor
         _setupCmdReadbackPkt
       _ASLB_MuxOpenCircuit
         _setupCmdReadbackPkt
       _ASLB_MuxReadingVDD
         _setupCmdReadbackPkt
       _ASLB_OscillatorRegulatorVoltage
         _setupCmdReadbackPkt
       _ASLB_PierceOscillator
       _ASLB_RDResistor
       _ASLB_SheetResistance
         _checkAndSendLatchData
           _filterLatchPacketResponses
           _setupCmdReadbackPkt
           _setupLatchPkt
             _calcChecksum
           _streamBoronComm
             _streamI2C
               _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
             _streamSW
       _ASLB_TempSetDACVoltage
         _setTempCtrlDAC
         _setupCmdReadbackPkt
       _ASLB_VaricapBiasSteering
         _setupCmdReadbackPkt
       _ASLB_VaricapDACVoltage
         _setupCmdReadbackPkt
       _ASLB_ZTCReferenceCurrent
         _setupCmdReadbackPkt
   _run_I2C
     _calcChecksum
     _readI2C
       _I2C1_MasterRead
         _I2C1_MasterReadTRBBuild
         _I2C1_MasterTRBInsert
     _streamI2C
       _I2C1_MasterReadTRBBuild
       _I2C1_MasterTRBInsert
       _I2C1_MasterWriteTRBBuild
     _writeI2C
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
   _run_SPPCarbon_test
     _hxSPPCarbonCheckBusy_test
       _hxOddParityCalc
     _hxSPPCarbonProgram_test
       _hxOddParityCalc
     _hxSPPCarbonRead_test
       _hxSPPCarbonReadReg_test
         _hxOddParityCalc
     _hxSPPCarbonWriteAndVerity_test
       _hxSPPCarbonReadReg_test
         _hxOddParityCalc
       _hxSPPCarbonWriteReg_test
         _hxOddParityCalc
     _hxSPPCarbonWriteReg_test
       _hxOddParityCalc
     _hxSPPCarbonWrite_test
       _hxSPPCarbonWriteReg_test
         _hxOddParityCalc

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _hxISRHandle
       _hxCmdFilter
         _hxSetupPacket1
           _hxCalcChecksum
           i2_hxFlushOutputBuffer
             i2_hxClearArray
         _hxSetupPacket2
           _hxCalcChecksum
         _hxStartTimer
           _TMR0_StartTimer
           i2_TMR0_Write16bitTimer
         i2_hxFlushInputBuffer
           i2_hxClearArray
         i2_hxFlushMainDataBuffer
           i2_hxClearArray
         i2_hxFlushOutputBuffer
           i2_hxClearArray
       _hxStartTimer
         _TMR0_StartTimer
         i2_TMR0_Write16bitTimer
       i2_hxFlushInputBuffer
         i2_hxClearArray
       i2_hxStopTimer
         i2_TMR0_StopTimer
         i2_TMR0_Write16bitTimer
   _EUSART1_Transmit_ISR
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
       _hxHandleTmr0
         _hxSetupPacket1
           _hxCalcChecksum
           i2_hxFlushOutputBuffer
             i2_hxClearArray
         i2_hxFlushInputBuffer
           i2_hxClearArray
         i2_hxFlushOutputBuffer
           i2_hxClearArray

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E87      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100    100     100      30      100.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0      FD      28       98.8%
BITBANK10          100      0       0      25        0.0%
BANK10             100     47      47      26       27.7%
BITBANK9           100      0       0      23        0.0%
BANK9              100     D5      D5      24       83.2%
BITBANK8           100      0       0      21        0.0%
BANK8              100     D5      D5      22       83.2%
BITBANK7           100      0       0      19        0.0%
BANK7              100     D5      D5      20       83.2%
BITBANK6           100      0       0      17        0.0%
BANK6              100     D5      F7      18       96.5%
BITBANK5           100      0       0      15        0.0%
BANK5              100     D5      FD      16       98.8%
BITBANK4           100      0       0      13        0.0%
BANK4              100     D5      FF      14       99.6%
BITBANK3           100      0       0      11        0.0%
BANK3              100     D5      FF      12       99.6%
BITBANK2           100      0       0       9        0.0%
BANK2              100     DB     100      10      100.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     F8      F8       8       96.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     79      79       5       75.6%
BITBANK14           88      0       0      33        0.0%
BANK14              88      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      46       1       74.5%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     B6C       6        0.0%
DATA                 0      0     B6C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue May 08 11:27:07 2018

                            hxCalcChecksum@size 0003                                 _BORON_COMM_TYPE 0030  
                      _eusart1TxBufferRemaining 03FE                                _SFR_ADC_DIV_DATA 02EE  
               __size_of_ASLB_TempSetDACVoltage 0064                         findMaxI2CSpeed@rxBuffer 0075  
         checkAndSendLatchData@clock_select_pkt 0A00                                     __CFG_CP$OFF 000000  
                 checkAndSendLatchData@cmos_pkt 0447          checkAndSendLatchData@readback_cmos_pkt 0847  
                           ?_run_SPPCarbon_test 0084                                ?_streamBoronComm 006E  
                     ASLB_debug1@ramReadbackPkt 01A2          hxSPPCarbonCheckBusy_test@readbackTimer 006F  
                 checkAndSendLatchData@osc0_pkt 01A2                   checkAndSendLatchData@osc1_pkt 0200  
        checkAndSendLatchData@readback_osc0_pkt 0500                   checkAndSendLatchData@osc2_pkt 0247  
        checkAndSendLatchData@readback_osc1_pkt 0600          checkAndSendLatchData@readback_osc2_pkt 0647  
                       __size_of_resetLATCHData 00DC                                ??i2_hxClearArray 0004  
                                   __CFG_LVP$ON 000000                                             l225 3E1E  
                       findMaxI2CSpeed@rx_index 0251                                             l226 3E08  
                                           l250 355E                                             l252 356C  
                                           l260 37E6                                             l253 3570  
                                           l246 352A                                             l280 1F2C  
                                           l248 354A                                             l600 2C7A  
                                           l265 3804                                             l601 2CA8  
                                           l258 37C4                                             l283 1F3E  
                                           l188 35A6                                             l700 110C  
                                           l620 19BC                                             l189 358E  
                                           l293 3CF0                                             l285 1F56  
                                           l277 1F30                                             l269 3CBC  
                                           l621 19EC                                             l613 1960  
                                           l605 3A86                                             l294 3CDA  
                                           l278 1DEA                                             l710 11C2  
                                           l702 1136                                             l630 1B6E  
                                           l279 1EA0                                             l631 1A8A  
                                           l623 1A16                                             l615 198A  
                                           l712 11D8                                             l704 114C  
                                           l632 1A9A                                             l289 1F62  
                                           l625 1A2C                                             l617 19A0  
                                           l609 3844                                             l722 12A4  
                                           l706 11F0                                             l650 1B46  
                                           l642 1B14                                             l723 12CA  
                                           l715 120A                                             l707 1168  
                                           l651 1B4C                                             l635 1AD8  
                                           l619 1A44                                             l571 16BE  
                                           l708 1198                                             l636 1AEE  
                                           l628 1A5E                                             l717 13A6  
                                           l733 1334                                             l661 25D4  
                                           l581 17EE                                             l573 16FA  
                                           l726 12EC                                             l718 1256  
                                           l654 1B82                                             l646 1B26  
                                           l582 17E2                                             l719 1266  
                                           l639 1B00                                             l671 2676  
                                           l663 25EA                                             l591 18F2  
                                           l575 172E                                             l744 366E  
                                           l592 1916                                             l745 363E  
                                           l737 1354                                             l729 1310  
                                           l681 22E0                                             l665 268E  
                                           l585 182A                                             l577 176A  
                                           l569 168A                                             l746 365E  
                                           l738 1372                                             l674 26A8  
                                           l666 2606                                             l691 2382  
                                           l683 22F6                                             l667 2636  
                                           l659 25AA                                             l587 186A  
                                           l579 17A6                                             l596 2C20  
                                           l685 239A                                             l669 2660  
                                           l589 18B2                                             l694 23B4  
                                           l686 2312                                             l598 2C74  
                                           l687 2342                                             l679 22B6  
                                           l599 2CAA                                             l696 23F0  
                                           l689 236C                                             _GIE 007F97  
                                  __CFG_CPD$OFF 000000                          ??_hxSPPCarbonRead_test 007F  
                  __size_of_hxFlushOutputBuffer 0018                                  ??_hxClearArray 0063  
                                           prod 000FF3                                             tosl 000FFD  
                                           wreg 000FE8                   checkAndSendLatchData@rxBuffer 0072  
                        setupLatchPkt@latch_num 0069                     run_SPPCarbon_test@hx_inData 0084  
                       __size_of_setTempCtrlDAC 0028                   findMaxI2CSpeed@cmdReadbackPkt 020A  
         write_ASLBoron_cstm_cnfg@cnfg_arr_size 0062                          ??i2_hxFlushInputBuffer 0005  
                 checkAndSendLatchData@oven_pkt 0300                                ?_ASLB_CommonGate 0060  
        checkAndSendLatchData@readback_oven_pkt 0700                                _SFR_ADC_MUX_DATA 02ED  
                                  __CFG_ZCD$OFF 000000                                __end_of_I2C1_ISR 1DDA  
                                          l1100 2836                                            l1021 1418  
                                          l1110 2906                                            l1102 283C  
                                          l1111 2926                                            l1103 285C  
                                          l1031 14EC                                            l1104 287C  
                                          l1024 14CE                                            l1105 289C  
                                          l1033 1528                                            l1025 1476  
                                          l1106 28BE                                            l1042 165C  
                                          l1107 28D0                                            l1051 10A6  
                                          l1043 15C6                                            l1035 1532  
                                          l1108 28E2                                            l1060 0E06  
                                          l1052 0DC2                                            l1028 14AC  
                                          l1109 28F4                                            l1053 107C  
                                          l1061 0E1A                                            l1045 15EA  
                                          l1037 1574                                            l1029 147C  
                                          l1206 2246                                            l1230 251E  
                                          l1070 0ECE                                            l1062 0E2E  
                                          l1046 1606                                            l1055 0FDA  
                                          l1071 0EE2                                            l1063 0E42  
                                          l1047 1636                                            l1039 157E  
                                          l1216 34E6                                            l1080 0F96  
                                          l1072 0EF6                                            l1064 0E56  
                                          l1056 0DCC                                            l1048 1656  
                                          l1233 255C                                            l1057 1076  
                                          l1081 0FAA                                            l1073 0F0A  
                                          l1065 0E6A                                            l1082 0FC8  
                                          l1074 0F1E                                            l1066 0E7E  
                                          l1058 0DDE                                            l1091 3412  
                                          l1243 3E84                                            l1227 2478  
                                          l1251 30F6                                            l1155 33AE  
                                          l1075 0F32                                            l1067 0E92  
                                          l1059 0DF2                                            l1092 3432  
                                          l1500 301C                                            l1076 0F46  
                                          l1068 0EA6                                            l1501 3008  
                                          l1149 347E                                            l1077 0F5A  
                                          l1069 0EBA                                            l1158 33EA  
                                          l1270 0246                                            l1078 0F6E  
                                          l1503 3028                                            l1271 02EC  
                                          l1247 3DBE                                            l1079 0F82  
                                          l1088 3444                                            l2160 2BD2  
                                          l2152 2B4A                                            l1280 08BA  
                                          l1272 0392                                            l1344 0B5E  
                                          l1089 33F2                                            l2161 2BE8  
                                          l2153 2B62                                            l1281 0960  
                                          l1273 0438                                            l1361 0C78  
                                          l1353 0B9E                                            l2081 3054  
                                          l1282 0980                                            l1274 04DE  
                                          l1362 0C48                                            l1354 0BE0  
                                          l2082 30DE                                            l2155 2B90  
                                          l1099 2938                                            l1275 0584  
                                          l1371 0D40                                            l1355 0BD2  
                                          l1347 0ADA                                            l2083 30A8  
                                          l2091 3080                                            l2156 2B84  
                                          l1276 062A                                            l1348 0B16  
                                          l2092 3094                                            l1277 06D0  
                                          l1269 01A0                                            l1373 0D78  
                                          l1365 0D24                                            l1357 0C8A  
                                          l1349 0AE0                                            l2085 30DA  
                                          l1278 0776                                            l1366 0CC0  
                                          l1358 0C26                                            l2159 2BC4  
                                          l1287 2812                                            l1279 0818  
                                          l1375 0DAC                                            l1367 0D12  
                          ??_run_SPPCarbon_test 0087                                            l1288 26E2  
                                          l1368 0CE2                                            l2088 306C  
                                          l1289 280E                                            l2524 388A  
                                          l2525 3868                                            l1495 3714  
                                          l1488 3764                                            l1737 3942  
                                          l1738 3968                                            l1739 3964  
                 run_SPPCarbon_test@returnValue 0088                   checkAndSendLatchData@rx_index 0074  
                                          l9510 3008                                            l9516 3028  
                                          l9728 3656                                            _LATA 000F83  
                                          _LATB 000F84                                            _LATC 000F85  
                                          _LATD 000F86                                            _LATE 000F87  
                                          u7010 30F2                                            u7110 2600  
                                          u8000 1300                                            u7025 3104  
                                          u7210 19B6                                            u7035 3144  
                                          u8110 13AE                                            u8030 1322  
                                          u7150 268C                                            u8040 1324  
                                          u7400 1B50                                            u7250 1A42  
                                          u8220 35C0                                            u6540 3038  
                                          u6700 2744                                            u7420 1B76  
                                          u9007 25B0                                            u7521 3AA8  
                                          u9017 25BC                                            u8410 146A  
                                          u8090 1376                                            u9107 26A2  
                                          u9027 25E4                                            u8420 1470  
                                          u9117 26AE                                            u9037 25F0  
                                          u8190 2E46                                            u6590 1F68  
                                          u6750 2B94                                            u7710 230C  
                                          u9207 19DA                                            u9127 26BA  
                                          u9047 2624                                 hxISRHandle@data 0011  
                                          u6840 366C                                            u9217 19E6  
                                          u9137 26C6                                            u9057 2630  
                                          u9307 1AA0                                            u9227 19F2  
                                          u9147 194E                                            u9067 263C  
                                          u7580 2560                                            u7820 1162  
                                          u9317 1AAC                                            u9237 19FE  
                                          u9157 195A                                            u9077 2648  
                                ??_hxHandleTmr0 0009                                            u7910 12B8  
                                          u7750 2398                                            u9407 233C  
                                          u9327 1AB8                                            u9247 1A26  
                                          u9167 1966                                            u9087 2670  
                                          u8560 0C18                                            u7920 12BA  
                                          u9417 2348                                            u9337 22A4  
                                          u9257 1A32                                            u9177 1972  
                                          u9097 267C                                            u9507 1106  
                                          u9427 2354                                            u9347 22B0  
                                          u9267 1A58                                            u9187 199A  
                                          u7860 11EE                                            u9517 1112  
                                          u9437 237C                                            u9357 22BC  
                                          u9277 1A64                                            u9197 19A6  
                                          u7950 12DA                                            u9607 11DE  
                                          u9527 111E                                            u9447 2388  
                                          u9367 22C8                                            u9287 1A70  
                                          u7960 12DC                                            u9617 1204  
                                          u9537 1146                                            u9457 23AE  
                                          u9377 22F0                                            u9297 1A7C  
                                          u9627 1210                                            u9547 1152  
                                          u9467 23BA                                            u9387 22FC  
                                          u9637 121C                                            u9557 1186  
                                          u9477 23C6                                            u9397 2330  
                                          u7990 12FE                                            u9647 1228  
                                          u9567 1192                                            u9487 23D2  
                                          u9657 126C                                            u9577 119E  
                                          u9497 10FA                                            u9667 1278  
                                          u9587 11AA                                            u9677 1284  
                                          u9597 11D2                                            u9687 3F1A  
                                          u8987 2598                                            u8997 25A4  
                                          _WPUA 000F10                                            _WPUB 000F18  
                                          _WPUC 000F20                                            _WPUD 000F25  
                 hxSPPCarbonWrite_test@rxBuffer 0072                                            _WPUE 000F2D  
               __end_of_I2C1_MasterReadTRBBuild 36D2                                   _EUSART1_Write 392A  
                                 __CFG_FCMEN$ON 000000                   hxSPPCarbonWrite_test@txBuffer 0070  
                     hxSPPCarbonWriteReg_test@i 006D                       hxSPPCarbonWriteReg_test@j 006C  
                                          _main 3044                                 _TMR0_StartTimer 40A0  
                               ??_HX_Initialize 0064                                            fsr0h 000FEA  
                                          fsr1h 000FE2                                            fsr2h 000FDA  
                                          fsr0l 000FE9                                            indf1 000FE7  
                                          indf2 000FDF                                            fsr1l 000FE1  
                                          fsr2l 000FD9                                            _tsld 06D5  
                        ??_I2C1_MasterTRBInsert 0064                                            btemp 0047  
                    hxSPPCarbonWrite_test@numTX 0074                   ?_ASLB_DigitalRegulatorVoltage 0062  
                         i2_hxFlushOutputBuffer 3FB4                                            prodh 000FF4  
                                          prodl 000FF3                                            start 00E8  
                       setupLatchPkt@latch_data 0067                      ?_hxSPPCarbonCheckBusy_test 0067  
                     hxSPPCarbonRead_test@numRX 007A                       hxSPPCarbonRead_test@numTX 007F  
                               _findMaxI2CSpeed 23F6                           __size_of_calcBaudRate 0058  
                               ??_setupLatchPkt 006A                                   __CFG_CSWEN$ON 000000  
              write_ASLBoron_cstm_cnfg@cnfg_arr 0060                                __end_of_ASLB_ADC 407A  
                                  ___param_bank 000000                           __size_of_calcChecksum 0030  
                I2C1_MasterWriteTRBBuild@length 0064                                   __CFG_SCANE$ON 000000  
                          run_I2C@calc_checksum 0207                    write_ASLBoron_debug@rxBuffer 00C9  
                       __end_of_TMR0_Initialize 39AC                          _SFR_OTP_ST_TIMING_DATA 03E6  
                                    _i2c1_state 002F                  ??_TMR0_DefaultInterruptHandler 000B  
                     ??_hxSPPCarbonProgram_test 006B                             __size_of_ASLB_cnfg0 0002  
                           __size_of_ASLB_cnfg1 0002                                    ?_hxStopTimer 0001  
                __size_of_OSCILLATOR_Initialize 0018                       I2C1_MasterTRBInsert@count 0065  
                 __end_of_OSCILLATOR_Initialize 3F40                                           l10300 1A0E  
                                         l10062 3868                                           l11022 112E  
                                         l11120 125E                                           l10136 25CC  
                                         l10254 1982                                           l10182 2658  
                                         l10346 1A92                                           l11068 11BA  
                     I2C1_MasterTRBInsert@pflag 0062                                           l10560 339E  
                                         l10544 3472                                           l11338 0FBC  
                                         l10812 392E                                           l10900 22D8  
                                         l10748 2470                                           l10946 2364  
                               __end_of___aldiv 2BFA                                           ?_main 0001  
                             __end_of_I2C1_Stop 39EA                                   __CFG_WDTE$OFF 000000  
                  write_ASLBoron_debug@run_cnfg 00C8                                  __CFG_DEBUG$OFF 000000  
                                         i2l220 3D38                                           i2l140 2A8A  
                                         i2l141 2A7C                                           i2l150 2B0E  
                                         i2l151 2B24                                           i2l144 2A9E  
                                         i2l225 3E44                                           i2l161 1FA4  
                                         i2l226 3E2E                                           i2l170 2062  
                                         i2l162 1FB0                                           i2l146 2AFE  
                                         i2l219 3D4E                                           i2l163 1FB8  
                                         i2l155 1F82                                           i2l147 2ADC  
                                         i2l172 206E                                           i2l164 1FC8  
                                         i2l181 334A                                           i2l157 20B4  
                                         i2l165 1FD8                                           i2l182 3322  
                                         i2l174 20E0                                           i2l158 207A  
                                         i2l166 2018                                           i2l175 20F2  
                                         i2l167 204E                                           i2l159 1F98  
                                         i2l168 2026                                           i2l198 3A02  
                  write_ASLBoron_debug@run_test 00CB                              _ASLB_MuxReadingVDD 3D5C  
                                         _OSCEN 000EDC                                           _TMR0H 000FD4  
                                         _TMR0L 000FD3                                           _PORTA 000F8D  
                                         _TRISA 000F88                                           _TRISB 000F89  
                                         _TRISC 000F8A                                           _TRISD 000F8B  
                                         _TRISE 000F8C          ASLB_VaricapBiasSteering@cmdReadbackPkt 0065  
              write_ASLBoron_cstm_cnfg@rxBuffer 0064               __size_of_TMR0_SetInterruptHandler 000E  
                  __end_of_I2C1_BusCollisionISR 40AE                                   __CFG_WRT0$OFF 000000  
                                 __CFG_WRT1$OFF 000000                                   __CFG_WRT2$OFF 000000  
                     ?_TMR0_SetInterruptHandler 0060                                   __CFG_WRT3$OFF 000000  
                             ??_I2C1_MasterRead 0070                                   __CFG_WRT4$OFF 000000  
                                 __CFG_WRT5$OFF 000000                                   __CFG_WRT6$OFF 000000  
                                 __CFG_WRT7$OFF 000000                            _EUSART1_Transmit_ISR 3C6C  
                                __CFG_EBTR0$OFF 000000                                  __CFG_EBTR1$OFF 000000  
                                __CFG_EBTR2$OFF 000000                                  __CFG_EBTR3$OFF 000000  
                             ??_I2C1_Initialize 0060                                  __CFG_EBTR4$OFF 000000  
                                __CFG_EBTR5$OFF 000000                                  __CFG_EBTR6$OFF 000000  
                              __end_of_TMR0_ISR 3D2E                                  __CFG_EBTR7$OFF 000000  
                  ?_ASLB_CurrentLimitDACVoltage 0068                                   __CFG_WRTB$OFF 000000  
                                 __CFG_WRTC$OFF 000000                                   __CFG_WRTD$OFF 000000  
                    __end_of_ASLB_ContinuityESD 40A6                                 __end_of_readI2C 380E  
                                __CFG_EBTRB$OFF 000000                          _ASLB_TempSetDACVoltage 3456  
             __size_of_ASLB_VaricapBiasSteering 0014                       ?_ASLB_VaricapBiasSteering 0062  
                           ?_ASLB_MuxReadingVDD 0062                              __CFG_MCLRE$EXTMCLR 000000  
                        run_SPPCarbon_test@size 0086                             _SFR_OTP_MRR_HI_DATA 02E8  
                                ?_EUSART1_Write 0001            hxSPPCarbonReadReg_test@oddParityCalc 0070  
                    ??_ASLB_DACReferenceVoltage 0064                                ?_hxOddParityCalc 0060  
                                         pclath 000FFA                                           tablat 000FF5  
                                  _calcBaudRate 35D6                                 __end_of_run_I2C 0DB2  
                   checkAndSendLatchData@stream 0079                          ?_checkAndSendLatchData 0072  
                                         plusw1 000FE3                                           plusw2 000FDB  
                              ASLB_debug2@zeros 007A                             _SFR_OTP_MRR_LO_DATA 02E9  
                      ?_hxSPPCarbonReadReg_test 0067                         _ASLB_InternalTempSensor 3B6A  
                                         status 000FD8                                    _calcChecksum 3CCE  
                                         wtemp6 0048                 I2C1_MasterWriteTRBBuild@address 0065  
                          __size_of_hxISRHandle 00D6                            __size_of_ASLB_CTHERM 0028  
                               __initialization 3216                           I2C1_MasterWrite@pdata 0069  
                         I2C1_MasterWrite@pflag 006E                      __end_of_EUSART1_Initialize 3A60  
                                  __end_of_main 30E4                            ??_ASLB_MuxReadingVDD 0064  
                               writeI2C@timeOut 0075                          hxISRHandle@rxHxCmdFlag 0033  
                 hxSPPCarbonWriteReg_test@j_916 006E                     ?_INTERRUPT_InterruptManager 0001  
                       ASLB_CommonGate@rxBuffer 0060                                   ?_hxStartTimer 0003  
                          _SFR_SW_BIT_DATA_DATA 03DD                                     _i2c1_object 02DB  
                                        ??_main 00D9                     write_ASLBoron_cnfg@rxBuffer 0062  
                 hxSPPCarbonWriteReg_test@numTX 0069                      __end_of_hxFlushInputBuffer 3EA8  
                                 __activetblptr 000003                      ??_ASLB_HeaterFunctionality 0074  
                      ??_ASLB_VaricapDACVoltage 0064                          hxISRHandle@rxHxPktFlag 0031  
 ASLB_OscillatorRegulatorVoltage@cmdReadbackPkt 0065      ASLB_DigitalRegulatorVoltage@cmdReadbackPkt 0065  
                       ASLB_CommonGate@rx_index 0062        hxSPPCarbonReadReg_test@readbackCommState 0078  
                          __size_of_ASLB_debug0 0022                            __size_of_ASLB_debug1 0180  
                          __size_of_ASLB_debug2 0036                            __size_of_ASLB_debug3 0060  
                         ?_EUSART1_Transmit_ISR 0001                         __size_of_hxSetupPacket1 0050  
                       __size_of_hxSetupPacket2 006C          ASLB_DACReferenceVoltage@cmdReadbackPkt 0065  
        ASLB_ADCReferenceVoltage@cmdReadbackPkt 0065                             ASLB_CTHERM@rxBuffer 0062  
                   write_ASLBoron_cnfg@run_cnfg 0064                           _SFR_SW_100US_LOW_DATA 03E5  
                       __end_of_TMR0_StartTimer 40A4                     _SFR_OTP_DIV_100US_HIGH_DATA 03EA  
                              setupLatchPkt@pkt 0065                       __size_ofi2_TMR0_StopTimer 0004  
                 ??_ASLB_CurrentLimitDACVoltage 006A                                          _ANSELA 000F11  
                                        _ANSELB 000F19                                          _ANSELC 000F21  
                                        _ANSELD 000F26                                          _ANSELE 000F2E  
                                        _T0CON0 000FD5                                          _T0CON1 000FD6  
                       ??_hxSPPCarbonWrite_test 0074                             ASLB_CTHERM@rx_index 0064  
                             ASLB_debug2@F12373 04F5                                          _RC1REG 000F99  
                                        _RB1PPS 000EF0                                          _RC1PPS 000EF8  
                                        _RC1STA 000F9D                                          _RC2PPS 000EF9  
               __end_of_hxSPPCarbonProgram_test 23F6                                          _ODCONA 000F0F  
                                        _ODCONB 000F17                                          _ODCONC 000F1F  
                                        _ODCOND 000F24                                          _ODCONE 000F2C  
                                        i2l1441 1C26                                  __CFG_WDTCCS$SC 000000  
                                        i2l1450 1C9A                                          i2l1442 1C2E  
                                        i2l1435 1D94                                          i2l1443 1C3E  
                                        i2l1452 1CD4                                          i2l1436 1BC2  
                                        i2l1461 1D1E                                          i2l1445 1C56  
                                        i2l1470 1D76                                          i2l1462 1D16  
                                        i2l1438 1C0E                                          i2l1471 1D7C  
                                        i2l1447 1C5C                                          i2l1439 1C1E  
                                        i2l1472 1D80                                          i2l1456 1CE2  
                                        i2l1448 1C6C                                          i2l1465 1D32  
                                        i2l1482 39E4                                          i2l1474 1D88  
                                        i2l1466 1D44                                          i2l1458 1CE8  
                                        i2l1459 1CFA                                          i2l1468 1D4C  
                                        i2l1477 3F82                                          i2l1469 1D54  
                                        i2l1743 3C98                                          i2l1591 0090  
                                        i2l1744 3C94                                          i2l1593 009C  
                                        i2l1585 0060                                          i2l1587 0070  
                                        i2l1749 401E                                          i2l1589 0080  
                       __end_of_findMaxI2CSpeed 2568                            __size_of_hxCmdFilter 018C  
              hxSPPCarbonWriteReg_test@tempByte 006F                                          _OSCFRQ 000EDE  
                              ??_hxHandleTxUART 0064                hxSPPCarbonWriteReg_test@txBuffer 0067  
                                        _NVMDAT 000F80                                          _TX1REG 000F9A  
                                        _TX1STA 000F9E                          ?i2_hxFlushOutputBuffer 0001  
                  __end_of_ASLB_HeaterFBSignals 38E4                               ?_I2C1_MasterWrite 0069  
        ASLB_ZTCReferenceCurrent@cmdReadbackPkt 0065                                  __CFG_PWRTE$OFF 000000  
                  __end_of_TMR0_Write16bitTimer 4040                            __end_of_hxClearArray 3E28  
                                __CFG_XINST$OFF 000000                    checkAndSendLatchData@adc_pkt 048E  
                            ??_I2C1_MasterWrite 0070                ASLB_AnalogMuxReadingSetup@stream 0202  
                                _p_i2c1_current 0024                                       ??___aldiv 0068  
                ??_ASLB_DigitalRegulatorVoltage 0064                                  __CFG_STVREN$ON 000000  
              __end_of_ASLB_ZTCReferenceCurrent 3B02                              hxSetupPacket1@data 0006  
                                ??_hxStartTimer 0005                                _hxHandleTmr0$364 0009  
                      __end_of_ASLB_CFCVVaricap 4072                      ??_I2C1_MasterWriteTRBBuild 0067  
                  checkAndSendLatchData@noError 00C1                                          _memcpy 3856  
                              ?_TMR0_Initialize 0001                                       ?_I2C1_ISR 0001  
                                        clear_0 324E                                          clear_1 325A  
                                        clear_2 3266                                          clear_3 3272  
                                        clear_4 327E                                          clear_5 328A  
                                        clear_6 3296                            __end_of_hxHandleTmr0 3A26  
                                _resetLATCHData 297A                                 _setCurrLimitDAC 30E4  
              __end_of_ASLB_ADCReferenceVoltage 3DB0                  i2TMR0_Write16bitTimer@timerVal 0001  
                       ?i2_TMR0_Write16bitTimer 0001                             run_ASLBoron@rpt_run 01ED  
                       _SFR_SW_BIT_DATA_ST_DATA 03DC                     filterLatchPacketResponses@i 006A  
              __size_of_I2C1_MasterReadTRBBuild 0052                                       ??_readI2C 0075  
                      _write_ASLBoron_cstm_cnfg 40A6                                 _cycleBoronPower 3F10  
                                  __pdataCOMRAM 0046                  __size_of_ASLB_PierceOscillator 0008  
                 __end_of_ASLB_PierceOscillator 405A                             _ASLB_MuxOpenCircuit 3B36  
                                _setTempCtrlDAC 3DB0                               ASLB_debug1@stream 0076  
                 __size_of_write_ASLBoron_debug 014A                                          tblptrh 000FF7  
                                        tblptrl 000FF6                                          tblptru 000FF8  
                                     ??_run_I2C 007B                                 ??_EUSART1_Write 0060  
                __size_of_hxFlushMainDataBuffer 0018                               _SFR_OCXO_DIV_DATA 02F0  
      TMR0_SetInterruptHandler@InterruptHandler 0060                                       ?_ASLB_ADC 0060  
                 __end_of_hxFlushMainDataBuffer 3F70                   I2C1_MasterWriteTRBBuild@pdata 0062  
                              __end_of_streamSW 4094                                    ??_ASLB_cnfg0 0062  
                     ??_ASLB_InternalTempSensor 0064                                    ??_ASLB_cnfg1 0062  
           checkAndSendLatchData@latchSendCount 00C3                                __end_of_writeI2C 357A  
    checkAndSendLatchData@readback_heat_dac_pkt 0747                   __size_of_INTERRUPT_Initialize 0004  
                  ??_filterLatchPacketResponses 0067                                 _eusart1TxBuffer 0B00  
       filterLatchPacketResponses@possibleError 006C         hxSPPCarbonWriteAndVerity_test@tempValue 0083  
                             _SYSTEM_Initialize 3EDC                                 hxCalcChecksum@i 0004  
                                    __accesstop 0060                         __end_of__initialization 329C  
                   __end_of_setupCmdReadbackPkt 3C3A                    ASLB_HeaterFBSignals@rxBuffer 0062  
                            ?_SYSTEM_Initialize 0001                           findMaxI2CSpeed@stream 0202  
                             _hx_rxOverflowFlag 02FF                                   ___rparam_used 000001  
                           _hxFlushOutputBuffer 3F40                            ?_ASLB_MuxOpenCircuit 0062  
                                _i2c1_trb_count 002E                                  __pcstackBANK10 0A00  
                                __pcstackBANK12 0C00                              _LATCH_ADC_MUX_DATA 06F3  
                   __end_of_write_ASLBoron_cnfg 3456           __end_of_ASLB_ExternalReferenceVoltage 3EDC  
        __size_of_ASLB_ExternalReferenceVoltage 001A                   _ASLB_ExternalReferenceVoltage 3EC2  
                  ASLB_HeaterFBSignals@rx_index 0064                     __end_of_write_ASLBoron_test 10CA  
                         _I2C1_FunctionComplete 3F70                            _I2C1_BusCollisionISR 40AC  
                         hxOddParityCalc@parity 0065                                readI2C@slaveAddr 0073  
                                __pcstackCOMRAM 0001            __size_of_ASLB_CurrentLimitDACVoltage 006A  
            ASLB_HeaterFBSignals@cmdReadbackPkt 0065                                 streamI2C@pktArr 0069  
                        I2C1_MasterWrite@length 006B                                    __pidataBANK5 408C  
                           ??_SYSTEM_Initialize 0065                                       ?_TMR0_ISR 0001  
                        __end_of_resetLATCHData 2A56                                 streamI2C@status 01A0  
                                streamSW@pktArr 0060                               _setCommSingleWire 407A  
                      __size_of_ASLB_RDResistor 0008                  __end_ofi2_TMR0_Write16bitTimer 404A  
                                    ??_I2C1_ISR 0004                 filterLatchPacketResponses@count 0066  
                            ?_setCommSingleWire 0001                              __end_of_ASLB_cnfg0 40AC  
                            __end_of_ASLB_cnfg1 40AA                  I2C1_MasterReadTRBBuild@address 0065  
                      ?i2_hxFlushMainDataBuffer 0001                          _SFR_SW_100US_HIGH_DATA 03E4  
                 __size_of_ASLB_SheetResistance 0094          __end_of_hxSPPCarbonWriteAndVerity_test 2CC4  
       __size_of_hxSPPCarbonWriteAndVerity_test 00CA                  _hxSPPCarbonWriteAndVerity_test 2BFA  
                        __end_of_setTempCtrlDAC 3DD8                          ??_EUSART1_Transmit_ISR 0001  
                          __size_of_hxStopTimer 0014                            ?_hxFlushOutputBuffer 0001  
           __size_of_filterLatchPacketResponses 015E                 __size_of_ASLB_VaricapDACVoltage 0034  
      ASLB_AnalogMuxReadingSetup@cmdReadbackPkt 0206                     __end_of_EUSART1_Receive_ISR 4026  
                              _SFR_CLK_SEL_DATA 02EF                             ??_setCommSingleWire 0060  
                               hxHandleTxUART@i 0067                        _hxSPPCarbonWriteReg_test 2568  
                ASLB_VaricapDACVoltage@rxBuffer 0062                                ?_TMR0_StartTimer 0001  
                                    ??_ASLB_ADC 0062                       __end_of_SYSTEM_Initialize 3EF6  
               hxSPPCarbonCheckBusy_test@bitVal 0077                        ?_ASLB_ColpittsOscillator 0060  
                                 _eusart1RxHead 03D9                                   _eusart1TxHead 002B  
                                 _eusart1RxTail 03D8                                      __pbssBANK2 02DB  
                                    __pbssBANK3 03D5                                      __pbssBANK4 04D5  
                                    __pbssBANK5 05D5                                      __pbssBANK6 06D5  
                                 _eusart1TxTail 002A                         _LATCH_CLOCK_SELECT_DATA 05D5  
                              ?_findMaxI2CSpeed 0075                  ASLB_VaricapDACVoltage@rx_index 0064  
                    _SFR_OTP_DIV_100US_LOW_DATA 03E9                                      __pnvCOMRAM 0043  
               hxSPPCarbonReadReg_test@rxBuffer 006A                          __size_ofi2_hxStopTimer 0012  
               hxSPPCarbonReadReg_test@tempByte 0079                 hxSPPCarbonReadReg_test@txBuffer 0068  
                         ??_ASLB_MuxOpenCircuit 0064                 hxSPPCarbonReadReg_test@portAVal 006C  
                   ??_hxSPPCarbonCheckBusy_test 006C                     write_ASLBoron_test@rxBuffer 00C9  
                    ASLB_MuxReadingVDD@rxBuffer 0062                           ?_I2C1_BusCollisionISR 0001  
                                _SSP1DATPPSbits 000EB8                              i2hxClearArray@size 0003  
             ASLB_MuxOpenCircuit@cmdReadbackPkt 0065                         __end_of_setCurrLimitDAC 3182  
                     __end_of_setCommSingleWire 4080                __end_of_TMR0_SetInterruptHandler 4034  
                       __size_of_TMR0_StopTimer 0004                                      ??_TMR0_ISR 000B  
                               __CFG_PPS1WAY$ON 000000                         __end_of_cycleBoronPower 3F28  
                               _I2C1_MasterRead 36D2                                 ?_resetLATCHData 0001  
                             _run_ASLBoron$1381 01E9                               _run_ASLBoron$1382 01EB  
                    ASLB_MuxReadingVDD@rx_index 0064                                 _I2C1_Initialize 3C3A  
                       __size_of_hxCalcChecksum 002E                     write_ASLBoron_test@run_test 00CE  
              __end_of_ASLB_VaricapBiasSteering 3FDE                                         ?_memcpy 0060  
                                 ?_resetSFRData 0001                                 run_I2C@debugArr 0200  
                                _SSP1CLKPPSbits 000EB7                                 run_I2C@checksum 0206  
                      _ASLB_ZTCReferenceCurrent 3ACE                           ??_hxFlushOutputBuffer 0064  
                               ?_setTempCtrlDAC 0060                            _ASLB_HeaterFBSignals 389E  
                                       i2l11952 1C0E                         ?_ASLB_TempSetDACVoltage 0062  
                                _hxSetupPacket1 3772                                  _hxSetupPacket2 3316  
                                       _SP1BRGH 000F9C                                         _SP1BRGL 000F9B  
                 __size_of_hxSPPCarbonRead_test 0048                                         _OSCCON1 000ED8  
                                       _OSCCON3 000EDA                        _ASLB_ADCReferenceVoltage 3D86  
                                     _I2C1_Stop 39AC                            _TMR0_Write16bitTimer 4034  
                                       _NVMADRH 000F7F                                         _NVMADRL 000F7E  
                                       _OSCTUNE 000EDD                                         _NVMCON2 000F82  
                      __size_of_streamBoronComm 0030                                         _SSP1ADD 000F93  
                                       _PPSLOCK 000EA0                                         _SSP1BUF 000F92  
                       ??_checkAndSendLatchData 0076                ASLB_ADCReferenceVoltage@rxBuffer 0062  
                              i2_TMR0_StopTimer 409C                                      _boronRxPkt 04D5  
                                    _boronTxPkt 04E5                    hxSPPCarbonProgram_test@j_925 006F  
                   __size_of_run_SPPCarbon_test 02A0                      write_ASLBoron_test@run_rpt 00C7  
                            __size_of_streamI2C 0192                   __size_ofi2_hxFlushInputBuffer 001A  
                          __end_of_hxStartTimer 4016                           __size_of_hxClearArray 0028  
                 I2C1_MasterTRBInsert@ptrb_list 0060         ASLB_AnalogMuxReadingSetup@stream_status 0201  
                  hxSPPCarbonProgram_test@numTX 006B                              hxISRHandle@pktSize 0032  
              ASLB_ADCReferenceVoltage@rx_index 0064                          _ASLB_VaricapDACVoltage 3B02  
                      __size_of_ASLB_CommonGate 0008                            run_ASLBoron@checksum 01EF  
                                  writeI2C@size 0072                hxSPPCarbonWrite_test@returnValue 0075  
                         __end_of_HX_Initialize 3F9E                          ?_I2C1_FunctionComplete 0001  
                            _ASLB_ContinuityESD 40A4                                         __Hparam 0000  
                 __size_of_I2C1_MasterTRBInsert 00A4                            run_ASLBoron@cnfg_arr 0C00  
                          run_ASLBoron@cnfg_cnt 01F4                            run_ASLBoron@cnfg_run 01F2  
                                       __Lparam 0000                                 run_I2C@rx_index 0210  
                streamBoronComm@boron_comm_type 0071                      __CFG_RSTOSC$HFINTOSC_64MHZ 000000  
                            _p_i2c1_trb_current 0026                           __size_of_hxHandleTmr0 003C  
                         __end_of_setupLatchPkt 2EF6                                         ___aldiv 2B2C  
                                 readI2C@rxData 0070                 __end_ofi2_hxFlushMainDataBuffer 3FB4  
                      setTempCtrlDAC@value12bit 0060                               run_I2C@data_index 0211  
                           ?_ASLB_ContinuityESD 0060                                  ??_resetSFRData 0060  
                                 readI2C@status 0077                __size_of_hxSPPCarbonReadReg_test 0270  
                ?_ASLB_ExternalReferenceVoltage 0062                                findMaxI2CSpeed@i 0209  
                                     ?_streamSW 0060                                         __pcinit 3216  
                               _LATCH_BIAS_DATA 05E1                                 __size_of_memcpy 0048  
                               i2hxClearArray@i 0004                                       ?_writeI2C 0070  
                                       __ramtop 0F00                         _I2C1_MasterReadTRBBuild 3680  
                          run_ASLBoron@mode_run 01F5                                         __ptext0 3044  
                                       __ptext1 167A                                         __ptext2 3A60  
                                       __ptext3 2BFA                                         __ptext4 2568  
                                       __ptext5 380E                                         __ptext6 191A  
                                       __ptext7 2278                                         __ptext8 10CA  
                                       __ptext9 362E                  __end_of_ASLB_TempSetDACVoltage 34BA  
                        __end_of_hxSetupPacket1 37C2                          __end_of_hxSetupPacket2 3382  
                                 i2_hxStopTimer 3FF2            hxSPPCarbonReadReg_test@readbackTimer 006E  
          ASLB_TempSetDACVoltage@cmdReadbackPkt 0065                           ?_ASLB_HeaterFBSignals 0062  
                                       _readI2C 37C2                           _OSCILLATOR_Initialize 3F28  
                     _hxSPPCarbonCheckBusy_test 10CA                    I2C1_MasterReadTRBBuild@pdata 0062  
                          I2C1_MasterRead@pdata 0069                            I2C1_MasterRead@pflag 006E  
                                    _hx_outData 0B80                               ??_ASLB_RDResistor 0062  
               __end_of_ASLB_ColpittsOscillator 406A                                ___aldiv@dividend 0060  
                         ?_TMR0_Write16bitTimer 0060                              _EUSART1_Initialize 3A26  
                      ??_PIN_MANAGER_Initialize 0060                                    _hxClearArray 3E00  
                                    ?_I2C1_Stop 0001                                         _run_I2C 09F4  
                          run_ASLBoron@test_run 01F1                                      _setCommI2C 4080  
            __end_of_filterLatchPacketResponses 2830                      _filterLatchPacketResponses 26D2  
                    __size_of_SYSTEM_Initialize 001A                            I2C1_ISR@pi2c_buf_ptr 03D5  
                       ??i2_hxFlushOutputBuffer 0005               hxSPPCarbonCheckBusy_test@rxBuffer 006A  
                               _LATCH_CMOS_DATA 05DD                            ??_ASLB_ContinuityESD 0062  
                          end_of_initialization 329C               hxSPPCarbonCheckBusy_test@tempByte 007A  
                       __size_ofi2_hxClearArray 0026               hxSPPCarbonCheckBusy_test@txBuffer 0068  
                           ?_EUSART1_Initialize 0001                              _hxFlushInputBuffer 3E8C  
             hxSPPCarbonCheckBusy_test@portAVal 0078                              ASLB_debug1@ramData 0074  
                 hxISRHandle@currentByteCounter 0035                         ASLB_RDResistor@rxBuffer 0060  
                                 ?_run_ASLBoron 00D3                                         memcpy@d 0067  
                                       memcpy@n 0064                                         memcpy@s 0069  
                __size_of_hxSPPCarbonWrite_test 0038                                  calcBaudRate@bd 0072  
                 __end_of_hxSPPCarbonWrite_test 3A98                                    _hxHandleTmr0 39EA  
                                 ??_hxISRHandle 000A             hxSPPCarbonWriteReg_test@tempHxState 006A  
                                 ??_ASLB_CTHERM 0064                                _hx_rxFullPktFlag 0039  
            filterLatchPacketResponses@rxBuffer 0060                    ??_ASLB_AnalogMuxReadingSetup 0074  
                       __end_of_I2C1_MasterRead 3722                 ASLB_InternalTempSensor@rxBuffer 0062  
                        ??_I2C1_BusCollisionISR 0001     ASLB_ExternalReferenceVoltage@cmdReadbackPkt 0065  
                       __end_of_I2C1_Initialize 3C6C                                     run_I2C@mode 020F  
                                   run_I2C@size 007A                         ASLB_RDResistor@rx_index 0062  
                           ?_hxFlushInputBuffer 0001                        __size_of_hxOddParityCalc 0052  
                    __size_of_setCommSingleWire 0006                                ?_setCurrLimitDAC 0060  
                      ?_hxSPPCarbonProgram_test 0067                ASLB_DACReferenceVoltage@rxBuffer 0062  
                    ??_write_ASLBoron_cstm_cnfg 0066                                ___aldiv@quotient 006A  
            filterLatchPacketResponses@rx_index 0062                                         postdec1 000FE5  
                                       postdec2 000FDD                 ASLB_InternalTempSensor@rx_index 0064  
                                       postinc0 000FEE                                         postinc1 000FE6  
                                       postinc2 000FDE                     __size_of_ASLB_MuxReadingVDD 002A  
                               _LATCH_OSC0_DATA 05F9                                 _LATCH_OSC1_DATA 05F5  
                               _LATCH_OSC2_DATA 05F1                                ?_cycleBoronPower 0001  
             __size_of_ASLB_DACReferenceVoltage 0034                       ?_ASLB_DACReferenceVoltage 0062  
                          ??_EUSART1_Initialize 0060                               __end_of_streamI2C 1F6C  
                         __CFG_WDTCPS$WDTCPS_31 000000                                      ??_streamSW 0063  
                             ?_ASLB_CFCVVaricap 0060                                      ??_writeI2C 0075  
              ASLB_DACReferenceVoltage@rx_index 0064                                  ?i2_hxStopTimer 0001  
                                 ??_ASLB_debug0 0062                                   ??_ASLB_debug1 0074  
                                 ??_ASLB_debug2 007A                                   ??_ASLB_debug3 0063  
                      _TMR0_SetInterruptHandler 4026                                       _PORTAbits 000F8D  
                                     _PORTBbits 000F8E                        _SFR_OTP_WR_ADDR_LOW_DATA 02E6  
                               ?_hxSetupPacket1 0006                                 ?_hxSetupPacket2 0001  
       ASLB_OscillatorRegulatorVoltage@rxBuffer 0062                       __size_of_I2C1_MasterWrite 0050  
                            ??_ASLB_CFCVVaricap 0062       checkAndSendLatchData@readback_adc_mux_pkt 0900  
                             __size_of_I2C1_ISR 0250          filterLatchPacketResponses@readbackPkts 0064  
                     ASLB_debug1@cmdReadbackPkt 0081                        _ASLB_VaricapBiasSteering 3FCA  
                          ??_hxFlushInputBuffer 0064                ASLB_ZTCReferenceCurrent@rxBuffer 0062  
                        findMaxI2CSpeed@ramData 0206                                 _LATCH_OVEN_DATA 02E2  
       ASLB_OscillatorRegulatorVoltage@rx_index 0064                               _SFR_ASIC_REV_DATA 02EC  
                                 ??_hxCmdFilter 0009             __size_of_ASLB_AnalogMuxReadingSetup 0070  
               ASLB_ColpittsOscillator@rxBuffer 0060                             EUSART1_Write@txData 0060  
              ASLB_ZTCReferenceCurrent@rx_index 0064                                __CFG_FEXTOSC$OFF 000000  
             I2C1_ISR@i2c_10bit_address_restart 002C                                  ??_run_ASLBoron 00D6  
                     _SFR_OTP_WR_ADDR_HIGH_DATA 02E7                    TMR0_Write16bitTimer@timerVal 0060  
                             __size_of_ASLB_ADC 0008                 ASLB_ColpittsOscillator@rx_index 0062  
                            ASLB_cnfg0@rxBuffer 0060                               ??_streamBoronComm 0071  
             __size_of_ASLB_HeaterFunctionality 00CA                       ?_ASLB_HeaterFunctionality 0072  
                               hxSetupPacket2@i 0008                   hxSPPCarbonReadReg_test@bitVal 0076  
                              run_ASLBoron@size 00D5                    __end_of_write_ASLBoron_debug 297A  
                            ASLB_cnfg1@rxBuffer 0060                         I2C1_MasterWrite@address 006C  
                          _timer0ReloadVal16bit 0043                                  _TMR0_StopTimer 4094  
               hxSPPCarbonRead_test@returnValue 0080                             __end_of_hxISRHandle 2B2C  
                              streamI2C@trBlock 0100  checkAndSendLatchData@readback_varactor_dac_pkt 078E  
                           __end_of_ASLB_CTHERM 3E00                       ??_I2C1_MasterReadTRBBuild 0067  
                  __end_of_INTERRUPT_Initialize 409C           ASLB_ExternalReferenceVoltage@rxBuffer 0062  
                             ??_ASLB_CommonGate 0062                                streamI2C@pktSize 006B  
                          _SFR_OTP_WR_DATA_DATA 03EB                                  _hxCalcChecksum 3D2E  
                       I2C1_MasterWrite@trBlock 03F1                                   __pidataCOMRAM 40AE  
              ASLB_VaricapBiasSteering@rxBuffer 0062                                 _SFR_ANALOG_DATA 02F7  
                        ??_ASLB_HeaterFBSignals 0064                      ??_hxSPPCarbonWriteReg_test 0069  
                             __size_of_TMR0_ISR 0030                        I2C1_Stop@completion_code 0003  
                           adjustI2CBaudRate@bd 0060                                  __end_of_memcpy 389E  
                        ?_OSCILLATOR_Initialize 0001                                 streamSW@pktSize 0062  
         ASLB_ExternalReferenceVoltage@rx_index 0064                        hxSPPCarbonReadReg_test@i 0072  
                      hxSPPCarbonReadReg_test@j 0071                               writeI2C@slaveAddr 0073  
                        ??_TMR0_Write16bitTimer 0062                    ASLB_SheetResistance@rxBuffer 00C4  
              ASLB_VaricapBiasSteering@rx_index 0064                             start_initialization 3216  
           __end_of_ASLB_CurrentLimitDACVoltage 33EC                     _ASLB_CurrentLimitDACVoltage 3382  
                        run_ASLBoron@data_index 01F6                                     ??_I2C1_Stop 0001  
                         __size_of_hxStartTimer 0012                        __size_of_TMR0_Initialize 003E  
               __size_of_PIN_MANAGER_Initialize 00BC                                  writeI2C@txData 0070  
                           __end_of_ASLB_debug0 3E70                                     ?_setCommI2C 0001  
                           __end_of_ASLB_debug1 2278                             __end_of_ASLB_debug2 3ACE  
                           __end_of_ASLB_debug3 351A                           _ASLB_PierceOscillator 4052  
                                writeI2C@status 0077                    ASLB_SheetResistance@rx_index 00C6  
           ASLB_AnalogMuxReadingSetup@ovenWrPkt 024D                            _SFR_SW_STOP_DET_DATA 03DB  
             __size_of_I2C1_MasterWriteTRBBuild 0046                        ASLB_CFCVVaricap@rxBuffer 0060  
                     ?_I2C1_MasterWriteTRBBuild 0060                                  _hx_inDataIndex 003E  
                         __end_of_EUSART1_Write 396E                            __end_of_resetSFRData 2FA0  
              __size_ofi2_hxFlushMainDataBuffer 0016                           _hxFlushMainDataBuffer 3F58  
                  __end_of_ASLB_SheetResistance 3216                             _SFR_SW_DET_BIT_DATA 03DE  
                               _eeprom_currAddr 0028          ASLB_HeaterFunctionality@cmdReadbackPkt 024D  
                           __end_of_hxCmdFilter 20F8                        ASLB_CFCVVaricap@rx_index 0062  
                        __end_of_TMR0_StopTimer 4098                                ?_I2C1_MasterRead 0069  
                              ??_resetLATCHData 0060                                ?_I2C1_Initialize 0001  
                              __CFG_LPBOREN$OFF 000000                          __end_of_hxCalcChecksum 3D5C  
                    ??_ASLB_ZTCReferenceCurrent 0064                                hxOddParityCalc@i 0063  
                              hxOddParityCalc@j 0064                             _SFR_SW_BIT_INT_DATA 03E1  
              __size_of_ASLB_ColpittsOscillator 0008                    __size_of_setupCmdReadbackPkt 0034  
           hxSPPCarbonWriteAndVerity_test@numTX 0081                        __end_ofi2_TMR0_StopTimer 40A0  
                       _hxSPPCarbonReadReg_test 191A                         __size_of_hxHandleTxUART 005C  
                             calcBaudRate@bRate 0073                                ??_setTempCtrlDAC 0062  
                               ??i2_hxStopTimer 0003                                     __pdataBANK5 05F9  
                          hxStartTimer@timerVal 0003                      ??_ASLB_ADCReferenceVoltage 0064  
                 ASLB_PierceOscillator@rxBuffer 0060            hxSPPCarbonProgram_test@oddParityCalc 006C  
                                      ??_memcpy 0066                                   ??_hxStopTimer 0062  
                                  _hxStartTimer 4004                    __size_of_write_ASLBoron_cnfg 006A  
                             ??_hxOddParityCalc 0063                  ASLB_TempSetDACVoltage@rxBuffer 0062  
                    hxSPPCarbonCheckBusy_test@i 0073                      hxSPPCarbonCheckBusy_test@j 0072  
               hxSPPCarbonProgram_test@rxBuffer 0069                    __size_of_write_ASLBoron_test 0318  
                          findMaxI2CSpeed@bRate 0207          hxSPPCarbonWriteAndVerity_test@rxBuffer 007C  
               hxSPPCarbonProgram_test@tempByte 0070                    I2C1_MasterWriteTRBBuild@ptrb 0060  
                                _eusart1RxCount 03D7                 hxSPPCarbonProgram_test@txBuffer 0067  
                                   __pbssBANK11 0B00          hxSPPCarbonWriteAndVerity_test@txBuffer 007A  
                 ASLB_PierceOscillator@rx_index 0062                                     __pbssCOMRAM 0024  
                      ?_ASLB_InternalTempSensor 0062                  ASLB_TempSetDACVoltage@rx_index 0064  
                 __size_of_EUSART1_Transmit_ISR 0032                                   __pcstackBANK0 0060  
                                 __pcstackBANK1 0100                                   __pcstackBANK2 0200  
                                 __pcstackBANK3 0300                                   __pcstackBANK4 0400  
                                 __pcstackBANK5 0500                                   __pcstackBANK6 0600  
                                 __pcstackBANK7 0700                                   __pcstackBANK8 0800  
                                 __pcstackBANK9 0900                         _SFR_SW_STOP_DET_ST_DATA 03DA  
                                 _i2c1_tr_queue 03F6                                   _SFR_BIAS_DATA 02F3  
                                i2_hxClearArray 3E28                     __end_of_ASLB_MuxOpenCircuit 3B6A  
                __size_of_checkAndSendLatchData 0908                                   ?_calcBaudRate 006E  
                       ?_ASLB_VaricapDACVoltage 0062                   __end_of_checkAndSendLatchData 09F4  
            __size_of_hxSPPCarbonCheckBusy_test 02EE                  hxSPPCarbonCheckBusy_test@i_940 0075  
                hxSPPCarbonCheckBusy_test@j_941 0076                  hxSPPCarbonCheckBusy_test@j_939 0074  
             checkAndSendLatchData@heat_dac_pkt 0347                         ??_I2C1_FunctionComplete 0001  
                  __size_of_EUSART1_Receive_ISR 0010                                   ?_calcChecksum 0060  
            __end_of_ASLB_AnalogMuxReadingSetup 3316                      _ASLB_AnalogMuxReadingSetup 32A6  
                                 _SFR_HEAT_DATA 02F5                                     _hxISRHandle 2A56  
                         _TMR0_InterruptHandler 03FB                  hxSPPCarbonCheckBusy_test@numRX 0067  
                hxSPPCarbonCheckBusy_test@numTX 006E           ASLB_InternalTempSensor@cmdReadbackPkt 0065  
                                     __pnvBANK3 03FB                                     _ASLB_CTHERM 3DD8  
                             _adjustI2CBaudRate 3E70  checkAndSendLatchData@readback_ocxo_divisor_pkt 0947  
                      __size_of_TMR0_StartTimer 0004                    __end_of_hxSPPCarbonRead_test 3856  
                             _LATCH_ANALOG_DATA 05ED                                 ?_TMR0_StopTimer 0001  
         checkAndSendLatchData@varactor_dac_pkt 038E                          _PIN_MANAGER_Initialize 2D8E  
                             i2hxClearArray@arr 0001                __end_of_write_ASLBoron_cstm_cnfg 40A8  
                            ?_adjustI2CBaudRate 0001                                 ?_hxCalcChecksum 0001  
                      __size_of_findMaxI2CSpeed 0172                                       __pintcode 0008  
                     calcChecksum@temp_checksum 0064                              _SFR_SW_ST_DET_DATA 03E3  
                                      ?___aldiv 0060                                       __ptext100 3C6C  
                                     __ptext101 4016                                       __ptext110 40A0  
                                     __ptext102 2A56                                       __ptext111 3316  
                                     __ptext103 3FF2                                       __ptext112 3772  
                                     __ptext104 409C                                       __ptext113 3FB4  
                                     __ptext105 1F6C                                       __ptext114 3E28  
                                     __ptext106 3F9E                                       __ptext115 3D2E  
                                     __ptext107 3EF6                                       __ptext116 0000  
                                     __ptext108 4004                                       __ptext109 4040  
                               _ASLB_RDResistor 404A                             __size_of_setCommI2C 0006  
                   __end_of_hxFlushOutputBuffer 3F58                    __end_ofi2_hxFlushInputBuffer 3F10  
                       _LATCH_VARACTOR_DAC_DATA 05E5                                        _I2C1_ISR 1B8A  
                             _SFR_CMOS_OUT_DATA 02F1                            __end_of_run_ASLBoron 167A  
                           ??_adjustI2CBaudRate 0060         __end_of_ASLB_OscillatorRegulatorVoltage 3EC2  
      __size_of_ASLB_OscillatorRegulatorVoltage 001A               ??_ASLB_OscillatorRegulatorVoltage 0064  
              ?_ASLB_OscillatorRegulatorVoltage 0062                 _ASLB_OscillatorRegulatorVoltage 3EA8  
                  ??_INTERRUPT_InterruptManager 0012                                     _ASLB_debug0 3E4E  
                                   _ASLB_debug1 20F8                                     _ASLB_debug2 3A98  
                                   _ASLB_debug3 34BA                                _I2C1_MasterWrite 3722  
                      ASLB_debug1@stream_status 0075                                        ?_readI2C 0070  
                                      _BAUD1CON 000F9F                               __size_of_streamSW 0004  
                        setupCmdReadbackPkt@pkt 0060                    __end_of_I2C1_MasterTRBInsert 3044  
                             __size_of_writeI2C 0060                                   _SFR_OSC0_DATA 02FA  
                                 _SFR_OSC1_DATA 02F9                                   _SFR_OSC2_DATA 02F8  
                        ?_ASLB_PierceOscillator 0060                             __end_of_hxStopTimer 3FF2  
                          _write_ASLBoron_debug 2830                          I2C1_MasterRead@address 006C  
                        __end_ofi2_hxClearArray 3E4E                                        ?_run_I2C 0078  
                                _LATCH_ADC_DATA 05D9                      __end_of_run_SPPCarbon_test 191A  
                  run_SPPCarbon_test@numRxBytes 0089                                       _hx_inData 0B40  
                                   _hxCmdFilter 1F6C                  __end_of_ASLB_VaricapDACVoltage 3B36  
                                      _ASLB_ADC 4072                    run_SPPCarbon_test@numTxBytes 008A  
                              _hx_mainDataIndex 003F                 ??_ASLB_ExternalReferenceVoltage 0064  
                   ?_filterLatchPacketResponses 0060                                  ??_calcBaudRate 0070  
        hxSPPCarbonCheckBusy_test@oddParityCalc 0071                          ?_hxFlushMainDataBuffer 0001  
                          _INTERRUPT_Initialize 4098                                       _hx_pktCmd 003B  
                                ??_calcChecksum 0063                  __size_ofi2_hxFlushOutputBuffer 0016  
                   I2C1_MasterReadTRBBuild@ptrb 0060                   __end_ofi2_hxFlushOutputBuffer 3FCA  
                               ___aldiv@divisor 0064                          I2C1_MasterRead@trBlock 03EC  
                     __end_of_adjustI2CBaudRate 3E8C                               ??_TMR0_Initialize 0063  
              __end_of_ASLB_DACReferenceVoltage 3C06                                 ___aldiv@counter 0068  
                                      _LATAbits 000F83                                        _LATBbits 000F84  
                                 _SFR_OVEN_DATA 02F6                              _SFR_SW_WR_BIT_DATA 03E2  
             __end_of_hxSPPCarbonCheckBusy_test 13B8                      _SFR_OTP_DIV_400US_LOW_DATA 03E7  
                                      _PIE0bits 000EC2                                        _PIE3bits 000EC5  
                           __CFG_BORV$VBOR_2P45 000000           hxSPPCarbonWriteReg_test@oddParityCalc 006B  
                      ??i2_TMR0_Write16bitTimer 0003             __size_of_INTERRUPT_InterruptManager 00E0  
                     ??_hxSPPCarbonReadReg_test 006C                      ??_TMR0_SetInterruptHandler 0063  
                                      _PIR0bits 000ECA                                        _PIR3bits 000ECD  
                                      i2u580_48 3D1A                                        _PIR7bits 000ED1  
         ASLB_HeaterFunctionality@stream_status 0201                                    _hx_startMain 0038  
                            _SFR_SW_WR_BYT_DATA 03E0                                ??_hxSetupPacket1 0007  
                              ??_hxSetupPacket2 0006                                        _SSP1CON1 000F96  
                                      _SSP1CON3 000F98                                        _TMR0_ISR 3CFE  
                    ??_ASLB_VaricapBiasSteering 0064                                        _SSP1STAT 000F95  
               hxSPPCarbonWriteAndVerity_test@i 0082                     hxCalcChecksum@temp_checksum 0005  
                               _hx_outDataIndex 0040                __end_of_hxSPPCarbonWriteReg_test 26D2  
                                 calcChecksum@i 0063                 __end_of_ASLB_InternalTempSensor 3B9E  
                              run_I2C@hx_inData 0078              checkAndSendLatchData@stream_status 0078  
                          _ASLB_SheetResistance 3182                                       _streamI2C 1DDA  
                         ?_write_ASLBoron_debug 00C8                __size_of_hxSPPCarbonProgram_test 017E  
              __end_of_ASLB_HeaterFunctionality 2D8E                                 _streamBoronComm 3C9E  
                        __size_of_HX_Initialize 0016                                 ?i2_hxClearArray 0001  
                         __size_of_resetSFRData 00AA                        hxISRHandle@rxPktSizeFlag 0034  
                      setCurrLimitDAC@value7bit 0060                    ASLB_CurrentLimitDACVoltage@i 00B2  
                                     copy_data0 322A                           ?_INTERRUPT_Initialize 0001  
                       i2_hxFlushMainDataBuffer 3F9E                          __size_of_setupLatchPkt 00AC  
                     __size_of_ASLB_CFCVVaricap 0008                                run_I2C@slaveAddr 0202  
                   __size_of_ASLB_ContinuityESD 0002              ASLB_AnalogMuxReadingSetup@rxBuffer 0072  
         checkAndSendLatchData@ocxo_divisor_pkt 058E            ASLB_HeaterFunctionality@heatDacWrPkt 0206  
                          ASLB_debug1@ramAddrHi 007E                                 _hx_txPacketFlag 0046  
                          ASLB_debug1@ramAddrLo 007F                                 _ASLB_CommonGate 405A  
                       __end_of_ASLB_RDResistor 4052                           _hxSPPCarbonWrite_test 3A60  
            ASLB_AnalogMuxReadingSetup@rx_index 0200       hxSPPCarbonWriteAndVerity_test@returnValue 0080  
                   ASLB_MuxOpenCircuit@rxBuffer 0062                                        __Hrparam 0000  
                    __end_of_ASLB_MuxReadingVDD 3D86                         _ASLB_ColpittsOscillator 4062  
                                     memcpy@tmp 0066                   __size_of_I2C1_BusCollisionISR 0002  
                                      __Lrparam 0000                              __CFG_BOREN$SBORDIS 000000  
                        I2C1_ISR@i2c_bytes_left 002D                                  _hxHandleTxUART 357A  
                       ??_OSCILLATOR_Initialize 0060                     ASLB_MuxOpenCircuit@rx_index 0064  
                             ??_TMR0_StartTimer 0001                                __size_of___aldiv 00CE  
                   __size_of_EUSART1_Initialize 003A                                  readI2C@numOfRx 0072  
                           hxOddParityCalc@buff 0060                                     _hxStopTimer 3FDE  
                                  _resetSFRData 2EF6                             hxOddParityCalc@temp 0066  
                           hxOddParityCalc@size 0062                                  readI2C@timeOut 0075  
              __end_of_I2C1_MasterWriteTRBBuild 392A                           ?_ASLB_SheetResistance 00C4  
                             ??_findMaxI2CSpeed 0077                                      streamI2C@i 01A1  
                                   _hx_debugVar 0037                        __size_of_setCurrLimitDAC 009E  
                                   _hx_checksum 003D                                   run_I2C@i_2001 0204  
                                 run_I2C@i_2002 0205                                      ?_streamI2C 0069  
                              __size_of_readI2C 004C                                      _T0CON0bits 000FD5  
           ASLB_CurrentLimitDACVoltage@rxBuffer 0068                           run_ASLBoron@hx_inData 00D3  
               __end_of_hxSPPCarbonReadReg_test 1B8A                        __size_of_cycleBoronPower 0018  
                   __size_of_hxFlushInputBuffer 001C                            _hxSPPCarbonRead_test 380E  
             __size_of_write_ASLBoron_cstm_cnfg 0002                                     _hx_mainData 0BC0  
                                  ??_setCommI2C 0060                          streamBoronComm@pktSize 0070  
                           I2C1_ISR@i2c_address 0041                       ?_write_ASLBoron_cstm_cnfg 0060  
                                      __ptext10 09F4                                        __ptext11 37C2  
                                      __ptext20 3182                                        __ptext12 36D2  
                                      __ptext21 00EC                                        __ptext13 13B8  
                                      __ptext30 389E                                        __ptext22 26D2  
                                      __ptext14 0DB2                                        __ptext31 3EC2  
                                      __ptext23 404A                                        __ptext15 3ACE  
                                      __ptext40 406A                                        __ptext32 3B9E  
                                      __ptext24 4052                                        __ptext16 3B02  
                                      __ptext41 32A6                                        __ptext33 3BD2  
                                      __ptext25 3EA8                                        __ptext17 3FCA  
                                      __ptext50 297A                                        __ptext42 2E4A  
                                      __ptext34 3382                                        __ptext26 3D5C  
                                      __ptext18 3456                                        __ptext51 23F6  
                                      __ptext43 3D86                                        __ptext35 30E4  
                                      __ptext27 3B36                                        __ptext19 3DB0  
                                      __ptext60 20F8                                        __ptext52 35D6  
                                      __ptext44 3C06                                        __ptext36 40A4  
                                      __ptext28 3B6A                                        __ptext61 3C9E  
                                      __ptext53 2B2C                                        __ptext45 4072  
                                      __ptext37 405A                                        __ptext29 2CC4  
                                      __ptext70 40A6                                        __ptext62 4090  
                                      __ptext54 3F10                                        __ptext46 2830  
                                      __ptext38 4062                                        __ptext71 33EC  
                                      __ptext63 1DDA                                        __ptext55 34BA  
                                      __ptext47 407A                                        __ptext39 3DD8  
                                      __ptext80 396E                                        __ptext72 40A8  
                                      __ptext64 38E4                                        __ptext56 3E70  
                                      __ptext48 4080                                        __ptext81 4026  
                                      __ptext73 40AA                                        __ptext65 2FA0  
                                      __ptext57 3A98                                        __ptext49 2EF6  
                                      __ptext90 3E8C                                        __ptext82 2D8E  
                                      __ptext74 357A                                        __ptext66 3680  
                                      __ptext58 351A                                        __ptext91 3E00  
                                      __ptext83 3F28                                        __ptext75 3FDE  
                                      __ptext67 3856                                        __ptext59 3722  
                                      __ptext84 4098                                        __ptext76 4034  
                                      __ptext68 3CCE                                        __ptext93 3CFE  
                                      __ptext85 3C3A                                        __ptext77 4094  
                                      __ptext69 3E4E                                        __ptext94 4086  
                                      __ptext86 3A26                                        __ptext78 392A  
                                      __ptext95 39EA                                        __ptext87 3F88  
                                      __ptext79 3EDC                                        __ptext96 1B8A  
                                      __ptext88 3F40                                        __ptext97 39AC  
                                      __ptext89 3F58                                        __ptext98 3F70  
                                      __ptext99 40AC                             _setupCmdReadbackPkt 3C06  
                                  _SSP1CON1bits 000F96                                    _SSP1CON2bits 000F97  
                              __size_of_run_I2C 03BE                            hxSetupPacket1@pc_cmd 0008  
           ASLB_CurrentLimitDACVoltage@rx_index 006A                            hxSetupPacket2@pc_cmd 0007  
                                    _ASLB_cnfg0 40AA                                      _ASLB_cnfg1 40A8  
                          i2_hxFlushInputBuffer 3EF6                             _write_ASLBoron_cnfg 33EC  
                    __size_of_adjustI2CBaudRate 001C                                    _SFR_EXT_DATA 02F2  
                                 run_I2C@stream 0209                  ASLB_HeaterFunctionality@stream 0202  
                           _write_ASLBoron_test 0DB2                                        _hx_abort 0036  
                                      _hx_pcCmd 003C                                   __size_of_main 00A0  
                 I2C1_MasterReadTRBBuild@length 0064                           I2C1_MasterRead@length 006B  
                                   _hx_pktState 003A                                        _hx_state 0045  
          __end_of_TMR0_DefaultInterruptHandler 408C           __size_of_TMR0_DefaultInterruptHandler 0006  
                  _TMR0_DefaultInterruptHandler 4086                            __CFG_WDTCWS$WDTCWS_7 000000  
                               _hxOddParityCalc 362E                                    _SFR_VAR_DATA 02F4  
                          _I2C1_MasterTRBInsert 2FA0                          __end_of_hxHandleTxUART 35D6  
                                 _HX_Initialize 3F88                                      _RC1STAbits 000F9D  
                      _ASLB_DACReferenceVoltage 3BD2                 __size_ofi2_TMR0_Write16bitTimer 000A  
                  hxSPPCarbonRead_test@rxBuffer 007D                           __size_of_run_ASLBoron 02C2  
                          ?_setupCmdReadbackPkt 0060                    hxSPPCarbonRead_test@txBuffer 007B  
                      ??_ASLB_TempSetDACVoltage 0064                                        int$flags 0047  
                           _SFR_SW_BYT_INT_DATA 03DF                                   _setupLatchPkt 2E4A  
                             ?i2_TMR0_StopTimer 0001                            ASLB_debug2@wr_status 0085  
                            __end_of_setCommI2C 4086              __end_of_INTERRUPT_InterruptManager 00E8  
                    _INTERRUPT_InterruptManager 0008                            __end_of_calcBaudRate 362E  
                                      _streamSW 4090                         __end_of_streamBoronComm 3CCE  
                          ?_write_ASLBoron_cnfg 0062                       ASLB_CTHERM@cmdReadbackPkt 0065  
                                      _writeI2C 351A                            ?_write_ASLBoron_test 00C7  
     ASLB_CurrentLimitDACVoltage@cmdReadbackPkt 006B                             _EUSART1_Receive_ISR 4016  
                          __end_of_calcChecksum 3CFE                                _SFR_OTP_MPP_DATA 02EA  
                            ??i2_TMR0_StopTimer 0001  checkAndSendLatchData@readback_clock_select_pkt 098E  
                   PIN_MANAGER_Initialize@state 0060                             ASLB_debug3@dataByte 0063  
                 __size_of_ASLB_HeaterFBSignals 0046                          ??_write_ASLBoron_debug 00CB  
                                    _INTCONbits 000FF2                           ?_hxSPPCarbonRead_test 007A  
                           ASLB_debug1@ramRdPkt 0200                                     _NVMCON1bits 000F81  
              checkAndSendLatchData@adc_mux_pkt 0547                                        memcpy@d1 0060  
                                      memcpy@s1 0062                       ??i2_hxFlushMainDataBuffer 0005  
                 __size_of_TMR0_Write16bitTimer 000C                             ASLB_debug1@ramWrPkt 0247  
                           ASLB_debug0@rxBuffer 0060            ASLB_DigitalRegulatorVoltage@rxBuffer 0062  
                        ??_INTERRUPT_Initialize 0060                         __end_of_ASLB_CommonGate 4062  
                           ASLB_debug1@rxBuffer 0072                           ?i2_hxFlushInputBuffer 0001  
                     run_ASLBoron@calc_checksum 01F0            ASLB_VaricapDACVoltage@cmdReadbackPkt 0065  
                      _ASLB_HeaterFunctionality 2CC4                                        intlevel2 0000  
                              ??_TMR0_StopTimer 0060                             ASLB_debug0@rx_index 0062  
             __size_of_hxSPPCarbonWriteReg_test 016A            ASLB_DigitalRegulatorVoltage@rx_index 0064  
                           _LATCH_HEAT_DAC_DATA 05E9                       ?_hxSPPCarbonWriteReg_test 0067  
                                   _SFR_P0_DATA 02FC                            ?_EUSART1_Receive_ISR 0001  
                                   _SFR_P1_DATA 02FB                           streamBoronComm@pktArr 006E  
                           ASLB_debug2@rxBuffer 0078                                    _run_ASLBoron 13B8  
                       ?_PIN_MANAGER_Initialize 0001                                ??_hxCalcChecksum 0004  
                                  ?_hxISRHandle 0001                          ?_hxSPPCarbonWrite_test 0070  
                   ?_ASLB_AnalogMuxReadingSetup 0072                        __end_of_I2C1_MasterWrite 3772  
                           ASLB_debug1@rx_index 0080                       ??_ASLB_ColpittsOscillator 0062  
                             __CFG_CLKOUTEN$OFF 000000                  __size_of_I2C1_FunctionComplete 0018  
                                  run_I2C@numRx 020E                                    run_I2C@numTx 020D  
                                  ?_ASLB_CTHERM 0062                                    run_I2C@rxPkt 025A  
              __size_of_ASLB_InternalTempSensor 0034                                    run_I2C@txPkt 0213  
                 __end_of_I2C1_FunctionComplete 3F88               checkAndSendLatchData@readbackPkts 00A9  
                                   _PPSLOCKbits 000EA0                                ?_ASLB_RDResistor 0060  
                           ASLB_debug3@rxBuffer 0061                           ?_I2C1_MasterTRBInsert 0060  
                  __end_of_EUSART1_Transmit_ISR 3C9E                        ?_I2C1_MasterReadTRBBuild 0060  
                                ?_HX_Initialize 0001                ASLB_MuxReadingVDD@cmdReadbackPkt 0065  
                           ASLB_debug2@rx_index 0084                                 ?_hxHandleTxUART 0001  
                                      run_I2C@i 0208                   ?_TMR0_DefaultInterruptHandler 0001  
                         ??_setupCmdReadbackPkt 0062                                  ?_setupLatchPkt 0065  
                           ASLB_debug3@rx_index 0064                                   run_ASLBoron@i 01F3  
    hxSPPCarbonCheckBusy_test@readbackCommState 0079                                 _SFR_OTP_MR_DATA 02EB  
                       _LATCH_OCXO_DIVISOR_DATA 06EF                           ??_write_ASLBoron_cnfg 0064  
                        ??_ASLB_SheetResistance 00C6                        __size_of_I2C1_MasterRead 0050  
            hxSPPCarbonReadReg_test@tempHxState 0077                           ??_write_ASLBoron_test 00CB  
        checkAndSendLatchData@readbackSendCount 00C2                        __size_of_I2C1_Initialize 0032  
                         __end_ofi2_hxStopTimer 4004                          __size_of_EUSART1_Write 0044  
                                  ?_ASLB_debug0 0060                                    ?_ASLB_debug1 0072  
                                  ?_ASLB_debug2 0078                                    ?_ASLB_debug3 0061  
                       ??_ASLB_PierceOscillator 0062                                      _RX1PPSbits 000EB5  
                      hxSPPCarbonProgram_test@i 006E                        hxSPPCarbonProgram_test@j 006D  
                                  hxCmdFilter@i 0009                         _hxSPPCarbonProgram_test 2278  
                                   ??_streamI2C 006C                                 _TMR0_Initialize 396E  
                  hxSPPCarbonReadReg_test@i_906 0074                    hxSPPCarbonReadReg_test@j_905 0073  
                  hxSPPCarbonReadReg_test@j_907 0075                          i2_TMR0_Write16bitTimer 4040  
                                 ?_hxClearArray 0060                        _I2C1_MasterWriteTRBBuild 38E4  
                       ??_hxFlushMainDataBuffer 0064               __size_of_ASLB_ZTCReferenceCurrent 0034  
                                  ___aldiv@sign 0069                                 _boronRxPktIndex 02FD  
                     ?_ASLB_ZTCReferenceCurrent 0062                                    ?_hxCmdFilter 0001  
                  hxSPPCarbonReadReg_test@numRX 0067                    hxSPPCarbonReadReg_test@numTX 006D  
                             ??_setCurrLimitDAC 0062               ASLB_HeaterFunctionality@ovenWrPkt 0294  
             __size_of_ASLB_ADCReferenceVoltage 002A                                     ?_ASLB_cnfg0 0060  
                                   ?_ASLB_cnfg1 0060                         __end_of_hxOddParityCalc 3680  
                              _ASLB_CFCVVaricap 406A                            write_ASLBoron_test@i 00CF  
                          write_ASLBoron_test@j 00D1                       ?_ASLB_ADCReferenceVoltage 0062  
                       ASLB_TempSetDACVoltage@i 00AC                           ??_EUSART1_Receive_ISR 0012  
              ASLB_HeaterFunctionality@rxBuffer 0072                  __end_of_PIN_MANAGER_Initialize 2E4A  
                             ??_cycleBoronPower 0060                                calcChecksum@data 0060  
                              hxClearArray@size 0062                                 _boronTxPktIndex 02FE  
                              calcChecksum@size 0062                                   ?_hxHandleTmr0 0001  
                              ASLB_ADC@rxBuffer 0060                     _SFR_OTP_DIV_400US_HIGH_DATA 03E8  
          __end_of_ASLB_DigitalRegulatorVoltage 3BD2           __size_of_ASLB_DigitalRegulatorVoltage 0034  
                  _ASLB_DigitalRegulatorVoltage 3B9E                        findMaxI2CSpeed@ramAddrHi 0200  
                            __size_of_I2C1_Stop 003E                        findMaxI2CSpeed@ramAddrLo 0201  
                    ASLB_ContinuityESD@rxBuffer 0060                           _checkAndSendLatchData 00EC  
                               hxClearArray@arr 0060                ASLB_HeaterFunctionality@rx_index 0200  
              ??_hxSPPCarbonWriteAndVerity_test 007E                 ?_hxSPPCarbonWriteAndVerity_test 007A  
         checkAndSendLatchData@readback_adc_pkt 088E                              _run_SPPCarbon_test 167A  
               checkAndSendLatchData@analog_pkt 028E                    __size_of_ASLB_MuxOpenCircuit 0034  
                 checkAndSendLatchData@bias_pkt 0400                                ASLB_ADC@rx_index 0062  
      checkAndSendLatchData@readback_analog_pkt 068E          checkAndSendLatchData@readback_bias_pkt 0800  
                                 hxClearArray@i 0063                         findMaxI2CSpeed@ramWrPkt 0252  
                            hxCalcChecksum@data 0001  
