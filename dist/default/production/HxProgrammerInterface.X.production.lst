

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri May 04 10:45:50 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK5,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK11,global,class=BANK11,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK12,global,class=BANK12,space=1,delta=1,noexec
    20                           	psect	cstackBANK10,global,class=BANK10,space=1,delta=1,noexec
    21                           	psect	cstackBANK9,global,class=BANK9,space=1,delta=1,noexec
    22                           	psect	cstackBANK8,global,class=BANK8,space=1,delta=1,noexec
    23                           	psect	cstackBANK7,global,class=BANK7,space=1,delta=1,noexec
    24                           	psect	cstackBANK6,global,class=BANK6,space=1,delta=1,noexec
    25                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1,noexec
    26                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    27                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    28                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    29                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    31                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	text0,global,reloc=2,class=CODE,delta=1
    33                           	psect	text1,global,reloc=2,class=CODE,delta=1
    34                           	psect	text2,global,reloc=2,class=CODE,delta=1
    35                           	psect	text3,global,reloc=2,class=CODE,delta=1
    36                           	psect	text4,global,reloc=2,class=CODE,delta=1
    37                           	psect	text5,global,reloc=2,class=CODE,delta=1
    38                           	psect	text6,global,reloc=2,class=CODE,delta=1
    39                           	psect	text7,global,reloc=2,class=CODE,delta=1
    40                           	psect	text8,global,reloc=2,class=CODE,delta=1
    41                           	psect	text9,global,reloc=2,class=CODE,delta=1
    42                           	psect	text10,global,reloc=2,class=CODE,delta=1
    43                           	psect	text11,global,reloc=2,class=CODE,delta=1
    44                           	psect	text12,global,reloc=2,class=CODE,delta=1
    45                           	psect	text13,global,reloc=2,class=CODE,delta=1
    46                           	psect	text14,global,reloc=2,class=CODE,delta=1
    47                           	psect	text15,global,reloc=2,class=CODE,delta=1
    48                           	psect	text16,global,reloc=2,class=CODE,delta=1
    49                           	psect	text17,global,reloc=2,class=CODE,delta=1
    50                           	psect	text18,global,reloc=2,class=CODE,delta=1
    51                           	psect	text19,global,reloc=2,class=CODE,delta=1
    52                           	psect	text20,global,reloc=2,class=CODE,delta=1
    53                           	psect	text21,global,reloc=2,class=CODE,delta=1
    54                           	psect	text22,global,reloc=2,class=CODE,delta=1
    55                           	psect	text23,global,reloc=2,class=CODE,delta=1
    56                           	psect	text24,global,reloc=2,class=CODE,delta=1
    57                           	psect	text25,global,reloc=2,class=CODE,delta=1
    58                           	psect	text26,global,reloc=2,class=CODE,delta=1
    59                           	psect	text27,global,reloc=2,class=CODE,delta=1
    60                           	psect	text28,global,reloc=2,class=CODE,delta=1
    61                           	psect	text29,global,reloc=2,class=CODE,delta=1
    62                           	psect	text30,global,reloc=2,class=CODE,delta=1
    63                           	psect	text31,global,reloc=2,class=CODE,delta=1
    64                           	psect	text32,global,reloc=2,class=CODE,delta=1
    65                           	psect	text33,global,reloc=2,class=CODE,delta=1
    66                           	psect	text34,global,reloc=2,class=CODE,delta=1
    67                           	psect	text35,global,reloc=2,class=CODE,delta=1
    68                           	psect	text36,global,reloc=2,class=CODE,delta=1
    69                           	psect	text37,global,reloc=2,class=CODE,delta=1
    70                           	psect	text38,global,reloc=2,class=CODE,delta=1
    71                           	psect	text39,global,reloc=2,class=CODE,delta=1
    72                           	psect	text40,global,reloc=2,class=CODE,delta=1
    73                           	psect	text41,global,reloc=2,class=CODE,delta=1
    74                           	psect	text42,global,reloc=2,class=CODE,delta=1
    75                           	psect	text43,global,reloc=2,class=CODE,delta=1
    76                           	psect	text44,global,reloc=2,class=CODE,delta=1
    77                           	psect	text45,global,reloc=2,class=CODE,delta=1
    78                           	psect	text46,global,reloc=2,class=CODE,delta=1
    79                           	psect	text47,global,reloc=2,class=CODE,delta=1
    80                           	psect	text48,global,reloc=2,class=CODE,delta=1
    81                           	psect	text49,global,reloc=2,class=CODE,delta=1
    82                           	psect	text50,global,reloc=2,class=CODE,delta=1
    83                           	psect	text51,global,reloc=2,class=CODE,delta=1
    84                           	psect	text52,global,reloc=2,class=CODE,delta=1
    85                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text54,global,reloc=2,class=CODE,delta=1
    87                           	psect	text55,global,reloc=2,class=CODE,delta=1
    88                           	psect	text56,global,reloc=2,class=CODE,delta=1
    89                           	psect	text57,global,reloc=2,class=CODE,delta=1
    90                           	psect	text58,global,reloc=2,class=CODE,delta=1
    91                           	psect	text59,global,reloc=2,class=CODE,delta=1
    92                           	psect	text60,global,reloc=2,class=CODE,delta=1
    93                           	psect	text61,global,reloc=2,class=CODE,delta=1
    94                           	psect	text62,global,reloc=2,class=CODE,delta=1
    95                           	psect	text63,global,reloc=2,class=CODE,delta=1
    96                           	psect	text64,global,reloc=2,class=CODE,delta=1
    97                           	psect	text65,global,reloc=2,class=CODE,delta=1
    98                           	psect	text66,global,reloc=2,class=CODE,delta=1
    99                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text68,global,reloc=2,class=CODE,delta=1
   101                           	psect	text69,global,reloc=2,class=CODE,delta=1
   102                           	psect	text70,global,reloc=2,class=CODE,delta=1
   103                           	psect	text71,global,reloc=2,class=CODE,delta=1
   104                           	psect	text72,global,reloc=2,class=CODE,delta=1
   105                           	psect	text73,global,reloc=2,class=CODE,delta=1
   106                           	psect	text74,global,reloc=2,class=CODE,delta=1
   107                           	psect	text75,global,reloc=2,class=CODE,delta=1
   108                           	psect	text76,global,reloc=2,class=CODE,delta=1
   109                           	psect	text77,global,reloc=2,class=CODE,delta=1
   110                           	psect	text78,global,reloc=2,class=CODE,delta=1
   111                           	psect	text79,global,reloc=2,class=CODE,delta=1
   112                           	psect	text80,global,reloc=2,class=CODE,delta=1
   113                           	psect	text81,global,reloc=2,class=CODE,delta=1
   114                           	psect	text82,global,reloc=2,class=CODE,delta=1
   115                           	psect	text83,global,reloc=2,class=CODE,delta=1
   116                           	psect	text84,global,reloc=2,class=CODE,delta=1
   117                           	psect	text85,global,reloc=2,class=CODE,delta=1
   118                           	psect	text86,global,reloc=2,class=CODE,delta=1
   119                           	psect	text87,global,reloc=2,class=CODE,delta=1
   120                           	psect	text88,global,reloc=2,class=CODE,delta=1
   121                           	psect	text89,global,reloc=2,class=CODE,delta=1
   122                           	psect	text90,global,reloc=2,class=CODE,delta=1
   123                           	psect	text91,global,reloc=2,class=CODE,delta=1
   124                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   125                           	psect	text93,global,reloc=2,class=CODE,delta=1
   126                           	psect	text94,global,reloc=2,class=CODE,delta=1
   127                           	psect	text95,global,reloc=2,class=CODE,delta=1
   128                           	psect	text96,global,reloc=2,class=CODE,delta=1
   129                           	psect	text97,global,reloc=2,class=CODE,delta=1
   130                           	psect	text98,global,reloc=2,class=CODE,delta=1
   131                           	psect	text99,global,reloc=2,class=CODE,delta=1
   132                           	psect	text100,global,reloc=2,class=CODE,delta=1
   133                           	psect	text101,global,reloc=2,class=CODE,delta=1
   134                           	psect	text102,global,reloc=2,class=CODE,delta=1
   135                           	psect	text103,global,reloc=2,class=CODE,delta=1
   136                           	psect	text104,global,reloc=2,class=CODE,delta=1
   137                           	psect	text105,global,reloc=2,class=CODE,delta=1
   138                           	psect	text106,global,reloc=2,class=CODE,delta=1
   139                           	psect	text107,global,reloc=2,class=CODE,delta=1
   140                           	psect	text108,global,reloc=2,class=CODE,delta=1
   141                           	psect	text109,global,reloc=2,class=CODE,delta=1
   142                           	psect	text110,global,reloc=2,class=CODE,delta=1
   143                           	psect	text111,global,reloc=2,class=CODE,delta=1
   144                           	psect	text112,global,reloc=2,class=CODE,delta=1
   145                           	psect	text113,global,reloc=2,class=CODE,delta=1
   146                           	psect	text114,global,reloc=2,class=CODE,delta=1
   147                           	psect	text115,global,reloc=2,class=CODE,delta=1
   148                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   149                           	psect	text116,global,reloc=2,class=CODE,delta=1
   150                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   151                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   152  0000                     
   153                           ; Version 1.44
   154                           ; Generated 14/09/2017 GMT
   155                           ; 
   156                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   157                           ; All rights reserved.
   158                           ; 
   159                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   160                           ; 
   161                           ; Redistribution and use in source and binary forms, with or without modification, are
   162                           ; permitted provided that the following conditions are met:
   163                           ; 
   164                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   165                           ;        conditions and the following disclaimer.
   166                           ; 
   167                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   168                           ;        of conditions and the following disclaimer in the documentation and/or other
   169                           ;        materials provided with the distribution.
   170                           ; 
   171                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   172                           ;        software without specific prior written permission.
   173                           ; 
   174                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   175                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   176                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   177                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   178                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   179                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   180                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   181                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   182                           ; 
   183                           ; 
   184                           ; Code-generator required, PIC18F47K40 Definitions
   185                           ; 
   186                           ; SFR Addresses
   187  0000                     
   188                           	psect	idataCOMRAM
   189  0040EC                     __pidataCOMRAM:
   190                           	opt stack 0
   191                           
   192                           ;initializer for _hx_txPacketFlag
   193  0040EC  01                 	db	1
   194                           
   195                           	psect	idataBANK5
   196  0040CA                     __pidataBANK5:
   197                           	opt stack 0
   198                           
   199                           ;initializer for _LATCH_OSC0_DATA
   200  0040CA  000B               	dw	11
   201  0040CC  0000               	dw	0
   202                           
   203                           	psect	nvCOMRAM
   204  000043                     __pnvCOMRAM:
   205                           	opt stack 0
   206  000043                     _timer0ReloadVal16bit:
   207                           	opt stack 0
   208  000043                     	ds	2
   209  000045                     _hx_state:
   210                           	opt stack 0
   211  000045                     	ds	1
   212                           
   213                           	psect	nvBANK3
   214  0003FB                     __pnvBANK3:
   215                           	opt stack 0
   216  0003FB                     _TMR0_InterruptHandler:
   217                           	opt stack 0
   218  0003FB                     	ds	3
   219  0003FE                     _eusart1TxBufferRemaining:
   220                           	opt stack 0
   221  0003FE                     	ds	1
   222  0000                     _SSP1DATPPSbits	set	3768
   223  0000                     _SSP1CLKPPSbits	set	3767
   224  0000                     _RX1PPSbits	set	3765
   225  0000                     _RC2PPS	set	3833
   226  0000                     _RC1PPS	set	3832
   227  0000                     _RB1PPS	set	3824
   228  0000                     _PPSLOCKbits	set	3744
   229  0000                     _PPSLOCK	set	3744
   230  0000                     _OSCTUNE	set	3805
   231  0000                     _OSCFRQ	set	3806
   232  0000                     _OSCEN	set	3804
   233  0000                     _OSCCON3	set	3802
   234  0000                     _OSCCON1	set	3800
   235  0000                     _PIR0bits	set	3786
   236  0000                     _PIE0bits	set	3778
   237  0000                     _PIR3bits	set	3789
   238  0000                     _PIE3bits	set	3781
   239  0000                     _PIR7bits	set	3793
   240  0000                     _ODCOND	set	3876
   241  0000                     _ODCONC	set	3871
   242  0000                     _ODCONB	set	3863
   243  0000                     _ODCONA	set	3855
   244  0000                     _ODCONE	set	3884
   245  0000                     _WPUC	set	3872
   246  0000                     _WPUA	set	3856
   247  0000                     _WPUB	set	3864
   248  0000                     _WPUE	set	3885
   249  0000                     _WPUD	set	3877
   250  0000                     _ANSELA	set	3857
   251  0000                     _ANSELE	set	3886
   252  0000                     _ANSELD	set	3878
   253  0000                     _ANSELB	set	3865
   254  0000                     _ANSELC	set	3873
   255  0000                     _T0CON0bits	set	4053
   256  0000                     _TMR0L	set	4051
   257  0000                     _TMR0H	set	4052
   258  0000                     _T0CON1	set	4054
   259  0000                     _T0CON0	set	4053
   260  0000                     _TRISD	set	3979
   261  0000                     _TRISC	set	3978
   262  0000                     _TRISB	set	3977
   263  0000                     _TRISA	set	3976
   264  0000                     _TRISE	set	3980
   265  0000                     _LATC	set	3973
   266  0000                     _LATB	set	3972
   267  0000                     _LATD	set	3974
   268  0000                     _LATE	set	3975
   269  0000                     _RC1REG	set	3993
   270  0000                     _RC1STAbits	set	3997
   271  0000                     _TX1REG	set	3994
   272  0000                     _SP1BRGH	set	3996
   273  0000                     _SP1BRGL	set	3995
   274  0000                     _TX1STA	set	3998
   275  0000                     _RC1STA	set	3997
   276  0000                     _BAUD1CON	set	3999
   277  0000                     _SSP1BUF	set	3986
   278  0000                     _SSP1CON2bits	set	3991
   279  0000                     _SSP1CON1bits	set	3990
   280  0000                     _SSP1CON3	set	3992
   281  0000                     _SSP1CON1	set	3990
   282  0000                     _SSP1STAT	set	3989
   283  0000                     _SSP1ADD	set	3987
   284  0000                     _PORTBbits	set	3982
   285  0000                     _PORTA	set	3981
   286  0000                     _LATAbits	set	3971
   287  0000                     _PORTAbits	set	3981
   288  0000                     _LATBbits	set	3972
   289  0000                     _LATA	set	3971
   290  0000                     _NVMCON2	set	3970
   291  0000                     _NVMCON1bits	set	3969
   292  0000                     _NVMDAT	set	3968
   293  0000                     _NVMADRH	set	3967
   294  0000                     _NVMADRL	set	3966
   295  0000                     _INTCONbits	set	4082
   296  0000                     _GIE	set	32663
   297                           
   298                           ; #config settings
   299  0000                     
   300                           	psect	cinit
   301  003254                     __pcinit:
   302                           	opt stack 0
   303  003254                     start_initialization:
   304                           	opt stack 0
   305  003254                     __initialization:
   306                           	opt stack 0
   307                           
   308                           ; Initialize objects allocated to BANK5 (4 bytes)
   309                           ; load TBLPTR registers with __pidataBANK5
   310  003254  0ECA               	movlw	low __pidataBANK5
   311  003256  6EF6               	movwf	tblptrl,c
   312  003258  0E40               	movlw	high __pidataBANK5
   313  00325A  6EF7               	movwf	tblptrh,c
   314  00325C  0E00               	movlw	low (__pidataBANK5 shr (0+16))
   315  00325E  6EF8               	movwf	tblptru,c
   316  003260  EE05  F0F9         	lfsr	0,__pdataBANK5
   317  003264  EE10 F004          	lfsr	1,4
   318  003268                     copy_data0:
   319  003268  0009               	tblrd		*+
   320  00326A  CFF5 FFEE          	movff	tablat,postinc0
   321  00326E  50E5               	movf	postdec1,w,c
   322  003270  50E1               	movf	fsr1l,w,c
   323  003272  E1FA               	bnz	copy_data0
   324                           
   325                           ; Initialize objects allocated to COMRAM (1 bytes)
   326                           ; load TBLPTR registers with __pidataCOMRAM
   327  003274  0EEC               	movlw	low __pidataCOMRAM
   328  003276  6EF6               	movwf	tblptrl,c
   329  003278  0E40               	movlw	high __pidataCOMRAM
   330  00327A  6EF7               	movwf	tblptrh,c
   331  00327C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   332  00327E  6EF8               	movwf	tblptru,c
   333  003280  0009               	tblrd		*+	;fetch initializer
   334  003282  CFF5 F046          	movff	tablat,__pdataCOMRAM
   335                           
   336                           ; Clear objects allocated to BANK11 (253 bytes)
   337  003286  EE0B  F000         	lfsr	0,__pbssBANK11
   338  00328A  0EFD               	movlw	253
   339  00328C                     clear_0:
   340  00328C  6AEE               	clrf	postinc0,c
   341  00328E  06E8               	decf	wreg,f,c
   342  003290  E1FD               	bnz	clear_0
   343                           
   344                           ; Clear objects allocated to BANK6 (34 bytes)
   345  003292  EE06  F0D5         	lfsr	0,__pbssBANK6
   346  003296  0E22               	movlw	34
   347  003298                     clear_1:
   348  003298  6AEE               	clrf	postinc0,c
   349  00329A  06E8               	decf	wreg,f,c
   350  00329C  E1FD               	bnz	clear_1
   351                           
   352                           ; Clear objects allocated to BANK5 (36 bytes)
   353  00329E  EE05  F0D5         	lfsr	0,__pbssBANK5
   354  0032A2  0E24               	movlw	36
   355  0032A4                     clear_2:
   356  0032A4  6AEE               	clrf	postinc0,c
   357  0032A6  06E8               	decf	wreg,f,c
   358  0032A8  E1FD               	bnz	clear_2
   359                           
   360                           ; Clear objects allocated to BANK4 (42 bytes)
   361  0032AA  EE04  F0D5         	lfsr	0,__pbssBANK4
   362  0032AE  0E2A               	movlw	42
   363  0032B0                     clear_3:
   364  0032B0  6AEE               	clrf	postinc0,c
   365  0032B2  06E8               	decf	wreg,f,c
   366  0032B4  E1FD               	bnz	clear_3
   367                           
   368                           ; Clear objects allocated to BANK3 (38 bytes)
   369  0032B6  EE03  F0D5         	lfsr	0,__pbssBANK3
   370  0032BA  0E26               	movlw	38
   371  0032BC                     clear_4:
   372  0032BC  6AEE               	clrf	postinc0,c
   373  0032BE  06E8               	decf	wreg,f,c
   374  0032C0  E1FD               	bnz	clear_4
   375                           
   376                           ; Clear objects allocated to BANK2 (37 bytes)
   377  0032C2  EE02  F0DB         	lfsr	0,__pbssBANK2
   378  0032C6  0E25               	movlw	37
   379  0032C8                     clear_5:
   380  0032C8  6AEE               	clrf	postinc0,c
   381  0032CA  06E8               	decf	wreg,f,c
   382  0032CC  E1FD               	bnz	clear_5
   383                           
   384                           ; Clear objects allocated to COMRAM (31 bytes)
   385  0032CE  EE00  F024         	lfsr	0,__pbssCOMRAM
   386  0032D2  0E1F               	movlw	31
   387  0032D4                     clear_6:
   388  0032D4  6AEE               	clrf	postinc0,c
   389  0032D6  06E8               	decf	wreg,f,c
   390  0032D8  E1FD               	bnz	clear_6
   391  0032DA                     end_of_initialization:
   392                           	opt stack 0
   393  0032DA                     __end_of__initialization:
   394                           	opt stack 0
   395  0032DA  9047               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   396  0032DC  9247               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   397  0032DE  0100               	movlb	0
   398  0032E0  EF41  F018         	goto	_main	;jump to C main() function
   399                           tblptru	equ	0xFF8
   400                           tblptrh	equ	0xFF7
   401                           tblptrl	equ	0xFF6
   402                           tablat	equ	0xFF5
   403                           postinc0	equ	0xFEE
   404                           wreg	equ	0xFE8
   405                           postdec1	equ	0xFE5
   406                           fsr1l	equ	0xFE1
   407                           
   408                           	psect	bssCOMRAM
   409  000024                     __pbssCOMRAM:
   410                           	opt stack 0
   411  000024                     _p_i2c1_current:
   412                           	opt stack 0
   413  000024                     	ds	2
   414  000026                     _p_i2c1_trb_current:
   415                           	opt stack 0
   416  000026                     	ds	2
   417  000028                     _eeprom_currAddr:
   418                           	opt stack 0
   419  000028                     	ds	2
   420  00002A                     _eusart1TxTail:
   421                           	opt stack 0
   422  00002A                     	ds	1
   423  00002B                     _eusart1TxHead:
   424                           	opt stack 0
   425  00002B                     	ds	1
   426  00002C                     I2C1_ISR@i2c_10bit_address_restart:
   427                           	opt stack 0
   428  00002C                     	ds	1
   429  00002D                     I2C1_ISR@i2c_bytes_left:
   430                           	opt stack 0
   431  00002D                     	ds	1
   432  00002E                     _i2c1_trb_count:
   433                           	opt stack 0
   434  00002E                     	ds	1
   435  00002F                     _i2c1_state:
   436                           	opt stack 0
   437  00002F                     	ds	1
   438  000030                     _BORON_COMM_TYPE:
   439                           	opt stack 0
   440  000030                     	ds	1
   441  000031                     hxISRHandle@rxHxPktFlag:
   442                           	opt stack 0
   443  000031                     	ds	1
   444  000032                     hxISRHandle@pktSize:
   445                           	opt stack 0
   446  000032                     	ds	1
   447  000033                     hxISRHandle@rxHxCmdFlag:
   448                           	opt stack 0
   449  000033                     	ds	1
   450  000034                     hxISRHandle@rxPktSizeFlag:
   451                           	opt stack 0
   452  000034                     	ds	1
   453  000035                     hxISRHandle@currentByteCounter:
   454                           	opt stack 0
   455  000035                     	ds	1
   456  000036                     _hx_abort:
   457                           	opt stack 0
   458  000036                     	ds	1
   459  000037                     _hx_debugVar:
   460                           	opt stack 0
   461  000037                     	ds	1
   462  000038                     _hx_startMain:
   463                           	opt stack 0
   464  000038                     	ds	1
   465  000039                     _hx_rxFullPktFlag:
   466                           	opt stack 0
   467  000039                     	ds	1
   468  00003A                     _hx_pktState:
   469                           	opt stack 0
   470  00003A                     	ds	1
   471  00003B                     _hx_pktCmd:
   472                           	opt stack 0
   473  00003B                     	ds	1
   474  00003C                     _hx_pcCmd:
   475                           	opt stack 0
   476  00003C                     	ds	1
   477  00003D                     _hx_checksum:
   478                           	opt stack 0
   479  00003D                     	ds	1
   480  00003E                     _hx_inDataIndex:
   481                           	opt stack 0
   482  00003E                     	ds	1
   483  00003F                     _hx_mainDataIndex:
   484                           	opt stack 0
   485  00003F                     	ds	1
   486  000040                     _hx_outDataIndex:
   487                           	opt stack 0
   488  000040                     	ds	1
   489  000041                     I2C1_ISR@i2c_address:
   490                           	opt stack 0
   491  000041                     	ds	2
   492                           tblptru	equ	0xFF8
   493                           tblptrh	equ	0xFF7
   494                           tblptrl	equ	0xFF6
   495                           tablat	equ	0xFF5
   496                           postinc0	equ	0xFEE
   497                           wreg	equ	0xFE8
   498                           postdec1	equ	0xFE5
   499                           fsr1l	equ	0xFE1
   500                           
   501                           	psect	dataCOMRAM
   502  000046                     __pdataCOMRAM:
   503                           	opt stack 0
   504  000046                     _hx_txPacketFlag:
   505                           	opt stack 0
   506  000046                     	ds	1
   507                           tblptru	equ	0xFF8
   508                           tblptrh	equ	0xFF7
   509                           tblptrl	equ	0xFF6
   510                           tablat	equ	0xFF5
   511                           postinc0	equ	0xFEE
   512                           wreg	equ	0xFE8
   513                           postdec1	equ	0xFE5
   514                           fsr1l	equ	0xFE1
   515                           
   516                           	psect	bssBANK2
   517  0002DB                     __pbssBANK2:
   518                           	opt stack 0
   519  0002DB                     _i2c1_object:
   520                           	opt stack 0
   521  0002DB                     	ds	7
   522  0002E2                     _LATCH_OVEN_DATA:
   523                           	opt stack 0
   524  0002E2                     	ds	4
   525  0002E6                     _SFR_OTP_WR_ADDR_LOW_DATA:
   526                           	opt stack 0
   527  0002E6                     	ds	1
   528  0002E7                     _SFR_OTP_WR_ADDR_HIGH_DATA:
   529                           	opt stack 0
   530  0002E7                     	ds	1
   531  0002E8                     _SFR_OTP_MRR_HI_DATA:
   532                           	opt stack 0
   533  0002E8                     	ds	1
   534  0002E9                     _SFR_OTP_MRR_LO_DATA:
   535                           	opt stack 0
   536  0002E9                     	ds	1
   537  0002EA                     _SFR_OTP_MPP_DATA:
   538                           	opt stack 0
   539  0002EA                     	ds	1
   540  0002EB                     _SFR_OTP_MR_DATA:
   541                           	opt stack 0
   542  0002EB                     	ds	1
   543  0002EC                     _SFR_ASIC_REV_DATA:
   544                           	opt stack 0
   545  0002EC                     	ds	1
   546  0002ED                     _SFR_ADC_MUX_DATA:
   547                           	opt stack 0
   548  0002ED                     	ds	1
   549  0002EE                     _SFR_ADC_DIV_DATA:
   550                           	opt stack 0
   551  0002EE                     	ds	1
   552  0002EF                     _SFR_CLK_SEL_DATA:
   553                           	opt stack 0
   554  0002EF                     	ds	1
   555  0002F0                     _SFR_OCXO_DIV_DATA:
   556                           	opt stack 0
   557  0002F0                     	ds	1
   558  0002F1                     _SFR_CMOS_OUT_DATA:
   559                           	opt stack 0
   560  0002F1                     	ds	1
   561  0002F2                     _SFR_EXT_DATA:
   562                           	opt stack 0
   563  0002F2                     	ds	1
   564  0002F3                     _SFR_BIAS_DATA:
   565                           	opt stack 0
   566  0002F3                     	ds	1
   567  0002F4                     _SFR_VAR_DATA:
   568                           	opt stack 0
   569  0002F4                     	ds	1
   570  0002F5                     _SFR_HEAT_DATA:
   571                           	opt stack 0
   572  0002F5                     	ds	1
   573  0002F6                     _SFR_OVEN_DATA:
   574                           	opt stack 0
   575  0002F6                     	ds	1
   576  0002F7                     _SFR_ANALOG_DATA:
   577                           	opt stack 0
   578  0002F7                     	ds	1
   579  0002F8                     _SFR_OSC2_DATA:
   580                           	opt stack 0
   581  0002F8                     	ds	1
   582  0002F9                     _SFR_OSC1_DATA:
   583                           	opt stack 0
   584  0002F9                     	ds	1
   585  0002FA                     _SFR_OSC0_DATA:
   586                           	opt stack 0
   587  0002FA                     	ds	1
   588  0002FB                     _SFR_P1_DATA:
   589                           	opt stack 0
   590  0002FB                     	ds	1
   591  0002FC                     _SFR_P0_DATA:
   592                           	opt stack 0
   593  0002FC                     	ds	1
   594  0002FD                     _boronRxPktIndex:
   595                           	opt stack 0
   596  0002FD                     	ds	1
   597  0002FE                     _boronTxPktIndex:
   598                           	opt stack 0
   599  0002FE                     	ds	1
   600  0002FF                     _hx_rxOverflowFlag:
   601                           	opt stack 0
   602  0002FF                     	ds	1
   603                           tblptru	equ	0xFF8
   604                           tblptrh	equ	0xFF7
   605                           tblptrl	equ	0xFF6
   606                           tablat	equ	0xFF5
   607                           postinc0	equ	0xFEE
   608                           wreg	equ	0xFE8
   609                           postdec1	equ	0xFE5
   610                           fsr1l	equ	0xFE1
   611                           
   612                           	psect	bssBANK3
   613  0003D5                     __pbssBANK3:
   614                           	opt stack 0
   615  0003D5                     I2C1_ISR@pi2c_buf_ptr:
   616                           	opt stack 0
   617  0003D5                     	ds	2
   618  0003D7                     _eusart1RxCount:
   619                           	opt stack 0
   620  0003D7                     	ds	1
   621  0003D8                     _eusart1RxTail:
   622                           	opt stack 0
   623  0003D8                     	ds	1
   624  0003D9                     _eusart1RxHead:
   625                           	opt stack 0
   626  0003D9                     	ds	1
   627  0003DA                     _SFR_SW_STOP_DET_ST_DATA:
   628                           	opt stack 0
   629  0003DA                     	ds	1
   630  0003DB                     _SFR_SW_STOP_DET_DATA:
   631                           	opt stack 0
   632  0003DB                     	ds	1
   633  0003DC                     _SFR_SW_BIT_DATA_ST_DATA:
   634                           	opt stack 0
   635  0003DC                     	ds	1
   636  0003DD                     _SFR_SW_BIT_DATA_DATA:
   637                           	opt stack 0
   638  0003DD                     	ds	1
   639  0003DE                     _SFR_SW_DET_BIT_DATA:
   640                           	opt stack 0
   641  0003DE                     	ds	1
   642  0003DF                     _SFR_SW_BYT_INT_DATA:
   643                           	opt stack 0
   644  0003DF                     	ds	1
   645  0003E0                     _SFR_SW_WR_BYT_DATA:
   646                           	opt stack 0
   647  0003E0                     	ds	1
   648  0003E1                     _SFR_SW_BIT_INT_DATA:
   649                           	opt stack 0
   650  0003E1                     	ds	1
   651  0003E2                     _SFR_SW_WR_BIT_DATA:
   652                           	opt stack 0
   653  0003E2                     	ds	1
   654  0003E3                     _SFR_SW_ST_DET_DATA:
   655                           	opt stack 0
   656  0003E3                     	ds	1
   657  0003E4                     _SFR_SW_100US_HIGH_DATA:
   658                           	opt stack 0
   659  0003E4                     	ds	1
   660  0003E5                     _SFR_SW_100US_LOW_DATA:
   661                           	opt stack 0
   662  0003E5                     	ds	1
   663  0003E6                     _SFR_OTP_ST_TIMING_DATA:
   664                           	opt stack 0
   665  0003E6                     	ds	1
   666  0003E7                     _SFR_OTP_DIV_400US_LOW_DATA:
   667                           	opt stack 0
   668  0003E7                     	ds	1
   669  0003E8                     _SFR_OTP_DIV_400US_HIGH_DATA:
   670                           	opt stack 0
   671  0003E8                     	ds	1
   672  0003E9                     _SFR_OTP_DIV_100US_LOW_DATA:
   673                           	opt stack 0
   674  0003E9                     	ds	1
   675  0003EA                     _SFR_OTP_DIV_100US_HIGH_DATA:
   676                           	opt stack 0
   677  0003EA                     	ds	1
   678  0003EB                     _SFR_OTP_WR_DATA_DATA:
   679                           	opt stack 0
   680  0003EB                     	ds	1
   681  0003EC                     I2C1_MasterRead@trBlock:
   682                           	opt stack 0
   683  0003EC                     	ds	5
   684  0003F1                     I2C1_MasterWrite@trBlock:
   685                           	opt stack 0
   686  0003F1                     	ds	5
   687  0003F6                     _i2c1_tr_queue:
   688                           	opt stack 0
   689  0003F6                     	ds	5
   690                           tblptru	equ	0xFF8
   691                           tblptrh	equ	0xFF7
   692                           tblptrl	equ	0xFF6
   693                           tablat	equ	0xFF5
   694                           postinc0	equ	0xFEE
   695                           wreg	equ	0xFE8
   696                           postdec1	equ	0xFE5
   697                           fsr1l	equ	0xFE1
   698                           
   699                           	psect	bssBANK4
   700  0004D5                     __pbssBANK4:
   701                           	opt stack 0
   702  0004D5                     _boronRxPkt:
   703                           	opt stack 0
   704  0004D5                     	ds	16
   705  0004E5                     _boronTxPkt:
   706                           	opt stack 0
   707  0004E5                     	ds	16
   708  0004F5                     ASLB_debug2@F12373:
   709                           	opt stack 0
   710  0004F5                     	ds	10
   711                           tblptru	equ	0xFF8
   712                           tblptrh	equ	0xFF7
   713                           tblptrl	equ	0xFF6
   714                           tablat	equ	0xFF5
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           postdec1	equ	0xFE5
   718                           fsr1l	equ	0xFE1
   719                           
   720                           	psect	bssBANK5
   721  0005D5                     __pbssBANK5:
   722                           	opt stack 0
   723  0005D5                     _LATCH_CLOCK_SELECT_DATA:
   724                           	opt stack 0
   725  0005D5                     	ds	4
   726  0005D9                     _LATCH_ADC_DATA:
   727                           	opt stack 0
   728  0005D9                     	ds	4
   729  0005DD                     _LATCH_CMOS_DATA:
   730                           	opt stack 0
   731  0005DD                     	ds	4
   732  0005E1                     _LATCH_BIAS_DATA:
   733                           	opt stack 0
   734  0005E1                     	ds	4
   735  0005E5                     _LATCH_VARACTOR_DAC_DATA:
   736                           	opt stack 0
   737  0005E5                     	ds	4
   738  0005E9                     _LATCH_HEAT_DAC_DATA:
   739                           	opt stack 0
   740  0005E9                     	ds	4
   741  0005ED                     _LATCH_ANALOG_DATA:
   742                           	opt stack 0
   743  0005ED                     	ds	4
   744  0005F1                     _LATCH_OSC2_DATA:
   745                           	opt stack 0
   746  0005F1                     	ds	4
   747  0005F5                     _LATCH_OSC1_DATA:
   748                           	opt stack 0
   749  0005F5                     	ds	4
   750                           tblptru	equ	0xFF8
   751                           tblptrh	equ	0xFF7
   752                           tblptrl	equ	0xFF6
   753                           tablat	equ	0xFF5
   754                           postinc0	equ	0xFEE
   755                           wreg	equ	0xFE8
   756                           postdec1	equ	0xFE5
   757                           fsr1l	equ	0xFE1
   758                           
   759                           	psect	dataBANK5
   760  0005F9                     __pdataBANK5:
   761                           	opt stack 0
   762  0005F9                     _LATCH_OSC0_DATA:
   763                           	opt stack 0
   764  0005F9                     	ds	4
   765                           tblptru	equ	0xFF8
   766                           tblptrh	equ	0xFF7
   767                           tblptrl	equ	0xFF6
   768                           tablat	equ	0xFF5
   769                           postinc0	equ	0xFEE
   770                           wreg	equ	0xFE8
   771                           postdec1	equ	0xFE5
   772                           fsr1l	equ	0xFE1
   773                           
   774                           	psect	bssBANK6
   775  0006D5                     __pbssBANK6:
   776                           	opt stack 0
   777  0006D5                     _tsld:
   778                           	opt stack 0
   779  0006D5                     	ds	26
   780  0006EF                     _LATCH_OCXO_DIVISOR_DATA:
   781                           	opt stack 0
   782  0006EF                     	ds	4
   783  0006F3                     _LATCH_ADC_MUX_DATA:
   784                           	opt stack 0
   785  0006F3                     	ds	4
   786                           tblptru	equ	0xFF8
   787                           tblptrh	equ	0xFF7
   788                           tblptrl	equ	0xFF6
   789                           tablat	equ	0xFF5
   790                           postinc0	equ	0xFEE
   791                           wreg	equ	0xFE8
   792                           postdec1	equ	0xFE5
   793                           fsr1l	equ	0xFE1
   794                           
   795                           	psect	bssBANK11
   796  000B00                     __pbssBANK11:
   797                           	opt stack 0
   798  000B00                     _eusart1TxBuffer:
   799                           	opt stack 0
   800  000B00                     	ds	64
   801  000B40                     _hx_inData:
   802                           	opt stack 0
   803  000B40                     	ds	64
   804  000B80                     _hx_outData:
   805                           	opt stack 0
   806  000B80                     	ds	64
   807  000BC0                     _hx_mainData:
   808                           	opt stack 0
   809  000BC0                     	ds	61
   810                           tblptru	equ	0xFF8
   811                           tblptrh	equ	0xFF7
   812                           tblptrl	equ	0xFF6
   813                           tablat	equ	0xFF5
   814                           postinc0	equ	0xFEE
   815                           wreg	equ	0xFE8
   816                           postdec1	equ	0xFE5
   817                           fsr1l	equ	0xFE1
   818                           
   819                           	psect	cstackBANK12
   820  000C00                     __pcstackBANK12:
   821                           	opt stack 0
   822  000C00                     run_ASLBoron@cnfg_arr:
   823                           	opt stack 0
   824                           
   825                           ; 256 bytes @ 0x0
   826  000C00                     	ds	256
   827                           tblptru	equ	0xFF8
   828                           tblptrh	equ	0xFF7
   829                           tblptrl	equ	0xFF6
   830                           tablat	equ	0xFF5
   831                           postinc0	equ	0xFEE
   832                           wreg	equ	0xFE8
   833                           postdec1	equ	0xFE5
   834                           fsr1l	equ	0xFE1
   835                           
   836                           	psect	cstackBANK10
   837  000A00                     __pcstackBANK10:
   838                           	opt stack 0
   839  000A00                     checkAndSendLatchData@clock_select_pkt:
   840                           	opt stack 0
   841                           
   842                           ; 71 bytes @ 0x0
   843  000A00                     	ds	71
   844                           tblptru	equ	0xFF8
   845                           tblptrh	equ	0xFF7
   846                           tblptrl	equ	0xFF6
   847                           tablat	equ	0xFF5
   848                           postinc0	equ	0xFEE
   849                           wreg	equ	0xFE8
   850                           postdec1	equ	0xFE5
   851                           fsr1l	equ	0xFE1
   852                           
   853                           	psect	cstackBANK9
   854  000900                     __pcstackBANK9:
   855                           	opt stack 0
   856  000900                     checkAndSendLatchData@readback_adc_mux_pkt:
   857                           	opt stack 0
   858                           
   859                           ; 71 bytes @ 0x0
   860  000900                     	ds	71
   861  000947                     checkAndSendLatchData@readback_ocxo_divisor_pkt:
   862                           	opt stack 0
   863                           
   864                           ; 71 bytes @ 0x47
   865  000947                     	ds	71
   866  00098E                     checkAndSendLatchData@readback_clock_select_pkt:
   867                           	opt stack 0
   868                           
   869                           ; 71 bytes @ 0x8E
   870  00098E                     	ds	71
   871                           tblptru	equ	0xFF8
   872                           tblptrh	equ	0xFF7
   873                           tblptrl	equ	0xFF6
   874                           tablat	equ	0xFF5
   875                           postinc0	equ	0xFEE
   876                           wreg	equ	0xFE8
   877                           postdec1	equ	0xFE5
   878                           fsr1l	equ	0xFE1
   879                           
   880                           	psect	cstackBANK8
   881  000800                     __pcstackBANK8:
   882                           	opt stack 0
   883  000800                     checkAndSendLatchData@readback_bias_pkt:
   884                           	opt stack 0
   885                           
   886                           ; 71 bytes @ 0x0
   887  000800                     	ds	71
   888  000847                     checkAndSendLatchData@readback_cmos_pkt:
   889                           	opt stack 0
   890                           
   891                           ; 71 bytes @ 0x47
   892  000847                     	ds	71
   893  00088E                     checkAndSendLatchData@readback_adc_pkt:
   894                           	opt stack 0
   895                           
   896                           ; 71 bytes @ 0x8E
   897  00088E                     	ds	71
   898                           tblptru	equ	0xFF8
   899                           tblptrh	equ	0xFF7
   900                           tblptrl	equ	0xFF6
   901                           tablat	equ	0xFF5
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           postdec1	equ	0xFE5
   905                           fsr1l	equ	0xFE1
   906                           
   907                           	psect	cstackBANK7
   908  000700                     __pcstackBANK7:
   909                           	opt stack 0
   910  000700                     checkAndSendLatchData@readback_oven_pkt:
   911                           	opt stack 0
   912                           
   913                           ; 71 bytes @ 0x0
   914  000700                     	ds	71
   915  000747                     checkAndSendLatchData@readback_heat_dac_pkt:
   916                           	opt stack 0
   917                           
   918                           ; 71 bytes @ 0x47
   919  000747                     	ds	71
   920  00078E                     checkAndSendLatchData@readback_varactor_dac_pkt:
   921                           	opt stack 0
   922                           
   923                           ; 71 bytes @ 0x8E
   924  00078E                     	ds	71
   925                           tblptru	equ	0xFF8
   926                           tblptrh	equ	0xFF7
   927                           tblptrl	equ	0xFF6
   928                           tablat	equ	0xFF5
   929                           postinc0	equ	0xFEE
   930                           wreg	equ	0xFE8
   931                           postdec1	equ	0xFE5
   932                           fsr1l	equ	0xFE1
   933                           
   934                           	psect	cstackBANK6
   935  000600                     __pcstackBANK6:
   936                           	opt stack 0
   937  000600                     checkAndSendLatchData@readback_osc1_pkt:
   938                           	opt stack 0
   939                           
   940                           ; 71 bytes @ 0x0
   941  000600                     	ds	71
   942  000647                     checkAndSendLatchData@readback_osc2_pkt:
   943                           	opt stack 0
   944                           
   945                           ; 71 bytes @ 0x47
   946  000647                     	ds	71
   947  00068E                     checkAndSendLatchData@readback_analog_pkt:
   948                           	opt stack 0
   949                           
   950                           ; 71 bytes @ 0x8E
   951  00068E                     	ds	71
   952                           tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           tblptrl	equ	0xFF6
   955                           tablat	equ	0xFF5
   956                           postinc0	equ	0xFEE
   957                           wreg	equ	0xFE8
   958                           postdec1	equ	0xFE5
   959                           fsr1l	equ	0xFE1
   960                           
   961                           	psect	cstackBANK5
   962  000500                     __pcstackBANK5:
   963                           	opt stack 0
   964  000500                     checkAndSendLatchData@readback_osc0_pkt:
   965                           	opt stack 0
   966                           
   967                           ; 71 bytes @ 0x0
   968  000500                     	ds	71
   969  000547                     checkAndSendLatchData@adc_mux_pkt:
   970                           	opt stack 0
   971                           
   972                           ; 71 bytes @ 0x47
   973  000547                     	ds	71
   974  00058E                     checkAndSendLatchData@ocxo_divisor_pkt:
   975                           	opt stack 0
   976                           
   977                           ; 71 bytes @ 0x8E
   978  00058E                     	ds	71
   979                           tblptru	equ	0xFF8
   980                           tblptrh	equ	0xFF7
   981                           tblptrl	equ	0xFF6
   982                           tablat	equ	0xFF5
   983                           postinc0	equ	0xFEE
   984                           wreg	equ	0xFE8
   985                           postdec1	equ	0xFE5
   986                           fsr1l	equ	0xFE1
   987                           
   988                           	psect	cstackBANK4
   989  000400                     __pcstackBANK4:
   990                           	opt stack 0
   991  000400                     checkAndSendLatchData@bias_pkt:
   992                           	opt stack 0
   993                           
   994                           ; 71 bytes @ 0x0
   995  000400                     	ds	71
   996  000447                     checkAndSendLatchData@cmos_pkt:
   997                           	opt stack 0
   998                           
   999                           ; 71 bytes @ 0x47
  1000  000447                     	ds	71
  1001  00048E                     checkAndSendLatchData@adc_pkt:
  1002                           	opt stack 0
  1003                           
  1004                           ; 71 bytes @ 0x8E
  1005  00048E                     	ds	71
  1006                           tblptru	equ	0xFF8
  1007                           tblptrh	equ	0xFF7
  1008                           tblptrl	equ	0xFF6
  1009                           tablat	equ	0xFF5
  1010                           postinc0	equ	0xFEE
  1011                           wreg	equ	0xFE8
  1012                           postdec1	equ	0xFE5
  1013                           fsr1l	equ	0xFE1
  1014                           
  1015                           	psect	cstackBANK3
  1016  000300                     __pcstackBANK3:
  1017                           	opt stack 0
  1018  000300                     checkAndSendLatchData@oven_pkt:
  1019                           	opt stack 0
  1020                           
  1021                           ; 71 bytes @ 0x0
  1022  000300                     	ds	71
  1023  000347                     checkAndSendLatchData@heat_dac_pkt:
  1024                           	opt stack 0
  1025                           
  1026                           ; 71 bytes @ 0x47
  1027  000347                     	ds	71
  1028  00038E                     checkAndSendLatchData@varactor_dac_pkt:
  1029                           	opt stack 0
  1030                           
  1031                           ; 71 bytes @ 0x8E
  1032  00038E                     	ds	71
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           postinc0	equ	0xFEE
  1038                           wreg	equ	0xFE8
  1039                           postdec1	equ	0xFE5
  1040                           fsr1l	equ	0xFE1
  1041                           
  1042                           	psect	cstackBANK2
  1043  000200                     __pcstackBANK2:
  1044                           	opt stack 0
  1045  000200                     ASLB_HeaterFunctionality@rx_index:
  1046                           	opt stack 0
  1047  000200                     ASLB_AnalogMuxReadingSetup@rx_index:
  1048                           	opt stack 0
  1049  000200                     findMaxI2CSpeed@ramAddrHi:
  1050                           	opt stack 0
  1051  000200                     run_I2C@debugArr:
  1052                           	opt stack 0
  1053  000200                     ASLB_debug1@ramRdPkt:
  1054                           	opt stack 0
  1055  000200                     checkAndSendLatchData@osc1_pkt:
  1056                           	opt stack 0
  1057                           
  1058                           ; 71 bytes @ 0x0
  1059  000200                     	ds	1
  1060  000201                     ASLB_HeaterFunctionality@stream_status:
  1061                           	opt stack 0
  1062  000201                     ASLB_AnalogMuxReadingSetup@stream_status:
  1063                           	opt stack 0
  1064  000201                     findMaxI2CSpeed@ramAddrLo:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x1
  1068  000201                     	ds	1
  1069  000202                     run_I2C@slaveAddr:
  1070                           	opt stack 0
  1071  000202                     ASLB_HeaterFunctionality@stream:
  1072                           	opt stack 0
  1073  000202                     ASLB_AnalogMuxReadingSetup@stream:
  1074                           	opt stack 0
  1075  000202                     findMaxI2CSpeed@stream:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x2
  1079  000202                     	ds	2
  1080  000204                     run_I2C@i_2001:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x4
  1084  000204                     	ds	1
  1085  000205                     run_I2C@i_2002:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0x5
  1089  000205                     	ds	1
  1090  000206                     findMaxI2CSpeed@ramData:
  1091                           	opt stack 0
  1092  000206                     run_I2C@checksum:
  1093                           	opt stack 0
  1094  000206                     ASLB_HeaterFunctionality@heatDacWrPkt:
  1095                           	opt stack 0
  1096  000206                     ASLB_AnalogMuxReadingSetup@cmdReadbackPkt:
  1097                           	opt stack 0
  1098                           
  1099                           ; 71 bytes @ 0x6
  1100  000206                     	ds	1
  1101  000207                     run_I2C@calc_checksum:
  1102                           	opt stack 0
  1103  000207                     findMaxI2CSpeed@bRate:
  1104                           	opt stack 0
  1105                           
  1106                           ; 2 bytes @ 0x7
  1107  000207                     	ds	1
  1108  000208                     run_I2C@stream:
  1109                           	opt stack 0
  1110                           
  1111                           ; 4 bytes @ 0x8
  1112  000208                     	ds	1
  1113  000209                     findMaxI2CSpeed@i:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x9
  1117  000209                     	ds	1
  1118  00020A                     findMaxI2CSpeed@cmdReadbackPkt:
  1119                           	opt stack 0
  1120                           
  1121                           ; 71 bytes @ 0xA
  1122  00020A                     	ds	2
  1123  00020C                     run_I2C@numRx:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0xC
  1127  00020C                     	ds	1
  1128  00020D                     run_I2C@i:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0xD
  1132  00020D                     	ds	1
  1133  00020E                     run_I2C@numTx:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0xE
  1137  00020E                     	ds	1
  1138  00020F                     run_I2C@mode:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0xF
  1142  00020F                     	ds	1
  1143  000210                     run_I2C@rx_index:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x10
  1147  000210                     	ds	1
  1148  000211                     run_I2C@data_index:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x11
  1152  000211                     	ds	2
  1153  000213                     run_I2C@rxPkt:
  1154                           	opt stack 0
  1155                           
  1156                           ; 71 bytes @ 0x13
  1157  000213                     	ds	52
  1158  000247                     ASLB_debug1@ramWrPkt:
  1159                           	opt stack 0
  1160  000247                     checkAndSendLatchData@osc2_pkt:
  1161                           	opt stack 0
  1162                           
  1163                           ; 71 bytes @ 0x47
  1164  000247                     	ds	6
  1165  00024D                     ASLB_HeaterFunctionality@cmdReadbackPkt:
  1166                           	opt stack 0
  1167  00024D                     ASLB_AnalogMuxReadingSetup@ovenWrPkt:
  1168                           	opt stack 0
  1169                           
  1170                           ; 71 bytes @ 0x4D
  1171  00024D                     	ds	4
  1172  000251                     findMaxI2CSpeed@rx_index:
  1173                           	opt stack 0
  1174                           
  1175                           ; 1 bytes @ 0x51
  1176  000251                     	ds	1
  1177  000252                     findMaxI2CSpeed@ramWrPkt:
  1178                           	opt stack 0
  1179                           
  1180                           ; 71 bytes @ 0x52
  1181  000252                     	ds	8
  1182  00025A                     run_I2C@txPkt:
  1183                           	opt stack 0
  1184                           
  1185                           ; 71 bytes @ 0x5A
  1186  00025A                     	ds	52
  1187  00028E                     checkAndSendLatchData@analog_pkt:
  1188                           	opt stack 0
  1189                           
  1190                           ; 71 bytes @ 0x8E
  1191  00028E                     	ds	6
  1192  000294                     ASLB_HeaterFunctionality@ovenWrPkt:
  1193                           	opt stack 0
  1194                           
  1195                           ; 71 bytes @ 0x94
  1196  000294                     	ds	71
  1197                           tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           postinc0	equ	0xFEE
  1202                           wreg	equ	0xFE8
  1203                           postdec1	equ	0xFE5
  1204                           fsr1l	equ	0xFE1
  1205                           
  1206                           	psect	cstackBANK1
  1207  000100                     __pcstackBANK1:
  1208                           	opt stack 0
  1209  000100                     streamI2C@trBlock:
  1210                           	opt stack 0
  1211                           
  1212                           ; 160 bytes @ 0x0
  1213  000100                     	ds	160
  1214  0001A0                     streamI2C@status:
  1215                           	opt stack 0
  1216                           
  1217                           ; 1 bytes @ 0xA0
  1218  0001A0                     	ds	1
  1219  0001A1                     streamI2C@i:
  1220                           	opt stack 0
  1221                           
  1222                           ; 1 bytes @ 0xA1
  1223  0001A1                     	ds	1
  1224  0001A2                     ASLB_debug1@ramReadbackPkt:
  1225                           	opt stack 0
  1226  0001A2                     checkAndSendLatchData@osc0_pkt:
  1227                           	opt stack 0
  1228                           
  1229                           ; 71 bytes @ 0xA2
  1230  0001A2                     	ds	71
  1231  0001E9                     _run_ASLBoron$1381:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0xE9
  1235  0001E9                     	ds	2
  1236  0001EB                     _run_ASLBoron$1382:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0xEB
  1240  0001EB                     	ds	2
  1241  0001ED                     run_ASLBoron@rpt_run:
  1242                           	opt stack 0
  1243                           
  1244                           ; 2 bytes @ 0xED
  1245  0001ED                     	ds	2
  1246  0001EF                     run_ASLBoron@checksum:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0xEF
  1250  0001EF                     	ds	1
  1251  0001F0                     run_ASLBoron@calc_checksum:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0xF0
  1255  0001F0                     	ds	1
  1256  0001F1                     run_ASLBoron@test_run:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0xF1
  1260  0001F1                     	ds	1
  1261  0001F2                     run_ASLBoron@cnfg_run:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0xF2
  1265  0001F2                     	ds	1
  1266  0001F3                     run_ASLBoron@i:
  1267                           	opt stack 0
  1268                           
  1269                           ; 1 bytes @ 0xF3
  1270  0001F3                     	ds	1
  1271  0001F4                     run_ASLBoron@cnfg_cnt:
  1272                           	opt stack 0
  1273                           
  1274                           ; 1 bytes @ 0xF4
  1275  0001F4                     	ds	1
  1276  0001F5                     run_ASLBoron@mode_run:
  1277                           	opt stack 0
  1278                           
  1279                           ; 1 bytes @ 0xF5
  1280  0001F5                     	ds	1
  1281  0001F6                     run_ASLBoron@data_index:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0xF6
  1285  0001F6                     	ds	2
  1286                           tblptru	equ	0xFF8
  1287                           tblptrh	equ	0xFF7
  1288                           tblptrl	equ	0xFF6
  1289                           tablat	equ	0xFF5
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           postdec1	equ	0xFE5
  1293                           fsr1l	equ	0xFE1
  1294                           
  1295                           	psect	cstackBANK0
  1296  000060                     __pcstackBANK0:
  1297                           	opt stack 0
  1298  000060                     ??_cycleBoronPower:
  1299  000060                     ?___aldiv:
  1300                           	opt stack 0
  1301  000060                     adjustI2CBaudRate@bd:
  1302                           	opt stack 0
  1303  000060                     EUSART1_Write@txData:
  1304                           	opt stack 0
  1305  000060                     PIN_MANAGER_Initialize@state:
  1306                           	opt stack 0
  1307  000060                     hxClearArray@arr:
  1308                           	opt stack 0
  1309  000060                     streamSW@pktArr:
  1310                           	opt stack 0
  1311  000060                     calcChecksum@data:
  1312                           	opt stack 0
  1313  000060                     hxOddParityCalc@buff:
  1314                           	opt stack 0
  1315  000060                     write_ASLBoron_cstm_cnfg@cnfg_arr:
  1316                           	opt stack 0
  1317  000060                     ASLB_ContinuityESD@rxBuffer:
  1318                           	opt stack 0
  1319  000060                     ASLB_ColpittsOscillator@rxBuffer:
  1320                           	opt stack 0
  1321  000060                     ASLB_PierceOscillator@rxBuffer:
  1322                           	opt stack 0
  1323  000060                     ASLB_RDResistor@rxBuffer:
  1324                           	opt stack 0
  1325  000060                     ASLB_CFCVVaricap@rxBuffer:
  1326                           	opt stack 0
  1327  000060                     ASLB_CommonGate@rxBuffer:
  1328                           	opt stack 0
  1329  000060                     ASLB_ADC@rxBuffer:
  1330                           	opt stack 0
  1331  000060                     ASLB_cnfg0@rxBuffer:
  1332                           	opt stack 0
  1333  000060                     ASLB_cnfg1@rxBuffer:
  1334                           	opt stack 0
  1335  000060                     ASLB_debug0@rxBuffer:
  1336                           	opt stack 0
  1337  000060                     setTempCtrlDAC@value12bit:
  1338                           	opt stack 0
  1339  000060                     setCurrLimitDAC@value7bit:
  1340                           	opt stack 0
  1341  000060                     setupCmdReadbackPkt@pkt:
  1342                           	opt stack 0
  1343  000060                     filterLatchPacketResponses@rxBuffer:
  1344                           	opt stack 0
  1345  000060                     I2C1_MasterTRBInsert@ptrb_list:
  1346                           	opt stack 0
  1347  000060                     I2C1_MasterReadTRBBuild@ptrb:
  1348                           	opt stack 0
  1349  000060                     I2C1_MasterWriteTRBBuild@ptrb:
  1350                           	opt stack 0
  1351  000060                     TMR0_Write16bitTimer@timerVal:
  1352                           	opt stack 0
  1353  000060                     memcpy@d1:
  1354                           	opt stack 0
  1355  000060                     TMR0_SetInterruptHandler@InterruptHandler:
  1356                           	opt stack 0
  1357  000060                     ___aldiv@dividend:
  1358                           	opt stack 0
  1359                           
  1360                           ; 4 bytes @ 0x0
  1361  000060                     	ds	1
  1362  000061                     ASLB_debug3@rxBuffer:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0x1
  1366  000061                     	ds	1
  1367  000062                     ??_setCurrLimitDAC:
  1368  000062                     hxClearArray@size:
  1369                           	opt stack 0
  1370  000062                     streamSW@pktSize:
  1371                           	opt stack 0
  1372  000062                     calcChecksum@size:
  1373                           	opt stack 0
  1374  000062                     hxOddParityCalc@size:
  1375                           	opt stack 0
  1376  000062                     ASLB_ColpittsOscillator@rx_index:
  1377                           	opt stack 0
  1378  000062                     ASLB_PierceOscillator@rx_index:
  1379                           	opt stack 0
  1380  000062                     ASLB_RDResistor@rx_index:
  1381                           	opt stack 0
  1382  000062                     ASLB_CFCVVaricap@rx_index:
  1383                           	opt stack 0
  1384  000062                     ASLB_CommonGate@rx_index:
  1385                           	opt stack 0
  1386  000062                     ASLB_ADC@rx_index:
  1387                           	opt stack 0
  1388  000062                     ASLB_debug0@rx_index:
  1389                           	opt stack 0
  1390  000062                     write_ASLBoron_cnfg@rxBuffer:
  1391                           	opt stack 0
  1392  000062                     write_ASLBoron_cstm_cnfg@cnfg_arr_size:
  1393                           	opt stack 0
  1394  000062                     ASLB_CTHERM@rxBuffer:
  1395                           	opt stack 0
  1396  000062                     ASLB_ADCReferenceVoltage@rxBuffer:
  1397                           	opt stack 0
  1398  000062                     ASLB_HeaterFBSignals@rxBuffer:
  1399                           	opt stack 0
  1400  000062                     ASLB_InternalTempSensor@rxBuffer:
  1401                           	opt stack 0
  1402  000062                     ASLB_MuxReadingVDD@rxBuffer:
  1403                           	opt stack 0
  1404  000062                     ASLB_DACReferenceVoltage@rxBuffer:
  1405                           	opt stack 0
  1406  000062                     ASLB_VaricapDACVoltage@rxBuffer:
  1407                           	opt stack 0
  1408  000062                     ASLB_TempSetDACVoltage@rxBuffer:
  1409                           	opt stack 0
  1410  000062                     ASLB_DigitalRegulatorVoltage@rxBuffer:
  1411                           	opt stack 0
  1412  000062                     ASLB_ZTCReferenceCurrent@rxBuffer:
  1413                           	opt stack 0
  1414  000062                     ASLB_MuxOpenCircuit@rxBuffer:
  1415                           	opt stack 0
  1416  000062                     ASLB_OscillatorRegulatorVoltage@rxBuffer:
  1417                           	opt stack 0
  1418  000062                     ASLB_ExternalReferenceVoltage@rxBuffer:
  1419                           	opt stack 0
  1420  000062                     ASLB_VaricapBiasSteering@rxBuffer:
  1421                           	opt stack 0
  1422  000062                     filterLatchPacketResponses@rx_index:
  1423                           	opt stack 0
  1424  000062                     I2C1_MasterTRBInsert@pflag:
  1425                           	opt stack 0
  1426  000062                     I2C1_MasterReadTRBBuild@pdata:
  1427                           	opt stack 0
  1428  000062                     I2C1_MasterWriteTRBBuild@pdata:
  1429                           	opt stack 0
  1430  000062                     memcpy@s1:
  1431                           	opt stack 0
  1432                           
  1433                           ; 2 bytes @ 0x2
  1434  000062                     	ds	1
  1435  000063                     ??_TMR0_Initialize:
  1436  000063                     hxClearArray@i:
  1437                           	opt stack 0
  1438  000063                     calcChecksum@i:
  1439                           	opt stack 0
  1440  000063                     hxOddParityCalc@i:
  1441                           	opt stack 0
  1442  000063                     ASLB_debug3@dataByte:
  1443                           	opt stack 0
  1444                           
  1445                           ; 1 bytes @ 0x3
  1446  000063                     	ds	1
  1447  000064                     ??_hxHandleTxUART:
  1448  000064                     calcChecksum@temp_checksum:
  1449                           	opt stack 0
  1450  000064                     hxOddParityCalc@j:
  1451                           	opt stack 0
  1452  000064                     write_ASLBoron_cnfg@run_cnfg:
  1453                           	opt stack 0
  1454  000064                     ASLB_CTHERM@rx_index:
  1455                           	opt stack 0
  1456  000064                     ASLB_ADCReferenceVoltage@rx_index:
  1457                           	opt stack 0
  1458  000064                     ASLB_HeaterFBSignals@rx_index:
  1459                           	opt stack 0
  1460  000064                     ASLB_InternalTempSensor@rx_index:
  1461                           	opt stack 0
  1462  000064                     ASLB_MuxReadingVDD@rx_index:
  1463                           	opt stack 0
  1464  000064                     ASLB_DACReferenceVoltage@rx_index:
  1465                           	opt stack 0
  1466  000064                     ASLB_VaricapDACVoltage@rx_index:
  1467                           	opt stack 0
  1468  000064                     ASLB_TempSetDACVoltage@rx_index:
  1469                           	opt stack 0
  1470  000064                     ASLB_DigitalRegulatorVoltage@rx_index:
  1471                           	opt stack 0
  1472  000064                     ASLB_ZTCReferenceCurrent@rx_index:
  1473                           	opt stack 0
  1474  000064                     ASLB_MuxOpenCircuit@rx_index:
  1475                           	opt stack 0
  1476  000064                     ASLB_OscillatorRegulatorVoltage@rx_index:
  1477                           	opt stack 0
  1478  000064                     ASLB_ExternalReferenceVoltage@rx_index:
  1479                           	opt stack 0
  1480  000064                     ASLB_VaricapBiasSteering@rx_index:
  1481                           	opt stack 0
  1482  000064                     ASLB_debug3@rx_index:
  1483                           	opt stack 0
  1484  000064                     I2C1_MasterReadTRBBuild@length:
  1485                           	opt stack 0
  1486  000064                     I2C1_MasterWriteTRBBuild@length:
  1487                           	opt stack 0
  1488  000064                     write_ASLBoron_cstm_cnfg@rxBuffer:
  1489                           	opt stack 0
  1490  000064                     filterLatchPacketResponses@readbackPkts:
  1491                           	opt stack 0
  1492  000064                     memcpy@n:
  1493                           	opt stack 0
  1494  000064                     ___aldiv@divisor:
  1495                           	opt stack 0
  1496                           
  1497                           ; 4 bytes @ 0x4
  1498  000064                     	ds	1
  1499  000065                     hxOddParityCalc@parity:
  1500                           	opt stack 0
  1501  000065                     I2C1_MasterTRBInsert@count:
  1502                           	opt stack 0
  1503  000065                     setupLatchPkt@pkt:
  1504                           	opt stack 0
  1505  000065                     I2C1_MasterReadTRBBuild@address:
  1506                           	opt stack 0
  1507  000065                     I2C1_MasterWriteTRBBuild@address:
  1508                           	opt stack 0
  1509  000065                     ASLB_CTHERM@cmdReadbackPkt:
  1510                           	opt stack 0
  1511  000065                     ASLB_ADCReferenceVoltage@cmdReadbackPkt:
  1512                           	opt stack 0
  1513  000065                     ASLB_HeaterFBSignals@cmdReadbackPkt:
  1514                           	opt stack 0
  1515  000065                     ASLB_InternalTempSensor@cmdReadbackPkt:
  1516                           	opt stack 0
  1517  000065                     ASLB_MuxReadingVDD@cmdReadbackPkt:
  1518                           	opt stack 0
  1519  000065                     ASLB_DACReferenceVoltage@cmdReadbackPkt:
  1520                           	opt stack 0
  1521  000065                     ASLB_VaricapDACVoltage@cmdReadbackPkt:
  1522                           	opt stack 0
  1523  000065                     ASLB_TempSetDACVoltage@cmdReadbackPkt:
  1524                           	opt stack 0
  1525  000065                     ASLB_DigitalRegulatorVoltage@cmdReadbackPkt:
  1526                           	opt stack 0
  1527  000065                     ASLB_ZTCReferenceCurrent@cmdReadbackPkt:
  1528                           	opt stack 0
  1529  000065                     ASLB_MuxOpenCircuit@cmdReadbackPkt:
  1530                           	opt stack 0
  1531  000065                     ASLB_OscillatorRegulatorVoltage@cmdReadbackPkt:
  1532                           	opt stack 0
  1533  000065                     ASLB_ExternalReferenceVoltage@cmdReadbackPkt:
  1534                           	opt stack 0
  1535  000065                     ASLB_VaricapBiasSteering@cmdReadbackPkt:
  1536                           	opt stack 0
  1537                           
  1538                           ; 71 bytes @ 0x5
  1539  000065                     	ds	1
  1540  000066                     hxOddParityCalc@temp:
  1541                           	opt stack 0
  1542  000066                     filterLatchPacketResponses@count:
  1543                           	opt stack 0
  1544  000066                     memcpy@tmp:
  1545                           	opt stack 0
  1546                           
  1547                           ; 1 bytes @ 0x6
  1548  000066                     	ds	1
  1549  000067                     ??_I2C1_MasterWriteTRBBuild:
  1550  000067                     ??_I2C1_MasterReadTRBBuild:
  1551  000067                     ??_filterLatchPacketResponses:
  1552  000067                     hxSPPCarbonReadReg_test@numRX:
  1553                           	opt stack 0
  1554  000067                     hxSPPCarbonCheckBusy_test@numRX:
  1555                           	opt stack 0
  1556  000067                     hxHandleTxUART@i:
  1557                           	opt stack 0
  1558  000067                     hxSPPCarbonWriteReg_test@txBuffer:
  1559                           	opt stack 0
  1560  000067                     hxSPPCarbonProgram_test@txBuffer:
  1561                           	opt stack 0
  1562  000067                     setupLatchPkt@latch_data:
  1563                           	opt stack 0
  1564  000067                     memcpy@d:
  1565                           	opt stack 0
  1566                           
  1567                           ; 2 bytes @ 0x7
  1568  000067                     	ds	1
  1569  000068                     ___aldiv@counter:
  1570                           	opt stack 0
  1571  000068                     hxSPPCarbonReadReg_test@txBuffer:
  1572                           	opt stack 0
  1573  000068                     hxSPPCarbonCheckBusy_test@txBuffer:
  1574                           	opt stack 0
  1575  000068                     ASLB_CurrentLimitDACVoltage@rxBuffer:
  1576                           	opt stack 0
  1577                           
  1578                           ; 2 bytes @ 0x8
  1579  000068                     	ds	1
  1580  000069                     hxSPPCarbonWriteReg_test@numTX:
  1581                           	opt stack 0
  1582  000069                     setupLatchPkt@latch_num:
  1583                           	opt stack 0
  1584  000069                     ___aldiv@sign:
  1585                           	opt stack 0
  1586  000069                     streamI2C@pktArr:
  1587                           	opt stack 0
  1588  000069                     hxSPPCarbonProgram_test@rxBuffer:
  1589                           	opt stack 0
  1590  000069                     I2C1_MasterWrite@pdata:
  1591                           	opt stack 0
  1592  000069                     I2C1_MasterRead@pdata:
  1593                           	opt stack 0
  1594  000069                     memcpy@s:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0x9
  1598  000069                     	ds	1
  1599  00006A                     ??_setupLatchPkt:
  1600  00006A                     hxSPPCarbonWriteReg_test@tempHxState:
  1601                           	opt stack 0
  1602  00006A                     ASLB_CurrentLimitDACVoltage@rx_index:
  1603                           	opt stack 0
  1604  00006A                     hxSPPCarbonReadReg_test@rxBuffer:
  1605                           	opt stack 0
  1606  00006A                     hxSPPCarbonCheckBusy_test@rxBuffer:
  1607                           	opt stack 0
  1608  00006A                     filterLatchPacketResponses@i:
  1609                           	opt stack 0
  1610  00006A                     ___aldiv@quotient:
  1611                           	opt stack 0
  1612                           
  1613                           ; 4 bytes @ 0xA
  1614  00006A                     	ds	1
  1615  00006B                     streamI2C@pktSize:
  1616                           	opt stack 0
  1617  00006B                     hxSPPCarbonWriteReg_test@oddParityCalc:
  1618                           	opt stack 0
  1619  00006B                     hxSPPCarbonProgram_test@numTX:
  1620                           	opt stack 0
  1621  00006B                     I2C1_MasterWrite@length:
  1622                           	opt stack 0
  1623  00006B                     I2C1_MasterRead@length:
  1624                           	opt stack 0
  1625  00006B                     ASLB_CurrentLimitDACVoltage@cmdReadbackPkt:
  1626                           	opt stack 0
  1627                           
  1628                           ; 71 bytes @ 0xB
  1629  00006B                     	ds	1
  1630  00006C                     ??_streamI2C:
  1631  00006C                     ??_hxSPPCarbonCheckBusy_test:
  1632  00006C                     hxSPPCarbonReadReg_test@portAVal:
  1633                           	opt stack 0
  1634  00006C                     hxSPPCarbonWriteReg_test@j:
  1635                           	opt stack 0
  1636  00006C                     hxSPPCarbonProgram_test@oddParityCalc:
  1637                           	opt stack 0
  1638  00006C                     filterLatchPacketResponses@possibleError:
  1639                           	opt stack 0
  1640  00006C                     I2C1_MasterWrite@address:
  1641                           	opt stack 0
  1642  00006C                     I2C1_MasterRead@address:
  1643                           	opt stack 0
  1644                           
  1645                           ; 2 bytes @ 0xC
  1646  00006C                     	ds	1
  1647  00006D                     hxSPPCarbonReadReg_test@numTX:
  1648                           	opt stack 0
  1649  00006D                     hxSPPCarbonWriteReg_test@i:
  1650                           	opt stack 0
  1651  00006D                     hxSPPCarbonProgram_test@j:
  1652                           	opt stack 0
  1653                           
  1654                           ; 1 bytes @ 0xD
  1655  00006D                     	ds	1
  1656  00006E                     ?_calcBaudRate:
  1657                           	opt stack 0
  1658  00006E                     hxSPPCarbonWriteReg_test@j_916:
  1659                           	opt stack 0
  1660  00006E                     hxSPPCarbonProgram_test@i:
  1661                           	opt stack 0
  1662  00006E                     hxSPPCarbonCheckBusy_test@numTX:
  1663                           	opt stack 0
  1664  00006E                     streamBoronComm@pktArr:
  1665                           	opt stack 0
  1666  00006E                     hxSPPCarbonReadReg_test@readbackTimer:
  1667                           	opt stack 0
  1668  00006E                     I2C1_MasterWrite@pflag:
  1669                           	opt stack 0
  1670  00006E                     I2C1_MasterRead@pflag:
  1671                           	opt stack 0
  1672                           
  1673                           ; 2 bytes @ 0xE
  1674  00006E                     	ds	1
  1675  00006F                     hxSPPCarbonWriteReg_test@tempByte:
  1676                           	opt stack 0
  1677  00006F                     hxSPPCarbonProgram_test@j_925:
  1678                           	opt stack 0
  1679  00006F                     hxSPPCarbonCheckBusy_test@readbackTimer:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0xF
  1683  00006F                     	ds	1
  1684  000070                     ??_calcBaudRate:
  1685  000070                     streamBoronComm@pktSize:
  1686                           	opt stack 0
  1687  000070                     hxSPPCarbonReadReg_test@oddParityCalc:
  1688                           	opt stack 0
  1689  000070                     hxSPPCarbonProgram_test@tempByte:
  1690                           	opt stack 0
  1691  000070                     writeI2C@txData:
  1692                           	opt stack 0
  1693  000070                     readI2C@rxData:
  1694                           	opt stack 0
  1695  000070                     hxSPPCarbonWrite_test@txBuffer:
  1696                           	opt stack 0
  1697                           
  1698                           ; 2 bytes @ 0x10
  1699  000070                     	ds	1
  1700  000071                     streamBoronComm@boron_comm_type:
  1701                           	opt stack 0
  1702  000071                     hxSPPCarbonReadReg_test@j:
  1703                           	opt stack 0
  1704  000071                     hxSPPCarbonCheckBusy_test@oddParityCalc:
  1705                           	opt stack 0
  1706                           
  1707                           ; 1 bytes @ 0x11
  1708  000071                     	ds	1
  1709  000072                     writeI2C@size:
  1710                           	opt stack 0
  1711  000072                     readI2C@numOfRx:
  1712                           	opt stack 0
  1713  000072                     hxSPPCarbonReadReg_test@i:
  1714                           	opt stack 0
  1715  000072                     hxSPPCarbonCheckBusy_test@j:
  1716                           	opt stack 0
  1717  000072                     calcBaudRate@bd:
  1718                           	opt stack 0
  1719  000072                     hxSPPCarbonWrite_test@rxBuffer:
  1720                           	opt stack 0
  1721  000072                     ASLB_HeaterFunctionality@rxBuffer:
  1722                           	opt stack 0
  1723  000072                     ASLB_AnalogMuxReadingSetup@rxBuffer:
  1724                           	opt stack 0
  1725  000072                     ASLB_debug1@rxBuffer:
  1726                           	opt stack 0
  1727  000072                     checkAndSendLatchData@rxBuffer:
  1728                           	opt stack 0
  1729                           
  1730                           ; 2 bytes @ 0x12
  1731  000072                     	ds	1
  1732  000073                     hxSPPCarbonReadReg_test@j_905:
  1733                           	opt stack 0
  1734  000073                     hxSPPCarbonCheckBusy_test@i:
  1735                           	opt stack 0
  1736  000073                     writeI2C@slaveAddr:
  1737                           	opt stack 0
  1738  000073                     readI2C@slaveAddr:
  1739                           	opt stack 0
  1740  000073                     calcBaudRate@bRate:
  1741                           	opt stack 0
  1742                           
  1743                           ; 2 bytes @ 0x13
  1744  000073                     	ds	1
  1745  000074                     hxSPPCarbonWrite_test@numTX:
  1746                           	opt stack 0
  1747  000074                     hxSPPCarbonReadReg_test@i_906:
  1748                           	opt stack 0
  1749  000074                     hxSPPCarbonCheckBusy_test@j_939:
  1750                           	opt stack 0
  1751  000074                     ASLB_debug1@ramData:
  1752                           	opt stack 0
  1753  000074                     checkAndSendLatchData@rx_index:
  1754                           	opt stack 0
  1755                           
  1756                           ; 2 bytes @ 0x14
  1757  000074                     	ds	1
  1758  000075                     hxSPPCarbonWrite_test@returnValue:
  1759                           	opt stack 0
  1760  000075                     hxSPPCarbonReadReg_test@j_907:
  1761                           	opt stack 0
  1762  000075                     hxSPPCarbonCheckBusy_test@i_940:
  1763                           	opt stack 0
  1764  000075                     ASLB_debug1@stream_status:
  1765                           	opt stack 0
  1766  000075                     writeI2C@timeOut:
  1767                           	opt stack 0
  1768  000075                     readI2C@timeOut:
  1769                           	opt stack 0
  1770  000075                     findMaxI2CSpeed@rxBuffer:
  1771                           	opt stack 0
  1772                           
  1773                           ; 2 bytes @ 0x15
  1774  000075                     	ds	1
  1775  000076                     ??_checkAndSendLatchData:
  1776  000076                     hxSPPCarbonReadReg_test@bitVal:
  1777                           	opt stack 0
  1778  000076                     hxSPPCarbonCheckBusy_test@j_941:
  1779                           	opt stack 0
  1780  000076                     ASLB_debug1@stream:
  1781                           	opt stack 0
  1782                           
  1783                           ; 8 bytes @ 0x16
  1784  000076                     	ds	1
  1785  000077                     writeI2C@status:
  1786                           	opt stack 0
  1787  000077                     readI2C@status:
  1788                           	opt stack 0
  1789  000077                     hxSPPCarbonReadReg_test@tempHxState:
  1790                           	opt stack 0
  1791  000077                     hxSPPCarbonCheckBusy_test@bitVal:
  1792                           	opt stack 0
  1793                           
  1794                           ; 1 bytes @ 0x17
  1795  000077                     	ds	1
  1796  000078                     hxSPPCarbonReadReg_test@readbackCommState:
  1797                           	opt stack 0
  1798  000078                     hxSPPCarbonCheckBusy_test@portAVal:
  1799                           	opt stack 0
  1800  000078                     checkAndSendLatchData@stream_status:
  1801                           	opt stack 0
  1802  000078                     ASLB_debug2@rxBuffer:
  1803                           	opt stack 0
  1804  000078                     run_I2C@hx_inData:
  1805                           	opt stack 0
  1806                           
  1807                           ; 2 bytes @ 0x18
  1808  000078                     	ds	1
  1809  000079                     hxSPPCarbonReadReg_test@tempByte:
  1810                           	opt stack 0
  1811  000079                     hxSPPCarbonCheckBusy_test@readbackCommState:
  1812                           	opt stack 0
  1813  000079                     checkAndSendLatchData@stream:
  1814                           	opt stack 0
  1815                           
  1816                           ; 48 bytes @ 0x19
  1817  000079                     	ds	1
  1818  00007A                     hxSPPCarbonRead_test@numRX:
  1819                           	opt stack 0
  1820  00007A                     hxSPPCarbonCheckBusy_test@tempByte:
  1821                           	opt stack 0
  1822  00007A                     run_I2C@size:
  1823                           	opt stack 0
  1824  00007A                     hxSPPCarbonWriteAndVerity_test@txBuffer:
  1825                           	opt stack 0
  1826  00007A                     ASLB_debug2@zeros:
  1827                           	opt stack 0
  1828                           
  1829                           ; 10 bytes @ 0x1A
  1830  00007A                     	ds	1
  1831  00007B                     ??_run_I2C:
  1832  00007B                     hxSPPCarbonRead_test@txBuffer:
  1833                           	opt stack 0
  1834                           
  1835                           ; 2 bytes @ 0x1B
  1836  00007B                     	ds	1
  1837  00007C                     hxSPPCarbonWriteAndVerity_test@rxBuffer:
  1838                           	opt stack 0
  1839                           
  1840                           ; 2 bytes @ 0x1C
  1841  00007C                     	ds	1
  1842  00007D                     hxSPPCarbonRead_test@rxBuffer:
  1843                           	opt stack 0
  1844                           
  1845                           ; 2 bytes @ 0x1D
  1846  00007D                     	ds	1
  1847  00007E                     ASLB_debug1@ramAddrHi:
  1848                           	opt stack 0
  1849                           
  1850                           ; 1 bytes @ 0x1E
  1851  00007E                     	ds	1
  1852  00007F                     hxSPPCarbonRead_test@numTX:
  1853                           	opt stack 0
  1854  00007F                     ASLB_debug1@ramAddrLo:
  1855                           	opt stack 0
  1856                           
  1857                           ; 1 bytes @ 0x1F
  1858  00007F                     	ds	1
  1859  000080                     hxSPPCarbonWriteAndVerity_test@returnValue:
  1860                           	opt stack 0
  1861  000080                     hxSPPCarbonRead_test@returnValue:
  1862                           	opt stack 0
  1863  000080                     ASLB_debug1@rx_index:
  1864                           	opt stack 0
  1865                           
  1866                           ; 1 bytes @ 0x20
  1867  000080                     	ds	1
  1868  000081                     hxSPPCarbonWriteAndVerity_test@numTX:
  1869                           	opt stack 0
  1870  000081                     ASLB_debug1@cmdReadbackPkt:
  1871                           	opt stack 0
  1872                           
  1873                           ; 71 bytes @ 0x21
  1874  000081                     	ds	1
  1875  000082                     hxSPPCarbonWriteAndVerity_test@i:
  1876                           	opt stack 0
  1877                           
  1878                           ; 1 bytes @ 0x22
  1879  000082                     	ds	1
  1880  000083                     hxSPPCarbonWriteAndVerity_test@tempValue:
  1881                           	opt stack 0
  1882                           
  1883                           ; 1 bytes @ 0x23
  1884  000083                     	ds	1
  1885  000084                     ASLB_debug2@rx_index:
  1886                           	opt stack 0
  1887  000084                     run_SPPCarbon_test@hx_inData:
  1888                           	opt stack 0
  1889                           
  1890                           ; 2 bytes @ 0x24
  1891  000084                     	ds	1
  1892  000085                     ASLB_debug2@wr_status:
  1893                           	opt stack 0
  1894                           
  1895                           ; 1 bytes @ 0x25
  1896  000085                     	ds	1
  1897  000086                     run_SPPCarbon_test@size:
  1898                           	opt stack 0
  1899                           
  1900                           ; 1 bytes @ 0x26
  1901  000086                     	ds	1
  1902  000087                     ??_run_SPPCarbon_test:
  1903                           
  1904                           ; 1 bytes @ 0x27
  1905  000087                     	ds	1
  1906  000088                     run_SPPCarbon_test@returnValue:
  1907                           	opt stack 0
  1908                           
  1909                           ; 1 bytes @ 0x28
  1910  000088                     	ds	1
  1911  000089                     run_SPPCarbon_test@numRxBytes:
  1912                           	opt stack 0
  1913                           
  1914                           ; 1 bytes @ 0x29
  1915  000089                     	ds	1
  1916  00008A                     run_SPPCarbon_test@numTxBytes:
  1917                           	opt stack 0
  1918                           
  1919                           ; 1 bytes @ 0x2A
  1920  00008A                     	ds	31
  1921  0000A9                     checkAndSendLatchData@readbackPkts:
  1922                           	opt stack 0
  1923                           
  1924                           ; 24 bytes @ 0x49
  1925  0000A9                     	ds	3
  1926  0000AC                     ASLB_TempSetDACVoltage@i:
  1927                           	opt stack 0
  1928                           
  1929                           ; 2 bytes @ 0x4C
  1930  0000AC                     	ds	6
  1931  0000B2                     ASLB_CurrentLimitDACVoltage@i:
  1932                           	opt stack 0
  1933                           
  1934                           ; 2 bytes @ 0x52
  1935  0000B2                     	ds	15
  1936  0000C1                     checkAndSendLatchData@noError:
  1937                           	opt stack 0
  1938                           
  1939                           ; 1 bytes @ 0x61
  1940  0000C1                     	ds	1
  1941  0000C2                     checkAndSendLatchData@readbackSendCount:
  1942                           	opt stack 0
  1943                           
  1944                           ; 1 bytes @ 0x62
  1945  0000C2                     	ds	1
  1946  0000C3                     checkAndSendLatchData@latchSendCount:
  1947                           	opt stack 0
  1948                           
  1949                           ; 1 bytes @ 0x63
  1950  0000C3                     	ds	1
  1951  0000C4                     ASLB_SheetResistance@rxBuffer:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x64
  1955  0000C4                     	ds	2
  1956  0000C6                     ASLB_SheetResistance@rx_index:
  1957                           	opt stack 0
  1958                           
  1959                           ; 1 bytes @ 0x66
  1960  0000C6                     	ds	1
  1961  0000C7                     write_ASLBoron_test@run_rpt:
  1962                           	opt stack 0
  1963                           
  1964                           ; 2 bytes @ 0x67
  1965  0000C7                     	ds	1
  1966  0000C8                     write_ASLBoron_debug@run_cnfg:
  1967                           	opt stack 0
  1968                           
  1969                           ; 1 bytes @ 0x68
  1970  0000C8                     	ds	1
  1971  0000C9                     write_ASLBoron_test@rxBuffer:
  1972                           	opt stack 0
  1973  0000C9                     write_ASLBoron_debug@rxBuffer:
  1974                           	opt stack 0
  1975                           
  1976                           ; 2 bytes @ 0x69
  1977  0000C9                     	ds	2
  1978  0000CB                     ??_write_ASLBoron_test:
  1979  0000CB                     write_ASLBoron_debug@run_test:
  1980                           	opt stack 0
  1981                           
  1982                           ; 1 bytes @ 0x6B
  1983  0000CB                     	ds	3
  1984  0000CE                     write_ASLBoron_test@run_test:
  1985                           	opt stack 0
  1986                           
  1987                           ; 1 bytes @ 0x6E
  1988  0000CE                     	ds	1
  1989  0000CF                     write_ASLBoron_test@i:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0x6F
  1993  0000CF                     	ds	2
  1994  0000D1                     write_ASLBoron_test@j:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0x71
  1998  0000D1                     	ds	2
  1999  0000D3                     run_ASLBoron@hx_inData:
  2000                           	opt stack 0
  2001                           
  2002                           ; 2 bytes @ 0x73
  2003  0000D3                     	ds	2
  2004  0000D5                     run_ASLBoron@size:
  2005                           	opt stack 0
  2006                           
  2007                           ; 1 bytes @ 0x75
  2008  0000D5                     	ds	1
  2009  0000D6                     ??_run_ASLBoron:
  2010                           
  2011                           ; 1 bytes @ 0x76
  2012  0000D6                     	ds	3
  2013  0000D9                     tblptru	equ	0xFF8
  2014                           tblptrh	equ	0xFF7
  2015                           tblptrl	equ	0xFF6
  2016                           tablat	equ	0xFF5
  2017                           postinc0	equ	0xFEE
  2018                           wreg	equ	0xFE8
  2019                           postdec1	equ	0xFE5
  2020                           fsr1l	equ	0xFE1
  2021                           
  2022                           ; 1 bytes @ 0x79
  2023                           
  2024                           	psect	cstackCOMRAM
  2025  000001                     __pcstackCOMRAM:
  2026                           	opt stack 0
  2027  000001                     ??_I2C1_Stop:
  2028  000001                     hxCalcChecksum@data:
  2029                           	opt stack 0
  2030  000001                     i2hxClearArray@arr:
  2031                           	opt stack 0
  2032  000001                     i2TMR0_Write16bitTimer@timerVal:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0x0
  2036  000001                     	ds	2
  2037  000003                     hxCalcChecksum@size:
  2038                           	opt stack 0
  2039  000003                     I2C1_Stop@completion_code:
  2040                           	opt stack 0
  2041  000003                     i2hxClearArray@size:
  2042                           	opt stack 0
  2043  000003                     hxStartTimer@timerVal:
  2044                           	opt stack 0
  2045                           
  2046                           ; 2 bytes @ 0x2
  2047  000003                     	ds	1
  2048  000004                     ??_I2C1_ISR:
  2049  000004                     hxCalcChecksum@i:
  2050                           	opt stack 0
  2051  000004                     i2hxClearArray@i:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x3
  2055  000004                     	ds	1
  2056  000005                     hxCalcChecksum@temp_checksum:
  2057                           	opt stack 0
  2058                           
  2059                           ; 1 bytes @ 0x4
  2060  000005                     	ds	1
  2061  000006                     ??_hxSetupPacket2:
  2062  000006                     hxSetupPacket1@data:
  2063                           	opt stack 0
  2064                           
  2065                           ; 1 bytes @ 0x5
  2066  000006                     	ds	1
  2067  000007                     ??_hxSetupPacket1:
  2068  000007                     hxSetupPacket2@pc_cmd:
  2069                           	opt stack 0
  2070                           
  2071                           ; 1 bytes @ 0x6
  2072  000007                     	ds	1
  2073  000008                     hxSetupPacket1@pc_cmd:
  2074                           	opt stack 0
  2075  000008                     hxSetupPacket2@i:
  2076                           	opt stack 0
  2077                           
  2078                           ; 1 bytes @ 0x7
  2079  000008                     	ds	1
  2080  000009                     hxCmdFilter@i:
  2081                           	opt stack 0
  2082  000009                     _hxHandleTmr0$364:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x8
  2086  000009                     	ds	1
  2087  00000A                     ??_hxISRHandle:
  2088                           
  2089                           ; 1 bytes @ 0x9
  2090  00000A                     	ds	1
  2091  00000B                     
  2092                           ; 1 bytes @ 0xA
  2093  00000B                     	ds	6
  2094  000011                     hxISRHandle@data:
  2095                           	opt stack 0
  2096                           
  2097                           ; 1 bytes @ 0x10
  2098  000011                     	ds	1
  2099  000012                     ??_INTERRUPT_InterruptManager:
  2100                           
  2101                           ; 1 bytes @ 0x11
  2102  000012                     	ds	18
  2103                           tblptru	equ	0xFF8
  2104                           tblptrh	equ	0xFF7
  2105                           tblptrl	equ	0xFF6
  2106                           tablat	equ	0xFF5
  2107                           postinc0	equ	0xFEE
  2108                           wreg	equ	0xFE8
  2109                           postdec1	equ	0xFE5
  2110                           fsr1l	equ	0xFE1
  2111                           
  2112 ;;
  2113 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2114 ;;
  2115 ;; *************** function _main *****************
  2116 ;; Defined at:
  2117 ;;		line 57 in file "main.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;		None
  2120 ;; Auto vars:     Size  Location     Type
  2121 ;;  temp            1    0        unsigned char 
  2122 ;; Return value:  Size  Location     Type
  2123 ;;                  1    wreg      void 
  2124 ;; Registers used:
  2125 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2126 ;; Tracked objects:
  2127 ;;		On entry : 0/0
  2128 ;;		On exit  : 0/0
  2129 ;;		Unchanged: 0/0
  2130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2135 ;;Total ram usage:        0 bytes
  2136 ;; Hardware stack levels required when called:   14
  2137 ;; This function calls:
  2138 ;;		_HX_Initialize
  2139 ;;		_SYSTEM_Initialize
  2140 ;;		_hxHandleTxUART
  2141 ;;		_run_ASLBoron
  2142 ;;		_run_I2C
  2143 ;;		_run_SPPCarbon_test
  2144 ;; This function is called by:
  2145 ;;		Startup code after reset
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text0
  2150  003082                     __ptext0:
  2151                           	opt stack 0
  2152  003082                     _main:
  2153                           	opt stack 17
  2154                           
  2155                           ;main.c: 59: uint8_t temp;
  2156                           ;main.c: 61: SYSTEM_Initialize();
  2157                           
  2158                           ;incstack = 0
  2159  003082  EC8D  F01F         	call	_SYSTEM_Initialize	;wreg free
  2160                           
  2161                           ;main.c: 80: (INTCONbits.GIE = 1);
  2162  003086  8EF2               	bsf	intcon,7,c	;volatile
  2163                           
  2164                           ;main.c: 83: (INTCONbits.PEIE = 1);
  2165  003088  8CF2               	bsf	intcon,6,c	;volatile
  2166                           
  2167                           ;main.c: 91: HX_Initialize();
  2168  00308A  ECE3  F01F         	call	_HX_Initialize	;wreg free
  2169                           
  2170                           ;main.c: 93: LATA = 0x03;
  2171  00308E  0E03               	movlw	3
  2172  003090  6E83               	movwf	3971,c	;volatile
  2173  003092                     
  2174                           ;main.c: 95: {
  2175                           ;main.c: 96: hxHandleTxUART();
  2176  003092  ECDC  F01A         	call	_hxHandleTxUART	;wreg free
  2177                           
  2178                           ;main.c: 97: if (hx_txPacketFlag == 0 && hx_startMain == 1 && hx_abort == 0)
  2179  003096  5046               	movf	_hx_txPacketFlag,w,c
  2180  003098  A4D8               	btfss	status,2,c
  2181  00309A  D040               	goto	l2083
  2182  00309C  0438               	decf	_hx_startMain,w,c
  2183  00309E  A4D8               	btfss	status,2,c
  2184  0030A0  D03D               	goto	l2083
  2185  0030A2  5036               	movf	_hx_abort,w,c
  2186  0030A4  B4D8               	btfsc	status,2,c
  2187  0030A6  D01F               	goto	l2084
  2188  0030A8  D039               	goto	l2083
  2189  0030AA                     
  2190                           ;main.c: 114: run_I2C(hx_inData, hx_inDataIndex);
  2191  0030AA  0E40               	movlw	low _hx_inData
  2192  0030AC  0100               	movlb	0	; () banked
  2193  0030AE  6F78               	movwf	run_I2C@hx_inData& (0+255),b
  2194  0030B0  0E0B               	movlw	high _hx_inData
  2195  0030B2  6F79               	movwf	(run_I2C@hx_inData+1)& (0+255),b
  2196  0030B4  C03E  F07A         	movff	_hx_inDataIndex,run_I2C@size
  2197  0030B8  ECFA  F004         	call	_run_I2C	;wreg free
  2198                           
  2199                           ;main.c: 123: break;
  2200                           
  2201                           ;main.c: 121: case 0x30:
  2202                           
  2203                           ;main.c: 119: break;
  2204                           
  2205                           ;main.c: 117: case 0x20:
  2206                           
  2207                           ;main.c: 115: break;
  2208  0030BC  D02D               	goto	l2086
  2209  0030BE                     
  2210                           ;main.c: 127: run_ASLBoron(hx_inData, hx_inDataIndex);
  2211  0030BE  0E40               	movlw	low _hx_inData
  2212  0030C0  0100               	movlb	0	; () banked
  2213  0030C2  6FD3               	movwf	run_ASLBoron@hx_inData& (0+255),b
  2214  0030C4  0E0B               	movlw	high _hx_inData
  2215  0030C6  6FD4               	movwf	(run_ASLBoron@hx_inData+1)& (0+255),b
  2216  0030C8  C03E  F0D5         	movff	_hx_inDataIndex,run_ASLBoron@size
  2217  0030CC  ECFB  F009         	call	_run_ASLBoron	;wreg free
  2218                           
  2219                           ;main.c: 128: break;
  2220  0030D0  D023               	goto	l2086
  2221  0030D2                     
  2222                           ;main.c: 132: run_SPPCarbon_test(hx_inData, hx_inDataIndex);
  2223  0030D2  0E40               	movlw	low _hx_inData
  2224  0030D4  0100               	movlb	0	; () banked
  2225  0030D6  6F84               	movwf	run_SPPCarbon_test@hx_inData& (0+255),b
  2226  0030D8  0E0B               	movlw	high _hx_inData
  2227  0030DA  6F85               	movwf	(run_SPPCarbon_test@hx_inData+1)& (0+255),b
  2228  0030DC  C03E  F086         	movff	_hx_inDataIndex,run_SPPCarbon_test@size
  2229  0030E0  EC5C  F00B         	call	_run_SPPCarbon_test	;wreg free
  2230                           
  2231                           ;main.c: 137: }
  2232                           
  2233                           ;main.c: 136: break;
  2234                           
  2235                           ;main.c: 135: default:
  2236                           
  2237                           ;main.c: 133: break;
  2238  0030E4  D019               	goto	l2086
  2239  0030E6                     l2084:
  2240  0030E6  503B               	movf	_hx_pktCmd,w,c
  2241                           
  2242                           ; Switch size 1, requested type "space"
  2243                           ; Number of cases is 8, Range of values is 0 to 240
  2244                           ; switch strategies available:
  2245                           ; Name         Instructions Cycles
  2246                           ; simple_byte           25    13 (average)
  2247                           ;	Chosen strategy is simple_byte
  2248  0030E8  0A00               	xorlw	0	; case 0
  2249  0030EA  B4D8               	btfsc	status,2,c
  2250  0030EC  D015               	goto	l2086
  2251  0030EE  0A01               	xorlw	1	; case 1
  2252  0030F0  B4D8               	btfsc	status,2,c
  2253  0030F2  D012               	goto	l2086
  2254  0030F4  0A03               	xorlw	3	; case 2
  2255  0030F6  B4D8               	btfsc	status,2,c
  2256  0030F8  D00F               	goto	l2086
  2257  0030FA  0A12               	xorlw	18	; case 16
  2258  0030FC  B4D8               	btfsc	status,2,c
  2259  0030FE  D7D5               	goto	l2089
  2260  003100  0A30               	xorlw	48	; case 32
  2261  003102  B4D8               	btfsc	status,2,c
  2262  003104  D009               	goto	l2086
  2263  003106  0A10               	xorlw	16	; case 48
  2264  003108  B4D8               	btfsc	status,2,c
  2265  00310A  D006               	goto	l2086
  2266  00310C  0A01               	xorlw	1	; case 49
  2267  00310E  B4D8               	btfsc	status,2,c
  2268  003110  D7D6               	goto	l2092
  2269  003112  0AC1               	xorlw	193	; case 240
  2270  003114  B4D8               	btfsc	status,2,c
  2271  003116  D7DD               	goto	l2093
  2272  003118                     l2086:
  2273                           
  2274                           ;main.c: 140: hx_startMain = 0;
  2275  003118  0E00               	movlw	0
  2276  00311A  6E38               	movwf	_hx_startMain,c
  2277  00311C                     l2083:
  2278                           
  2279                           ;main.c: 141: }
  2280                           ;main.c: 142: hx_abort = 0;
  2281  00311C  0E00               	movlw	0
  2282  00311E  6E36               	movwf	_hx_abort,c
  2283  003120  D7B8               	goto	l2082
  2284  003122                     __end_of_main:
  2285                           	opt stack 0
  2286                           tblptru	equ	0xFF8
  2287                           tblptrh	equ	0xFF7
  2288                           tblptrl	equ	0xFF6
  2289                           tablat	equ	0xFF5
  2290                           intcon	equ	0xFF2
  2291                           postinc0	equ	0xFEE
  2292                           wreg	equ	0xFE8
  2293                           postdec1	equ	0xFE5
  2294                           fsr1l	equ	0xFE1
  2295                           status	equ	0xFD8
  2296                           
  2297 ;; *************** function _run_SPPCarbon_test *****************
  2298 ;; Defined at:
  2299 ;;		line 3 in file "HX_SPP_CARBON.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;  hx_inData       2   36[BANK0 ] PTR unsigned char 
  2302 ;;		 -> hx_inData(64), 
  2303 ;;  size            1   38[BANK0 ] unsigned char 
  2304 ;; Auto vars:     Size  Location     Type
  2305 ;;  numTxBytes      1   42[BANK0 ] unsigned char 
  2306 ;;  numRxBytes      1   41[BANK0 ] unsigned char 
  2307 ;;  returnValue     1   40[BANK0 ] unsigned char 
  2308 ;; Return value:  Size  Location     Type
  2309 ;;                  1    wreg      void 
  2310 ;; Registers used:
  2311 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2312 ;; Tracked objects:
  2313 ;;		On entry : 0/0
  2314 ;;		On exit  : 0/0
  2315 ;;		Unchanged: 0/0
  2316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2317 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2318 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2320 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2321 ;;Total ram usage:        7 bytes
  2322 ;; Hardware stack levels used:    1
  2323 ;; Hardware stack levels required when called:   10
  2324 ;; This function calls:
  2325 ;;		_hxSPPCarbonCheckBusy_test
  2326 ;;		_hxSPPCarbonProgram_test
  2327 ;;		_hxSPPCarbonRead_test
  2328 ;;		_hxSPPCarbonWriteAndVerity_test
  2329 ;;		_hxSPPCarbonWriteReg_test
  2330 ;;		_hxSPPCarbonWrite_test
  2331 ;; This function is called by:
  2332 ;;		_main
  2333 ;; This function uses a non-reentrant model
  2334 ;;
  2335                           
  2336                           	psect	text1
  2337  0016B8                     __ptext1:
  2338                           	opt stack 0
  2339  0016B8                     _run_SPPCarbon_test:
  2340                           	opt stack 20
  2341                           
  2342                           ;HX_SPP_CARBON.c: 5: uint8_t numTxBytes;
  2343                           ;HX_SPP_CARBON.c: 6: uint8_t numRxBytes;
  2344                           ;HX_SPP_CARBON.c: 7: uint8_t returnValue;
  2345                           ;HX_SPP_CARBON.c: 9: (INTCONbits.GIE = 0);
  2346                           
  2347                           ;incstack = 0
  2348  0016B8  9EF2               	bcf	intcon,7,c	;volatile
  2349                           
  2350                           ;HX_SPP_CARBON.c: 10: if (size != 3)
  2351  0016BA  0E03               	movlw	3
  2352  0016BC  0100               	movlb	0	; () banked
  2353  0016BE  1986               	xorwf	run_SPPCarbon_test@size& (0+255),w,b
  2354  0016C0  B4D8               	btfsc	status,2,c
  2355  0016C2  D002               	goto	l569
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;HX_SPP_CARBON.c: 11: {
  2359                           ;HX_SPP_CARBON.c: 12: hx_state = 0x21;
  2360  0016C4  0E21               	movlw	33
  2361  0016C6  D0AA               	goto	L1
  2362  0016C8                     l569:
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;HX_SPP_CARBON.c: 14: else if((hx_inData[0] & 0xF0) == 0x00)
  2366                           
  2367                           ; BSR set to: 0
  2368  0016C8  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2369  0016CC  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2370  0016D0  50DF               	movf	indf2,w,c
  2371  0016D2  6F87               	movwf	??_run_SPPCarbon_test& (0+255),b
  2372  0016D4  0EF0               	movlw	240
  2373  0016D6  1787               	andwf	??_run_SPPCarbon_test& (0+255),f,b
  2374  0016D8  A4D8               	btfss	status,2,c
  2375  0016DA  D010               	goto	l571
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;HX_SPP_CARBON.c: 15: {
  2379                           ;HX_SPP_CARBON.c: 16: numTxBytes = 3;
  2380  0016DC  0E03               	movlw	3
  2381  0016DE  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2382                           
  2383                           ;HX_SPP_CARBON.c: 17: hx_mainDataIndex = 1;
  2384  0016E0  0E01               	movlw	1
  2385  0016E2  6E3F               	movwf	_hx_mainDataIndex,c
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;HX_SPP_CARBON.c: 19: hxSPPCarbonWrite_test(numTxBytes, &hx_inData[0], hx_mainData);
  2389  0016E4  C084  F070         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonWrite_test@txBuffer
  2390  0016E8  C085  F071         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonWrite_test@txBuffer+1
  2391  0016EC  0EC0               	movlw	low _hx_mainData
  2392  0016EE  6F72               	movwf	hxSPPCarbonWrite_test@rxBuffer& (0+255),b
  2393  0016F0  0E0B               	movlw	high _hx_mainData
  2394  0016F2  6F73               	movwf	(hxSPPCarbonWrite_test@rxBuffer+1)& (0+255),b
  2395  0016F4  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2396  0016F6  EC4F  F01D         	call	_hxSPPCarbonWrite_test
  2397                           
  2398                           ;HX_SPP_CARBON.c: 20: }
  2399  0016FA  D12C               	goto	l592
  2400  0016FC                     l571:
  2401                           
  2402                           ;HX_SPP_CARBON.c: 21: else if((hx_inData[0] & 0xF0) == 0x10)
  2403  0016FC  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2404  001700  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2405  001704  50DF               	movf	indf2,w,c
  2406  001706  0BF0               	andlw	240
  2407  001708  0A10               	xorlw	16
  2408  00170A  A4D8               	btfss	status,2,c
  2409  00170C  D015               	goto	l573
  2410                           
  2411                           ;HX_SPP_CARBON.c: 22: {
  2412                           ;HX_SPP_CARBON.c: 23: numTxBytes = 3;
  2413  00170E  0E03               	movlw	3
  2414  001710  0100               	movlb	0	; () banked
  2415  001712  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2416                           
  2417                           ;HX_SPP_CARBON.c: 24: numRxBytes = 2;
  2418  001714  0E02               	movlw	2
  2419  001716  6F89               	movwf	run_SPPCarbon_test@numRxBytes& (0+255),b
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;HX_SPP_CARBON.c: 25: hx_mainDataIndex = numRxBytes+1;
  2423  001718  2989               	incf	run_SPPCarbon_test@numRxBytes& (0+255),w,b
  2424  00171A  6E3F               	movwf	_hx_mainDataIndex,c
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;HX_SPP_CARBON.c: 26: hxSPPCarbonRead_test(numTxBytes, numRxBytes, &hx_inData[0], hx_mai
      +                          nData);
  2428  00171C  C089  F07A         	movff	run_SPPCarbon_test@numRxBytes,hxSPPCarbonRead_test@numRX
  2429  001720  C084  F07B         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonRead_test@txBuffer
  2430  001724  C085  F07C         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonRead_test@txBuffer+1
  2431  001728  0EC0               	movlw	low _hx_mainData
  2432  00172A  6F7D               	movwf	hxSPPCarbonRead_test@rxBuffer& (0+255),b
  2433  00172C  0E0B               	movlw	high _hx_mainData
  2434  00172E  6F7E               	movwf	(hxSPPCarbonRead_test@rxBuffer+1)& (0+255),b
  2435  001730  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2436  001732  EC26  F01C         	call	_hxSPPCarbonRead_test
  2437                           
  2438                           ;HX_SPP_CARBON.c: 27: }
  2439  001736  D10E               	goto	l592
  2440  001738                     l573:
  2441                           
  2442                           ;HX_SPP_CARBON.c: 28: else if((hx_inData[0] & 0xF0) == 0x20)
  2443  001738  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2444  00173C  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2445  001740  50DF               	movf	indf2,w,c
  2446  001742  0BF0               	andlw	240
  2447  001744  0A20               	xorlw	32
  2448  001746  A4D8               	btfss	status,2,c
  2449  001748  D011               	goto	l575
  2450                           
  2451                           ;HX_SPP_CARBON.c: 29: {
  2452                           ;HX_SPP_CARBON.c: 30: numTxBytes = 3;
  2453  00174A  0E03               	movlw	3
  2454  00174C  0100               	movlb	0	; () banked
  2455  00174E  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2456                           
  2457                           ;HX_SPP_CARBON.c: 31: hx_mainDataIndex = 1;
  2458  001750  0E01               	movlw	1
  2459  001752  6E3F               	movwf	_hx_mainDataIndex,c
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;HX_SPP_CARBON.c: 32: hxSPPCarbonProgram_test(numTxBytes, &hx_inData[0], hx_mainData);
  2463  001754  C084  F067         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonProgram_test@txBuffer
  2464  001758  C085  F068         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonProgram_test@txBuffer+1
  2465  00175C  0EC0               	movlw	low _hx_mainData
  2466  00175E  6F69               	movwf	hxSPPCarbonProgram_test@rxBuffer& (0+255),b
  2467  001760  0E0B               	movlw	high _hx_mainData
  2468  001762  6F6A               	movwf	(hxSPPCarbonProgram_test@rxBuffer+1)& (0+255),b
  2469  001764  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2470  001766  EC5B  F011         	call	_hxSPPCarbonProgram_test
  2471                           
  2472                           ;HX_SPP_CARBON.c: 33: }
  2473  00176A  D0F4               	goto	l592
  2474  00176C                     l575:
  2475                           
  2476                           ;HX_SPP_CARBON.c: 34: else if((hx_inData[0] & 0xF0) == 0x30)
  2477  00176C  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2478  001770  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2479  001774  50DF               	movf	indf2,w,c
  2480  001776  0BF0               	andlw	240
  2481  001778  0A30               	xorlw	48
  2482  00177A  A4D8               	btfss	status,2,c
  2483  00177C  D015               	goto	l577
  2484                           
  2485                           ;HX_SPP_CARBON.c: 35: {
  2486                           ;HX_SPP_CARBON.c: 36: numTxBytes = 3;
  2487  00177E  0E03               	movlw	3
  2488  001780  0100               	movlb	0	; () banked
  2489  001782  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2490                           
  2491                           ;HX_SPP_CARBON.c: 37: numRxBytes = 2;
  2492  001784  0E02               	movlw	2
  2493  001786  6F89               	movwf	run_SPPCarbon_test@numRxBytes& (0+255),b
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;HX_SPP_CARBON.c: 38: hx_mainDataIndex = numRxBytes+1;
  2497  001788  2989               	incf	run_SPPCarbon_test@numRxBytes& (0+255),w,b
  2498  00178A  6E3F               	movwf	_hx_mainDataIndex,c
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;HX_SPP_CARBON.c: 39: hxSPPCarbonRead_test(numTxBytes, numRxBytes, &hx_inData[0], hx_mai
      +                          nData);
  2502  00178C  C089  F07A         	movff	run_SPPCarbon_test@numRxBytes,hxSPPCarbonRead_test@numRX
  2503  001790  C084  F07B         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonRead_test@txBuffer
  2504  001794  C085  F07C         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonRead_test@txBuffer+1
  2505  001798  0EC0               	movlw	low _hx_mainData
  2506  00179A  6F7D               	movwf	hxSPPCarbonRead_test@rxBuffer& (0+255),b
  2507  00179C  0E0B               	movlw	high _hx_mainData
  2508  00179E  6F7E               	movwf	(hxSPPCarbonRead_test@rxBuffer+1)& (0+255),b
  2509  0017A0  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2510  0017A2  EC26  F01C         	call	_hxSPPCarbonRead_test
  2511                           
  2512                           ;HX_SPP_CARBON.c: 40: }
  2513  0017A6  D0D6               	goto	l592
  2514  0017A8                     l577:
  2515                           
  2516                           ;HX_SPP_CARBON.c: 41: else if((hx_inData[0] & 0xF0) == 0x40)
  2517  0017A8  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2518  0017AC  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2519  0017B0  50DF               	movf	indf2,w,c
  2520  0017B2  0BF0               	andlw	240
  2521  0017B4  0A40               	xorlw	64
  2522  0017B6  A4D8               	btfss	status,2,c
  2523  0017B8  D015               	goto	l579
  2524                           
  2525                           ;HX_SPP_CARBON.c: 42: {
  2526                           ;HX_SPP_CARBON.c: 43: numTxBytes = 3;
  2527  0017BA  0E03               	movlw	3
  2528  0017BC  0100               	movlb	0	; () banked
  2529  0017BE  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2530                           
  2531                           ;HX_SPP_CARBON.c: 44: numRxBytes = 2;
  2532  0017C0  0E02               	movlw	2
  2533  0017C2  6F89               	movwf	run_SPPCarbon_test@numRxBytes& (0+255),b
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;HX_SPP_CARBON.c: 45: hx_mainDataIndex = numRxBytes+1;
  2537  0017C4  2989               	incf	run_SPPCarbon_test@numRxBytes& (0+255),w,b
  2538  0017C6  6E3F               	movwf	_hx_mainDataIndex,c
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;HX_SPP_CARBON.c: 46: hxSPPCarbonRead_test(numTxBytes, numRxBytes, &hx_inData[0], hx_mai
      +                          nData);
  2542  0017C8  C089  F07A         	movff	run_SPPCarbon_test@numRxBytes,hxSPPCarbonRead_test@numRX
  2543  0017CC  C084  F07B         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonRead_test@txBuffer
  2544  0017D0  C085  F07C         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonRead_test@txBuffer+1
  2545  0017D4  0EC0               	movlw	low _hx_mainData
  2546  0017D6  6F7D               	movwf	hxSPPCarbonRead_test@rxBuffer& (0+255),b
  2547  0017D8  0E0B               	movlw	high _hx_mainData
  2548  0017DA  6F7E               	movwf	(hxSPPCarbonRead_test@rxBuffer+1)& (0+255),b
  2549  0017DC  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2550  0017DE  EC26  F01C         	call	_hxSPPCarbonRead_test
  2551                           
  2552                           ;HX_SPP_CARBON.c: 47: }
  2553  0017E2  D0B8               	goto	l592
  2554  0017E4                     l579:
  2555                           
  2556                           ;HX_SPP_CARBON.c: 48: else if((hx_inData[0] & 0xF0) == 0x50)
  2557  0017E4  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2558  0017E8  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2559  0017EC  50DF               	movf	indf2,w,c
  2560  0017EE  0BF0               	andlw	240
  2561  0017F0  0A50               	xorlw	80
  2562  0017F2  A4D8               	btfss	status,2,c
  2563  0017F4  D01B               	goto	l581
  2564                           
  2565                           ;HX_SPP_CARBON.c: 49: {
  2566                           ;HX_SPP_CARBON.c: 50: numTxBytes = 3;
  2567  0017F6  0E03               	movlw	3
  2568  0017F8  0100               	movlb	0	; () banked
  2569  0017FA  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2570                           
  2571                           ;HX_SPP_CARBON.c: 51: hx_mainDataIndex = 1;
  2572  0017FC  0E01               	movlw	1
  2573  0017FE  6E3F               	movwf	_hx_mainDataIndex,c
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;HX_SPP_CARBON.c: 52: returnValue = hxSPPCarbonWriteReg_test(numTxBytes, &hx_inData[0]);
  2577  001800  C084  F067         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonWriteReg_test@txBuffer
  2578  001804  C085  F068         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonWriteReg_test@txBuffer+1
  2579  001808  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2580  00180A  ECD3  F012         	call	_hxSPPCarbonWriteReg_test
  2581  00180E  0100               	movlb	0	; () banked
  2582  001810  6F88               	movwf	run_SPPCarbon_test@returnValue& (0+255),b
  2583                           
  2584                           ; BSR set to: 0
  2585                           ;HX_SPP_CARBON.c: 53: if (returnValue != 0x10)
  2586  001812  0E10               	movlw	16
  2587  001814  1988               	xorwf	run_SPPCarbon_test@returnValue& (0+255),w,b
  2588  001816  B4D8               	btfsc	status,2,c
  2589  001818  D003               	goto	l582
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;HX_SPP_CARBON.c: 54: {
  2593                           ;HX_SPP_CARBON.c: 55: hx_state = 0x41;
  2594  00181A  0E41               	movlw	65
  2595  00181C                     L1:
  2596  00181C  6E45               	movwf	_hx_state,c
  2597                           
  2598                           ;HX_SPP_CARBON.c: 56: }
  2599  00181E  D09A               	goto	l592
  2600  001820                     l582:
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;HX_SPP_CARBON.c: 57: else
  2604                           ;HX_SPP_CARBON.c: 58: {
  2605                           ;HX_SPP_CARBON.c: 59: hx_state = 0x10;
  2606                           
  2607                           ; BSR set to: 0
  2608  001820  0E10               	movlw	16
  2609  001822  6E45               	movwf	_hx_state,c
  2610                           
  2611                           ;HX_SPP_CARBON.c: 60: hx_mainData[0] = 0x10;
  2612  001824  0E10               	movlw	16
  2613  001826  010B               	movlb	11	; () banked
  2614  001828  6FC0               	movwf	_hx_mainData& (0+255),b
  2615                           
  2616                           ; BSR set to: 11
  2617                           ;HX_SPP_CARBON.c: 61: }
  2618                           ;HX_SPP_CARBON.c: 62: }
  2619  00182A  D094               	goto	l592
  2620  00182C                     l581:
  2621                           
  2622                           ;HX_SPP_CARBON.c: 63: else if((hx_inData[0] & 0xF0) == 0x60)
  2623                           
  2624                           ; BSR set to: 11
  2625  00182C  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2626  001830  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2627  001834  50DF               	movf	indf2,w,c
  2628  001836  0BF0               	andlw	240
  2629  001838  0A60               	xorlw	96
  2630  00183A  A4D8               	btfss	status,2,c
  2631  00183C  D015               	goto	l585
  2632                           
  2633                           ;HX_SPP_CARBON.c: 64: {
  2634                           ;HX_SPP_CARBON.c: 65: numTxBytes = 3;
  2635  00183E  0E03               	movlw	3
  2636  001840  0100               	movlb	0	; () banked
  2637  001842  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2638                           
  2639                           ;HX_SPP_CARBON.c: 66: numRxBytes = 2;
  2640  001844  0E02               	movlw	2
  2641  001846  6F89               	movwf	run_SPPCarbon_test@numRxBytes& (0+255),b
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;HX_SPP_CARBON.c: 67: hx_mainDataIndex = numRxBytes+1;
  2645  001848  2989               	incf	run_SPPCarbon_test@numRxBytes& (0+255),w,b
  2646  00184A  6E3F               	movwf	_hx_mainDataIndex,c
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;HX_SPP_CARBON.c: 68: hxSPPCarbonCheckBusy_test(numTxBytes, numRxBytes, &hx_inData[0], h
      +                          x_mainData);
  2650  00184C  C089  F067         	movff	run_SPPCarbon_test@numRxBytes,hxSPPCarbonCheckBusy_test@numRX
  2651  001850  C084  F068         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonCheckBusy_test@txBuffer
  2652  001854  C085  F069         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonCheckBusy_test@txBuffer+1
  2653  001858  0EC0               	movlw	low _hx_mainData
  2654  00185A  6F6A               	movwf	hxSPPCarbonCheckBusy_test@rxBuffer& (0+255),b
  2655  00185C  0E0B               	movlw	high _hx_mainData
  2656  00185E  6F6B               	movwf	(hxSPPCarbonCheckBusy_test@rxBuffer+1)& (0+255),b
  2657  001860  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2658  001862  EC84  F008         	call	_hxSPPCarbonCheckBusy_test
  2659                           
  2660                           ;HX_SPP_CARBON.c: 69: }
  2661  001866  D076               	goto	l592
  2662  001868                     l585:
  2663                           
  2664                           ;HX_SPP_CARBON.c: 72: else if ( (hx_inData[0] & 0xF0) == 0x70)
  2665  001868  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2666  00186C  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2667  001870  50DF               	movf	indf2,w,c
  2668  001872  0BF0               	andlw	240
  2669  001874  0A70               	xorlw	112
  2670  001876  A4D8               	btfss	status,2,c
  2671  001878  D017               	goto	l587
  2672                           
  2673                           ;HX_SPP_CARBON.c: 73: {
  2674                           ;HX_SPP_CARBON.c: 74: numTxBytes = 2;
  2675  00187A  0E02               	movlw	2
  2676  00187C  0100               	movlb	0	; () banked
  2677  00187E  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;HX_SPP_CARBON.c: 76: hx_inData[0] = 0xF0 & 0x00;
  2681  001880  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2682  001884  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2683  001888  0E00               	movlw	0
  2684  00188A  6EDF               	movwf	indf2,c
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;HX_SPP_CARBON.c: 77: hx_mainDataIndex = 1;
  2688  00188C  0E01               	movlw	1
  2689  00188E  6E3F               	movwf	_hx_mainDataIndex,c
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;HX_SPP_CARBON.c: 78: hxSPPCarbonWriteAndVerity_test(numTxBytes, &hx_inData[0], hx_mainD
      +                          ata);
  2693  001890  C084  F07A         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonWriteAndVerity_test@txBuffer
  2694  001894  C085  F07B         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonWriteAndVerity_test@txBuffer+1
  2695  001898  0EC0               	movlw	low _hx_mainData
  2696  00189A  6F7C               	movwf	hxSPPCarbonWriteAndVerity_test@rxBuffer& (0+255),b
  2697  00189C  0E0B               	movlw	high _hx_mainData
  2698  00189E  6F7D               	movwf	(hxSPPCarbonWriteAndVerity_test@rxBuffer+1)& (0+255),b
  2699  0018A0  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2700  0018A2  EC1C  F016         	call	_hxSPPCarbonWriteAndVerity_test
  2701                           
  2702                           ;HX_SPP_CARBON.c: 79: }
  2703  0018A6  D056               	goto	l592
  2704  0018A8                     l587:
  2705                           
  2706                           ;HX_SPP_CARBON.c: 80: else if ( (hx_inData[0] & 0xF0) == 0x80)
  2707  0018A8  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2708  0018AC  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2709  0018B0  50DF               	movf	indf2,w,c
  2710  0018B2  0BF0               	andlw	240
  2711  0018B4  0A80               	xorlw	128
  2712  0018B6  A4D8               	btfss	status,2,c
  2713  0018B8  D01B               	goto	l589
  2714                           
  2715                           ;HX_SPP_CARBON.c: 81: {
  2716                           ;HX_SPP_CARBON.c: 82: numTxBytes = 3;
  2717  0018BA  0E03               	movlw	3
  2718  0018BC  0100               	movlb	0	; () banked
  2719  0018BE  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2720                           
  2721                           ;HX_SPP_CARBON.c: 83: numRxBytes = 1;
  2722  0018C0  0E01               	movlw	1
  2723  0018C2  6F89               	movwf	run_SPPCarbon_test@numRxBytes& (0+255),b
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;HX_SPP_CARBON.c: 84: hx_inData[0] = 0xF0 & 0x10;
  2727  0018C4  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2728  0018C8  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2729  0018CC  0E10               	movlw	16
  2730  0018CE  6EDF               	movwf	indf2,c
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;HX_SPP_CARBON.c: 85: hx_mainDataIndex = numRxBytes+1;
  2734  0018D0  2989               	incf	run_SPPCarbon_test@numRxBytes& (0+255),w,b
  2735  0018D2  6E3F               	movwf	_hx_mainDataIndex,c
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;HX_SPP_CARBON.c: 86: hxSPPCarbonRead_test(numTxBytes, numRxBytes, &hx_inData[0], hx_mai
      +                          nData);
  2739  0018D4  C089  F07A         	movff	run_SPPCarbon_test@numRxBytes,hxSPPCarbonRead_test@numRX
  2740  0018D8  C084  F07B         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonRead_test@txBuffer
  2741  0018DC  C085  F07C         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonRead_test@txBuffer+1
  2742  0018E0  0EC0               	movlw	low _hx_mainData
  2743  0018E2  6F7D               	movwf	hxSPPCarbonRead_test@rxBuffer& (0+255),b
  2744  0018E4  0E0B               	movlw	high _hx_mainData
  2745  0018E6  6F7E               	movwf	(hxSPPCarbonRead_test@rxBuffer+1)& (0+255),b
  2746  0018E8  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2747  0018EA  EC26  F01C         	call	_hxSPPCarbonRead_test
  2748                           
  2749                           ;HX_SPP_CARBON.c: 87: }
  2750  0018EE  D032               	goto	l592
  2751  0018F0                     l589:
  2752                           
  2753                           ;HX_SPP_CARBON.c: 88: else if ( (hx_inData[0] & 0xF0) == 0x90)
  2754  0018F0  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2755  0018F4  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2756  0018F8  50DF               	movf	indf2,w,c
  2757  0018FA  0BF0               	andlw	240
  2758  0018FC  0A90               	xorlw	144
  2759  0018FE  A4D8               	btfss	status,2,c
  2760  001900  D017               	goto	l591
  2761                           
  2762                           ;HX_SPP_CARBON.c: 89: {
  2763                           ;HX_SPP_CARBON.c: 90: numTxBytes = 3;
  2764  001902  0E03               	movlw	3
  2765  001904  0100               	movlb	0	; () banked
  2766  001906  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2767                           
  2768                           ;HX_SPP_CARBON.c: 91: hx_mainDataIndex = 1;
  2769  001908  0E01               	movlw	1
  2770  00190A  6E3F               	movwf	_hx_mainDataIndex,c
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;HX_SPP_CARBON.c: 92: hx_inData[0] = 0xF0 & 0x00;
  2774  00190C  C084  FFD9         	movff	run_SPPCarbon_test@hx_inData,fsr2l
  2775  001910  C085  FFDA         	movff	run_SPPCarbon_test@hx_inData+1,fsr2h
  2776  001914  0E00               	movlw	0
  2777  001916  6EDF               	movwf	indf2,c
  2778                           
  2779                           ; BSR set to: 0
  2780                           ;HX_SPP_CARBON.c: 93: hxSPPCarbonWriteAndVerity_test(numTxBytes, &hx_inData[0], hx_mainD
      +                          ata);
  2781  001918  C084  F07A         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonWriteAndVerity_test@txBuffer
  2782  00191C  C085  F07B         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonWriteAndVerity_test@txBuffer+1
  2783  001920  0EC0               	movlw	low _hx_mainData
  2784  001922  6F7C               	movwf	hxSPPCarbonWriteAndVerity_test@rxBuffer& (0+255),b
  2785  001924  0E0B               	movlw	high _hx_mainData
  2786  001926  6F7D               	movwf	(hxSPPCarbonWriteAndVerity_test@rxBuffer+1)& (0+255),b
  2787  001928  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2788  00192A  EC1C  F016         	call	_hxSPPCarbonWriteAndVerity_test
  2789                           
  2790                           ;HX_SPP_CARBON.c: 95: }
  2791  00192E  D012               	goto	l592
  2792  001930                     l591:
  2793                           
  2794                           ;HX_SPP_CARBON.c: 97: else
  2795                           ;HX_SPP_CARBON.c: 98: {
  2796                           ;HX_SPP_CARBON.c: 99: hx_state = 0x21;
  2797  001930  0E21               	movlw	33
  2798  001932  6E45               	movwf	_hx_state,c
  2799                           
  2800                           ;HX_SPP_CARBON.c: 103: numTxBytes = 3;
  2801  001934  0E03               	movlw	3
  2802  001936  0100               	movlb	0	; () banked
  2803  001938  6F8A               	movwf	run_SPPCarbon_test@numTxBytes& (0+255),b
  2804                           
  2805                           ;HX_SPP_CARBON.c: 104: hx_mainDataIndex = 1;
  2806  00193A  0E01               	movlw	1
  2807  00193C  6E3F               	movwf	_hx_mainDataIndex,c
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;HX_SPP_CARBON.c: 105: hxSPPCarbonWriteAndVerity_test(numTxBytes, &hx_inData[0], hx_main
      +                          Data);
  2811  00193E  C084  F07A         	movff	run_SPPCarbon_test@hx_inData,hxSPPCarbonWriteAndVerity_test@txBuffer
  2812  001942  C085  F07B         	movff	run_SPPCarbon_test@hx_inData+1,hxSPPCarbonWriteAndVerity_test@txBuffer+1
  2813  001946  0EC0               	movlw	low _hx_mainData
  2814  001948  6F7C               	movwf	hxSPPCarbonWriteAndVerity_test@rxBuffer& (0+255),b
  2815  00194A  0E0B               	movlw	high _hx_mainData
  2816  00194C  6F7D               	movwf	(hxSPPCarbonWriteAndVerity_test@rxBuffer+1)& (0+255),b
  2817  00194E  518A               	movf	run_SPPCarbon_test@numTxBytes& (0+255),w,b
  2818  001950  EC1C  F016         	call	_hxSPPCarbonWriteAndVerity_test
  2819  001954                     l592:
  2820                           
  2821                           ;HX_SPP_CARBON.c: 107: }
  2822                           ;HX_SPP_CARBON.c: 108: (INTCONbits.GIE = 1);
  2823  001954  8EF2               	bsf	intcon,7,c	;volatile
  2824  001956  0012               	return		;funcret
  2825  001958                     __end_of_run_SPPCarbon_test:
  2826                           	opt stack 0
  2827                           tblptru	equ	0xFF8
  2828                           tblptrh	equ	0xFF7
  2829                           tblptrl	equ	0xFF6
  2830                           tablat	equ	0xFF5
  2831                           intcon	equ	0xFF2
  2832                           postinc0	equ	0xFEE
  2833                           wreg	equ	0xFE8
  2834                           postdec1	equ	0xFE5
  2835                           fsr1l	equ	0xFE1
  2836                           indf2	equ	0xFDF
  2837                           fsr2h	equ	0xFDA
  2838                           fsr2l	equ	0xFD9
  2839                           status	equ	0xFD8
  2840                           
  2841 ;; *************** function _hxSPPCarbonWrite_test *****************
  2842 ;; Defined at:
  2843 ;;		line 146 in file "HX_SPP_CARBON.c"
  2844 ;; Parameters:    Size  Location     Type
  2845 ;;  numTX           1    wreg     unsigned char 
  2846 ;;  txBuffer        2   16[BANK0 ] PTR unsigned char 
  2847 ;;		 -> hx_inData(64), 
  2848 ;;  rxBuffer        2   18[BANK0 ] PTR unsigned char 
  2849 ;;		 -> hx_mainData(61), 
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;  numTX           1   20[BANK0 ] unsigned char 
  2852 ;;  returnValue     1   21[BANK0 ] unsigned char 
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  1    wreg      void 
  2855 ;; Registers used:
  2856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2862 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2863 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2865 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2866 ;;Total ram usage:        6 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    9
  2869 ;; This function calls:
  2870 ;;		_hxSPPCarbonWriteReg_test
  2871 ;; This function is called by:
  2872 ;;		_run_SPPCarbon_test
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           	psect	text2
  2877  003A9E                     __ptext2:
  2878                           	opt stack 0
  2879  003A9E                     _hxSPPCarbonWrite_test:
  2880                           	opt stack 20
  2881                           
  2882                           ;incstack = 0
  2883                           ;hxSPPCarbonWrite_test@numTX stored from wreg
  2884  003A9E  0100               	movlb	0	; () banked
  2885  003AA0  6F74               	movwf	hxSPPCarbonWrite_test@numTX& (0+255),b
  2886                           
  2887                           ;HX_SPP_CARBON.c: 148: uint8_t returnValue;
  2888                           ;HX_SPP_CARBON.c: 149: returnValue = hxSPPCarbonWriteReg_test(numTX, txBuffer);
  2889  003AA2  C070  F067         	movff	hxSPPCarbonWrite_test@txBuffer,hxSPPCarbonWriteReg_test@txBuffer
  2890  003AA6  C071  F068         	movff	hxSPPCarbonWrite_test@txBuffer+1,hxSPPCarbonWriteReg_test@txBuffer+1
  2891  003AAA  0100               	movlb	0	; () banked
  2892  003AAC  5174               	movf	hxSPPCarbonWrite_test@numTX& (0+255),w,b
  2893  003AAE  ECD3  F012         	call	_hxSPPCarbonWriteReg_test
  2894  003AB2  0100               	movlb	0	; () banked
  2895  003AB4  6F75               	movwf	hxSPPCarbonWrite_test@returnValue& (0+255),b
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;HX_SPP_CARBON.c: 150: if (returnValue != 0x10)
  2899  003AB6  0E10               	movlw	16
  2900  003AB8  1975               	xorwf	hxSPPCarbonWrite_test@returnValue& (0+255),w,b
  2901  003ABA  B4D8               	btfsc	status,2,c
  2902  003ABC  D003               	goto	l605
  2903                           
  2904                           ; BSR set to: 0
  2905                           ;HX_SPP_CARBON.c: 151: {
  2906                           ;HX_SPP_CARBON.c: 152: hx_state = 0x41;
  2907  003ABE  0E41               	movlw	65
  2908  003AC0  6E45               	movwf	_hx_state,c
  2909                           
  2910                           ; BSR set to: 0
  2911                           ;HX_SPP_CARBON.c: 153: return;
  2912  003AC2  0012               	return	
  2913  003AC4                     l605:
  2914                           
  2915                           ; BSR set to: 0
  2916                           ;HX_SPP_CARBON.c: 154: }
  2917                           ;HX_SPP_CARBON.c: 156: rxBuffer[0] = 0x10;
  2918                           
  2919                           ; BSR set to: 0
  2920  003AC4  C072  FFD9         	movff	hxSPPCarbonWrite_test@rxBuffer,fsr2l
  2921  003AC8  C073  FFDA         	movff	hxSPPCarbonWrite_test@rxBuffer+1,fsr2h
  2922  003ACC  0E10               	movlw	16
  2923  003ACE  6EDF               	movwf	indf2,c
  2924                           
  2925                           ; BSR set to: 0
  2926                           ;HX_SPP_CARBON.c: 157: hx_state = 0x10;
  2927  003AD0  0E10               	movlw	16
  2928  003AD2  6E45               	movwf	_hx_state,c
  2929                           
  2930                           ; BSR set to: 0
  2931  003AD4  0012               	return		;funcret
  2932  003AD6                     __end_of_hxSPPCarbonWrite_test:
  2933                           	opt stack 0
  2934                           tblptru	equ	0xFF8
  2935                           tblptrh	equ	0xFF7
  2936                           tblptrl	equ	0xFF6
  2937                           tablat	equ	0xFF5
  2938                           intcon	equ	0xFF2
  2939                           postinc0	equ	0xFEE
  2940                           wreg	equ	0xFE8
  2941                           postdec1	equ	0xFE5
  2942                           fsr1l	equ	0xFE1
  2943                           indf2	equ	0xFDF
  2944                           fsr2h	equ	0xFDA
  2945                           fsr2l	equ	0xFD9
  2946                           status	equ	0xFD8
  2947                           
  2948 ;; *************** function _hxSPPCarbonWriteAndVerity_test *****************
  2949 ;; Defined at:
  2950 ;;		line 112 in file "HX_SPP_CARBON.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;  numTX           1    wreg     unsigned char 
  2953 ;;  txBuffer        2   26[BANK0 ] PTR unsigned char 
  2954 ;;		 -> hx_inData(64), 
  2955 ;;  rxBuffer        2   28[BANK0 ] PTR unsigned char 
  2956 ;;		 -> hx_mainData(61), 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;  numTX           1   33[BANK0 ] unsigned char 
  2959 ;;  i               1   34[BANK0 ] unsigned char 
  2960 ;;  tempValue       1   35[BANK0 ] unsigned char 
  2961 ;;  returnValue     1   32[BANK0 ] unsigned char 
  2962 ;; Return value:  Size  Location     Type
  2963 ;;                  1    wreg      void 
  2964 ;; Registers used:
  2965 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2966 ;; Tracked objects:
  2967 ;;		On entry : 0/0
  2968 ;;		On exit  : 0/0
  2969 ;;		Unchanged: 0/0
  2970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2971 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2972 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2973 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2974 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2975 ;;Total ram usage:       10 bytes
  2976 ;; Hardware stack levels used:    1
  2977 ;; Hardware stack levels required when called:    9
  2978 ;; This function calls:
  2979 ;;		_hxSPPCarbonReadReg_test
  2980 ;;		_hxSPPCarbonWriteReg_test
  2981 ;; This function is called by:
  2982 ;;		_run_SPPCarbon_test
  2983 ;; This function uses a non-reentrant model
  2984 ;;
  2985                           
  2986                           	psect	text3
  2987  002C38                     __ptext3:
  2988                           	opt stack 0
  2989  002C38                     _hxSPPCarbonWriteAndVerity_test:
  2990                           	opt stack 20
  2991                           
  2992                           ; BSR set to: 0
  2993                           ;incstack = 0
  2994                           ;hxSPPCarbonWriteAndVerity_test@numTX stored from wreg
  2995  002C38  0100               	movlb	0	; () banked
  2996  002C3A  6F81               	movwf	hxSPPCarbonWriteAndVerity_test@numTX& (0+255),b
  2997                           
  2998                           ;HX_SPP_CARBON.c: 114: uint8_t returnValue;
  2999                           ;HX_SPP_CARBON.c: 115: uint8_t tempValue;
  3000                           ;HX_SPP_CARBON.c: 116: returnValue = hxSPPCarbonWriteReg_test(numTX, txBuffer);
  3001  002C3C  C07A  F067         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer,hxSPPCarbonWriteReg_test@txBuffer
  3002  002C40  C07B  F068         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer+1,hxSPPCarbonWriteReg_test@txBuffer+1
  3003  002C44  0100               	movlb	0	; () banked
  3004  002C46  5181               	movf	hxSPPCarbonWriteAndVerity_test@numTX& (0+255),w,b
  3005  002C48  ECD3  F012         	call	_hxSPPCarbonWriteReg_test
  3006  002C4C  0100               	movlb	0	; () banked
  3007  002C4E  6F80               	movwf	hxSPPCarbonWriteAndVerity_test@returnValue& (0+255),b
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;HX_SPP_CARBON.c: 117: if (returnValue != 0x10)
  3011  002C50  0E10               	movlw	16
  3012  002C52  1980               	xorwf	hxSPPCarbonWriteAndVerity_test@returnValue& (0+255),w,b
  3013  002C54  B4D8               	btfsc	status,2,c
  3014  002C56  D003               	goto	l596
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;HX_SPP_CARBON.c: 118: {
  3018                           ;HX_SPP_CARBON.c: 119: hx_state = 0x41;
  3019  002C58  0E41               	movlw	65
  3020  002C5A  6E45               	movwf	_hx_state,c
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;HX_SPP_CARBON.c: 120: return;
  3024  002C5C  0012               	return	
  3025  002C5E                     l596:
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;HX_SPP_CARBON.c: 121: }
  3029                           ;HX_SPP_CARBON.c: 123: tempValue = txBuffer[0];
  3030                           
  3031                           ; BSR set to: 0
  3032  002C5E  C07A  FFD9         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer,fsr2l
  3033  002C62  C07B  FFDA         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer+1,fsr2h
  3034  002C66  50DF               	movf	indf2,w,c
  3035  002C68  6F83               	movwf	hxSPPCarbonWriteAndVerity_test@tempValue& (0+255),b
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;HX_SPP_CARBON.c: 124: tempValue = tempValue & 0x0F;
  3039  002C6A  5183               	movf	hxSPPCarbonWriteAndVerity_test@tempValue& (0+255),w,b
  3040  002C6C  0B0F               	andlw	15
  3041  002C6E  6F83               	movwf	hxSPPCarbonWriteAndVerity_test@tempValue& (0+255),b
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;HX_SPP_CARBON.c: 125: tempValue = tempValue | 0x10;
  3045  002C70  5183               	movf	hxSPPCarbonWriteAndVerity_test@tempValue& (0+255),w,b
  3046  002C72  0910               	iorlw	16
  3047  002C74  6F83               	movwf	hxSPPCarbonWriteAndVerity_test@tempValue& (0+255),b
  3048                           
  3049                           ; BSR set to: 0
  3050                           ;HX_SPP_CARBON.c: 126: txBuffer[0] = tempValue;
  3051  002C76  C07A  FFD9         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer,fsr2l
  3052  002C7A  C07B  FFDA         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer+1,fsr2h
  3053  002C7E  C083  FFDF         	movff	hxSPPCarbonWriteAndVerity_test@tempValue,indf2
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;HX_SPP_CARBON.c: 127: returnValue = hxSPPCarbonReadReg_test(numTX, 2, txBuffer, &rxBuff
      +                          er[1]);
  3057  002C82  0E02               	movlw	2
  3058  002C84  6F67               	movwf	hxSPPCarbonReadReg_test@numRX& (0+255),b
  3059  002C86  C07A  F068         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer,hxSPPCarbonReadReg_test@txBuffer
  3060  002C8A  C07B  F069         	movff	hxSPPCarbonWriteAndVerity_test@txBuffer+1,hxSPPCarbonReadReg_test@txBuffer+1
  3061  002C8E  0E01               	movlw	1
  3062  002C90  257C               	addwf	hxSPPCarbonWriteAndVerity_test@rxBuffer& (0+255),w,b
  3063  002C92  6F6A               	movwf	hxSPPCarbonReadReg_test@rxBuffer& (0+255),b
  3064  002C94  0E00               	movlw	0
  3065  002C96  217D               	addwfc	(hxSPPCarbonWriteAndVerity_test@rxBuffer+1)& (0+255),w,b
  3066  002C98  6F6B               	movwf	(hxSPPCarbonReadReg_test@rxBuffer+1)& (0+255),b
  3067  002C9A  5181               	movf	hxSPPCarbonWriteAndVerity_test@numTX& (0+255),w,b
  3068  002C9C  ECAC  F00C         	call	_hxSPPCarbonReadReg_test
  3069  002CA0  0100               	movlb	0	; () banked
  3070  002CA2  6F80               	movwf	hxSPPCarbonWriteAndVerity_test@returnValue& (0+255),b
  3071                           
  3072                           ; BSR set to: 0
  3073                           ;HX_SPP_CARBON.c: 128: if (returnValue != 0x10)
  3074  002CA4  0E10               	movlw	16
  3075  002CA6  1980               	xorwf	hxSPPCarbonWriteAndVerity_test@returnValue& (0+255),w,b
  3076  002CA8  B4D8               	btfsc	status,2,c
  3077  002CAA  D003               	goto	l598
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;HX_SPP_CARBON.c: 129: {
  3081                           ;HX_SPP_CARBON.c: 130: hx_state = 0x41;
  3082  002CAC  0E41               	movlw	65
  3083  002CAE  6E45               	movwf	_hx_state,c
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;HX_SPP_CARBON.c: 131: return;
  3087  002CB0  0012               	return	
  3088  002CB2                     l598:
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;HX_SPP_CARBON.c: 132: }
  3092                           ;HX_SPP_CARBON.c: 133: for (uint8_t i = 1; i < numTX; i++)
  3093                           
  3094                           ; BSR set to: 0
  3095  002CB2  0E01               	movlw	1
  3096  002CB4  6F82               	movwf	hxSPPCarbonWriteAndVerity_test@i& (0+255),b
  3097  002CB6  D018               	goto	l599
  3098  002CB8                     
  3099                           ; BSR set to: 0
  3100                           ;HX_SPP_CARBON.c: 134: {
  3101                           ;HX_SPP_CARBON.c: 135: if(rxBuffer[i] != txBuffer[i])
  3102                           
  3103                           ; BSR set to: 0
  3104  002CB8  5182               	movf	hxSPPCarbonWriteAndVerity_test@i& (0+255),w,b
  3105  002CBA  0D01               	mullw	1
  3106  002CBC  50F3               	movf	prodl,w,c
  3107  002CBE  257A               	addwf	hxSPPCarbonWriteAndVerity_test@txBuffer& (0+255),w,b
  3108  002CC0  6ED9               	movwf	fsr2l,c
  3109  002CC2  50F4               	movf	prodh,w,c
  3110  002CC4  217B               	addwfc	(hxSPPCarbonWriteAndVerity_test@txBuffer+1)& (0+255),w,b
  3111  002CC6  6EDA               	movwf	fsr2h,c
  3112  002CC8  5182               	movf	hxSPPCarbonWriteAndVerity_test@i& (0+255),w,b
  3113  002CCA  0D01               	mullw	1
  3114  002CCC  50F3               	movf	prodl,w,c
  3115  002CCE  257C               	addwf	hxSPPCarbonWriteAndVerity_test@rxBuffer& (0+255),w,b
  3116  002CD0  6EE1               	movwf	fsr1l,c
  3117  002CD2  50F4               	movf	prodh,w,c
  3118  002CD4  217D               	addwfc	(hxSPPCarbonWriteAndVerity_test@rxBuffer+1)& (0+255),w,b
  3119  002CD6  6EE2               	movwf	fsr1h,c
  3120  002CD8  50DE               	movf	postinc2,w,c
  3121  002CDA  18E6               	xorwf	postinc1,w,c
  3122  002CDC  B4D8               	btfsc	status,2,c
  3123  002CDE  D003               	goto	l601
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;HX_SPP_CARBON.c: 136: {
  3127                           ;HX_SPP_CARBON.c: 137: hx_state = 0x41;
  3128  002CE0  0E41               	movlw	65
  3129  002CE2  6E45               	movwf	_hx_state,c
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;HX_SPP_CARBON.c: 138: return;
  3133  002CE4  0012               	return	
  3134  002CE6                     l601:
  3135                           
  3136                           ; BSR set to: 0
  3137                           
  3138                           ; BSR set to: 0
  3139  002CE6  2B82               	incf	hxSPPCarbonWriteAndVerity_test@i& (0+255),f,b
  3140  002CE8                     l599:
  3141                           
  3142                           ; BSR set to: 0
  3143                           
  3144                           ; BSR set to: 0
  3145  002CE8  5181               	movf	hxSPPCarbonWriteAndVerity_test@numTX& (0+255),w,b
  3146  002CEA  5D82               	subwf	hxSPPCarbonWriteAndVerity_test@i& (0+255),w,b
  3147  002CEC  A0D8               	btfss	status,0,c
  3148  002CEE  D7E4               	goto	l600
  3149                           
  3150                           ; BSR set to: 0
  3151                           ;HX_SPP_CARBON.c: 139: }
  3152                           ;HX_SPP_CARBON.c: 140: }
  3153                           ;HX_SPP_CARBON.c: 141: rxBuffer[0] = 0x10;
  3154                           
  3155                           ; BSR set to: 0
  3156  002CF0  C07C  FFD9         	movff	hxSPPCarbonWriteAndVerity_test@rxBuffer,fsr2l
  3157  002CF4  C07D  FFDA         	movff	hxSPPCarbonWriteAndVerity_test@rxBuffer+1,fsr2h
  3158  002CF8  0E10               	movlw	16
  3159  002CFA  6EDF               	movwf	indf2,c
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;HX_SPP_CARBON.c: 142: hx_state = 0x10;
  3163  002CFC  0E10               	movlw	16
  3164  002CFE  6E45               	movwf	_hx_state,c
  3165                           
  3166                           ; BSR set to: 0
  3167  002D00  0012               	return		;funcret
  3168  002D02                     __end_of_hxSPPCarbonWriteAndVerity_test:
  3169                           	opt stack 0
  3170                           tblptru	equ	0xFF8
  3171                           tblptrh	equ	0xFF7
  3172                           tblptrl	equ	0xFF6
  3173                           tablat	equ	0xFF5
  3174                           prodh	equ	0xFF4
  3175                           prodl	equ	0xFF3
  3176                           intcon	equ	0xFF2
  3177                           postinc0	equ	0xFEE
  3178                           wreg	equ	0xFE8
  3179                           postinc1	equ	0xFE6
  3180                           postdec1	equ	0xFE5
  3181                           fsr1h	equ	0xFE2
  3182                           fsr1l	equ	0xFE1
  3183                           indf2	equ	0xFDF
  3184                           postinc2	equ	0xFDE
  3185                           fsr2h	equ	0xFDA
  3186                           fsr2l	equ	0xFD9
  3187                           status	equ	0xFD8
  3188                           
  3189 ;; *************** function _hxSPPCarbonWriteReg_test *****************
  3190 ;; Defined at:
  3191 ;;		line 377 in file "HX_SPP_CARBON.c"
  3192 ;; Parameters:    Size  Location     Type
  3193 ;;  numTX           1    wreg     unsigned char 
  3194 ;;  txBuffer        2    7[BANK0 ] PTR unsigned char 
  3195 ;;		 -> hx_inData(64), 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  numTX           1    9[BANK0 ] unsigned char 
  3198 ;;  j               1   14[BANK0 ] unsigned char 
  3199 ;;  i               1   13[BANK0 ] unsigned char 
  3200 ;;  j               1   12[BANK0 ] unsigned char 
  3201 ;;  tempByte        1   15[BANK0 ] unsigned char 
  3202 ;;  oddParityCal    1   11[BANK0 ] unsigned char 
  3203 ;;  tempHxState     1   10[BANK0 ] unsigned char 
  3204 ;; Return value:  Size  Location     Type
  3205 ;;                  1    wreg      unsigned char 
  3206 ;; Registers used:
  3207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3208 ;; Tracked objects:
  3209 ;;		On entry : 0/0
  3210 ;;		On exit  : 0/0
  3211 ;;		Unchanged: 0/0
  3212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3213 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3214 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3216 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3217 ;;Total ram usage:        9 bytes
  3218 ;; Hardware stack levels used:    1
  3219 ;; Hardware stack levels required when called:    8
  3220 ;; This function calls:
  3221 ;;		_hxOddParityCalc
  3222 ;; This function is called by:
  3223 ;;		_run_SPPCarbon_test
  3224 ;;		_hxSPPCarbonWriteAndVerity_test
  3225 ;;		_hxSPPCarbonWrite_test
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text4
  3230  0025A6                     __ptext4:
  3231                           	opt stack 0
  3232  0025A6                     _hxSPPCarbonWriteReg_test:
  3233                           	opt stack 20
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;incstack = 0
  3237                           ;hxSPPCarbonWriteReg_test@numTX stored from wreg
  3238  0025A6  0100               	movlb	0	; () banked
  3239  0025A8  6F69               	movwf	hxSPPCarbonWriteReg_test@numTX& (0+255),b
  3240                           
  3241                           ;HX_SPP_CARBON.c: 379: uint8_t tempByte;
  3242                           ;HX_SPP_CARBON.c: 380: uint8_t oddParityCalc = 0;
  3243  0025AA  0E00               	movlw	0
  3244  0025AC  0100               	movlb	0	; () banked
  3245  0025AE  6F6B               	movwf	hxSPPCarbonWriteReg_test@oddParityCalc& (0+255),b
  3246                           
  3247                           ;HX_SPP_CARBON.c: 381: uint8_t tempHxState = 0x10;
  3248  0025B0  0E10               	movlw	16
  3249  0025B2  6F6A               	movwf	hxSPPCarbonWriteReg_test@tempHxState& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;HX_SPP_CARBON.c: 382: oddParityCalc = hxOddParityCalc(txBuffer, 3);
  3253  0025B4  C067  F060         	movff	hxSPPCarbonWriteReg_test@txBuffer,hxOddParityCalc@buff
  3254  0025B8  C068  F061         	movff	hxSPPCarbonWriteReg_test@txBuffer+1,hxOddParityCalc@buff+1
  3255  0025BC  0E03               	movlw	3
  3256  0025BE  6F62               	movwf	hxOddParityCalc@size& (0+255),b
  3257  0025C0  EC36  F01B         	call	_hxOddParityCalc	;wreg free
  3258  0025C4  0100               	movlb	0	; () banked
  3259  0025C6  6F6B               	movwf	hxSPPCarbonWriteReg_test@oddParityCalc& (0+255),b
  3260                           
  3261                           ; BSR set to: 0
  3262                           ;HX_SPP_CARBON.c: 391: tempByte = 0xA0;
  3263  0025C8  0EA0               	movlw	160
  3264  0025CA  6F6F               	movwf	hxSPPCarbonWriteReg_test@tempByte& (0+255),b
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;HX_SPP_CARBON.c: 392: if (tempByte & 0x80){
  3268  0025CC  AF6F               	btfss	hxSPPCarbonWriteReg_test@tempByte& (0+255),7,b
  3269  0025CE  D00C               	goto	l659
  3270                           
  3271                           ; BSR set to: 0
  3272                           ;HX_SPP_CARBON.c: 394: LATA = 0x01;
  3273  0025D0  0E01               	movlw	1
  3274  0025D2  6E83               	movwf	3971,c	;volatile
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;HX_SPP_CARBON.c: 395: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3278  0025D4  0E05               	movlw	5
  3279  0025D6                     u9017:
  3280  0025D6  2EE8               	decfsz	wreg,f,c
  3281  0025D8  D7FE               	bra	u9017
  3282  0025DA  F000               	nop	
  3283                           
  3284                           ;HX_SPP_CARBON.c: 396: LATA = 0x03;
  3285  0025DC  0E03               	movlw	3
  3286  0025DE  6E83               	movwf	3971,c	;volatile
  3287                           
  3288                           ;HX_SPP_CARBON.c: 397: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3289  0025E0  0E05               	movlw	5
  3290  0025E2                     u9027:
  3291  0025E2  2EE8               	decfsz	wreg,f,c
  3292  0025E4  D7FE               	bra	u9027
  3293  0025E6  D00B               	goto	L2
  3294  0025E8                     l659:
  3295                           
  3296                           ;HX_SPP_CARBON.c: 400: else{
  3297                           ;HX_SPP_CARBON.c: 401: LATA = 0x01;
  3298  0025E8  0E01               	movlw	1
  3299  0025EA  6E83               	movwf	3971,c	;volatile
  3300                           
  3301                           ;HX_SPP_CARBON.c: 402: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3302  0025EC  0E05               	movlw	5
  3303  0025EE                     u9037:
  3304  0025EE  2EE8               	decfsz	wreg,f,c
  3305  0025F0  D7FE               	bra	u9037
  3306  0025F2  F000               	nop	
  3307                           
  3308                           ;HX_SPP_CARBON.c: 403: LATA = 0x00;
  3309  0025F4  0E00               	movlw	0
  3310  0025F6  6E83               	movwf	3971,c	;volatile
  3311                           
  3312                           ;HX_SPP_CARBON.c: 404: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3313  0025F8  0E05               	movlw	5
  3314  0025FA                     u9047:
  3315  0025FA  2EE8               	decfsz	wreg,f,c
  3316  0025FC  D7FE               	bra	u9047
  3317  0025FE                     L2:
  3318  0025FE  F000               	nop	
  3319                           
  3320                           ;HX_SPP_CARBON.c: 405: LATA = 0x01;
  3321  002600  0E01               	movlw	1
  3322  002602  6E83               	movwf	3971,c	;volatile
  3323                           
  3324                           ;HX_SPP_CARBON.c: 406: }
  3325                           ;HX_SPP_CARBON.c: 407: for (uint8_t j = 1; j < 4; j++){
  3326  002604  0E01               	movlw	1
  3327  002606  0100               	movlb	0	; () banked
  3328  002608  6F6C               	movwf	hxSPPCarbonWriteReg_test@j& (0+255),b
  3329  00260A                     l10149:
  3330                           
  3331                           ; BSR set to: 0
  3332  00260A  0E03               	movlw	3
  3333  00260C  656C               	cpfsgt	hxSPPCarbonWriteReg_test@j& (0+255),b
  3334  00260E  D001               	goto	l661
  3335  002610  D016               	goto	u7130
  3336  002612                     l661:
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;HX_SPP_CARBON.c: 408: tempByte = tempByte << 1;
  3340                           
  3341                           ; BSR set to: 0
  3342  002612  516F               	movf	hxSPPCarbonWriteReg_test@tempByte& (0+255),w,b
  3343  002614  256F               	addwf	hxSPPCarbonWriteReg_test@tempByte& (0+255),w,b
  3344  002616  6F6F               	movwf	hxSPPCarbonWriteReg_test@tempByte& (0+255),b
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;HX_SPP_CARBON.c: 409: if (tempByte & 0x80){
  3348  002618  AF6F               	btfss	hxSPPCarbonWriteReg_test@tempByte& (0+255),7,b
  3349  00261A  D006               	goto	l663
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;HX_SPP_CARBON.c: 411: LATA = 0x03;
  3353  00261C  0E03               	movlw	3
  3354  00261E  6E83               	movwf	3971,c	;volatile
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;HX_SPP_CARBON.c: 412: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3358  002620  0E05               	movlw	5
  3359  002622                     u9057:
  3360  002622  2EE8               	decfsz	wreg,f,c
  3361  002624  D7FE               	bra	u9057
  3362  002626  D005               	goto	L3
  3363  002628                     l663:
  3364                           
  3365                           ;HX_SPP_CARBON.c: 415: else{
  3366                           ;HX_SPP_CARBON.c: 416: LATA = 0x00;
  3367  002628  0E00               	movlw	0
  3368  00262A  6E83               	movwf	3971,c	;volatile
  3369                           
  3370                           ;HX_SPP_CARBON.c: 417: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3371  00262C  0E05               	movlw	5
  3372  00262E                     u9067:
  3373  00262E  2EE8               	decfsz	wreg,f,c
  3374  002630  D7FE               	bra	u9067
  3375  002632                     L3:
  3376  002632  F000               	nop	
  3377                           
  3378                           ;HX_SPP_CARBON.c: 418: LATA = 0x01;
  3379  002634  0E01               	movlw	1
  3380  002636  6E83               	movwf	3971,c	;volatile
  3381  002638  0100               	movlb	0	; () banked
  3382  00263A  2B6C               	incf	hxSPPCarbonWriteReg_test@j& (0+255),f,b
  3383  00263C  D7E6               	goto	l10149
  3384  00263E                     u7130:
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;HX_SPP_CARBON.c: 419: }
  3388                           ;HX_SPP_CARBON.c: 420: }
  3389                           ;HX_SPP_CARBON.c: 422: for (uint8_t i = 0; i < numTX; i++){
  3390                           
  3391                           ; BSR set to: 0
  3392  00263E  0E00               	movlw	0
  3393  002640  6F6D               	movwf	hxSPPCarbonWriteReg_test@i& (0+255),b
  3394  002642  D044               	goto	l665
  3395  002644                     
  3396                           ; BSR set to: 0
  3397                           ;HX_SPP_CARBON.c: 424: tempByte = txBuffer[i];
  3398                           
  3399                           ; BSR set to: 0
  3400  002644  516D               	movf	hxSPPCarbonWriteReg_test@i& (0+255),w,b
  3401  002646  0D01               	mullw	1
  3402  002648  50F3               	movf	prodl,w,c
  3403  00264A  2567               	addwf	hxSPPCarbonWriteReg_test@txBuffer& (0+255),w,b
  3404  00264C  6ED9               	movwf	fsr2l,c
  3405  00264E  50F4               	movf	prodh,w,c
  3406  002650  2168               	addwfc	(hxSPPCarbonWriteReg_test@txBuffer+1)& (0+255),w,b
  3407  002652  6EDA               	movwf	fsr2h,c
  3408  002654  50DF               	movf	indf2,w,c
  3409  002656  6F6F               	movwf	hxSPPCarbonWriteReg_test@tempByte& (0+255),b
  3410                           
  3411                           ; BSR set to: 0
  3412                           ;HX_SPP_CARBON.c: 425: if (tempByte & 0x80){
  3413  002658  AF6F               	btfss	hxSPPCarbonWriteReg_test@tempByte& (0+255),7,b
  3414  00265A  D00C               	goto	l667
  3415                           
  3416                           ; BSR set to: 0
  3417                           ;HX_SPP_CARBON.c: 427: LATA = 0x01;
  3418  00265C  0E01               	movlw	1
  3419  00265E  6E83               	movwf	3971,c	;volatile
  3420                           
  3421                           ; BSR set to: 0
  3422                           ;HX_SPP_CARBON.c: 428: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3423  002660  0E05               	movlw	5
  3424  002662                     u9077:
  3425  002662  2EE8               	decfsz	wreg,f,c
  3426  002664  D7FE               	bra	u9077
  3427  002666  F000               	nop	
  3428                           
  3429                           ;HX_SPP_CARBON.c: 429: LATA = 0x03;
  3430  002668  0E03               	movlw	3
  3431  00266A  6E83               	movwf	3971,c	;volatile
  3432                           
  3433                           ;HX_SPP_CARBON.c: 430: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3434  00266C  0E05               	movlw	5
  3435  00266E                     u9087:
  3436  00266E  2EE8               	decfsz	wreg,f,c
  3437  002670  D7FE               	bra	u9087
  3438  002672  D00B               	goto	L4
  3439  002674                     l667:
  3440                           
  3441                           ;HX_SPP_CARBON.c: 433: else{
  3442                           ;HX_SPP_CARBON.c: 434: LATA = 0x01;
  3443  002674  0E01               	movlw	1
  3444  002676  6E83               	movwf	3971,c	;volatile
  3445                           
  3446                           ;HX_SPP_CARBON.c: 435: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3447  002678  0E05               	movlw	5
  3448  00267A                     u9097:
  3449  00267A  2EE8               	decfsz	wreg,f,c
  3450  00267C  D7FE               	bra	u9097
  3451  00267E  F000               	nop	
  3452                           
  3453                           ;HX_SPP_CARBON.c: 436: LATA = 0x00;
  3454  002680  0E00               	movlw	0
  3455  002682  6E83               	movwf	3971,c	;volatile
  3456                           
  3457                           ;HX_SPP_CARBON.c: 437: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3458  002684  0E05               	movlw	5
  3459  002686                     u9107:
  3460  002686  2EE8               	decfsz	wreg,f,c
  3461  002688  D7FE               	bra	u9107
  3462  00268A                     L4:
  3463  00268A  F000               	nop	
  3464                           
  3465                           ;HX_SPP_CARBON.c: 438: LATA = 0x01;
  3466  00268C  0E01               	movlw	1
  3467  00268E  6E83               	movwf	3971,c	;volatile
  3468                           
  3469                           ;HX_SPP_CARBON.c: 439: }
  3470                           ;HX_SPP_CARBON.c: 440: for (uint8_t j = 1; j < 8; j++){
  3471  002690  0E01               	movlw	1
  3472  002692  0100               	movlb	0	; () banked
  3473  002694  6F6E               	movwf	hxSPPCarbonWriteReg_test@j_916& (0+255),b
  3474  002696                     l10195:
  3475                           
  3476                           ; BSR set to: 0
  3477  002696  0E07               	movlw	7
  3478  002698  656E               	cpfsgt	hxSPPCarbonWriteReg_test@j_916& (0+255),b
  3479  00269A  D001               	goto	l669
  3480  00269C  D016               	goto	u7170
  3481  00269E                     l669:
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;HX_SPP_CARBON.c: 441: tempByte = tempByte << 1;
  3485                           
  3486                           ; BSR set to: 0
  3487  00269E  516F               	movf	hxSPPCarbonWriteReg_test@tempByte& (0+255),w,b
  3488  0026A0  256F               	addwf	hxSPPCarbonWriteReg_test@tempByte& (0+255),w,b
  3489  0026A2  6F6F               	movwf	hxSPPCarbonWriteReg_test@tempByte& (0+255),b
  3490                           
  3491                           ; BSR set to: 0
  3492                           ;HX_SPP_CARBON.c: 442: if (tempByte & 0x80){
  3493  0026A4  AF6F               	btfss	hxSPPCarbonWriteReg_test@tempByte& (0+255),7,b
  3494  0026A6  D006               	goto	l671
  3495                           
  3496                           ; BSR set to: 0
  3497                           ;HX_SPP_CARBON.c: 444: LATA = 0x03;
  3498  0026A8  0E03               	movlw	3
  3499  0026AA  6E83               	movwf	3971,c	;volatile
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;HX_SPP_CARBON.c: 445: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3503  0026AC  0E05               	movlw	5
  3504  0026AE                     u9117:
  3505  0026AE  2EE8               	decfsz	wreg,f,c
  3506  0026B0  D7FE               	bra	u9117
  3507  0026B2  D005               	goto	L5
  3508  0026B4                     l671:
  3509                           
  3510                           ;HX_SPP_CARBON.c: 448: else{
  3511                           ;HX_SPP_CARBON.c: 449: LATA = 0x00;
  3512  0026B4  0E00               	movlw	0
  3513  0026B6  6E83               	movwf	3971,c	;volatile
  3514                           
  3515                           ;HX_SPP_CARBON.c: 450: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3516  0026B8  0E05               	movlw	5
  3517  0026BA                     u9127:
  3518  0026BA  2EE8               	decfsz	wreg,f,c
  3519  0026BC  D7FE               	bra	u9127
  3520  0026BE                     L5:
  3521  0026BE  F000               	nop	
  3522                           
  3523                           ;HX_SPP_CARBON.c: 451: LATA = 0x01;
  3524  0026C0  0E01               	movlw	1
  3525  0026C2  6E83               	movwf	3971,c	;volatile
  3526  0026C4  0100               	movlb	0	; () banked
  3527  0026C6  2B6E               	incf	hxSPPCarbonWriteReg_test@j_916& (0+255),f,b
  3528  0026C8  D7E6               	goto	l10195
  3529  0026CA                     u7170:
  3530                           
  3531                           ; BSR set to: 0
  3532                           
  3533                           ; BSR set to: 0
  3534  0026CA  2B6D               	incf	hxSPPCarbonWriteReg_test@i& (0+255),f,b
  3535  0026CC                     l665:
  3536                           
  3537                           ; BSR set to: 0
  3538                           
  3539                           ; BSR set to: 0
  3540  0026CC  5169               	movf	hxSPPCarbonWriteReg_test@numTX& (0+255),w,b
  3541  0026CE  5D6D               	subwf	hxSPPCarbonWriteReg_test@i& (0+255),w,b
  3542  0026D0  A0D8               	btfss	status,0,c
  3543  0026D2  D7B8               	goto	l666
  3544                           
  3545                           ; BSR set to: 0
  3546                           ;HX_SPP_CARBON.c: 452: }
  3547                           ;HX_SPP_CARBON.c: 453: }
  3548                           ;HX_SPP_CARBON.c: 454: }
  3549                           ;HX_SPP_CARBON.c: 457: if (oddParityCalc)
  3550                           
  3551                           ; BSR set to: 0
  3552  0026D4  516B               	movf	hxSPPCarbonWriteReg_test@oddParityCalc& (0+255),w,b
  3553  0026D6  B4D8               	btfsc	status,2,c
  3554  0026D8  D006               	goto	l674
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;HX_SPP_CARBON.c: 458: {
  3558                           ;HX_SPP_CARBON.c: 459: LATA = 0x03;
  3559  0026DA  0E03               	movlw	3
  3560  0026DC  6E83               	movwf	3971,c	;volatile
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;HX_SPP_CARBON.c: 460: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3564  0026DE  0E05               	movlw	5
  3565  0026E0                     u9137:
  3566  0026E0  2EE8               	decfsz	wreg,f,c
  3567  0026E2  D7FE               	bra	u9137
  3568  0026E4  D005               	goto	L32
  3569  0026E6                     l674:
  3570                           
  3571                           ;HX_SPP_CARBON.c: 463: else
  3572                           ;HX_SPP_CARBON.c: 464: {
  3573                           ;HX_SPP_CARBON.c: 465: LATA = 0x00;
  3574  0026E6  0E00               	movlw	0
  3575  0026E8  6E83               	movwf	3971,c	;volatile
  3576                           
  3577                           ;HX_SPP_CARBON.c: 466: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3578  0026EA  0E05               	movlw	5
  3579  0026EC                     u9147:
  3580  0026EC  2EE8               	decfsz	wreg,f,c
  3581  0026EE  D7FE               	bra	u9147
  3582  0026F0                     L32:
  3583  0026F0  F000               	nop	
  3584                           
  3585                           ;HX_SPP_CARBON.c: 467: LATA = 0x01;
  3586  0026F2  0E01               	movlw	1
  3587  0026F4  6E83               	movwf	3971,c	;volatile
  3588                           
  3589                           ;HX_SPP_CARBON.c: 468: }
  3590                           ;HX_SPP_CARBON.c: 471: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3591  0026F6  0E05               	movlw	5
  3592  0026F8                     u9157:
  3593  0026F8  2EE8               	decfsz	wreg,f,c
  3594  0026FA  D7FE               	bra	u9157
  3595  0026FC  F000               	nop	
  3596                           
  3597                           ;HX_SPP_CARBON.c: 472: LATA = 0x00;
  3598  0026FE  0E00               	movlw	0
  3599  002700  6E83               	movwf	3971,c	;volatile
  3600                           
  3601                           ;HX_SPP_CARBON.c: 473: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3602  002702  0E05               	movlw	5
  3603  002704                     u9167:
  3604  002704  2EE8               	decfsz	wreg,f,c
  3605  002706  D7FE               	bra	u9167
  3606  002708  F000               	nop	
  3607                           
  3608                           ;HX_SPP_CARBON.c: 478: return tempHxState;
  3609  00270A  0100               	movlb	0	; () banked
  3610  00270C  516A               	movf	hxSPPCarbonWriteReg_test@tempHxState& (0+255),w,b
  3611  00270E  0012               	return	
  3612  002710                     __end_of_hxSPPCarbonWriteReg_test:
  3613                           	opt stack 0
  3614                           tblptru	equ	0xFF8
  3615                           tblptrh	equ	0xFF7
  3616                           tblptrl	equ	0xFF6
  3617                           tablat	equ	0xFF5
  3618                           prodh	equ	0xFF4
  3619                           prodl	equ	0xFF3
  3620                           intcon	equ	0xFF2
  3621                           postinc0	equ	0xFEE
  3622                           wreg	equ	0xFE8
  3623                           postinc1	equ	0xFE6
  3624                           postdec1	equ	0xFE5
  3625                           fsr1h	equ	0xFE2
  3626                           fsr1l	equ	0xFE1
  3627                           indf2	equ	0xFDF
  3628                           postinc2	equ	0xFDE
  3629                           fsr2h	equ	0xFDA
  3630                           fsr2l	equ	0xFD9
  3631                           status	equ	0xFD8
  3632                           
  3633 ;; *************** function _hxSPPCarbonRead_test *****************
  3634 ;; Defined at:
  3635 ;;		line 161 in file "HX_SPP_CARBON.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;  numTX           1    wreg     unsigned char 
  3638 ;;  numRX           1   26[BANK0 ] unsigned char 
  3639 ;;  txBuffer        2   27[BANK0 ] PTR unsigned char 
  3640 ;;		 -> hx_inData(64), 
  3641 ;;  rxBuffer        2   29[BANK0 ] PTR unsigned char 
  3642 ;;		 -> hx_mainData(61), 
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  numTX           1   31[BANK0 ] unsigned char 
  3645 ;;  returnValue     1   32[BANK0 ] unsigned char 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3655 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3656 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3658 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3659 ;;Total ram usage:        7 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    9
  3662 ;; This function calls:
  3663 ;;		_hxSPPCarbonReadReg_test
  3664 ;; This function is called by:
  3665 ;;		_run_SPPCarbon_test
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           	psect	text5
  3670  00384C                     __ptext5:
  3671                           	opt stack 0
  3672  00384C                     _hxSPPCarbonRead_test:
  3673                           	opt stack 20
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;incstack = 0
  3677                           ;hxSPPCarbonRead_test@numTX stored from wreg
  3678  00384C  0100               	movlb	0	; () banked
  3679  00384E  6F7F               	movwf	hxSPPCarbonRead_test@numTX& (0+255),b
  3680                           
  3681                           ;HX_SPP_CARBON.c: 163: uint8_t returnValue;
  3682                           ;HX_SPP_CARBON.c: 164: returnValue = hxSPPCarbonReadReg_test(numTX, numRX, txBuffer, &rx
      +                          Buffer[1]);
  3683  003850  C07A  F067         	movff	hxSPPCarbonRead_test@numRX,hxSPPCarbonReadReg_test@numRX
  3684  003854  C07B  F068         	movff	hxSPPCarbonRead_test@txBuffer,hxSPPCarbonReadReg_test@txBuffer
  3685  003858  C07C  F069         	movff	hxSPPCarbonRead_test@txBuffer+1,hxSPPCarbonReadReg_test@txBuffer+1
  3686  00385C  0E01               	movlw	1
  3687  00385E  0100               	movlb	0	; () banked
  3688  003860  257D               	addwf	hxSPPCarbonRead_test@rxBuffer& (0+255),w,b
  3689  003862  6F6A               	movwf	hxSPPCarbonReadReg_test@rxBuffer& (0+255),b
  3690  003864  0E00               	movlw	0
  3691  003866  217E               	addwfc	(hxSPPCarbonRead_test@rxBuffer+1)& (0+255),w,b
  3692  003868  6F6B               	movwf	(hxSPPCarbonReadReg_test@rxBuffer+1)& (0+255),b
  3693  00386A  517F               	movf	hxSPPCarbonRead_test@numTX& (0+255),w,b
  3694  00386C  ECAC  F00C         	call	_hxSPPCarbonReadReg_test
  3695  003870  0100               	movlb	0	; () banked
  3696  003872  6F80               	movwf	hxSPPCarbonRead_test@returnValue& (0+255),b
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;HX_SPP_CARBON.c: 165: if (returnValue != 0x10)
  3700  003874  0E10               	movlw	16
  3701  003876  1980               	xorwf	hxSPPCarbonRead_test@returnValue& (0+255),w,b
  3702  003878  B4D8               	btfsc	status,2,c
  3703  00387A  D003               	goto	l609
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;HX_SPP_CARBON.c: 166: {
  3707                           ;HX_SPP_CARBON.c: 167: hx_state = 0x41;
  3708  00387C  0E41               	movlw	65
  3709  00387E  6E45               	movwf	_hx_state,c
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;HX_SPP_CARBON.c: 168: return;
  3713  003880  0012               	return	
  3714  003882                     l609:
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;HX_SPP_CARBON.c: 169: }
  3718                           ;HX_SPP_CARBON.c: 170: rxBuffer[0] = 0x10;
  3719                           
  3720                           ; BSR set to: 0
  3721  003882  C07D  FFD9         	movff	hxSPPCarbonRead_test@rxBuffer,fsr2l
  3722  003886  C07E  FFDA         	movff	hxSPPCarbonRead_test@rxBuffer+1,fsr2h
  3723  00388A  0E10               	movlw	16
  3724  00388C  6EDF               	movwf	indf2,c
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;HX_SPP_CARBON.c: 171: hx_state = 0x10;
  3728  00388E  0E10               	movlw	16
  3729  003890  6E45               	movwf	_hx_state,c
  3730                           
  3731                           ; BSR set to: 0
  3732  003892  0012               	return		;funcret
  3733  003894                     __end_of_hxSPPCarbonRead_test:
  3734                           	opt stack 0
  3735                           tblptru	equ	0xFF8
  3736                           tblptrh	equ	0xFF7
  3737                           tblptrl	equ	0xFF6
  3738                           tablat	equ	0xFF5
  3739                           prodh	equ	0xFF4
  3740                           prodl	equ	0xFF3
  3741                           intcon	equ	0xFF2
  3742                           postinc0	equ	0xFEE
  3743                           wreg	equ	0xFE8
  3744                           postinc1	equ	0xFE6
  3745                           postdec1	equ	0xFE5
  3746                           fsr1h	equ	0xFE2
  3747                           fsr1l	equ	0xFE1
  3748                           indf2	equ	0xFDF
  3749                           postinc2	equ	0xFDE
  3750                           fsr2h	equ	0xFDA
  3751                           fsr2l	equ	0xFD9
  3752                           status	equ	0xFD8
  3753                           
  3754 ;; *************** function _hxSPPCarbonReadReg_test *****************
  3755 ;; Defined at:
  3756 ;;		line 175 in file "HX_SPP_CARBON.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  numTX           1    wreg     unsigned char 
  3759 ;;  numRX           1    7[BANK0 ] unsigned char 
  3760 ;;  txBuffer        2    8[BANK0 ] PTR unsigned char 
  3761 ;;		 -> hx_inData(64), 
  3762 ;;  rxBuffer        2   10[BANK0 ] PTR unsigned char 
  3763 ;;		 -> hx_mainData(61), 
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;  numTX           1   13[BANK0 ] unsigned char 
  3766 ;;  j               1   21[BANK0 ] unsigned char 
  3767 ;;  j               1   19[BANK0 ] unsigned char 
  3768 ;;  i               1   20[BANK0 ] unsigned char 
  3769 ;;  i               1   18[BANK0 ] unsigned char 
  3770 ;;  j               1   17[BANK0 ] unsigned char 
  3771 ;;  readbackTime    2   14[BANK0 ] unsigned int 
  3772 ;;  tempByte        1   25[BANK0 ] unsigned char 
  3773 ;;  readbackComm    1   24[BANK0 ] unsigned char 
  3774 ;;  tempHxState     1   23[BANK0 ] unsigned char 
  3775 ;;  bitVal          1   22[BANK0 ] unsigned char 
  3776 ;;  oddParityCal    1   16[BANK0 ] unsigned char 
  3777 ;;  portAVal        1   12[BANK0 ] unsigned char 
  3778 ;; Return value:  Size  Location     Type
  3779 ;;                  1    wreg      unsigned char 
  3780 ;; Registers used:
  3781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3782 ;; Tracked objects:
  3783 ;;		On entry : 0/0
  3784 ;;		On exit  : 0/0
  3785 ;;		Unchanged: 0/0
  3786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3787 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3788 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3790 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3791 ;;Total ram usage:       19 bytes
  3792 ;; Hardware stack levels used:    1
  3793 ;; Hardware stack levels required when called:    8
  3794 ;; This function calls:
  3795 ;;		_hxOddParityCalc
  3796 ;; This function is called by:
  3797 ;;		_hxSPPCarbonWriteAndVerity_test
  3798 ;;		_hxSPPCarbonRead_test
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text6
  3803  001958                     __ptext6:
  3804                           	opt stack 0
  3805  001958                     _hxSPPCarbonReadReg_test:
  3806                           	opt stack 20
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;incstack = 0
  3810                           ;hxSPPCarbonReadReg_test@numTX stored from wreg
  3811  001958  0100               	movlb	0	; () banked
  3812  00195A  6F6D               	movwf	hxSPPCarbonReadReg_test@numTX& (0+255),b
  3813                           
  3814                           ;HX_SPP_CARBON.c: 177: uint8_t tempByte;
  3815                           ;HX_SPP_CARBON.c: 178: uint8_t readbackCommState;
  3816                           ;HX_SPP_CARBON.c: 179: uint8_t bitVal;
  3817                           ;HX_SPP_CARBON.c: 180: uint16_t readbackTimer;
  3818                           ;HX_SPP_CARBON.c: 181: uint8_t oddParityCalc = 0;
  3819  00195C  0E00               	movlw	0
  3820  00195E  0100               	movlb	0	; () banked
  3821  001960  6F70               	movwf	hxSPPCarbonReadReg_test@oddParityCalc& (0+255),b
  3822                           
  3823                           ;HX_SPP_CARBON.c: 182: uint8_t portAVal = 0;
  3824  001962  0E00               	movlw	0
  3825  001964  6F6C               	movwf	hxSPPCarbonReadReg_test@portAVal& (0+255),b
  3826                           
  3827                           ;HX_SPP_CARBON.c: 183: uint8_t tempHxState = 0x10;
  3828  001966  0E10               	movlw	16
  3829  001968  6F77               	movwf	hxSPPCarbonReadReg_test@tempHxState& (0+255),b
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;HX_SPP_CARBON.c: 185: oddParityCalc = hxOddParityCalc(txBuffer, 3);
  3833  00196A  C068  F060         	movff	hxSPPCarbonReadReg_test@txBuffer,hxOddParityCalc@buff
  3834  00196E  C069  F061         	movff	hxSPPCarbonReadReg_test@txBuffer+1,hxOddParityCalc@buff+1
  3835  001972  0E03               	movlw	3
  3836  001974  6F62               	movwf	hxOddParityCalc@size& (0+255),b
  3837  001976  EC36  F01B         	call	_hxOddParityCalc	;wreg free
  3838  00197A  0100               	movlb	0	; () banked
  3839  00197C  6F70               	movwf	hxSPPCarbonReadReg_test@oddParityCalc& (0+255),b
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;HX_SPP_CARBON.c: 195: tempByte = 0xA0;
  3843  00197E  0EA0               	movlw	160
  3844  001980  6F79               	movwf	hxSPPCarbonReadReg_test@tempByte& (0+255),b
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;HX_SPP_CARBON.c: 196: if (tempByte & 0x80){
  3848  001982  AF79               	btfss	hxSPPCarbonReadReg_test@tempByte& (0+255),7,b
  3849  001984  D00C               	goto	l613
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;HX_SPP_CARBON.c: 198: LATA = 0x01;
  3853  001986  0E01               	movlw	1
  3854  001988  6E83               	movwf	3971,c	;volatile
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;HX_SPP_CARBON.c: 199: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3858  00198A  0E05               	movlw	5
  3859  00198C                     u9177:
  3860  00198C  2EE8               	decfsz	wreg,f,c
  3861  00198E  D7FE               	bra	u9177
  3862  001990  F000               	nop	
  3863                           
  3864                           ;HX_SPP_CARBON.c: 200: LATA = 0x03;
  3865  001992  0E03               	movlw	3
  3866  001994  6E83               	movwf	3971,c	;volatile
  3867                           
  3868                           ;HX_SPP_CARBON.c: 201: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3869  001996  0E05               	movlw	5
  3870  001998                     u9187:
  3871  001998  2EE8               	decfsz	wreg,f,c
  3872  00199A  D7FE               	bra	u9187
  3873  00199C  D00B               	goto	L7
  3874  00199E                     l613:
  3875                           
  3876                           ;HX_SPP_CARBON.c: 204: else{
  3877                           ;HX_SPP_CARBON.c: 205: LATA = 0x01;
  3878  00199E  0E01               	movlw	1
  3879  0019A0  6E83               	movwf	3971,c	;volatile
  3880                           
  3881                           ;HX_SPP_CARBON.c: 206: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3882  0019A2  0E05               	movlw	5
  3883  0019A4                     u9197:
  3884  0019A4  2EE8               	decfsz	wreg,f,c
  3885  0019A6  D7FE               	bra	u9197
  3886  0019A8  F000               	nop	
  3887                           
  3888                           ;HX_SPP_CARBON.c: 207: LATA = 0x00;
  3889  0019AA  0E00               	movlw	0
  3890  0019AC  6E83               	movwf	3971,c	;volatile
  3891                           
  3892                           ;HX_SPP_CARBON.c: 208: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3893  0019AE  0E05               	movlw	5
  3894  0019B0                     u9207:
  3895  0019B0  2EE8               	decfsz	wreg,f,c
  3896  0019B2  D7FE               	bra	u9207
  3897  0019B4                     L7:
  3898  0019B4  F000               	nop	
  3899                           
  3900                           ;HX_SPP_CARBON.c: 209: LATA = 0x01;
  3901  0019B6  0E01               	movlw	1
  3902  0019B8  6E83               	movwf	3971,c	;volatile
  3903                           
  3904                           ;HX_SPP_CARBON.c: 210: }
  3905                           ;HX_SPP_CARBON.c: 211: for (uint8_t j = 1; j < 4; j++){
  3906  0019BA  0E01               	movlw	1
  3907  0019BC  0100               	movlb	0	; () banked
  3908  0019BE  6F71               	movwf	hxSPPCarbonReadReg_test@j& (0+255),b
  3909  0019C0                     l10267:
  3910                           
  3911                           ; BSR set to: 0
  3912  0019C0  0E03               	movlw	3
  3913  0019C2  6571               	cpfsgt	hxSPPCarbonReadReg_test@j& (0+255),b
  3914  0019C4  D001               	goto	l615
  3915  0019C6  D016               	goto	u7230
  3916  0019C8                     l615:
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;HX_SPP_CARBON.c: 212: tempByte = tempByte << 1;
  3920                           
  3921                           ; BSR set to: 0
  3922  0019C8  5179               	movf	hxSPPCarbonReadReg_test@tempByte& (0+255),w,b
  3923  0019CA  2579               	addwf	hxSPPCarbonReadReg_test@tempByte& (0+255),w,b
  3924  0019CC  6F79               	movwf	hxSPPCarbonReadReg_test@tempByte& (0+255),b
  3925                           
  3926                           ; BSR set to: 0
  3927                           ;HX_SPP_CARBON.c: 213: if (tempByte & 0x80){
  3928  0019CE  AF79               	btfss	hxSPPCarbonReadReg_test@tempByte& (0+255),7,b
  3929  0019D0  D006               	goto	l617
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;HX_SPP_CARBON.c: 215: LATA = 0x03;
  3933  0019D2  0E03               	movlw	3
  3934  0019D4  6E83               	movwf	3971,c	;volatile
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;HX_SPP_CARBON.c: 216: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3938  0019D6  0E05               	movlw	5
  3939  0019D8                     u9217:
  3940  0019D8  2EE8               	decfsz	wreg,f,c
  3941  0019DA  D7FE               	bra	u9217
  3942  0019DC  D005               	goto	L8
  3943  0019DE                     l617:
  3944                           
  3945                           ;HX_SPP_CARBON.c: 219: else{
  3946                           ;HX_SPP_CARBON.c: 220: LATA = 0x00;
  3947  0019DE  0E00               	movlw	0
  3948  0019E0  6E83               	movwf	3971,c	;volatile
  3949                           
  3950                           ;HX_SPP_CARBON.c: 221: _delay((unsigned long)((1)*(64000000/4000000.0)));
  3951  0019E2  0E05               	movlw	5
  3952  0019E4                     u9227:
  3953  0019E4  2EE8               	decfsz	wreg,f,c
  3954  0019E6  D7FE               	bra	u9227
  3955  0019E8                     L8:
  3956  0019E8  F000               	nop	
  3957                           
  3958                           ;HX_SPP_CARBON.c: 222: LATA = 0x01;
  3959  0019EA  0E01               	movlw	1
  3960  0019EC  6E83               	movwf	3971,c	;volatile
  3961  0019EE  0100               	movlb	0	; () banked
  3962  0019F0  2B71               	incf	hxSPPCarbonReadReg_test@j& (0+255),f,b
  3963  0019F2  D7E6               	goto	l10267
  3964  0019F4                     u7230:
  3965                           
  3966                           ; BSR set to: 0
  3967                           ;HX_SPP_CARBON.c: 223: }
  3968                           ;HX_SPP_CARBON.c: 224: }
  3969                           ;HX_SPP_CARBON.c: 226: for (uint8_t i = 0; i < numTX; i++){
  3970                           
  3971                           ; BSR set to: 0
  3972  0019F4  0E00               	movlw	0
  3973  0019F6  6F72               	movwf	hxSPPCarbonReadReg_test@i& (0+255),b
  3974  0019F8  D044               	goto	l619
  3975  0019FA                     
  3976                           ; BSR set to: 0
  3977                           ;HX_SPP_CARBON.c: 228: tempByte = txBuffer[i];
  3978                           
  3979                           ; BSR set to: 0
  3980  0019FA  5172               	movf	hxSPPCarbonReadReg_test@i& (0+255),w,b
  3981  0019FC  0D01               	mullw	1
  3982  0019FE  50F3               	movf	prodl,w,c
  3983  001A00  2568               	addwf	hxSPPCarbonReadReg_test@txBuffer& (0+255),w,b
  3984  001A02  6ED9               	movwf	fsr2l,c
  3985  001A04  50F4               	movf	prodh,w,c
  3986  001A06  2169               	addwfc	(hxSPPCarbonReadReg_test@txBuffer+1)& (0+255),w,b
  3987  001A08  6EDA               	movwf	fsr2h,c
  3988  001A0A  50DF               	movf	indf2,w,c
  3989  001A0C  6F79               	movwf	hxSPPCarbonReadReg_test@tempByte& (0+255),b
  3990                           
  3991                           ; BSR set to: 0
  3992                           ;HX_SPP_CARBON.c: 229: if (tempByte & 0x80){
  3993  001A0E  AF79               	btfss	hxSPPCarbonReadReg_test@tempByte& (0+255),7,b
  3994  001A10  D00C               	goto	l621
  3995                           
  3996                           ; BSR set to: 0
  3997                           ;HX_SPP_CARBON.c: 231: LATA = 0x01;
  3998  001A12  0E01               	movlw	1
  3999  001A14  6E83               	movwf	3971,c	;volatile
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;HX_SPP_CARBON.c: 232: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4003  001A16  0E05               	movlw	5
  4004  001A18                     u9237:
  4005  001A18  2EE8               	decfsz	wreg,f,c
  4006  001A1A  D7FE               	bra	u9237
  4007  001A1C  F000               	nop	
  4008                           
  4009                           ;HX_SPP_CARBON.c: 233: LATA = 0x03;
  4010  001A1E  0E03               	movlw	3
  4011  001A20  6E83               	movwf	3971,c	;volatile
  4012                           
  4013                           ;HX_SPP_CARBON.c: 234: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4014  001A22  0E05               	movlw	5
  4015  001A24                     u9247:
  4016  001A24  2EE8               	decfsz	wreg,f,c
  4017  001A26  D7FE               	bra	u9247
  4018  001A28  D00B               	goto	L9
  4019  001A2A                     l621:
  4020                           
  4021                           ;HX_SPP_CARBON.c: 237: else{
  4022                           ;HX_SPP_CARBON.c: 238: LATA = 0x01;
  4023  001A2A  0E01               	movlw	1
  4024  001A2C  6E83               	movwf	3971,c	;volatile
  4025                           
  4026                           ;HX_SPP_CARBON.c: 239: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4027  001A2E  0E05               	movlw	5
  4028  001A30                     u9257:
  4029  001A30  2EE8               	decfsz	wreg,f,c
  4030  001A32  D7FE               	bra	u9257
  4031  001A34  F000               	nop	
  4032                           
  4033                           ;HX_SPP_CARBON.c: 240: LATA = 0x00;
  4034  001A36  0E00               	movlw	0
  4035  001A38  6E83               	movwf	3971,c	;volatile
  4036                           
  4037                           ;HX_SPP_CARBON.c: 241: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4038  001A3A  0E05               	movlw	5
  4039  001A3C                     u9267:
  4040  001A3C  2EE8               	decfsz	wreg,f,c
  4041  001A3E  D7FE               	bra	u9267
  4042  001A40                     L9:
  4043  001A40  F000               	nop	
  4044                           
  4045                           ;HX_SPP_CARBON.c: 242: LATA = 0x01;
  4046  001A42  0E01               	movlw	1
  4047  001A44  6E83               	movwf	3971,c	;volatile
  4048                           
  4049                           ;HX_SPP_CARBON.c: 243: }
  4050                           ;HX_SPP_CARBON.c: 244: for (uint8_t j = 1; j < 8; j++){
  4051  001A46  0E01               	movlw	1
  4052  001A48  0100               	movlb	0	; () banked
  4053  001A4A  6F73               	movwf	hxSPPCarbonReadReg_test@j_905& (0+255),b
  4054  001A4C                     l10313:
  4055                           
  4056                           ; BSR set to: 0
  4057  001A4C  0E07               	movlw	7
  4058  001A4E  6573               	cpfsgt	hxSPPCarbonReadReg_test@j_905& (0+255),b
  4059  001A50  D001               	goto	l623
  4060  001A52  D016               	goto	u7270
  4061  001A54                     l623:
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;HX_SPP_CARBON.c: 245: tempByte = tempByte << 1;
  4065                           
  4066                           ; BSR set to: 0
  4067  001A54  5179               	movf	hxSPPCarbonReadReg_test@tempByte& (0+255),w,b
  4068  001A56  2579               	addwf	hxSPPCarbonReadReg_test@tempByte& (0+255),w,b
  4069  001A58  6F79               	movwf	hxSPPCarbonReadReg_test@tempByte& (0+255),b
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;HX_SPP_CARBON.c: 246: if (tempByte & 0x80){
  4073  001A5A  AF79               	btfss	hxSPPCarbonReadReg_test@tempByte& (0+255),7,b
  4074  001A5C  D006               	goto	l625
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;HX_SPP_CARBON.c: 248: LATA = 0x03;
  4078  001A5E  0E03               	movlw	3
  4079  001A60  6E83               	movwf	3971,c	;volatile
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;HX_SPP_CARBON.c: 249: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4083  001A62  0E05               	movlw	5
  4084  001A64                     u9277:
  4085  001A64  2EE8               	decfsz	wreg,f,c
  4086  001A66  D7FE               	bra	u9277
  4087  001A68  D005               	goto	L10
  4088  001A6A                     l625:
  4089                           
  4090                           ;HX_SPP_CARBON.c: 252: else{
  4091                           ;HX_SPP_CARBON.c: 253: LATA = 0x00;
  4092  001A6A  0E00               	movlw	0
  4093  001A6C  6E83               	movwf	3971,c	;volatile
  4094                           
  4095                           ;HX_SPP_CARBON.c: 254: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4096  001A6E  0E05               	movlw	5
  4097  001A70                     u9287:
  4098  001A70  2EE8               	decfsz	wreg,f,c
  4099  001A72  D7FE               	bra	u9287
  4100  001A74                     L10:
  4101  001A74  F000               	nop	
  4102                           
  4103                           ;HX_SPP_CARBON.c: 255: LATA = 0x01;
  4104  001A76  0E01               	movlw	1
  4105  001A78  6E83               	movwf	3971,c	;volatile
  4106  001A7A  0100               	movlb	0	; () banked
  4107  001A7C  2B73               	incf	hxSPPCarbonReadReg_test@j_905& (0+255),f,b
  4108  001A7E  D7E6               	goto	l10313
  4109  001A80                     u7270:
  4110                           
  4111                           ; BSR set to: 0
  4112                           
  4113                           ; BSR set to: 0
  4114  001A80  2B72               	incf	hxSPPCarbonReadReg_test@i& (0+255),f,b
  4115  001A82                     l619:
  4116                           
  4117                           ; BSR set to: 0
  4118                           
  4119                           ; BSR set to: 0
  4120  001A82  516D               	movf	hxSPPCarbonReadReg_test@numTX& (0+255),w,b
  4121  001A84  5D72               	subwf	hxSPPCarbonReadReg_test@i& (0+255),w,b
  4122  001A86  A0D8               	btfss	status,0,c
  4123  001A88  D7B8               	goto	l620
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;HX_SPP_CARBON.c: 256: }
  4127                           ;HX_SPP_CARBON.c: 257: }
  4128                           ;HX_SPP_CARBON.c: 258: }
  4129                           ;HX_SPP_CARBON.c: 261: if (oddParityCalc)
  4130                           
  4131                           ; BSR set to: 0
  4132  001A8A  5170               	movf	hxSPPCarbonReadReg_test@oddParityCalc& (0+255),w,b
  4133  001A8C  B4D8               	btfsc	status,2,c
  4134  001A8E  D006               	goto	l628
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;HX_SPP_CARBON.c: 262: {
  4138                           ;HX_SPP_CARBON.c: 263: LATA = 0x03;
  4139  001A90  0E03               	movlw	3
  4140  001A92  6E83               	movwf	3971,c	;volatile
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;HX_SPP_CARBON.c: 264: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4144  001A94  0E05               	movlw	5
  4145  001A96                     u9297:
  4146  001A96  2EE8               	decfsz	wreg,f,c
  4147  001A98  D7FE               	bra	u9297
  4148  001A9A  D005               	goto	L33
  4149  001A9C                     l628:
  4150                           
  4151                           ;HX_SPP_CARBON.c: 267: else
  4152                           ;HX_SPP_CARBON.c: 268: {
  4153                           ;HX_SPP_CARBON.c: 269: LATA = 0x00;
  4154  001A9C  0E00               	movlw	0
  4155  001A9E  6E83               	movwf	3971,c	;volatile
  4156                           
  4157                           ;HX_SPP_CARBON.c: 270: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4158  001AA0  0E05               	movlw	5
  4159  001AA2                     u9307:
  4160  001AA2  2EE8               	decfsz	wreg,f,c
  4161  001AA4  D7FE               	bra	u9307
  4162  001AA6                     L33:
  4163  001AA6  F000               	nop	
  4164                           
  4165                           ;HX_SPP_CARBON.c: 271: LATA = 0x01;
  4166  001AA8  0E01               	movlw	1
  4167  001AAA  6E83               	movwf	3971,c	;volatile
  4168                           
  4169                           ;HX_SPP_CARBON.c: 272: }
  4170                           ;HX_SPP_CARBON.c: 275: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4171  001AAC  0E05               	movlw	5
  4172  001AAE                     u9317:
  4173  001AAE  2EE8               	decfsz	wreg,f,c
  4174  001AB0  D7FE               	bra	u9317
  4175  001AB2  F000               	nop	
  4176                           
  4177                           ;HX_SPP_CARBON.c: 276: LATA = 0x00;
  4178  001AB4  0E00               	movlw	0
  4179  001AB6  6E83               	movwf	3971,c	;volatile
  4180                           
  4181                           ;HX_SPP_CARBON.c: 277: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4182  001AB8  0E05               	movlw	5
  4183  001ABA                     u9327:
  4184  001ABA  2EE8               	decfsz	wreg,f,c
  4185  001ABC  D7FE               	bra	u9327
  4186  001ABE  F000               	nop	
  4187                           
  4188                           ;HX_SPP_CARBON.c: 284: for (uint8_t i = 0; i < numRX; i++)
  4189  001AC0  0E00               	movlw	0
  4190  001AC2  0100               	movlb	0	; () banked
  4191  001AC4  6F74               	movwf	hxSPPCarbonReadReg_test@i_906& (0+255),b
  4192  001AC6  D072               	goto	l630
  4193  001AC8                     
  4194                           ; BSR set to: 0
  4195                           ;HX_SPP_CARBON.c: 285: {
  4196                           ;HX_SPP_CARBON.c: 286: tempByte = 0;
  4197                           
  4198                           ; BSR set to: 0
  4199  001AC8  0E00               	movlw	0
  4200  001ACA  6F79               	movwf	hxSPPCarbonReadReg_test@tempByte& (0+255),b
  4201                           
  4202                           ;HX_SPP_CARBON.c: 288: for(uint8_t j = 0; j < 8; j++)
  4203  001ACC  0E00               	movlw	0
  4204  001ACE  6F75               	movwf	hxSPPCarbonReadReg_test@j_907& (0+255),b
  4205  001AD0                     l10359:
  4206                           
  4207                           ; BSR set to: 0
  4208  001AD0  0E07               	movlw	7
  4209  001AD2  6575               	cpfsgt	hxSPPCarbonReadReg_test@j_907& (0+255),b
  4210  001AD4  D001               	goto	l632
  4211  001AD6  D05B               	goto	u7420
  4212  001AD8                     l632:
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;HX_SPP_CARBON.c: 289: {
  4216                           ;HX_SPP_CARBON.c: 290: LATA = 0x01;
  4217                           
  4218                           ; BSR set to: 0
  4219  001AD8  0E01               	movlw	1
  4220  001ADA  6E83               	movwf	3971,c	;volatile
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;HX_SPP_CARBON.c: 291: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4224  001ADC  0E05               	movlw	5
  4225  001ADE                     u9337:
  4226  001ADE  2EE8               	decfsz	wreg,f,c
  4227  001AE0  D7FE               	bra	u9337
  4228  001AE2  F000               	nop	
  4229                           
  4230                           ;HX_SPP_CARBON.c: 292: LATA = 0x03;
  4231  001AE4  0E03               	movlw	3
  4232  001AE6  6E83               	movwf	3971,c	;volatile
  4233                           
  4234                           ;HX_SPP_CARBON.c: 293: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4235  001AE8  0E05               	movlw	5
  4236  001AEA                     u9347:
  4237  001AEA  2EE8               	decfsz	wreg,f,c
  4238  001AEC  D7FE               	bra	u9347
  4239  001AEE  F000               	nop	
  4240                           
  4241                           ;HX_SPP_CARBON.c: 294: LATA = 0x00;
  4242  001AF0  0E00               	movlw	0
  4243  001AF2  6E83               	movwf	3971,c	;volatile
  4244                           
  4245                           ;HX_SPP_CARBON.c: 295: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4246  001AF4  0E05               	movlw	5
  4247  001AF6                     u9357:
  4248  001AF6  2EE8               	decfsz	wreg,f,c
  4249  001AF8  D7FE               	bra	u9357
  4250  001AFA  F000               	nop	
  4251                           
  4252                           ;HX_SPP_CARBON.c: 299: tempByte = tempByte << 1;
  4253  001AFC  0100               	movlb	0	; () banked
  4254  001AFE  5179               	movf	hxSPPCarbonReadReg_test@tempByte& (0+255),w,b
  4255  001B00  2579               	addwf	hxSPPCarbonReadReg_test@tempByte& (0+255),w,b
  4256  001B02  6F79               	movwf	hxSPPCarbonReadReg_test@tempByte& (0+255),b
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;HX_SPP_CARBON.c: 300: readbackCommState = 0;
  4260  001B04  0E00               	movlw	0
  4261  001B06  6F78               	movwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),b
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;HX_SPP_CARBON.c: 301: bitVal = 2;
  4265  001B08  0E02               	movlw	2
  4266  001B0A  6F76               	movwf	hxSPPCarbonReadReg_test@bitVal& (0+255),b
  4267                           
  4268                           ; BSR set to: 0
  4269                           ;HX_SPP_CARBON.c: 303: readbackTimer = 40;
  4270  001B0C  0E00               	movlw	0
  4271  001B0E  6F6F               	movwf	(hxSPPCarbonReadReg_test@readbackTimer+1)& (0+255),b
  4272  001B10  0E28               	movlw	40
  4273  001B12  6F6E               	movwf	hxSPPCarbonReadReg_test@readbackTimer& (0+255),b
  4274                           
  4275                           ;HX_SPP_CARBON.c: 304: while(readbackTimer--)
  4276  001B14  D027               	goto	l646
  4277  001B16                     l635:
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;HX_SPP_CARBON.c: 305: {
  4281                           ;HX_SPP_CARBON.c: 306: portAVal = PORTA;
  4282  001B16  CF8D F06C          	movff	3981,hxSPPCarbonReadReg_test@portAVal	;volatile
  4283                           
  4284                           ; BSR set to: 0
  4285                           ;HX_SPP_CARBON.c: 307: if (readbackCommState == 0)
  4286  001B1A  5178               	movf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),w,b
  4287  001B1C  A4D8               	btfss	status,2,c
  4288  001B1E  D006               	goto	l636
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;HX_SPP_CARBON.c: 308: {
  4292                           ;HX_SPP_CARBON.c: 310: if (PORTAbits.RA4 == 1)
  4293  001B20  A88D               	btfss	3981,4,c	;volatile
  4294  001B22  D020               	goto	l646
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;HX_SPP_CARBON.c: 312: {
  4298                           ;HX_SPP_CARBON.c: 313: readbackCommState = 1;
  4299  001B24  0E01               	movlw	1
  4300  001B26  6F78               	movwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),b
  4301                           
  4302                           ;HX_SPP_CARBON.c: 314: bitVal = 3;
  4303  001B28  0E03               	movlw	3
  4304  001B2A  D01B               	goto	L13
  4305  001B2C                     l636:
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;HX_SPP_CARBON.c: 317: else if (readbackCommState == 1)
  4309                           
  4310                           ; BSR set to: 0
  4311  001B2C  0578               	decf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),w,b
  4312  001B2E  A4D8               	btfss	status,2,c
  4313  001B30  D006               	goto	l639
  4314                           
  4315                           ; BSR set to: 0
  4316                           ;HX_SPP_CARBON.c: 318: {
  4317                           ;HX_SPP_CARBON.c: 319: if (PORTAbits.RA4 == 0)
  4318  001B32  B88D               	btfsc	3981,4,c	;volatile
  4319  001B34  D017               	goto	l646
  4320                           
  4321                           ; BSR set to: 0
  4322                           ;HX_SPP_CARBON.c: 321: {
  4323                           ;HX_SPP_CARBON.c: 322: readbackCommState = 2;
  4324  001B36  0E02               	movlw	2
  4325  001B38  6F78               	movwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),b
  4326                           
  4327                           ;HX_SPP_CARBON.c: 323: bitVal = 0;
  4328  001B3A  0E00               	movlw	0
  4329  001B3C  D012               	goto	L13
  4330  001B3E                     l639:
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;HX_SPP_CARBON.c: 326: else if (readbackCommState == 2)
  4334                           
  4335                           ; BSR set to: 0
  4336  001B3E  0E02               	movlw	2
  4337  001B40  1978               	xorwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),w,b
  4338  001B42  A4D8               	btfss	status,2,c
  4339  001B44  D006               	goto	l642
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;HX_SPP_CARBON.c: 327: {
  4343                           ;HX_SPP_CARBON.c: 328: if (PORTAbits.RA4 == 1)
  4344  001B46  A88D               	btfss	3981,4,c	;volatile
  4345  001B48  D00D               	goto	l646
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;HX_SPP_CARBON.c: 330: {
  4349                           ;HX_SPP_CARBON.c: 331: readbackCommState = 3;
  4350  001B4A  0E03               	movlw	3
  4351  001B4C  6F78               	movwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),b
  4352                           
  4353                           ;HX_SPP_CARBON.c: 332: bitVal = 4;
  4354  001B4E  0E04               	movlw	4
  4355  001B50  D008               	goto	L13
  4356  001B52                     l642:
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;HX_SPP_CARBON.c: 335: else if (readbackCommState == 3)
  4360                           
  4361                           ; BSR set to: 0
  4362  001B52  0E03               	movlw	3
  4363  001B54  1978               	xorwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),w,b
  4364  001B56  B4D8               	btfsc	status,2,c
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;HX_SPP_CARBON.c: 336: {
  4368                           ;HX_SPP_CARBON.c: 337: if (PORTAbits.RA4 == 0)
  4369  001B58  B88D               	btfsc	3981,4,c	;volatile
  4370  001B5A  D004               	goto	l646
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;HX_SPP_CARBON.c: 339: {
  4374                           ;HX_SPP_CARBON.c: 340: readbackCommState = 3;
  4375  001B5C  0E03               	movlw	3
  4376  001B5E  6F78               	movwf	hxSPPCarbonReadReg_test@readbackCommState& (0+255),b
  4377                           
  4378                           ;HX_SPP_CARBON.c: 341: bitVal = 1;
  4379  001B60  0E01               	movlw	1
  4380  001B62                     L13:
  4381  001B62  6F76               	movwf	hxSPPCarbonReadReg_test@bitVal& (0+255),b
  4382  001B64                     l646:
  4383                           
  4384                           ; BSR set to: 0
  4385                           
  4386                           ; BSR set to: 0
  4387                           
  4388                           ; BSR set to: 0
  4389                           
  4390                           ; BSR set to: 0
  4391                           
  4392                           ; BSR set to: 0
  4393                           
  4394                           ; BSR set to: 0
  4395                           
  4396                           ; BSR set to: 0
  4397  001B64  076E               	decf	hxSPPCarbonReadReg_test@readbackTimer& (0+255),f,b
  4398  001B66  A0D8               	btfss	status,0,c
  4399  001B68  076F               	decf	(hxSPPCarbonReadReg_test@readbackTimer+1)& (0+255),f,b
  4400  001B6A  296E               	incf	hxSPPCarbonReadReg_test@readbackTimer& (0+255),w,b
  4401  001B6C  E1D4               	bnz	l635
  4402  001B6E  296F               	incf	(hxSPPCarbonReadReg_test@readbackTimer+1)& (0+255),w,b
  4403  001B70  A4D8               	btfss	status,2,c
  4404  001B72  D7D1               	goto	l635
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;HX_SPP_CARBON.c: 342: }
  4408                           ;HX_SPP_CARBON.c: 343: }
  4409                           ;HX_SPP_CARBON.c: 344: }
  4410                           ;HX_SPP_CARBON.c: 345: if(bitVal == 0)
  4411                           
  4412                           ; BSR set to: 0
  4413  001B74  5176               	movf	hxSPPCarbonReadReg_test@bitVal& (0+255),w,b
  4414  001B76  B4D8               	btfsc	status,2,c
  4415  001B78  D008               	goto	l651
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;HX_SPP_CARBON.c: 350: {
  4419                           ;HX_SPP_CARBON.c: 351: tempByte = tempByte++;
  4420                           
  4421                           ; BSR set to: 0
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;HX_SPP_CARBON.c: 346: {
  4425                           ;HX_SPP_CARBON.c: 348: }
  4426  001B7A  0576               	decf	hxSPPCarbonReadReg_test@bitVal& (0+255),w,b
  4427  001B7C  A4D8               	btfss	status,2,c
  4428  001B7E  D002               	goto	l650
  4429                           
  4430                           ; BSR set to: 0
  4431  001B80  2B79               	incf	hxSPPCarbonReadReg_test@tempByte& (0+255),f,b
  4432                           
  4433                           ;HX_SPP_CARBON.c: 352: }
  4434  001B82  D003               	goto	l651
  4435  001B84                     l650:
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;HX_SPP_CARBON.c: 353: else
  4439                           ;HX_SPP_CARBON.c: 354: {
  4440                           ;HX_SPP_CARBON.c: 355: tempHxState = 0x41;
  4441                           
  4442                           ; BSR set to: 0
  4443  001B84  0E41               	movlw	65
  4444  001B86  6F77               	movwf	hxSPPCarbonReadReg_test@tempHxState& (0+255),b
  4445                           
  4446                           ;HX_SPP_CARBON.c: 356: break;
  4447  001B88  D002               	goto	u7420
  4448  001B8A                     l651:
  4449                           
  4450                           ; BSR set to: 0
  4451                           
  4452                           ; BSR set to: 0
  4453                           
  4454                           ; BSR set to: 0
  4455  001B8A  2B75               	incf	hxSPPCarbonReadReg_test@j_907& (0+255),f,b
  4456  001B8C  D7A1               	goto	l10359
  4457  001B8E                     u7420:
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;HX_SPP_CARBON.c: 357: }
  4461                           ;HX_SPP_CARBON.c: 358: }
  4462                           ;HX_SPP_CARBON.c: 359: if (tempHxState == 0x41)
  4463                           
  4464                           ; BSR set to: 0
  4465  001B8E  0E41               	movlw	65
  4466  001B90  1977               	xorwf	hxSPPCarbonReadReg_test@tempHxState& (0+255),w,b
  4467  001B92  B4D8               	btfsc	status,2,c
  4468  001B94  D00F               	goto	u7440
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;HX_SPP_CARBON.c: 362: }
  4472                           ;HX_SPP_CARBON.c: 363: rxBuffer[i] = tempByte;
  4473                           
  4474                           ; BSR set to: 0
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;HX_SPP_CARBON.c: 360: {
  4478                           ;HX_SPP_CARBON.c: 361: break;
  4479  001B96  5174               	movf	hxSPPCarbonReadReg_test@i_906& (0+255),w,b
  4480  001B98  0D01               	mullw	1
  4481  001B9A  50F3               	movf	prodl,w,c
  4482  001B9C  256A               	addwf	hxSPPCarbonReadReg_test@rxBuffer& (0+255),w,b
  4483  001B9E  6ED9               	movwf	fsr2l,c
  4484  001BA0  50F4               	movf	prodh,w,c
  4485  001BA2  216B               	addwfc	(hxSPPCarbonReadReg_test@rxBuffer+1)& (0+255),w,b
  4486  001BA4  6EDA               	movwf	fsr2h,c
  4487  001BA6  C079  FFDF         	movff	hxSPPCarbonReadReg_test@tempByte,indf2
  4488                           
  4489                           ; BSR set to: 0
  4490  001BAA  2B74               	incf	hxSPPCarbonReadReg_test@i_906& (0+255),f,b
  4491  001BAC                     l630:
  4492                           
  4493                           ; BSR set to: 0
  4494                           
  4495                           ; BSR set to: 0
  4496  001BAC  5167               	movf	hxSPPCarbonReadReg_test@numRX& (0+255),w,b
  4497  001BAE  5D74               	subwf	hxSPPCarbonReadReg_test@i_906& (0+255),w,b
  4498  001BB0  A0D8               	btfss	status,0,c
  4499  001BB2  D78A               	goto	l631
  4500  001BB4                     u7440:
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;HX_SPP_CARBON.c: 364: }
  4504                           ;HX_SPP_CARBON.c: 365: if(tempHxState == 0x41)
  4505                           
  4506                           ; BSR set to: 0
  4507  001BB4  0E41               	movlw	65
  4508  001BB6  1977               	xorwf	hxSPPCarbonReadReg_test@tempHxState& (0+255),w,b
  4509  001BB8  A4D8               	btfss	status,2,c
  4510  001BBA  D002               	goto	l654
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;HX_SPP_CARBON.c: 366: {
  4514                           ;HX_SPP_CARBON.c: 367: tempHxState = 0x41;
  4515  001BBC  0E41               	movlw	65
  4516  001BBE  D001               	goto	L6
  4517  001BC0                     l654:
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;HX_SPP_CARBON.c: 369: else
  4521                           ;HX_SPP_CARBON.c: 370: {
  4522                           ;HX_SPP_CARBON.c: 371: tempHxState = 0x10;
  4523                           
  4524                           ; BSR set to: 0
  4525  001BC0  0E10               	movlw	16
  4526  001BC2                     L6:
  4527  001BC2  6F77               	movwf	hxSPPCarbonReadReg_test@tempHxState& (0+255),b
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;HX_SPP_CARBON.c: 372: }
  4531                           ;HX_SPP_CARBON.c: 373: return tempHxState;
  4532  001BC4  5177               	movf	hxSPPCarbonReadReg_test@tempHxState& (0+255),w,b
  4533  001BC6  0012               	return	
  4534  001BC8                     __end_of_hxSPPCarbonReadReg_test:
  4535                           	opt stack 0
  4536                           tblptru	equ	0xFF8
  4537                           tblptrh	equ	0xFF7
  4538                           tblptrl	equ	0xFF6
  4539                           tablat	equ	0xFF5
  4540                           prodh	equ	0xFF4
  4541                           prodl	equ	0xFF3
  4542                           intcon	equ	0xFF2
  4543                           postinc0	equ	0xFEE
  4544                           wreg	equ	0xFE8
  4545                           postinc1	equ	0xFE6
  4546                           postdec1	equ	0xFE5
  4547                           fsr1h	equ	0xFE2
  4548                           fsr1l	equ	0xFE1
  4549                           indf2	equ	0xFDF
  4550                           postinc2	equ	0xFDE
  4551                           fsr2h	equ	0xFDA
  4552                           fsr2l	equ	0xFD9
  4553                           status	equ	0xFD8
  4554                           
  4555 ;; *************** function _hxSPPCarbonProgram_test *****************
  4556 ;; Defined at:
  4557 ;;		line 483 in file "HX_SPP_CARBON.c"
  4558 ;; Parameters:    Size  Location     Type
  4559 ;;  numTX           1    wreg     unsigned char 
  4560 ;;  txBuffer        2    7[BANK0 ] PTR unsigned char 
  4561 ;;		 -> hx_inData(64), 
  4562 ;;  rxBuffer        2    9[BANK0 ] PTR unsigned char 
  4563 ;;		 -> hx_mainData(61), 
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;  numTX           1   11[BANK0 ] unsigned char 
  4566 ;;  j               1   15[BANK0 ] unsigned char 
  4567 ;;  i               1   14[BANK0 ] unsigned char 
  4568 ;;  j               1   13[BANK0 ] unsigned char 
  4569 ;;  tempByte        1   16[BANK0 ] unsigned char 
  4570 ;;  oddParityCal    1   12[BANK0 ] unsigned char 
  4571 ;; Return value:  Size  Location     Type
  4572 ;;                  1    wreg      void 
  4573 ;; Registers used:
  4574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4575 ;; Tracked objects:
  4576 ;;		On entry : 0/0
  4577 ;;		On exit  : 0/0
  4578 ;;		Unchanged: 0/0
  4579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4580 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4581 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4583 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4584 ;;Total ram usage:       10 bytes
  4585 ;; Hardware stack levels used:    1
  4586 ;; Hardware stack levels required when called:    8
  4587 ;; This function calls:
  4588 ;;		_hxOddParityCalc
  4589 ;; This function is called by:
  4590 ;;		_run_SPPCarbon_test
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           	psect	text7
  4595  0022B6                     __ptext7:
  4596                           	opt stack 0
  4597  0022B6                     _hxSPPCarbonProgram_test:
  4598                           	opt stack 21
  4599                           
  4600                           ; BSR set to: 0
  4601                           ;incstack = 0
  4602                           ;hxSPPCarbonProgram_test@numTX stored from wreg
  4603  0022B6  0100               	movlb	0	; () banked
  4604  0022B8  6F6B               	movwf	hxSPPCarbonProgram_test@numTX& (0+255),b
  4605                           
  4606                           ;HX_SPP_CARBON.c: 485: uint8_t tempByte;
  4607                           ;HX_SPP_CARBON.c: 486: uint8_t oddParityCalc = 0;
  4608  0022BA  0E00               	movlw	0
  4609  0022BC  0100               	movlb	0	; () banked
  4610  0022BE  6F6C               	movwf	hxSPPCarbonProgram_test@oddParityCalc& (0+255),b
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;HX_SPP_CARBON.c: 488: oddParityCalc = hxOddParityCalc(txBuffer, 3);
  4614  0022C0  C067  F060         	movff	hxSPPCarbonProgram_test@txBuffer,hxOddParityCalc@buff
  4615  0022C4  C068  F061         	movff	hxSPPCarbonProgram_test@txBuffer+1,hxOddParityCalc@buff+1
  4616  0022C8  0E03               	movlw	3
  4617  0022CA  6F62               	movwf	hxOddParityCalc@size& (0+255),b
  4618  0022CC  EC36  F01B         	call	_hxOddParityCalc	;wreg free
  4619  0022D0  0100               	movlb	0	; () banked
  4620  0022D2  6F6C               	movwf	hxSPPCarbonProgram_test@oddParityCalc& (0+255),b
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;HX_SPP_CARBON.c: 495: tempByte = 0xA0;
  4624  0022D4  0EA0               	movlw	160
  4625  0022D6  6F70               	movwf	hxSPPCarbonProgram_test@tempByte& (0+255),b
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;HX_SPP_CARBON.c: 496: if (tempByte & 0x80){
  4629  0022D8  AF70               	btfss	hxSPPCarbonProgram_test@tempByte& (0+255),7,b
  4630  0022DA  D00C               	goto	l679
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;HX_SPP_CARBON.c: 498: LATA = 0x01;
  4634  0022DC  0E01               	movlw	1
  4635  0022DE  6E83               	movwf	3971,c	;volatile
  4636                           
  4637                           ; BSR set to: 0
  4638                           ;HX_SPP_CARBON.c: 499: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4639  0022E0  0E05               	movlw	5
  4640  0022E2                     u9367:
  4641  0022E2  2EE8               	decfsz	wreg,f,c
  4642  0022E4  D7FE               	bra	u9367
  4643  0022E6  F000               	nop	
  4644                           
  4645                           ;HX_SPP_CARBON.c: 500: LATA = 0x03;
  4646  0022E8  0E03               	movlw	3
  4647  0022EA  6E83               	movwf	3971,c	;volatile
  4648                           
  4649                           ;HX_SPP_CARBON.c: 501: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4650  0022EC  0E05               	movlw	5
  4651  0022EE                     u9377:
  4652  0022EE  2EE8               	decfsz	wreg,f,c
  4653  0022F0  D7FE               	bra	u9377
  4654  0022F2  D00B               	goto	L14
  4655  0022F4                     l679:
  4656                           
  4657                           ;HX_SPP_CARBON.c: 504: else{
  4658                           ;HX_SPP_CARBON.c: 505: LATA = 0x01;
  4659  0022F4  0E01               	movlw	1
  4660  0022F6  6E83               	movwf	3971,c	;volatile
  4661                           
  4662                           ;HX_SPP_CARBON.c: 506: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4663  0022F8  0E05               	movlw	5
  4664  0022FA                     u9387:
  4665  0022FA  2EE8               	decfsz	wreg,f,c
  4666  0022FC  D7FE               	bra	u9387
  4667  0022FE  F000               	nop	
  4668                           
  4669                           ;HX_SPP_CARBON.c: 507: LATA = 0x00;
  4670  002300  0E00               	movlw	0
  4671  002302  6E83               	movwf	3971,c	;volatile
  4672                           
  4673                           ;HX_SPP_CARBON.c: 508: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4674  002304  0E05               	movlw	5
  4675  002306                     u9397:
  4676  002306  2EE8               	decfsz	wreg,f,c
  4677  002308  D7FE               	bra	u9397
  4678  00230A                     L14:
  4679  00230A  F000               	nop	
  4680                           
  4681                           ;HX_SPP_CARBON.c: 509: LATA = 0x01;
  4682  00230C  0E01               	movlw	1
  4683  00230E  6E83               	movwf	3971,c	;volatile
  4684                           
  4685                           ;HX_SPP_CARBON.c: 510: }
  4686                           ;HX_SPP_CARBON.c: 511: for (uint8_t j = 1; j < 4; j++){
  4687  002310  0E01               	movlw	1
  4688  002312  0100               	movlb	0	; () banked
  4689  002314  6F6D               	movwf	hxSPPCarbonProgram_test@j& (0+255),b
  4690  002316                     l10913:
  4691                           
  4692                           ; BSR set to: 0
  4693  002316  0E03               	movlw	3
  4694  002318  656D               	cpfsgt	hxSPPCarbonProgram_test@j& (0+255),b
  4695  00231A  D001               	goto	l681
  4696  00231C  D016               	goto	u7730
  4697  00231E                     l681:
  4698                           
  4699                           ; BSR set to: 0
  4700                           ;HX_SPP_CARBON.c: 512: tempByte = tempByte << 1;
  4701                           
  4702                           ; BSR set to: 0
  4703  00231E  5170               	movf	hxSPPCarbonProgram_test@tempByte& (0+255),w,b
  4704  002320  2570               	addwf	hxSPPCarbonProgram_test@tempByte& (0+255),w,b
  4705  002322  6F70               	movwf	hxSPPCarbonProgram_test@tempByte& (0+255),b
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;HX_SPP_CARBON.c: 513: if (tempByte & 0x80){
  4709  002324  AF70               	btfss	hxSPPCarbonProgram_test@tempByte& (0+255),7,b
  4710  002326  D006               	goto	l683
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;HX_SPP_CARBON.c: 515: LATA = 0x03;
  4714  002328  0E03               	movlw	3
  4715  00232A  6E83               	movwf	3971,c	;volatile
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;HX_SPP_CARBON.c: 516: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4719  00232C  0E05               	movlw	5
  4720  00232E                     u9407:
  4721  00232E  2EE8               	decfsz	wreg,f,c
  4722  002330  D7FE               	bra	u9407
  4723  002332  D005               	goto	L15
  4724  002334                     l683:
  4725                           
  4726                           ;HX_SPP_CARBON.c: 519: else{
  4727                           ;HX_SPP_CARBON.c: 520: LATA = 0x00;
  4728  002334  0E00               	movlw	0
  4729  002336  6E83               	movwf	3971,c	;volatile
  4730                           
  4731                           ;HX_SPP_CARBON.c: 521: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4732  002338  0E05               	movlw	5
  4733  00233A                     u9417:
  4734  00233A  2EE8               	decfsz	wreg,f,c
  4735  00233C  D7FE               	bra	u9417
  4736  00233E                     L15:
  4737  00233E  F000               	nop	
  4738                           
  4739                           ;HX_SPP_CARBON.c: 522: LATA = 0x01;
  4740  002340  0E01               	movlw	1
  4741  002342  6E83               	movwf	3971,c	;volatile
  4742  002344  0100               	movlb	0	; () banked
  4743  002346  2B6D               	incf	hxSPPCarbonProgram_test@j& (0+255),f,b
  4744  002348  D7E6               	goto	l10913
  4745  00234A                     u7730:
  4746                           
  4747                           ; BSR set to: 0
  4748                           ;HX_SPP_CARBON.c: 523: }
  4749                           ;HX_SPP_CARBON.c: 524: }
  4750                           ;HX_SPP_CARBON.c: 526: for (uint8_t i = 0; i < numTX; i++){
  4751                           
  4752                           ; BSR set to: 0
  4753  00234A  0E00               	movlw	0
  4754  00234C  6F6E               	movwf	hxSPPCarbonProgram_test@i& (0+255),b
  4755  00234E  D044               	goto	l685
  4756  002350                     
  4757                           ; BSR set to: 0
  4758                           ;HX_SPP_CARBON.c: 528: tempByte = txBuffer[i];
  4759                           
  4760                           ; BSR set to: 0
  4761  002350  516E               	movf	hxSPPCarbonProgram_test@i& (0+255),w,b
  4762  002352  0D01               	mullw	1
  4763  002354  50F3               	movf	prodl,w,c
  4764  002356  2567               	addwf	hxSPPCarbonProgram_test@txBuffer& (0+255),w,b
  4765  002358  6ED9               	movwf	fsr2l,c
  4766  00235A  50F4               	movf	prodh,w,c
  4767  00235C  2168               	addwfc	(hxSPPCarbonProgram_test@txBuffer+1)& (0+255),w,b
  4768  00235E  6EDA               	movwf	fsr2h,c
  4769  002360  50DF               	movf	indf2,w,c
  4770  002362  6F70               	movwf	hxSPPCarbonProgram_test@tempByte& (0+255),b
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;HX_SPP_CARBON.c: 529: if (tempByte & 0x80){
  4774  002364  AF70               	btfss	hxSPPCarbonProgram_test@tempByte& (0+255),7,b
  4775  002366  D00C               	goto	l687
  4776                           
  4777                           ; BSR set to: 0
  4778                           ;HX_SPP_CARBON.c: 531: LATA = 0x01;
  4779  002368  0E01               	movlw	1
  4780  00236A  6E83               	movwf	3971,c	;volatile
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;HX_SPP_CARBON.c: 532: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4784  00236C  0E05               	movlw	5
  4785  00236E                     u9427:
  4786  00236E  2EE8               	decfsz	wreg,f,c
  4787  002370  D7FE               	bra	u9427
  4788  002372  F000               	nop	
  4789                           
  4790                           ;HX_SPP_CARBON.c: 533: LATA = 0x03;
  4791  002374  0E03               	movlw	3
  4792  002376  6E83               	movwf	3971,c	;volatile
  4793                           
  4794                           ;HX_SPP_CARBON.c: 534: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4795  002378  0E05               	movlw	5
  4796  00237A                     u9437:
  4797  00237A  2EE8               	decfsz	wreg,f,c
  4798  00237C  D7FE               	bra	u9437
  4799  00237E  D00B               	goto	L16
  4800  002380                     l687:
  4801                           
  4802                           ;HX_SPP_CARBON.c: 537: else{
  4803                           ;HX_SPP_CARBON.c: 538: LATA = 0x01;
  4804  002380  0E01               	movlw	1
  4805  002382  6E83               	movwf	3971,c	;volatile
  4806                           
  4807                           ;HX_SPP_CARBON.c: 539: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4808  002384  0E05               	movlw	5
  4809  002386                     u9447:
  4810  002386  2EE8               	decfsz	wreg,f,c
  4811  002388  D7FE               	bra	u9447
  4812  00238A  F000               	nop	
  4813                           
  4814                           ;HX_SPP_CARBON.c: 540: LATA = 0x00;
  4815  00238C  0E00               	movlw	0
  4816  00238E  6E83               	movwf	3971,c	;volatile
  4817                           
  4818                           ;HX_SPP_CARBON.c: 541: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4819  002390  0E05               	movlw	5
  4820  002392                     u9457:
  4821  002392  2EE8               	decfsz	wreg,f,c
  4822  002394  D7FE               	bra	u9457
  4823  002396                     L16:
  4824  002396  F000               	nop	
  4825                           
  4826                           ;HX_SPP_CARBON.c: 542: LATA = 0x01;
  4827  002398  0E01               	movlw	1
  4828  00239A  6E83               	movwf	3971,c	;volatile
  4829                           
  4830                           ;HX_SPP_CARBON.c: 543: }
  4831                           ;HX_SPP_CARBON.c: 544: for (uint8_t j = 1; j < 8; j++){
  4832  00239C  0E01               	movlw	1
  4833  00239E  0100               	movlb	0	; () banked
  4834  0023A0  6F6F               	movwf	hxSPPCarbonProgram_test@j_925& (0+255),b
  4835  0023A2                     l10959:
  4836                           
  4837                           ; BSR set to: 0
  4838  0023A2  0E07               	movlw	7
  4839  0023A4  656F               	cpfsgt	hxSPPCarbonProgram_test@j_925& (0+255),b
  4840  0023A6  D001               	goto	l689
  4841  0023A8  D016               	goto	u7770
  4842  0023AA                     l689:
  4843                           
  4844                           ; BSR set to: 0
  4845                           ;HX_SPP_CARBON.c: 545: tempByte = tempByte << 1;
  4846                           
  4847                           ; BSR set to: 0
  4848  0023AA  5170               	movf	hxSPPCarbonProgram_test@tempByte& (0+255),w,b
  4849  0023AC  2570               	addwf	hxSPPCarbonProgram_test@tempByte& (0+255),w,b
  4850  0023AE  6F70               	movwf	hxSPPCarbonProgram_test@tempByte& (0+255),b
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;HX_SPP_CARBON.c: 546: if (tempByte & 0x80){
  4854  0023B0  AF70               	btfss	hxSPPCarbonProgram_test@tempByte& (0+255),7,b
  4855  0023B2  D006               	goto	l691
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;HX_SPP_CARBON.c: 548: LATA = 0x03;
  4859  0023B4  0E03               	movlw	3
  4860  0023B6  6E83               	movwf	3971,c	;volatile
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;HX_SPP_CARBON.c: 549: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4864  0023B8  0E05               	movlw	5
  4865  0023BA                     u9467:
  4866  0023BA  2EE8               	decfsz	wreg,f,c
  4867  0023BC  D7FE               	bra	u9467
  4868  0023BE  D005               	goto	L17
  4869  0023C0                     l691:
  4870                           
  4871                           ;HX_SPP_CARBON.c: 552: else{
  4872                           ;HX_SPP_CARBON.c: 553: LATA = 0x00;
  4873  0023C0  0E00               	movlw	0
  4874  0023C2  6E83               	movwf	3971,c	;volatile
  4875                           
  4876                           ;HX_SPP_CARBON.c: 554: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4877  0023C4  0E05               	movlw	5
  4878  0023C6                     u9477:
  4879  0023C6  2EE8               	decfsz	wreg,f,c
  4880  0023C8  D7FE               	bra	u9477
  4881  0023CA                     L17:
  4882  0023CA  F000               	nop	
  4883                           
  4884                           ;HX_SPP_CARBON.c: 555: LATA = 0x01;
  4885  0023CC  0E01               	movlw	1
  4886  0023CE  6E83               	movwf	3971,c	;volatile
  4887  0023D0  0100               	movlb	0	; () banked
  4888  0023D2  2B6F               	incf	hxSPPCarbonProgram_test@j_925& (0+255),f,b
  4889  0023D4  D7E6               	goto	l10959
  4890  0023D6                     u7770:
  4891                           
  4892                           ; BSR set to: 0
  4893                           
  4894                           ; BSR set to: 0
  4895  0023D6  2B6E               	incf	hxSPPCarbonProgram_test@i& (0+255),f,b
  4896  0023D8                     l685:
  4897                           
  4898                           ; BSR set to: 0
  4899                           
  4900                           ; BSR set to: 0
  4901  0023D8  516B               	movf	hxSPPCarbonProgram_test@numTX& (0+255),w,b
  4902  0023DA  5D6E               	subwf	hxSPPCarbonProgram_test@i& (0+255),w,b
  4903  0023DC  A0D8               	btfss	status,0,c
  4904  0023DE  D7B8               	goto	l686
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;HX_SPP_CARBON.c: 556: }
  4908                           ;HX_SPP_CARBON.c: 557: }
  4909                           ;HX_SPP_CARBON.c: 558: }
  4910                           ;HX_SPP_CARBON.c: 561: if (oddParityCalc)
  4911                           
  4912                           ; BSR set to: 0
  4913  0023E0  516C               	movf	hxSPPCarbonProgram_test@oddParityCalc& (0+255),w,b
  4914  0023E2  B4D8               	btfsc	status,2,c
  4915  0023E4  D006               	goto	l694
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;HX_SPP_CARBON.c: 562: {
  4919                           ;HX_SPP_CARBON.c: 563: LATA = 0x03;
  4920  0023E6  0E03               	movlw	3
  4921  0023E8  6E83               	movwf	3971,c	;volatile
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;HX_SPP_CARBON.c: 564: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4925  0023EA  0E05               	movlw	5
  4926  0023EC                     u9487:
  4927  0023EC  2EE8               	decfsz	wreg,f,c
  4928  0023EE  D7FE               	bra	u9487
  4929  0023F0  D005               	goto	L34
  4930  0023F2                     l694:
  4931                           
  4932                           ;HX_SPP_CARBON.c: 567: else
  4933                           ;HX_SPP_CARBON.c: 568: {
  4934                           ;HX_SPP_CARBON.c: 569: LATA = 0x00;
  4935  0023F2  0E00               	movlw	0
  4936  0023F4  6E83               	movwf	3971,c	;volatile
  4937                           
  4938                           ;HX_SPP_CARBON.c: 570: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4939  0023F6  0E05               	movlw	5
  4940  0023F8                     u9497:
  4941  0023F8  2EE8               	decfsz	wreg,f,c
  4942  0023FA  D7FE               	bra	u9497
  4943  0023FC                     L34:
  4944  0023FC  F000               	nop	
  4945                           
  4946                           ;HX_SPP_CARBON.c: 571: LATA = 0x01;
  4947  0023FE  0E01               	movlw	1
  4948  002400  6E83               	movwf	3971,c	;volatile
  4949                           
  4950                           ;HX_SPP_CARBON.c: 572: }
  4951                           ;HX_SPP_CARBON.c: 575: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4952  002402  0E05               	movlw	5
  4953  002404                     u9507:
  4954  002404  2EE8               	decfsz	wreg,f,c
  4955  002406  D7FE               	bra	u9507
  4956  002408  F000               	nop	
  4957                           
  4958                           ;HX_SPP_CARBON.c: 576: LATA = 0x00;
  4959  00240A  0E00               	movlw	0
  4960  00240C  6E83               	movwf	3971,c	;volatile
  4961                           
  4962                           ;HX_SPP_CARBON.c: 577: _delay((unsigned long)((1)*(64000000/4000000.0)));
  4963  00240E  0E05               	movlw	5
  4964  002410                     u9517:
  4965  002410  2EE8               	decfsz	wreg,f,c
  4966  002412  D7FE               	bra	u9517
  4967  002414  F000               	nop	
  4968                           
  4969                           ;HX_SPP_CARBON.c: 582: rxBuffer[0] = 0x11;
  4970  002416  C069  FFD9         	movff	hxSPPCarbonProgram_test@rxBuffer,fsr2l
  4971  00241A  C06A  FFDA         	movff	hxSPPCarbonProgram_test@rxBuffer+1,fsr2h
  4972  00241E  0E11               	movlw	17
  4973  002420  6EDF               	movwf	indf2,c
  4974                           
  4975                           ;HX_SPP_CARBON.c: 585: if(hx_state != 0x41)
  4976  002422  0E41               	movlw	65
  4977  002424  1845               	xorwf	_hx_state,w,c
  4978  002426  B4D8               	btfsc	status,2,c
  4979  002428  D002               	goto	l696
  4980                           
  4981                           ;HX_SPP_CARBON.c: 586: {
  4982                           ;HX_SPP_CARBON.c: 587: hx_state = 0x10;
  4983  00242A  0E10               	movlw	16
  4984  00242C  6E45               	movwf	_hx_state,c
  4985  00242E                     l696:
  4986                           
  4987                           ;HX_SPP_CARBON.c: 588: }
  4988                           ;HX_SPP_CARBON.c: 589: LATA = 0x03;
  4989  00242E  0E03               	movlw	3
  4990  002430  6E83               	movwf	3971,c	;volatile
  4991  002432  0012               	return		;funcret
  4992  002434                     __end_of_hxSPPCarbonProgram_test:
  4993                           	opt stack 0
  4994                           tblptru	equ	0xFF8
  4995                           tblptrh	equ	0xFF7
  4996                           tblptrl	equ	0xFF6
  4997                           tablat	equ	0xFF5
  4998                           prodh	equ	0xFF4
  4999                           prodl	equ	0xFF3
  5000                           intcon	equ	0xFF2
  5001                           postinc0	equ	0xFEE
  5002                           wreg	equ	0xFE8
  5003                           postinc1	equ	0xFE6
  5004                           postdec1	equ	0xFE5
  5005                           fsr1h	equ	0xFE2
  5006                           fsr1l	equ	0xFE1
  5007                           indf2	equ	0xFDF
  5008                           postinc2	equ	0xFDE
  5009                           fsr2h	equ	0xFDA
  5010                           fsr2l	equ	0xFD9
  5011                           status	equ	0xFD8
  5012                           
  5013 ;; *************** function _hxSPPCarbonCheckBusy_test *****************
  5014 ;; Defined at:
  5015 ;;		line 593 in file "HX_SPP_CARBON.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;  numTX           1    wreg     unsigned char 
  5018 ;;  numRX           1    7[BANK0 ] unsigned char 
  5019 ;;  txBuffer        2    8[BANK0 ] PTR unsigned char 
  5020 ;;		 -> hx_inData(64), 
  5021 ;;  rxBuffer        2   10[BANK0 ] PTR unsigned char 
  5022 ;;		 -> hx_mainData(61), 
  5023 ;; Auto vars:     Size  Location     Type
  5024 ;;  numTX           1   14[BANK0 ] unsigned char 
  5025 ;;  j               1   22[BANK0 ] unsigned char 
  5026 ;;  j               1   20[BANK0 ] unsigned char 
  5027 ;;  i               1   21[BANK0 ] unsigned char 
  5028 ;;  i               1   19[BANK0 ] unsigned char 
  5029 ;;  j               1   18[BANK0 ] unsigned char 
  5030 ;;  readbackTime    2   15[BANK0 ] unsigned int 
  5031 ;;  tempByte        1   26[BANK0 ] unsigned char 
  5032 ;;  readbackComm    1   25[BANK0 ] unsigned char 
  5033 ;;  portAVal        1   24[BANK0 ] unsigned char 
  5034 ;;  bitVal          1   23[BANK0 ] unsigned char 
  5035 ;;  oddParityCal    1   17[BANK0 ] unsigned char 
  5036 ;; Return value:  Size  Location     Type
  5037 ;;                  1    wreg      void 
  5038 ;; Registers used:
  5039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5040 ;; Tracked objects:
  5041 ;;		On entry : 0/0
  5042 ;;		On exit  : 0/0
  5043 ;;		Unchanged: 0/0
  5044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5045 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5046 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5047 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5048 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5049 ;;Total ram usage:       20 bytes
  5050 ;; Hardware stack levels used:    1
  5051 ;; Hardware stack levels required when called:    8
  5052 ;; This function calls:
  5053 ;;		_hxOddParityCalc
  5054 ;; This function is called by:
  5055 ;;		_run_SPPCarbon_test
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text8
  5060  001108                     __ptext8:
  5061                           	opt stack 0
  5062  001108                     _hxSPPCarbonCheckBusy_test:
  5063                           	opt stack 21
  5064                           
  5065                           ;incstack = 0
  5066                           ;hxSPPCarbonCheckBusy_test@numTX stored from wreg
  5067  001108  0100               	movlb	0	; () banked
  5068  00110A  6F6E               	movwf	hxSPPCarbonCheckBusy_test@numTX& (0+255),b
  5069                           
  5070                           ;HX_SPP_CARBON.c: 595: uint8_t tempByte;
  5071                           ;HX_SPP_CARBON.c: 596: uint8_t readbackCommState;
  5072                           ;HX_SPP_CARBON.c: 597: uint8_t bitVal;
  5073                           ;HX_SPP_CARBON.c: 598: uint16_t readbackTimer;
  5074                           ;HX_SPP_CARBON.c: 599: uint8_t oddParityCalc = 0;
  5075  00110C  0E00               	movlw	0
  5076  00110E  0100               	movlb	0	; () banked
  5077  001110  6F71               	movwf	hxSPPCarbonCheckBusy_test@oddParityCalc& (0+255),b
  5078                           
  5079                           ;HX_SPP_CARBON.c: 600: uint8_t portAVal = 0;
  5080  001112  0E00               	movlw	0
  5081  001114  6F78               	movwf	hxSPPCarbonCheckBusy_test@portAVal& (0+255),b
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;HX_SPP_CARBON.c: 602: oddParityCalc = hxOddParityCalc(txBuffer, 3);
  5085  001116  C068  F060         	movff	hxSPPCarbonCheckBusy_test@txBuffer,hxOddParityCalc@buff
  5086  00111A  C069  F061         	movff	hxSPPCarbonCheckBusy_test@txBuffer+1,hxOddParityCalc@buff+1
  5087  00111E  0E03               	movlw	3
  5088  001120  6F62               	movwf	hxOddParityCalc@size& (0+255),b
  5089  001122  EC36  F01B         	call	_hxOddParityCalc	;wreg free
  5090  001126  0100               	movlb	0	; () banked
  5091  001128  6F71               	movwf	hxSPPCarbonCheckBusy_test@oddParityCalc& (0+255),b
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;HX_SPP_CARBON.c: 614: tempByte = 0xA0;
  5095  00112A  0EA0               	movlw	160
  5096  00112C  6F7A               	movwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),b
  5097                           
  5098                           ; BSR set to: 0
  5099                           ;HX_SPP_CARBON.c: 615: if (tempByte & 0x80){
  5100  00112E  AF7A               	btfss	hxSPPCarbonCheckBusy_test@tempByte& (0+255),7,b
  5101  001130  D00C               	goto	l700
  5102                           
  5103                           ; BSR set to: 0
  5104                           ;HX_SPP_CARBON.c: 617: LATA = 0x01;
  5105  001132  0E01               	movlw	1
  5106  001134  6E83               	movwf	3971,c	;volatile
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;HX_SPP_CARBON.c: 618: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5110  001136  0E05               	movlw	5
  5111  001138                     u9527:
  5112  001138  2EE8               	decfsz	wreg,f,c
  5113  00113A  D7FE               	bra	u9527
  5114  00113C  F000               	nop	
  5115                           
  5116                           ;HX_SPP_CARBON.c: 619: LATA = 0x03;
  5117  00113E  0E03               	movlw	3
  5118  001140  6E83               	movwf	3971,c	;volatile
  5119                           
  5120                           ;HX_SPP_CARBON.c: 620: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5121  001142  0E05               	movlw	5
  5122  001144                     u9537:
  5123  001144  2EE8               	decfsz	wreg,f,c
  5124  001146  D7FE               	bra	u9537
  5125  001148  D00B               	goto	L18
  5126  00114A                     l700:
  5127                           
  5128                           ;HX_SPP_CARBON.c: 623: else{
  5129                           ;HX_SPP_CARBON.c: 624: LATA = 0x01;
  5130  00114A  0E01               	movlw	1
  5131  00114C  6E83               	movwf	3971,c	;volatile
  5132                           
  5133                           ;HX_SPP_CARBON.c: 625: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5134  00114E  0E05               	movlw	5
  5135  001150                     u9547:
  5136  001150  2EE8               	decfsz	wreg,f,c
  5137  001152  D7FE               	bra	u9547
  5138  001154  F000               	nop	
  5139                           
  5140                           ;HX_SPP_CARBON.c: 626: LATA = 0x00;
  5141  001156  0E00               	movlw	0
  5142  001158  6E83               	movwf	3971,c	;volatile
  5143                           
  5144                           ;HX_SPP_CARBON.c: 627: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5145  00115A  0E05               	movlw	5
  5146  00115C                     u9557:
  5147  00115C  2EE8               	decfsz	wreg,f,c
  5148  00115E  D7FE               	bra	u9557
  5149  001160                     L18:
  5150  001160  F000               	nop	
  5151                           
  5152                           ;HX_SPP_CARBON.c: 628: LATA = 0x01;
  5153  001162  0E01               	movlw	1
  5154  001164  6E83               	movwf	3971,c	;volatile
  5155                           
  5156                           ;HX_SPP_CARBON.c: 629: }
  5157                           ;HX_SPP_CARBON.c: 630: for (uint8_t j = 1; j < 4; j++){
  5158  001166  0E01               	movlw	1
  5159  001168  0100               	movlb	0	; () banked
  5160  00116A  6F72               	movwf	hxSPPCarbonCheckBusy_test@j& (0+255),b
  5161  00116C                     l11035:
  5162                           
  5163                           ; BSR set to: 0
  5164  00116C  0E03               	movlw	3
  5165  00116E  6572               	cpfsgt	hxSPPCarbonCheckBusy_test@j& (0+255),b
  5166  001170  D001               	goto	l702
  5167  001172  D016               	goto	u7840
  5168  001174                     l702:
  5169                           
  5170                           ; BSR set to: 0
  5171                           ;HX_SPP_CARBON.c: 631: tempByte = tempByte << 1;
  5172                           
  5173                           ; BSR set to: 0
  5174  001174  517A               	movf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),w,b
  5175  001176  257A               	addwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),w,b
  5176  001178  6F7A               	movwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),b
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;HX_SPP_CARBON.c: 632: if (tempByte & 0x80){
  5180  00117A  AF7A               	btfss	hxSPPCarbonCheckBusy_test@tempByte& (0+255),7,b
  5181  00117C  D006               	goto	l704
  5182                           
  5183                           ; BSR set to: 0
  5184                           ;HX_SPP_CARBON.c: 634: LATA = 0x03;
  5185  00117E  0E03               	movlw	3
  5186  001180  6E83               	movwf	3971,c	;volatile
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;HX_SPP_CARBON.c: 635: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5190  001182  0E05               	movlw	5
  5191  001184                     u9567:
  5192  001184  2EE8               	decfsz	wreg,f,c
  5193  001186  D7FE               	bra	u9567
  5194  001188  D005               	goto	L19
  5195  00118A                     l704:
  5196                           
  5197                           ;HX_SPP_CARBON.c: 638: else{
  5198                           ;HX_SPP_CARBON.c: 639: LATA = 0x00;
  5199  00118A  0E00               	movlw	0
  5200  00118C  6E83               	movwf	3971,c	;volatile
  5201                           
  5202                           ;HX_SPP_CARBON.c: 640: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5203  00118E  0E05               	movlw	5
  5204  001190                     u9577:
  5205  001190  2EE8               	decfsz	wreg,f,c
  5206  001192  D7FE               	bra	u9577
  5207  001194                     L19:
  5208  001194  F000               	nop	
  5209                           
  5210                           ;HX_SPP_CARBON.c: 641: LATA = 0x01;
  5211  001196  0E01               	movlw	1
  5212  001198  6E83               	movwf	3971,c	;volatile
  5213  00119A  0100               	movlb	0	; () banked
  5214  00119C  2B72               	incf	hxSPPCarbonCheckBusy_test@j& (0+255),f,b
  5215  00119E  D7E6               	goto	l11035
  5216  0011A0                     u7840:
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;HX_SPP_CARBON.c: 642: }
  5220                           ;HX_SPP_CARBON.c: 643: }
  5221                           ;HX_SPP_CARBON.c: 645: for (uint8_t i = 0; i < numTX; i++){
  5222                           
  5223                           ; BSR set to: 0
  5224  0011A0  0E00               	movlw	0
  5225  0011A2  6F73               	movwf	hxSPPCarbonCheckBusy_test@i& (0+255),b
  5226  0011A4  D044               	goto	l706
  5227  0011A6                     
  5228                           ; BSR set to: 0
  5229                           ;HX_SPP_CARBON.c: 647: tempByte = txBuffer[i];
  5230                           
  5231                           ; BSR set to: 0
  5232  0011A6  5173               	movf	hxSPPCarbonCheckBusy_test@i& (0+255),w,b
  5233  0011A8  0D01               	mullw	1
  5234  0011AA  50F3               	movf	prodl,w,c
  5235  0011AC  2568               	addwf	hxSPPCarbonCheckBusy_test@txBuffer& (0+255),w,b
  5236  0011AE  6ED9               	movwf	fsr2l,c
  5237  0011B0  50F4               	movf	prodh,w,c
  5238  0011B2  2169               	addwfc	(hxSPPCarbonCheckBusy_test@txBuffer+1)& (0+255),w,b
  5239  0011B4  6EDA               	movwf	fsr2h,c
  5240  0011B6  50DF               	movf	indf2,w,c
  5241  0011B8  6F7A               	movwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),b
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;HX_SPP_CARBON.c: 648: if (tempByte & 0x80){
  5245  0011BA  AF7A               	btfss	hxSPPCarbonCheckBusy_test@tempByte& (0+255),7,b
  5246  0011BC  D00C               	goto	l708
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;HX_SPP_CARBON.c: 650: LATA = 0x01;
  5250  0011BE  0E01               	movlw	1
  5251  0011C0  6E83               	movwf	3971,c	;volatile
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;HX_SPP_CARBON.c: 651: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5255  0011C2  0E05               	movlw	5
  5256  0011C4                     u9587:
  5257  0011C4  2EE8               	decfsz	wreg,f,c
  5258  0011C6  D7FE               	bra	u9587
  5259  0011C8  F000               	nop	
  5260                           
  5261                           ;HX_SPP_CARBON.c: 652: LATA = 0x03;
  5262  0011CA  0E03               	movlw	3
  5263  0011CC  6E83               	movwf	3971,c	;volatile
  5264                           
  5265                           ;HX_SPP_CARBON.c: 653: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5266  0011CE  0E05               	movlw	5
  5267  0011D0                     u9597:
  5268  0011D0  2EE8               	decfsz	wreg,f,c
  5269  0011D2  D7FE               	bra	u9597
  5270  0011D4  D00B               	goto	L20
  5271  0011D6                     l708:
  5272                           
  5273                           ;HX_SPP_CARBON.c: 656: else{
  5274                           ;HX_SPP_CARBON.c: 657: LATA = 0x01;
  5275  0011D6  0E01               	movlw	1
  5276  0011D8  6E83               	movwf	3971,c	;volatile
  5277                           
  5278                           ;HX_SPP_CARBON.c: 658: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5279  0011DA  0E05               	movlw	5
  5280  0011DC                     u9607:
  5281  0011DC  2EE8               	decfsz	wreg,f,c
  5282  0011DE  D7FE               	bra	u9607
  5283  0011E0  F000               	nop	
  5284                           
  5285                           ;HX_SPP_CARBON.c: 659: LATA = 0x00;
  5286  0011E2  0E00               	movlw	0
  5287  0011E4  6E83               	movwf	3971,c	;volatile
  5288                           
  5289                           ;HX_SPP_CARBON.c: 660: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5290  0011E6  0E05               	movlw	5
  5291  0011E8                     u9617:
  5292  0011E8  2EE8               	decfsz	wreg,f,c
  5293  0011EA  D7FE               	bra	u9617
  5294  0011EC                     L20:
  5295  0011EC  F000               	nop	
  5296                           
  5297                           ;HX_SPP_CARBON.c: 661: LATA = 0x01;
  5298  0011EE  0E01               	movlw	1
  5299  0011F0  6E83               	movwf	3971,c	;volatile
  5300                           
  5301                           ;HX_SPP_CARBON.c: 662: }
  5302                           ;HX_SPP_CARBON.c: 663: for (uint8_t j = 1; j < 8; j++){
  5303  0011F2  0E01               	movlw	1
  5304  0011F4  0100               	movlb	0	; () banked
  5305  0011F6  6F74               	movwf	hxSPPCarbonCheckBusy_test@j_939& (0+255),b
  5306  0011F8                     l11081:
  5307                           
  5308                           ; BSR set to: 0
  5309  0011F8  0E07               	movlw	7
  5310  0011FA  6574               	cpfsgt	hxSPPCarbonCheckBusy_test@j_939& (0+255),b
  5311  0011FC  D001               	goto	l710
  5312  0011FE  D016               	goto	u7880
  5313  001200                     l710:
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;HX_SPP_CARBON.c: 664: tempByte = tempByte << 1;
  5317                           
  5318                           ; BSR set to: 0
  5319  001200  517A               	movf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),w,b
  5320  001202  257A               	addwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),w,b
  5321  001204  6F7A               	movwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),b
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;HX_SPP_CARBON.c: 665: if (tempByte & 0x80){
  5325  001206  AF7A               	btfss	hxSPPCarbonCheckBusy_test@tempByte& (0+255),7,b
  5326  001208  D006               	goto	l712
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;HX_SPP_CARBON.c: 667: LATA = 0x03;
  5330  00120A  0E03               	movlw	3
  5331  00120C  6E83               	movwf	3971,c	;volatile
  5332                           
  5333                           ; BSR set to: 0
  5334                           ;HX_SPP_CARBON.c: 668: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5335  00120E  0E05               	movlw	5
  5336  001210                     u9627:
  5337  001210  2EE8               	decfsz	wreg,f,c
  5338  001212  D7FE               	bra	u9627
  5339  001214  D005               	goto	L21
  5340  001216                     l712:
  5341                           
  5342                           ;HX_SPP_CARBON.c: 671: else{
  5343                           ;HX_SPP_CARBON.c: 672: LATA = 0x00;
  5344  001216  0E00               	movlw	0
  5345  001218  6E83               	movwf	3971,c	;volatile
  5346                           
  5347                           ;HX_SPP_CARBON.c: 673: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5348  00121A  0E05               	movlw	5
  5349  00121C                     u9637:
  5350  00121C  2EE8               	decfsz	wreg,f,c
  5351  00121E  D7FE               	bra	u9637
  5352  001220                     L21:
  5353  001220  F000               	nop	
  5354                           
  5355                           ;HX_SPP_CARBON.c: 674: LATA = 0x01;
  5356  001222  0E01               	movlw	1
  5357  001224  6E83               	movwf	3971,c	;volatile
  5358  001226  0100               	movlb	0	; () banked
  5359  001228  2B74               	incf	hxSPPCarbonCheckBusy_test@j_939& (0+255),f,b
  5360  00122A  D7E6               	goto	l11081
  5361  00122C                     u7880:
  5362                           
  5363                           ; BSR set to: 0
  5364                           
  5365                           ; BSR set to: 0
  5366  00122C  2B73               	incf	hxSPPCarbonCheckBusy_test@i& (0+255),f,b
  5367  00122E                     l706:
  5368                           
  5369                           ; BSR set to: 0
  5370                           
  5371                           ; BSR set to: 0
  5372  00122E  516E               	movf	hxSPPCarbonCheckBusy_test@numTX& (0+255),w,b
  5373  001230  5D73               	subwf	hxSPPCarbonCheckBusy_test@i& (0+255),w,b
  5374  001232  A0D8               	btfss	status,0,c
  5375  001234  D7B8               	goto	l707
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;HX_SPP_CARBON.c: 675: }
  5379                           ;HX_SPP_CARBON.c: 676: }
  5380                           ;HX_SPP_CARBON.c: 677: }
  5381                           ;HX_SPP_CARBON.c: 680: if (oddParityCalc)
  5382                           
  5383                           ; BSR set to: 0
  5384  001236  5171               	movf	hxSPPCarbonCheckBusy_test@oddParityCalc& (0+255),w,b
  5385  001238  B4D8               	btfsc	status,2,c
  5386  00123A  D006               	goto	l715
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;HX_SPP_CARBON.c: 681: {
  5390                           ;HX_SPP_CARBON.c: 682: LATA = 0x03;
  5391  00123C  0E03               	movlw	3
  5392  00123E  6E83               	movwf	3971,c	;volatile
  5393                           
  5394                           ; BSR set to: 0
  5395                           ;HX_SPP_CARBON.c: 683: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5396  001240  0E05               	movlw	5
  5397  001242                     u9647:
  5398  001242  2EE8               	decfsz	wreg,f,c
  5399  001244  D7FE               	bra	u9647
  5400  001246  D005               	goto	L35
  5401  001248                     l715:
  5402                           
  5403                           ;HX_SPP_CARBON.c: 686: else
  5404                           ;HX_SPP_CARBON.c: 687: {
  5405                           ;HX_SPP_CARBON.c: 688: LATA = 0x00;
  5406  001248  0E00               	movlw	0
  5407  00124A  6E83               	movwf	3971,c	;volatile
  5408                           
  5409                           ;HX_SPP_CARBON.c: 689: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5410  00124C  0E05               	movlw	5
  5411  00124E                     u9657:
  5412  00124E  2EE8               	decfsz	wreg,f,c
  5413  001250  D7FE               	bra	u9657
  5414  001252                     L35:
  5415  001252  F000               	nop	
  5416                           
  5417                           ;HX_SPP_CARBON.c: 690: LATA = 0x01;
  5418  001254  0E01               	movlw	1
  5419  001256  6E83               	movwf	3971,c	;volatile
  5420                           
  5421                           ;HX_SPP_CARBON.c: 691: }
  5422                           ;HX_SPP_CARBON.c: 694: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5423  001258  0E05               	movlw	5
  5424  00125A                     u9667:
  5425  00125A  2EE8               	decfsz	wreg,f,c
  5426  00125C  D7FE               	bra	u9667
  5427  00125E  F000               	nop	
  5428                           
  5429                           ;HX_SPP_CARBON.c: 695: LATA = 0x00;
  5430  001260  0E00               	movlw	0
  5431  001262  6E83               	movwf	3971,c	;volatile
  5432                           
  5433                           ;HX_SPP_CARBON.c: 696: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5434  001264  0E05               	movlw	5
  5435  001266                     u9677:
  5436  001266  2EE8               	decfsz	wreg,f,c
  5437  001268  D7FE               	bra	u9677
  5438  00126A  F000               	nop	
  5439                           
  5440                           ;HX_SPP_CARBON.c: 702: hx_state = 0x10;
  5441  00126C  0E10               	movlw	16
  5442  00126E  6E45               	movwf	_hx_state,c
  5443                           
  5444                           ;HX_SPP_CARBON.c: 703: rxBuffer[0] = 0x10;
  5445  001270  C06A  FFD9         	movff	hxSPPCarbonCheckBusy_test@rxBuffer,fsr2l
  5446  001274  C06B  FFDA         	movff	hxSPPCarbonCheckBusy_test@rxBuffer+1,fsr2h
  5447  001278  0E10               	movlw	16
  5448  00127A  6EDF               	movwf	indf2,c
  5449                           
  5450                           ;HX_SPP_CARBON.c: 704: rxBuffer[1] = 0x00;
  5451  00127C  0100               	movlb	0	; () banked
  5452  00127E  EE20 F001          	lfsr	2,1
  5453  001282  516A               	movf	hxSPPCarbonCheckBusy_test@rxBuffer& (0+255),w,b
  5454  001284  26D9               	addwf	fsr2l,f,c
  5455  001286  516B               	movf	(hxSPPCarbonCheckBusy_test@rxBuffer+1)& (0+255),w,b
  5456  001288  22DA               	addwfc	fsr2h,f,c
  5457  00128A  0E00               	movlw	0
  5458  00128C  6EDF               	movwf	indf2,c
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;HX_SPP_CARBON.c: 706: for (uint8_t i = 0; i < numRX; i++)
  5462  00128E  0E00               	movlw	0
  5463  001290  6F75               	movwf	hxSPPCarbonCheckBusy_test@i_940& (0+255),b
  5464  001292  D0A8               	goto	l717
  5465  001294                     
  5466                           ; BSR set to: 0
  5467                           ;HX_SPP_CARBON.c: 707: {
  5468                           ;HX_SPP_CARBON.c: 708: tempByte = 0;
  5469                           
  5470                           ; BSR set to: 0
  5471  001294  0E00               	movlw	0
  5472  001296  6F7A               	movwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),b
  5473                           
  5474                           ;HX_SPP_CARBON.c: 710: for(uint8_t j = 0; j < 8; j++)
  5475  001298  0E00               	movlw	0
  5476  00129A  6F76               	movwf	hxSPPCarbonCheckBusy_test@j_941& (0+255),b
  5477  00129C                     l11133:
  5478                           
  5479                           ; BSR set to: 0
  5480  00129C  0E07               	movlw	7
  5481  00129E  6576               	cpfsgt	hxSPPCarbonCheckBusy_test@j_941& (0+255),b
  5482  0012A0  D001               	goto	l719
  5483  0012A2  D088               	goto	u8110
  5484  0012A4                     l719:
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;HX_SPP_CARBON.c: 711: {
  5488                           ;HX_SPP_CARBON.c: 712: LATA = 0x01;
  5489                           
  5490                           ; BSR set to: 0
  5491  0012A4  0E01               	movlw	1
  5492  0012A6  6E83               	movwf	3971,c	;volatile
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;HX_SPP_CARBON.c: 713: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5496  0012A8  0E05               	movlw	5
  5497  0012AA                     u9687:
  5498  0012AA  2EE8               	decfsz	wreg,f,c
  5499  0012AC  D7FE               	bra	u9687
  5500  0012AE  F000               	nop	
  5501                           
  5502                           ;HX_SPP_CARBON.c: 714: LATA = 0x03;
  5503  0012B0  0E03               	movlw	3
  5504  0012B2  6E83               	movwf	3971,c	;volatile
  5505                           
  5506                           ;HX_SPP_CARBON.c: 715: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5507  0012B4  0E05               	movlw	5
  5508  0012B6                     u9697:
  5509  0012B6  2EE8               	decfsz	wreg,f,c
  5510  0012B8  D7FE               	bra	u9697
  5511  0012BA  F000               	nop	
  5512                           
  5513                           ;HX_SPP_CARBON.c: 716: LATA = 0x00;
  5514  0012BC  0E00               	movlw	0
  5515  0012BE  6E83               	movwf	3971,c	;volatile
  5516                           
  5517                           ;HX_SPP_CARBON.c: 717: _delay((unsigned long)((1)*(64000000/4000000.0)));
  5518  0012C0  0E05               	movlw	5
  5519  0012C2                     u9707:
  5520  0012C2  2EE8               	decfsz	wreg,f,c
  5521  0012C4  D7FE               	bra	u9707
  5522  0012C6  F000               	nop	
  5523                           
  5524                           ;HX_SPP_CARBON.c: 721: tempByte = tempByte << 1;
  5525  0012C8  0100               	movlb	0	; () banked
  5526  0012CA  517A               	movf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),w,b
  5527  0012CC  257A               	addwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),w,b
  5528  0012CE  6F7A               	movwf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),b
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;HX_SPP_CARBON.c: 722: readbackCommState = 0;
  5532  0012D0  0E00               	movlw	0
  5533  0012D2  6F79               	movwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),b
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;HX_SPP_CARBON.c: 723: bitVal = 2;
  5537  0012D4  0E02               	movlw	2
  5538  0012D6  6F77               	movwf	hxSPPCarbonCheckBusy_test@bitVal& (0+255),b
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;HX_SPP_CARBON.c: 725: readbackTimer = 40;
  5542  0012D8  0E00               	movlw	0
  5543  0012DA  6F70               	movwf	(hxSPPCarbonCheckBusy_test@readbackTimer+1)& (0+255),b
  5544  0012DC  0E28               	movlw	40
  5545  0012DE  6F6F               	movwf	hxSPPCarbonCheckBusy_test@readbackTimer& (0+255),b
  5546                           
  5547                           ;HX_SPP_CARBON.c: 726: while(readbackTimer--)
  5548  0012E0  D048               	goto	l733
  5549  0012E2                     l722:
  5550                           
  5551                           ; BSR set to: 0
  5552                           ;HX_SPP_CARBON.c: 727: {
  5553                           ;HX_SPP_CARBON.c: 728: portAVal = PORTA;
  5554  0012E2  CF8D F078          	movff	3981,hxSPPCarbonCheckBusy_test@portAVal	;volatile
  5555                           
  5556                           ; BSR set to: 0
  5557                           ;HX_SPP_CARBON.c: 729: if (readbackCommState == 0)
  5558  0012E6  5179               	movf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),w,b
  5559  0012E8  A4D8               	btfss	status,2,c
  5560  0012EA  D00E               	goto	l723
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;HX_SPP_CARBON.c: 730: {
  5564                           ;HX_SPP_CARBON.c: 733: if (1 == portAVal & 0x01)
  5565  0012EC  0578               	decf	hxSPPCarbonCheckBusy_test@portAVal& (0+255),w,b
  5566  0012EE  A4D8               	btfss	status,2,c
  5567  0012F0  D002               	goto	u7930
  5568  0012F2  0E01               	movlw	1
  5569  0012F4  D001               	goto	u7940
  5570  0012F6                     u7930:
  5571  0012F6  0E00               	movlw	0
  5572  0012F8                     u7940:
  5573  0012F8  6F6C               	movwf	??_hxSPPCarbonCheckBusy_test& (0+255),b
  5574  0012FA  6B6D               	clrf	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),b
  5575  0012FC  A16C               	btfss	??_hxSPPCarbonCheckBusy_test& (0+255),0,b
  5576  0012FE  D039               	goto	l733
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;HX_SPP_CARBON.c: 734: {
  5580                           ;HX_SPP_CARBON.c: 735: readbackCommState = 1;
  5581  001300  0E01               	movlw	1
  5582  001302  6F79               	movwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),b
  5583                           
  5584                           ;HX_SPP_CARBON.c: 736: bitVal = 2;
  5585  001304  0E02               	movlw	2
  5586  001306  D034               	goto	L24
  5587  001308                     l723:
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;HX_SPP_CARBON.c: 739: else if (readbackCommState == 1)
  5591                           
  5592                           ; BSR set to: 0
  5593  001308  0579               	decf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),w,b
  5594  00130A  A4D8               	btfss	status,2,c
  5595  00130C  D00E               	goto	l726
  5596                           
  5597                           ; BSR set to: 0
  5598                           ;HX_SPP_CARBON.c: 740: {
  5599                           ;HX_SPP_CARBON.c: 742: if (0 == portAVal & 0x01)
  5600  00130E  5178               	movf	hxSPPCarbonCheckBusy_test@portAVal& (0+255),w,b
  5601  001310  A4D8               	btfss	status,2,c
  5602  001312  D002               	goto	u7970
  5603  001314  0E01               	movlw	1
  5604  001316  D001               	goto	u7980
  5605  001318                     u7970:
  5606  001318  0E00               	movlw	0
  5607  00131A                     u7980:
  5608  00131A  6F6C               	movwf	??_hxSPPCarbonCheckBusy_test& (0+255),b
  5609  00131C  6B6D               	clrf	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),b
  5610  00131E  A16C               	btfss	??_hxSPPCarbonCheckBusy_test& (0+255),0,b
  5611  001320  D028               	goto	l733
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;HX_SPP_CARBON.c: 743: {
  5615                           ;HX_SPP_CARBON.c: 744: readbackCommState = 2;
  5616  001322  0E02               	movlw	2
  5617  001324  6F79               	movwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),b
  5618                           
  5619                           ;HX_SPP_CARBON.c: 745: bitVal = 0;
  5620  001326  0E00               	movlw	0
  5621  001328  D023               	goto	L24
  5622  00132A                     l726:
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;HX_SPP_CARBON.c: 748: else if (readbackCommState == 2)
  5626                           
  5627                           ; BSR set to: 0
  5628  00132A  0E02               	movlw	2
  5629  00132C  1979               	xorwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),w,b
  5630  00132E  A4D8               	btfss	status,2,c
  5631  001330  D00E               	goto	l729
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;HX_SPP_CARBON.c: 749: {
  5635                           ;HX_SPP_CARBON.c: 751: if (1 == portAVal & 0x01)
  5636  001332  0578               	decf	hxSPPCarbonCheckBusy_test@portAVal& (0+255),w,b
  5637  001334  A4D8               	btfss	status,2,c
  5638  001336  D002               	goto	u8010
  5639  001338  0E01               	movlw	1
  5640  00133A  D001               	goto	u8020
  5641  00133C                     u8010:
  5642  00133C  0E00               	movlw	0
  5643  00133E                     u8020:
  5644  00133E  6F6C               	movwf	??_hxSPPCarbonCheckBusy_test& (0+255),b
  5645  001340  6B6D               	clrf	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),b
  5646  001342  A16C               	btfss	??_hxSPPCarbonCheckBusy_test& (0+255),0,b
  5647  001344  D016               	goto	l733
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;HX_SPP_CARBON.c: 752: {
  5651                           ;HX_SPP_CARBON.c: 753: readbackCommState = 3;
  5652  001346  0E03               	movlw	3
  5653  001348  6F79               	movwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),b
  5654                           
  5655                           ;HX_SPP_CARBON.c: 754: bitVal = 4;
  5656  00134A  0E04               	movlw	4
  5657  00134C  D011               	goto	L24
  5658  00134E                     l729:
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;HX_SPP_CARBON.c: 757: else if (readbackCommState == 3)
  5662                           
  5663                           ; BSR set to: 0
  5664  00134E  0E03               	movlw	3
  5665  001350  1979               	xorwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),w,b
  5666  001352  A4D8               	btfss	status,2,c
  5667  001354  D00E               	goto	l733
  5668                           
  5669                           ; BSR set to: 0
  5670                           ;HX_SPP_CARBON.c: 758: {
  5671                           ;HX_SPP_CARBON.c: 760: if (0 == portAVal & 0x01)
  5672  001356  5178               	movf	hxSPPCarbonCheckBusy_test@portAVal& (0+255),w,b
  5673  001358  A4D8               	btfss	status,2,c
  5674  00135A  D002               	goto	u8050
  5675  00135C  0E01               	movlw	1
  5676  00135E  D001               	goto	u8060
  5677  001360                     u8050:
  5678  001360  0E00               	movlw	0
  5679  001362                     u8060:
  5680  001362  6F6C               	movwf	??_hxSPPCarbonCheckBusy_test& (0+255),b
  5681  001364  6B6D               	clrf	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),b
  5682  001366  A16C               	btfss	??_hxSPPCarbonCheckBusy_test& (0+255),0,b
  5683  001368  D004               	goto	l733
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;HX_SPP_CARBON.c: 761: {
  5687                           ;HX_SPP_CARBON.c: 762: readbackCommState = 3;
  5688  00136A  0E03               	movlw	3
  5689  00136C  6F79               	movwf	hxSPPCarbonCheckBusy_test@readbackCommState& (0+255),b
  5690                           
  5691                           ;HX_SPP_CARBON.c: 763: bitVal = 1;
  5692  00136E  0E01               	movlw	1
  5693  001370                     L24:
  5694  001370  6F77               	movwf	hxSPPCarbonCheckBusy_test@bitVal& (0+255),b
  5695  001372                     l733:
  5696                           
  5697                           ; BSR set to: 0
  5698                           
  5699                           ; BSR set to: 0
  5700                           
  5701                           ; BSR set to: 0
  5702                           
  5703                           ; BSR set to: 0
  5704                           
  5705                           ; BSR set to: 0
  5706                           
  5707                           ; BSR set to: 0
  5708                           
  5709                           ; BSR set to: 0
  5710  001372  076F               	decf	hxSPPCarbonCheckBusy_test@readbackTimer& (0+255),f,b
  5711  001374  A0D8               	btfss	status,0,c
  5712  001376  0770               	decf	(hxSPPCarbonCheckBusy_test@readbackTimer+1)& (0+255),f,b
  5713  001378  296F               	incf	hxSPPCarbonCheckBusy_test@readbackTimer& (0+255),w,b
  5714  00137A  E1B3               	bnz	l722
  5715  00137C  2970               	incf	(hxSPPCarbonCheckBusy_test@readbackTimer+1)& (0+255),w,b
  5716  00137E  A4D8               	btfss	status,2,c
  5717  001380  D7B0               	goto	l722
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;HX_SPP_CARBON.c: 764: }
  5721                           ;HX_SPP_CARBON.c: 765: }
  5722                           ;HX_SPP_CARBON.c: 766: }
  5723                           ;HX_SPP_CARBON.c: 767: if(bitVal == 0)
  5724                           
  5725                           ; BSR set to: 0
  5726  001382  5177               	movf	hxSPPCarbonCheckBusy_test@bitVal& (0+255),w,b
  5727  001384  B4D8               	btfsc	status,2,c
  5728  001386  D014               	goto	l738
  5729                           
  5730                           ; BSR set to: 0
  5731                           ;HX_SPP_CARBON.c: 772: {
  5732                           ;HX_SPP_CARBON.c: 773: tempByte = tempByte++;
  5733                           
  5734                           ; BSR set to: 0
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;HX_SPP_CARBON.c: 768: {
  5738                           ;HX_SPP_CARBON.c: 770: }
  5739  001388  0577               	decf	hxSPPCarbonCheckBusy_test@bitVal& (0+255),w,b
  5740  00138A  A4D8               	btfss	status,2,c
  5741  00138C  D002               	goto	l737
  5742                           
  5743                           ; BSR set to: 0
  5744  00138E  2B7A               	incf	hxSPPCarbonCheckBusy_test@tempByte& (0+255),f,b
  5745                           
  5746                           ;HX_SPP_CARBON.c: 774: }
  5747  001390  D00F               	goto	l738
  5748  001392                     l737:
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;HX_SPP_CARBON.c: 775: else
  5752                           ;HX_SPP_CARBON.c: 776: {
  5753                           ;HX_SPP_CARBON.c: 777: rxBuffer[0] = 0x11;
  5754                           
  5755                           ; BSR set to: 0
  5756  001392  C06A  FFD9         	movff	hxSPPCarbonCheckBusy_test@rxBuffer,fsr2l
  5757  001396  C06B  FFDA         	movff	hxSPPCarbonCheckBusy_test@rxBuffer+1,fsr2h
  5758  00139A  0E11               	movlw	17
  5759  00139C  6EDF               	movwf	indf2,c
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;HX_SPP_CARBON.c: 778: rxBuffer[1] = 0x00;
  5763  00139E  EE20 F001          	lfsr	2,1
  5764  0013A2  516A               	movf	hxSPPCarbonCheckBusy_test@rxBuffer& (0+255),w,b
  5765  0013A4  26D9               	addwf	fsr2l,f,c
  5766  0013A6  516B               	movf	(hxSPPCarbonCheckBusy_test@rxBuffer+1)& (0+255),w,b
  5767  0013A8  22DA               	addwfc	fsr2h,f,c
  5768  0013AA  0E00               	movlw	0
  5769  0013AC  6EDF               	movwf	indf2,c
  5770                           
  5771                           ;HX_SPP_CARBON.c: 779: break;
  5772  0013AE  D002               	goto	u8110
  5773  0013B0                     l738:
  5774                           
  5775                           ; BSR set to: 0
  5776                           
  5777                           ; BSR set to: 0
  5778                           
  5779                           ; BSR set to: 0
  5780  0013B0  2B76               	incf	hxSPPCarbonCheckBusy_test@j_941& (0+255),f,b
  5781  0013B2  D774               	goto	l11133
  5782  0013B4                     u8110:
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;HX_SPP_CARBON.c: 780: }
  5786                           ;HX_SPP_CARBON.c: 781: }
  5787                           ;HX_SPP_CARBON.c: 782: if (rxBuffer[0] == 0x11)
  5788                           
  5789                           ; BSR set to: 0
  5790  0013B4  C06A  FFD9         	movff	hxSPPCarbonCheckBusy_test@rxBuffer,fsr2l
  5791  0013B8  C06B  FFDA         	movff	hxSPPCarbonCheckBusy_test@rxBuffer+1,fsr2h
  5792  0013BC  0E11               	movlw	17
  5793  0013BE  18DE               	xorwf	postinc2,w,c
  5794  0013C0  B4D8               	btfsc	status,2,c
  5795  0013C2  D014               	goto	u8130
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;HX_SPP_CARBON.c: 785: }
  5799                           ;HX_SPP_CARBON.c: 786: rxBuffer[i+1] = tempByte;
  5800                           
  5801                           ; BSR set to: 0
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;HX_SPP_CARBON.c: 783: {
  5805                           ;HX_SPP_CARBON.c: 784: break;
  5806  0013C4  5175               	movf	hxSPPCarbonCheckBusy_test@i_940& (0+255),w,b
  5807  0013C6  6F6C               	movwf	??_hxSPPCarbonCheckBusy_test& (0+255),b
  5808  0013C8  6B6D               	clrf	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),b
  5809  0013CA  0E01               	movlw	1
  5810  0013CC  276C               	addwf	??_hxSPPCarbonCheckBusy_test& (0+255),f,b
  5811  0013CE  0E00               	movlw	0
  5812  0013D0  236D               	addwfc	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),f,b
  5813  0013D2  516C               	movf	??_hxSPPCarbonCheckBusy_test& (0+255),w,b
  5814  0013D4  256A               	addwf	hxSPPCarbonCheckBusy_test@rxBuffer& (0+255),w,b
  5815  0013D6  6ED9               	movwf	fsr2l,c
  5816  0013D8  516D               	movf	(??_hxSPPCarbonCheckBusy_test+1)& (0+255),w,b
  5817  0013DA  216B               	addwfc	(hxSPPCarbonCheckBusy_test@rxBuffer+1)& (0+255),w,b
  5818  0013DC  6EDA               	movwf	fsr2h,c
  5819  0013DE  C07A  FFDF         	movff	hxSPPCarbonCheckBusy_test@tempByte,indf2
  5820                           
  5821                           ; BSR set to: 0
  5822  0013E2  2B75               	incf	hxSPPCarbonCheckBusy_test@i_940& (0+255),f,b
  5823  0013E4                     l717:
  5824                           
  5825                           ; BSR set to: 0
  5826                           
  5827                           ; BSR set to: 0
  5828  0013E4  5167               	movf	hxSPPCarbonCheckBusy_test@numRX& (0+255),w,b
  5829  0013E6  5D75               	subwf	hxSPPCarbonCheckBusy_test@i_940& (0+255),w,b
  5830  0013E8  A0D8               	btfss	status,0,c
  5831  0013EA  D754               	goto	l718
  5832  0013EC                     u8130:
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;HX_SPP_CARBON.c: 787: }
  5836                           ;HX_SPP_CARBON.c: 790: hx_state = 0x10;
  5837                           
  5838                           ; BSR set to: 0
  5839  0013EC  0E10               	movlw	16
  5840  0013EE  6E45               	movwf	_hx_state,c
  5841                           
  5842                           ;HX_SPP_CARBON.c: 791: LATA = 0x03;
  5843  0013F0  0E03               	movlw	3
  5844  0013F2  6E83               	movwf	3971,c	;volatile
  5845                           
  5846                           ; BSR set to: 0
  5847  0013F4  0012               	return		;funcret
  5848  0013F6                     __end_of_hxSPPCarbonCheckBusy_test:
  5849                           	opt stack 0
  5850                           tblptru	equ	0xFF8
  5851                           tblptrh	equ	0xFF7
  5852                           tblptrl	equ	0xFF6
  5853                           tablat	equ	0xFF5
  5854                           prodh	equ	0xFF4
  5855                           prodl	equ	0xFF3
  5856                           intcon	equ	0xFF2
  5857                           postinc0	equ	0xFEE
  5858                           wreg	equ	0xFE8
  5859                           postinc1	equ	0xFE6
  5860                           postdec1	equ	0xFE5
  5861                           fsr1h	equ	0xFE2
  5862                           fsr1l	equ	0xFE1
  5863                           indf2	equ	0xFDF
  5864                           postinc2	equ	0xFDE
  5865                           fsr2h	equ	0xFDA
  5866                           fsr2l	equ	0xFD9
  5867                           status	equ	0xFD8
  5868                           
  5869 ;; *************** function _hxOddParityCalc *****************
  5870 ;; Defined at:
  5871 ;;		line 795 in file "HX_SPP_CARBON.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;  buff            2    0[BANK0 ] PTR unsigned char 
  5874 ;;		 -> hx_inData(64), 
  5875 ;;  size            1    2[BANK0 ] unsigned char 
  5876 ;; Auto vars:     Size  Location     Type
  5877 ;;  j               1    4[BANK0 ] unsigned char 
  5878 ;;  i               1    3[BANK0 ] unsigned char 
  5879 ;;  temp            1    6[BANK0 ] unsigned char 
  5880 ;;  parity          1    5[BANK0 ] unsigned char 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;                  1    wreg      unsigned char 
  5883 ;; Registers used:
  5884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5890 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5891 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5893 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5894 ;;Total ram usage:        7 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    7
  5897 ;; This function calls:
  5898 ;;		Nothing
  5899 ;; This function is called by:
  5900 ;;		_hxSPPCarbonReadReg_test
  5901 ;;		_hxSPPCarbonWriteReg_test
  5902 ;;		_hxSPPCarbonProgram_test
  5903 ;;		_hxSPPCarbonCheckBusy_test
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text9
  5908  00366C                     __ptext9:
  5909                           	opt stack 0
  5910  00366C                     _hxOddParityCalc:
  5911                           	opt stack 20
  5912                           
  5913                           ;HX_SPP_CARBON.c: 797: uint8_t parity = 1;
  5914                           
  5915                           ; BSR set to: 0
  5916                           ;incstack = 0
  5917  00366C  0E01               	movlw	1
  5918  00366E  0100               	movlb	0	; () banked
  5919  003670  6F65               	movwf	hxOddParityCalc@parity& (0+255),b
  5920                           
  5921                           ;HX_SPP_CARBON.c: 798: uint8_t temp = 0;
  5922  003672  0E00               	movlw	0
  5923  003674  6F66               	movwf	hxOddParityCalc@temp& (0+255),b
  5924                           
  5925                           ;HX_SPP_CARBON.c: 799: for (uint8_t i = 0; i < size; i++)
  5926  003676  0E00               	movlw	0
  5927  003678  6F63               	movwf	hxOddParityCalc@i& (0+255),b
  5928  00367A  D018               	goto	l744
  5929  00367C                     
  5930                           ; BSR set to: 0
  5931                           ;HX_SPP_CARBON.c: 800: {
  5932                           ;HX_SPP_CARBON.c: 801: temp = buff[i];
  5933                           
  5934                           ; BSR set to: 0
  5935  00367C  5163               	movf	hxOddParityCalc@i& (0+255),w,b
  5936  00367E  0D01               	mullw	1
  5937  003680  50F3               	movf	prodl,w,c
  5938  003682  2560               	addwf	hxOddParityCalc@buff& (0+255),w,b
  5939  003684  6ED9               	movwf	fsr2l,c
  5940  003686  50F4               	movf	prodh,w,c
  5941  003688  2161               	addwfc	(hxOddParityCalc@buff+1)& (0+255),w,b
  5942  00368A  6EDA               	movwf	fsr2h,c
  5943  00368C  50DF               	movf	indf2,w,c
  5944  00368E  6F66               	movwf	hxOddParityCalc@temp& (0+255),b
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;HX_SPP_CARBON.c: 802: for (uint8_t j = 0; j < 8; j++)
  5948  003690  0E00               	movlw	0
  5949  003692  6F64               	movwf	hxOddParityCalc@j& (0+255),b
  5950  003694                     l9741:
  5951                           
  5952                           ; BSR set to: 0
  5953  003694  0E07               	movlw	7
  5954  003696  6564               	cpfsgt	hxOddParityCalc@j& (0+255),b
  5955  003698  D001               	goto	l746
  5956  00369A  D007               	goto	u6860
  5957  00369C                     l746:
  5958                           
  5959                           ; BSR set to: 0
  5960                           ;HX_SPP_CARBON.c: 803: {
  5961                           ;HX_SPP_CARBON.c: 804: if (temp & 0x80)
  5962  00369C  BF66               	btfsc	hxOddParityCalc@temp& (0+255),7,b
  5963                           
  5964                           ; BSR set to: 0
  5965                           ;HX_SPP_CARBON.c: 805: {
  5966                           ;HX_SPP_CARBON.c: 806: parity++;
  5967  00369E  2B65               	incf	hxOddParityCalc@parity& (0+255),f,b
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;HX_SPP_CARBON.c: 807: }
  5971                           ;HX_SPP_CARBON.c: 808: temp = temp << 1;
  5972                           
  5973                           ; BSR set to: 0
  5974  0036A0  5166               	movf	hxOddParityCalc@temp& (0+255),w,b
  5975  0036A2  2566               	addwf	hxOddParityCalc@temp& (0+255),w,b
  5976  0036A4  6F66               	movwf	hxOddParityCalc@temp& (0+255),b
  5977                           
  5978                           ; BSR set to: 0
  5979  0036A6  2B64               	incf	hxOddParityCalc@j& (0+255),f,b
  5980  0036A8  D7F5               	goto	l9741
  5981  0036AA                     u6860:
  5982                           
  5983                           ; BSR set to: 0
  5984                           
  5985                           ; BSR set to: 0
  5986  0036AA  2B63               	incf	hxOddParityCalc@i& (0+255),f,b
  5987  0036AC                     l744:
  5988                           
  5989                           ; BSR set to: 0
  5990                           
  5991                           ; BSR set to: 0
  5992  0036AC  5162               	movf	hxOddParityCalc@size& (0+255),w,b
  5993  0036AE  5D63               	subwf	hxOddParityCalc@i& (0+255),w,b
  5994  0036B0  A0D8               	btfss	status,0,c
  5995  0036B2  D7E4               	goto	l745
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;HX_SPP_CARBON.c: 809: }
  5999                           ;HX_SPP_CARBON.c: 811: }
  6000                           ;HX_SPP_CARBON.c: 812: parity = parity & 0x01;
  6001                           
  6002                           ; BSR set to: 0
  6003  0036B4  5165               	movf	hxOddParityCalc@parity& (0+255),w,b
  6004  0036B6  0B01               	andlw	1
  6005  0036B8  6F65               	movwf	hxOddParityCalc@parity& (0+255),b
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;HX_SPP_CARBON.c: 814: return parity;
  6009  0036BA  5165               	movf	hxOddParityCalc@parity& (0+255),w,b
  6010  0036BC  0012               	return	
  6011  0036BE                     __end_of_hxOddParityCalc:
  6012                           	opt stack 0
  6013                           tblptru	equ	0xFF8
  6014                           tblptrh	equ	0xFF7
  6015                           tblptrl	equ	0xFF6
  6016                           tablat	equ	0xFF5
  6017                           prodh	equ	0xFF4
  6018                           prodl	equ	0xFF3
  6019                           intcon	equ	0xFF2
  6020                           postinc0	equ	0xFEE
  6021                           wreg	equ	0xFE8
  6022                           postinc1	equ	0xFE6
  6023                           postdec1	equ	0xFE5
  6024                           fsr1h	equ	0xFE2
  6025                           fsr1l	equ	0xFE1
  6026                           indf2	equ	0xFDF
  6027                           postinc2	equ	0xFDE
  6028                           fsr2h	equ	0xFDA
  6029                           fsr2l	equ	0xFD9
  6030                           status	equ	0xFD8
  6031                           
  6032 ;; *************** function _run_I2C *****************
  6033 ;; Defined at:
  6034 ;;		line 14 in file "HX_I2C.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;  hx_inData       2   24[BANK0 ] PTR unsigned char 
  6037 ;;		 -> hx_inData(64), 
  6038 ;;  size            1   26[BANK0 ] unsigned char 
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;  i               1    5[BANK2 ] unsigned char 
  6041 ;;  i               1    4[BANK2 ] unsigned char 
  6042 ;;  txPkt          71   90[BANK2 ] struct TxRxPacket
  6043 ;;  rxPkt          71   19[BANK2 ] struct TxRxPacket
  6044 ;;  stream          4    8[BANK2 ] PTR struct TxRxPacket[2]
  6045 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
  6046 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
  6047 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
  6048 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
  6049 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
  6050 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
  6051 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
  6052 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
  6053 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
  6054 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
  6055 ;;  data_index      2   17[BANK2 ] unsigned int 
  6056 ;;  slaveAddr       2    2[BANK2 ] unsigned int 
  6057 ;;  debugArr        2    0[BANK2 ] PTR unsigned char 
  6058 ;;  rx_index        1   16[BANK2 ] unsigned char 
  6059 ;;  mode            1   15[BANK2 ] unsigned char 
  6060 ;;  numTx           1   14[BANK2 ] unsigned char 
  6061 ;;  i               1   13[BANK2 ] unsigned char 
  6062 ;;  numRx           1   12[BANK2 ] unsigned char 
  6063 ;;  calc_checksu    1    7[BANK2 ] unsigned char 
  6064 ;;  checksum        1    6[BANK2 ] unsigned char 
  6065 ;; Return value:  Size  Location     Type
  6066 ;;                  1    wreg      void 
  6067 ;; Registers used:
  6068 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6074 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6075 ;;      Locals:         0       0       0     161       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6076 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6077 ;;      Totals:         0       4       0     161       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6078 ;;Total ram usage:      165 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; Hardware stack levels required when called:   10
  6081 ;; This function calls:
  6082 ;;		_calcChecksum
  6083 ;;		_readI2C
  6084 ;;		_streamI2C
  6085 ;;		_writeI2C
  6086 ;; This function is called by:
  6087 ;;		_main
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           	psect	text10
  6092  0009F4                     __ptext10:
  6093                           	opt stack 0
  6094  0009F4                     _run_I2C:
  6095                           	opt stack 20
  6096                           
  6097                           ;HX_I2C.c: 16: uint8_t mode = 0;
  6098                           
  6099                           ; BSR set to: 0
  6100                           ;incstack = 0
  6101  0009F4  0E00               	movlw	0
  6102  0009F6  0102               	movlb	2	; () banked
  6103  0009F8  6F0F               	movwf	run_I2C@mode& (0+255),b
  6104                           
  6105                           ;HX_I2C.c: 17: uint8_t numTx = 0;
  6106  0009FA  0E00               	movlw	0
  6107  0009FC  6F0E               	movwf	run_I2C@numTx& (0+255),b
  6108                           
  6109                           ;HX_I2C.c: 18: uint8_t numRx = 0;
  6110  0009FE  0E00               	movlw	0
  6111  000A00  6F0C               	movwf	run_I2C@numRx& (0+255),b
  6112                           
  6113                           ;HX_I2C.c: 19: uint16_t slaveAddr = 0;
  6114  000A02  0E00               	movlw	0
  6115  000A04  6F03               	movwf	(run_I2C@slaveAddr+1)& (0+255),b
  6116  000A06  0E00               	movlw	0
  6117  000A08  6F02               	movwf	run_I2C@slaveAddr& (0+255),b
  6118                           
  6119                           ;HX_I2C.c: 20: uint8_t checksum = 0;
  6120  000A0A  0E00               	movlw	0
  6121  000A0C  6F06               	movwf	run_I2C@checksum& (0+255),b
  6122                           
  6123                           ;HX_I2C.c: 21: uint16_t data_index = 0;
  6124  000A0E  0E00               	movlw	0
  6125  000A10  6F12               	movwf	(run_I2C@data_index+1)& (0+255),b
  6126  000A12  0E00               	movlw	0
  6127  000A14  6F11               	movwf	run_I2C@data_index& (0+255),b
  6128                           
  6129                           ;HX_I2C.c: 22: uint8_t calc_checksum = 0;
  6130  000A16  0E00               	movlw	0
  6131  000A18  6F07               	movwf	run_I2C@calc_checksum& (0+255),b
  6132                           
  6133                           ;HX_I2C.c: 23: uint8_t rx_index = 0;
  6134  000A1A  0E00               	movlw	0
  6135  000A1C  6F10               	movwf	run_I2C@rx_index& (0+255),b
  6136                           
  6137                           ;HX_I2C.c: 26: uint8_t * debugArr;
  6138                           ;HX_I2C.c: 28: uint8_t i = 0;
  6139  000A1E  0E00               	movlw	0
  6140  000A20  6F0D               	movwf	run_I2C@i& (0+255),b
  6141                           
  6142                           ; BSR set to: 2
  6143                           ;HX_I2C.c: 30: txRxPkt txPkt;
  6144                           ;HX_I2C.c: 31: txRxPkt rxPkt;
  6145                           ;HX_I2C.c: 32: txRxPkt* stream[2];
  6146                           ;HX_I2C.c: 33: stream[0] = &txPkt;
  6147  000A22  0E5A               	movlw	low run_I2C@txPkt
  6148  000A24  6F08               	movwf	run_I2C@stream& (0+255),b
  6149  000A26  0E02               	movlw	high run_I2C@txPkt
  6150  000A28  6F09               	movwf	(run_I2C@stream+1)& (0+255),b
  6151                           
  6152                           ; BSR set to: 2
  6153                           ;HX_I2C.c: 34: stream[1] = &rxPkt;
  6154  000A2A  0E13               	movlw	low run_I2C@rxPkt
  6155  000A2C  6F0A               	movwf	(run_I2C@stream+2)& (0+255),b
  6156  000A2E  0E02               	movlw	high run_I2C@rxPkt
  6157  000A30  6F0B               	movwf	(run_I2C@stream+3)& (0+255),b
  6158                           
  6159                           ;HX_I2C.c: 35: txPkt.txOrRx = 0;
  6160  000A32  0E00               	movlw	0
  6161  000A34  6F5A               	movwf	run_I2C@txPkt& (0+255),b
  6162                           
  6163                           ;HX_I2C.c: 36: rxPkt.txOrRx = 1;
  6164  000A36  0E01               	movlw	1
  6165  000A38  6F13               	movwf	run_I2C@rxPkt& (0+255),b
  6166                           
  6167                           ; BSR set to: 2
  6168                           ;HX_I2C.c: 39: mode = hx_inData[data_index++];
  6169  000A3A  5111               	movf	run_I2C@data_index& (0+255),w,b
  6170  000A3C  0100               	movlb	0	; () banked
  6171  000A3E  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6172  000A40  6ED9               	movwf	fsr2l,c
  6173  000A42  0102               	movlb	2	; () banked
  6174  000A44  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6175  000A46  0100               	movlb	0	; () banked
  6176  000A48  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6177  000A4A  6EDA               	movwf	fsr2h,c
  6178  000A4C  50DF               	movf	indf2,w,c
  6179  000A4E  0102               	movlb	2	; () banked
  6180  000A50  6F0F               	movwf	run_I2C@mode& (0+255),b
  6181                           
  6182                           ; BSR set to: 2
  6183  000A52  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6184  000A54  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6185                           
  6186                           ; BSR set to: 2
  6187                           ;HX_I2C.c: 40: slaveAddr = hx_inData[data_index++];
  6188  000A56  5111               	movf	run_I2C@data_index& (0+255),w,b
  6189  000A58  0100               	movlb	0	; () banked
  6190  000A5A  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6191  000A5C  6ED9               	movwf	fsr2l,c
  6192  000A5E  0102               	movlb	2	; () banked
  6193  000A60  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6194  000A62  0100               	movlb	0	; () banked
  6195  000A64  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6196  000A66  6EDA               	movwf	fsr2h,c
  6197  000A68  50DF               	movf	indf2,w,c
  6198  000A6A  6F7B               	movwf	??_run_I2C& (0+255),b
  6199  000A6C  517B               	movf	??_run_I2C& (0+255),w,b
  6200  000A6E  0102               	movlb	2	; () banked
  6201  000A70  6F02               	movwf	run_I2C@slaveAddr& (0+255),b
  6202  000A72  6B03               	clrf	(run_I2C@slaveAddr+1)& (0+255),b
  6203                           
  6204                           ; BSR set to: 2
  6205  000A74  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6206  000A76  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6207                           
  6208                           ; BSR set to: 2
  6209                           ;HX_I2C.c: 41: numTx = hx_inData[data_index++];
  6210  000A78  5111               	movf	run_I2C@data_index& (0+255),w,b
  6211  000A7A  0100               	movlb	0	; () banked
  6212  000A7C  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6213  000A7E  6ED9               	movwf	fsr2l,c
  6214  000A80  0102               	movlb	2	; () banked
  6215  000A82  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6216  000A84  0100               	movlb	0	; () banked
  6217  000A86  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6218  000A88  6EDA               	movwf	fsr2h,c
  6219  000A8A  50DF               	movf	indf2,w,c
  6220  000A8C  0102               	movlb	2	; () banked
  6221  000A8E  6F0E               	movwf	run_I2C@numTx& (0+255),b
  6222                           
  6223                           ; BSR set to: 2
  6224  000A90  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6225  000A92  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6226                           
  6227                           ; BSR set to: 2
  6228                           ;HX_I2C.c: 42: numRx = hx_inData[data_index++];
  6229  000A94  5111               	movf	run_I2C@data_index& (0+255),w,b
  6230  000A96  0100               	movlb	0	; () banked
  6231  000A98  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6232  000A9A  6ED9               	movwf	fsr2l,c
  6233  000A9C  0102               	movlb	2	; () banked
  6234  000A9E  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6235  000AA0  0100               	movlb	0	; () banked
  6236  000AA2  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6237  000AA4  6EDA               	movwf	fsr2h,c
  6238  000AA6  50DF               	movf	indf2,w,c
  6239  000AA8  0102               	movlb	2	; () banked
  6240  000AAA  6F0C               	movwf	run_I2C@numRx& (0+255),b
  6241                           
  6242                           ; BSR set to: 2
  6243  000AAC  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6244  000AAE  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6245                           
  6246                           ; BSR set to: 2
  6247                           ;HX_I2C.c: 44: txPkt.slaveAddr = slaveAddr;
  6248  000AB0  C202  F25B         	movff	run_I2C@slaveAddr,run_I2C@txPkt+1
  6249  000AB4  C203  F25C         	movff	run_I2C@slaveAddr+1,run_I2C@txPkt+2
  6250                           
  6251                           ; BSR set to: 2
  6252                           ;HX_I2C.c: 45: txPkt.numOfBytes = numTx;
  6253  000AB8  C20E  F29D         	movff	run_I2C@numTx,run_I2C@txPkt+67
  6254                           
  6255                           ; BSR set to: 2
  6256                           ;HX_I2C.c: 46: rxPkt.slaveAddr = slaveAddr;
  6257  000ABC  C202  F214         	movff	run_I2C@slaveAddr,run_I2C@rxPkt+1
  6258  000AC0  C203  F215         	movff	run_I2C@slaveAddr+1,run_I2C@rxPkt+2
  6259                           
  6260                           ; BSR set to: 2
  6261                           ;HX_I2C.c: 47: rxPkt.numOfBytes = numRx;
  6262  000AC4  C20C  F256         	movff	run_I2C@numRx,run_I2C@rxPkt+67
  6263                           
  6264                           ; BSR set to: 2
  6265                           ;HX_I2C.c: 49: if (mode < 0x20)
  6266  000AC8  0E20               	movlw	32
  6267  000ACA  610F               	cpfslt	run_I2C@mode& (0+255),b
  6268  000ACC  D067               	goto	l1344
  6269                           
  6270                           ; BSR set to: 2
  6271                           ;HX_I2C.c: 50: {
  6272                           ;HX_I2C.c: 51: if (numTx < 1)
  6273  000ACE  510E               	movf	run_I2C@numTx& (0+255),w,b
  6274  000AD0  A4D8               	btfss	status,2,c
  6275  000AD2  D003               	goto	l1347
  6276                           
  6277                           ; BSR set to: 2
  6278                           ;HX_I2C.c: 52: {
  6279                           ;HX_I2C.c: 53: hx_state = 0x40;
  6280  000AD4  0E40               	movlw	64
  6281  000AD6  6E45               	movwf	_hx_state,c
  6282                           
  6283                           ; BSR set to: 2
  6284                           ;HX_I2C.c: 54: return;
  6285  000AD8  0012               	return	
  6286  000ADA                     l1347:
  6287                           
  6288                           ; BSR set to: 2
  6289                           ;HX_I2C.c: 61: }
  6290                           ;HX_I2C.c: 63: for (i = 0; i <= numTx; i++)
  6291                           
  6292                           ; BSR set to: 2
  6293  000ADA  0E00               	movlw	0
  6294  000ADC  6F0D               	movwf	run_I2C@i& (0+255),b
  6295  000ADE  D03A               	goto	l1348
  6296  000AE0                     
  6297                           ; BSR set to: 2
  6298                           ;HX_I2C.c: 64: {
  6299                           ;HX_I2C.c: 65: if (i == numTx)
  6300                           
  6301                           ; BSR set to: 2
  6302  000AE0  510E               	movf	run_I2C@numTx& (0+255),w,b
  6303  000AE2  190D               	xorwf	run_I2C@i& (0+255),w,b
  6304  000AE4  A4D8               	btfss	status,2,c
  6305  000AE6  D01B               	goto	l1350
  6306                           
  6307                           ; BSR set to: 2
  6308                           ;HX_I2C.c: 66: {
  6309                           ;HX_I2C.c: 67: txPkt.data[i] = calcChecksum(txPkt.data, numTx);
  6310  000AE8  0E5D               	movlw	low (run_I2C@txPkt+3)
  6311  000AEA  0100               	movlb	0	; () banked
  6312  000AEC  6F60               	movwf	calcChecksum@data& (0+255),b
  6313  000AEE  0E02               	movlw	high (run_I2C@txPkt+3)
  6314  000AF0  6F61               	movwf	(calcChecksum@data+1)& (0+255),b
  6315  000AF2  C20E  F062         	movff	run_I2C@numTx,calcChecksum@size
  6316  000AF6  EC86  F01E         	call	_calcChecksum	;wreg free
  6317  000AFA  0100               	movlb	0	; () banked
  6318  000AFC  6F7B               	movwf	??_run_I2C& (0+255),b
  6319  000AFE  0102               	movlb	2	; () banked
  6320  000B00  510D               	movf	run_I2C@i& (0+255),w,b
  6321  000B02  0D01               	mullw	1
  6322  000B04  0E03               	movlw	3
  6323  000B06  26F3               	addwf	prodl,f,c
  6324  000B08  0E00               	movlw	0
  6325  000B0A  22F4               	addwfc	prodh,f,c
  6326  000B0C  0E5A               	movlw	low run_I2C@txPkt
  6327  000B0E  24F3               	addwf	prodl,w,c
  6328  000B10  6ED9               	movwf	fsr2l,c
  6329  000B12  0E02               	movlw	high run_I2C@txPkt
  6330  000B14  20F4               	addwfc	prodh,w,c
  6331  000B16  6EDA               	movwf	fsr2h,c
  6332  000B18  C07B  FFDF         	movff	??_run_I2C,indf2
  6333                           
  6334                           ; BSR set to: 2
  6335                           ;HX_I2C.c: 68: txPkt.numOfBytes++;
  6336  000B1C  2B9D               	incf	(run_I2C@txPkt+67)& (0+255),f,b
  6337  000B1E                     l1350:
  6338                           
  6339                           ; BSR set to: 2
  6340                           ;HX_I2C.c: 69: }
  6341                           ;HX_I2C.c: 70: txPkt.data[i] = hx_inData[data_index++];
  6342                           
  6343                           ; BSR set to: 2
  6344  000B1E  5111               	movf	run_I2C@data_index& (0+255),w,b
  6345  000B20  0100               	movlb	0	; () banked
  6346  000B22  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6347  000B24  6ED9               	movwf	fsr2l,c
  6348  000B26  0102               	movlb	2	; () banked
  6349  000B28  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6350  000B2A  0100               	movlb	0	; () banked
  6351  000B2C  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6352  000B2E  6EDA               	movwf	fsr2h,c
  6353  000B30  0102               	movlb	2	; () banked
  6354  000B32  510D               	movf	run_I2C@i& (0+255),w,b
  6355  000B34  0D01               	mullw	1
  6356  000B36  0E03               	movlw	3
  6357  000B38  26F3               	addwf	prodl,f,c
  6358  000B3A  0E00               	movlw	0
  6359  000B3C  22F4               	addwfc	prodh,f,c
  6360  000B3E  0E5A               	movlw	low run_I2C@txPkt
  6361  000B40  24F3               	addwf	prodl,w,c
  6362  000B42  6EE1               	movwf	fsr1l,c
  6363  000B44  0E02               	movlw	high run_I2C@txPkt
  6364  000B46  20F4               	addwfc	prodh,w,c
  6365  000B48  6EE2               	movwf	fsr1h,c
  6366  000B4A  CFDF FFE7          	movff	indf2,indf1
  6367                           
  6368                           ; BSR set to: 2
  6369  000B4E  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6370  000B50  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6371                           
  6372                           ; BSR set to: 2
  6373  000B52  2B0D               	incf	run_I2C@i& (0+255),f,b
  6374  000B54                     l1348:
  6375                           
  6376                           ; BSR set to: 2
  6377                           
  6378                           ; BSR set to: 2
  6379  000B54  510D               	movf	run_I2C@i& (0+255),w,b
  6380  000B56  5D0E               	subwf	run_I2C@numTx& (0+255),w,b
  6381  000B58  B0D8               	btfsc	status,0,c
  6382  000B5A  D7C2               	goto	l1349
  6383                           
  6384                           ; BSR set to: 2
  6385                           ;HX_I2C.c: 71: }
  6386                           ;HX_I2C.c: 75: checksum = hx_inData[data_index++];
  6387                           
  6388                           ; BSR set to: 2
  6389  000B5C  5111               	movf	run_I2C@data_index& (0+255),w,b
  6390  000B5E  0100               	movlb	0	; () banked
  6391  000B60  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6392  000B62  6ED9               	movwf	fsr2l,c
  6393  000B64  0102               	movlb	2	; () banked
  6394  000B66  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6395  000B68  0100               	movlb	0	; () banked
  6396  000B6A  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6397  000B6C  6EDA               	movwf	fsr2h,c
  6398  000B6E  50DF               	movf	indf2,w,c
  6399  000B70  0102               	movlb	2	; () banked
  6400  000B72  6F06               	movwf	run_I2C@checksum& (0+255),b
  6401                           
  6402                           ; BSR set to: 2
  6403  000B74  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6404  000B76  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6405                           
  6406                           ; BSR set to: 2
  6407                           ;HX_I2C.c: 76: calc_checksum = calcChecksum(hx_inData, data_index-1);
  6408  000B78  C078  F060         	movff	run_I2C@hx_inData,calcChecksum@data
  6409  000B7C  C079  F061         	movff	run_I2C@hx_inData+1,calcChecksum@data+1
  6410  000B80  0511               	decf	run_I2C@data_index& (0+255),w,b
  6411  000B82  0100               	movlb	0	; () banked
  6412  000B84  6F62               	movwf	calcChecksum@size& (0+255),b
  6413  000B86  EC86  F01E         	call	_calcChecksum	;wreg free
  6414  000B8A  0102               	movlb	2	; () banked
  6415  000B8C  6F07               	movwf	run_I2C@calc_checksum& (0+255),b
  6416                           
  6417                           ; BSR set to: 2
  6418                           ;HX_I2C.c: 77: if (calc_checksum != checksum)
  6419  000B8E  5106               	movf	run_I2C@checksum& (0+255),w,b
  6420  000B90  1907               	xorwf	run_I2C@calc_checksum& (0+255),w,b
  6421  000B92  B4D8               	btfsc	status,2,c
  6422  000B94  D023               	goto	l1354
  6423                           
  6424                           ; BSR set to: 2
  6425                           ;HX_I2C.c: 78: {
  6426                           ;HX_I2C.c: 79: hx_state = 0x20;
  6427  000B96  0E20               	movlw	32
  6428  000B98  6E45               	movwf	_hx_state,c
  6429                           
  6430                           ; BSR set to: 2
  6431                           ;HX_I2C.c: 80: return;
  6432  000B9A  0012               	return	
  6433  000B9C                     l1344:
  6434                           
  6435                           ; BSR set to: 2
  6436                           ;HX_I2C.c: 84: else
  6437                           ;HX_I2C.c: 85: {
  6438                           ;HX_I2C.c: 86: checksum = hx_inData[data_index++];
  6439                           
  6440                           ; BSR set to: 2
  6441  000B9C  5111               	movf	run_I2C@data_index& (0+255),w,b
  6442  000B9E  0100               	movlb	0	; () banked
  6443  000BA0  2578               	addwf	run_I2C@hx_inData& (0+255),w,b
  6444  000BA2  6ED9               	movwf	fsr2l,c
  6445  000BA4  0102               	movlb	2	; () banked
  6446  000BA6  5112               	movf	(run_I2C@data_index+1)& (0+255),w,b
  6447  000BA8  0100               	movlb	0	; () banked
  6448  000BAA  2179               	addwfc	(run_I2C@hx_inData+1)& (0+255),w,b
  6449  000BAC  6EDA               	movwf	fsr2h,c
  6450  000BAE  50DF               	movf	indf2,w,c
  6451  000BB0  0102               	movlb	2	; () banked
  6452  000BB2  6F06               	movwf	run_I2C@checksum& (0+255),b
  6453                           
  6454                           ; BSR set to: 2
  6455  000BB4  4B11               	infsnz	run_I2C@data_index& (0+255),f,b
  6456  000BB6  2B12               	incf	(run_I2C@data_index+1)& (0+255),f,b
  6457                           
  6458                           ; BSR set to: 2
  6459                           ;HX_I2C.c: 87: calc_checksum = calcChecksum(hx_inData, data_index-1);
  6460  000BB8  C078  F060         	movff	run_I2C@hx_inData,calcChecksum@data
  6461  000BBC  C079  F061         	movff	run_I2C@hx_inData+1,calcChecksum@data+1
  6462  000BC0  0511               	decf	run_I2C@data_index& (0+255),w,b
  6463  000BC2  0100               	movlb	0	; () banked
  6464  000BC4  6F62               	movwf	calcChecksum@size& (0+255),b
  6465  000BC6  EC86  F01E         	call	_calcChecksum	;wreg free
  6466  000BCA  0102               	movlb	2	; () banked
  6467  000BCC  6F07               	movwf	run_I2C@calc_checksum& (0+255),b
  6468                           
  6469                           ; BSR set to: 2
  6470                           ;HX_I2C.c: 88: if (calc_checksum != checksum)
  6471  000BCE  5106               	movf	run_I2C@checksum& (0+255),w,b
  6472  000BD0  1907               	xorwf	run_I2C@calc_checksum& (0+255),w,b
  6473  000BD2  B4D8               	btfsc	status,2,c
  6474  000BD4  D003               	goto	l1354
  6475                           
  6476                           ; BSR set to: 2
  6477                           ;HX_I2C.c: 89: {
  6478                           ;HX_I2C.c: 90: hx_state = 0x20;
  6479  000BD6  0E20               	movlw	32
  6480  000BD8  6E45               	movwf	_hx_state,c
  6481                           
  6482                           ; BSR set to: 2
  6483                           ;HX_I2C.c: 91: return;
  6484  000BDA  0012               	return	
  6485  000BDC                     l1354:
  6486                           
  6487                           ; BSR set to: 2
  6488                           ;HX_I2C.c: 92: }
  6489                           ;HX_I2C.c: 93: }
  6490                           ;HX_I2C.c: 96: if (mode == 0x00)
  6491                           
  6492                           ; BSR set to: 2
  6493                           
  6494                           ; BSR set to: 2
  6495  000BDC  510F               	movf	run_I2C@mode& (0+255),w,b
  6496  000BDE  A4D8               	btfss	status,2,c
  6497  000BE0  D01E               	goto	l1355
  6498                           
  6499                           ; BSR set to: 2
  6500                           ;HX_I2C.c: 97: {
  6501                           ;HX_I2C.c: 98: streamI2C(&stream[0], 1);
  6502  000BE2  0E08               	movlw	low run_I2C@stream
  6503  000BE4  0100               	movlb	0	; () banked
  6504  000BE6  6F69               	movwf	streamI2C@pktArr& (0+255),b
  6505  000BE8  0E02               	movlw	high run_I2C@stream
  6506  000BEA  6F6A               	movwf	(streamI2C@pktArr+1)& (0+255),b
  6507  000BEC  0E01               	movlw	1
  6508  000BEE  6F6B               	movwf	streamI2C@pktSize& (0+255),b
  6509  000BF0  EC0C  F00F         	call	_streamI2C	;wreg free
  6510                           
  6511                           ;HX_I2C.c: 100: if (*txPkt.status == I2C1_MESSAGE_FAIL)
  6512  000BF4  C29E  FFD9         	movff	run_I2C@txPkt+68,fsr2l
  6513  000BF8  C29F  FFDA         	movff	run_I2C@txPkt+69,fsr2h
  6514  000BFC  04DE               	decf	postinc2,w,c
  6515  000BFE  A4D8               	btfss	status,2,c
  6516  000C00  D007               	goto	l1356
  6517                           
  6518                           ;HX_I2C.c: 101: {
  6519                           ;HX_I2C.c: 102: hx_mainData[0] = 0x41;
  6520  000C02  0E41               	movlw	65
  6521  000C04  010B               	movlb	11	; () banked
  6522  000C06  6FC0               	movwf	_hx_mainData& (0+255),b
  6523                           
  6524                           ; BSR set to: 11
  6525                           ;HX_I2C.c: 103: hx_mainDataIndex++;
  6526  000C08  2A3F               	incf	_hx_mainDataIndex,f,c
  6527                           
  6528                           ; BSR set to: 11
  6529                           ;HX_I2C.c: 104: hx_state = 0x10;
  6530  000C0A  0E10               	movlw	16
  6531  000C0C  6E45               	movwf	_hx_state,c
  6532                           
  6533                           ; BSR set to: 11
  6534                           ;HX_I2C.c: 105: return;
  6535  000C0E  0012               	return	
  6536  000C10                     l1356:
  6537                           
  6538                           ;HX_I2C.c: 106: }
  6539                           ;HX_I2C.c: 108: hx_mainData[0] = 0x10;
  6540                           
  6541                           ; BSR set to: 11
  6542  000C10  0E10               	movlw	16
  6543  000C12  010B               	movlb	11	; () banked
  6544  000C14  6FC0               	movwf	_hx_mainData& (0+255),b
  6545                           
  6546                           ; BSR set to: 11
  6547                           ;HX_I2C.c: 109: hx_mainDataIndex++;
  6548  000C16  2A3F               	incf	_hx_mainDataIndex,f,c
  6549                           
  6550                           ; BSR set to: 11
  6551                           ;HX_I2C.c: 110: hx_state = 0x10;
  6552  000C18  0E10               	movlw	16
  6553  000C1A  6E45               	movwf	_hx_state,c
  6554                           
  6555                           ;HX_I2C.c: 111: }
  6556  000C1C  0012               	return	
  6557  000C1E                     l1355:
  6558                           
  6559                           ;HX_I2C.c: 112: else if (mode == 0x10)
  6560                           
  6561                           ; BSR set to: 11
  6562  000C1E  0E10               	movlw	16
  6563  000C20  0102               	movlb	2	; () banked
  6564  000C22  190F               	xorwf	run_I2C@mode& (0+255),w,b
  6565  000C24  A4D8               	btfss	status,2,c
  6566  000C26  D050               	goto	l1358
  6567                           
  6568                           ; BSR set to: 2
  6569                           ;HX_I2C.c: 113: {
  6570                           ;HX_I2C.c: 114: streamI2C(stream, 2);
  6571  000C28  0E08               	movlw	low run_I2C@stream
  6572  000C2A  0100               	movlb	0	; () banked
  6573  000C2C  6F69               	movwf	streamI2C@pktArr& (0+255),b
  6574  000C2E  0E02               	movlw	high run_I2C@stream
  6575  000C30  6F6A               	movwf	(streamI2C@pktArr+1)& (0+255),b
  6576  000C32  0E02               	movlw	2
  6577  000C34  6F6B               	movwf	streamI2C@pktSize& (0+255),b
  6578  000C36  EC0C  F00F         	call	_streamI2C	;wreg free
  6579                           
  6580                           ;HX_I2C.c: 115: if (*txPkt.status == I2C1_MESSAGE_FAIL || *rxPkt.status == I2C1_MESSAGE_
      +                          FAIL)
  6581  000C3A  C29E  FFD9         	movff	run_I2C@txPkt+68,fsr2l
  6582  000C3E  C29F  FFDA         	movff	run_I2C@txPkt+69,fsr2h
  6583  000C42  04DE               	decf	postinc2,w,c
  6584  000C44  B4D8               	btfsc	status,2,c
  6585  000C46  D007               	goto	u8590
  6586  000C48  C257  FFD9         	movff	run_I2C@rxPkt+68,fsr2l
  6587  000C4C  C258  FFDA         	movff	run_I2C@rxPkt+69,fsr2h
  6588  000C50  04DE               	decf	postinc2,w,c
  6589  000C52  A4D8               	btfss	status,2,c
  6590  000C54  D007               	goto	l1359
  6591  000C56                     u8590:
  6592                           
  6593                           ;HX_I2C.c: 116: {
  6594                           ;HX_I2C.c: 117: hx_mainData[0] = 0x41;
  6595  000C56  0E41               	movlw	65
  6596  000C58  010B               	movlb	11	; () banked
  6597  000C5A  6FC0               	movwf	_hx_mainData& (0+255),b
  6598                           
  6599                           ; BSR set to: 11
  6600                           ;HX_I2C.c: 118: hx_mainDataIndex++;
  6601  000C5C  2A3F               	incf	_hx_mainDataIndex,f,c
  6602                           
  6603                           ; BSR set to: 11
  6604                           ;HX_I2C.c: 119: hx_state = 0x10;
  6605  000C5E  0E10               	movlw	16
  6606  000C60  6E45               	movwf	_hx_state,c
  6607                           
  6608                           ; BSR set to: 11
  6609                           ;HX_I2C.c: 120: return;
  6610  000C62  0012               	return	
  6611  000C64                     l1359:
  6612                           
  6613                           ;HX_I2C.c: 121: }
  6614                           ;HX_I2C.c: 123: rx_index = 0;
  6615                           
  6616                           ; BSR set to: 11
  6617  000C64  0E00               	movlw	0
  6618  000C66  0102               	movlb	2	; () banked
  6619  000C68  6F10               	movwf	run_I2C@rx_index& (0+255),b
  6620                           
  6621                           ; BSR set to: 2
  6622                           ;HX_I2C.c: 124: hx_mainData[rx_index++] = 0x10;
  6623  000C6A  5110               	movf	run_I2C@rx_index& (0+255),w,b
  6624  000C6C  0D01               	mullw	1
  6625  000C6E  0EC0               	movlw	low _hx_mainData
  6626  000C70  24F3               	addwf	prodl,w,c
  6627  000C72  6ED9               	movwf	fsr2l,c
  6628  000C74  0E0B               	movlw	high _hx_mainData
  6629  000C76  20F4               	addwfc	prodh,w,c
  6630  000C78  6EDA               	movwf	fsr2h,c
  6631  000C7A  0E10               	movlw	16
  6632  000C7C  6EDF               	movwf	indf2,c
  6633                           
  6634                           ; BSR set to: 2
  6635  000C7E  2B10               	incf	run_I2C@rx_index& (0+255),f,b
  6636                           
  6637                           ; BSR set to: 2
  6638                           ;HX_I2C.c: 125: for (uint8_t i = 0; i < numRx; i++)
  6639  000C80  0E00               	movlw	0
  6640  000C82  6F04               	movwf	run_I2C@i_2001& (0+255),b
  6641  000C84  D018               	goto	l1362
  6642  000C86                     
  6643                           ; BSR set to: 2
  6644                           ;HX_I2C.c: 126: {
  6645                           ;HX_I2C.c: 127: hx_mainData[rx_index++] = rxPkt.data[i];
  6646                           
  6647                           ; BSR set to: 2
  6648  000C86  5104               	movf	run_I2C@i_2001& (0+255),w,b
  6649  000C88  0D01               	mullw	1
  6650  000C8A  0E03               	movlw	3
  6651  000C8C  26F3               	addwf	prodl,f,c
  6652  000C8E  0E00               	movlw	0
  6653  000C90  22F4               	addwfc	prodh,f,c
  6654  000C92  0E13               	movlw	low run_I2C@rxPkt
  6655  000C94  24F3               	addwf	prodl,w,c
  6656  000C96  6ED9               	movwf	fsr2l,c
  6657  000C98  0E02               	movlw	high run_I2C@rxPkt
  6658  000C9A  20F4               	addwfc	prodh,w,c
  6659  000C9C  6EDA               	movwf	fsr2h,c
  6660  000C9E  5110               	movf	run_I2C@rx_index& (0+255),w,b
  6661  000CA0  0D01               	mullw	1
  6662  000CA2  0EC0               	movlw	low _hx_mainData
  6663  000CA4  24F3               	addwf	prodl,w,c
  6664  000CA6  6EE1               	movwf	fsr1l,c
  6665  000CA8  0E0B               	movlw	high _hx_mainData
  6666  000CAA  20F4               	addwfc	prodh,w,c
  6667  000CAC  6EE2               	movwf	fsr1h,c
  6668  000CAE  CFDF FFE7          	movff	indf2,indf1
  6669                           
  6670                           ; BSR set to: 2
  6671  000CB2  2B10               	incf	run_I2C@rx_index& (0+255),f,b
  6672                           
  6673                           ; BSR set to: 2
  6674  000CB4  2B04               	incf	run_I2C@i_2001& (0+255),f,b
  6675  000CB6                     l1362:
  6676                           
  6677                           ; BSR set to: 2
  6678                           
  6679                           ; BSR set to: 2
  6680  000CB6  510C               	movf	run_I2C@numRx& (0+255),w,b
  6681  000CB8  5D04               	subwf	run_I2C@i_2001& (0+255),w,b
  6682  000CBA  A0D8               	btfss	status,0,c
  6683  000CBC  D7E4               	goto	l1363
  6684                           
  6685                           ; BSR set to: 2
  6686                           ;HX_I2C.c: 128: }
  6687                           ;HX_I2C.c: 130: hx_mainDataIndex = rx_index;
  6688  000CBE  C210  F03F         	movff	run_I2C@rx_index,_hx_mainDataIndex
  6689                           
  6690                           ; BSR set to: 2
  6691                           ;HX_I2C.c: 131: hx_state = 0x10;
  6692  000CC2  0E10               	movlw	16
  6693  000CC4  6E45               	movwf	_hx_state,c
  6694                           
  6695                           ;HX_I2C.c: 132: }
  6696  000CC6  0012               	return	
  6697  000CC8                     l1358:
  6698                           
  6699                           ; BSR set to: 2
  6700                           ;HX_I2C.c: 133: else if (mode == 0x20)
  6701                           
  6702                           ; BSR set to: 2
  6703  000CC8  0E20               	movlw	32
  6704  000CCA  190F               	xorwf	run_I2C@mode& (0+255),w,b
  6705  000CCC  A4D8               	btfss	status,2,c
  6706  000CCE  D049               	goto	l1366
  6707                           
  6708                           ; BSR set to: 2
  6709                           ;HX_I2C.c: 134: {
  6710                           ;HX_I2C.c: 135: streamI2C(&stream[1], 1);
  6711  000CD0  0E0A               	movlw	low (run_I2C@stream+2)
  6712  000CD2  0100               	movlb	0	; () banked
  6713  000CD4  6F69               	movwf	streamI2C@pktArr& (0+255),b
  6714  000CD6  0E02               	movlw	high (run_I2C@stream+2)
  6715  000CD8  6F6A               	movwf	(streamI2C@pktArr+1)& (0+255),b
  6716  000CDA  0E01               	movlw	1
  6717  000CDC  6F6B               	movwf	streamI2C@pktSize& (0+255),b
  6718  000CDE  EC0C  F00F         	call	_streamI2C	;wreg free
  6719                           
  6720                           ;HX_I2C.c: 136: if (*rxPkt.status == I2C1_MESSAGE_FAIL)
  6721  000CE2  C257  FFD9         	movff	run_I2C@rxPkt+68,fsr2l
  6722  000CE6  C258  FFDA         	movff	run_I2C@rxPkt+69,fsr2h
  6723  000CEA  04DE               	decf	postinc2,w,c
  6724  000CEC  A4D8               	btfss	status,2,c
  6725  000CEE  D007               	goto	l1367
  6726                           
  6727                           ;HX_I2C.c: 137: {
  6728                           ;HX_I2C.c: 138: hx_mainData[0] = 0x41;
  6729  000CF0  0E41               	movlw	65
  6730  000CF2  010B               	movlb	11	; () banked
  6731  000CF4  6FC0               	movwf	_hx_mainData& (0+255),b
  6732                           
  6733                           ; BSR set to: 11
  6734                           ;HX_I2C.c: 139: hx_mainDataIndex++;
  6735  000CF6  2A3F               	incf	_hx_mainDataIndex,f,c
  6736                           
  6737                           ; BSR set to: 11
  6738                           ;HX_I2C.c: 140: hx_state = 0x10;
  6739  000CF8  0E10               	movlw	16
  6740  000CFA  6E45               	movwf	_hx_state,c
  6741                           
  6742                           ; BSR set to: 11
  6743                           ;HX_I2C.c: 141: return;
  6744  000CFC  0012               	return	
  6745  000CFE                     l1367:
  6746                           
  6747                           ;HX_I2C.c: 142: }
  6748                           ;HX_I2C.c: 144: rx_index = 0;
  6749                           
  6750                           ; BSR set to: 11
  6751  000CFE  0E00               	movlw	0
  6752  000D00  0102               	movlb	2	; () banked
  6753  000D02  6F10               	movwf	run_I2C@rx_index& (0+255),b
  6754                           
  6755                           ; BSR set to: 2
  6756                           ;HX_I2C.c: 145: hx_mainData[rx_index++] = 0x10;
  6757  000D04  5110               	movf	run_I2C@rx_index& (0+255),w,b
  6758  000D06  0D01               	mullw	1
  6759  000D08  0EC0               	movlw	low _hx_mainData
  6760  000D0A  24F3               	addwf	prodl,w,c
  6761  000D0C  6ED9               	movwf	fsr2l,c
  6762  000D0E  0E0B               	movlw	high _hx_mainData
  6763  000D10  20F4               	addwfc	prodh,w,c
  6764  000D12  6EDA               	movwf	fsr2h,c
  6765  000D14  0E10               	movlw	16
  6766  000D16  6EDF               	movwf	indf2,c
  6767                           
  6768                           ; BSR set to: 2
  6769  000D18  2B10               	incf	run_I2C@rx_index& (0+255),f,b
  6770                           
  6771                           ; BSR set to: 2
  6772                           ;HX_I2C.c: 146: for (uint8_t i = 0; i < numRx; i++)
  6773  000D1A  0E00               	movlw	0
  6774  000D1C  6F05               	movwf	run_I2C@i_2002& (0+255),b
  6775  000D1E  D018               	goto	l1368
  6776  000D20                     
  6777                           ; BSR set to: 2
  6778                           ;HX_I2C.c: 147: {
  6779                           ;HX_I2C.c: 148: hx_mainData[rx_index++] = rxPkt.data[i];
  6780                           
  6781                           ; BSR set to: 2
  6782  000D20  5105               	movf	run_I2C@i_2002& (0+255),w,b
  6783  000D22  0D01               	mullw	1
  6784  000D24  0E03               	movlw	3
  6785  000D26  26F3               	addwf	prodl,f,c
  6786  000D28  0E00               	movlw	0
  6787  000D2A  22F4               	addwfc	prodh,f,c
  6788  000D2C  0E13               	movlw	low run_I2C@rxPkt
  6789  000D2E  24F3               	addwf	prodl,w,c
  6790  000D30  6ED9               	movwf	fsr2l,c
  6791  000D32  0E02               	movlw	high run_I2C@rxPkt
  6792  000D34  20F4               	addwfc	prodh,w,c
  6793  000D36  6EDA               	movwf	fsr2h,c
  6794  000D38  5110               	movf	run_I2C@rx_index& (0+255),w,b
  6795  000D3A  0D01               	mullw	1
  6796  000D3C  0EC0               	movlw	low _hx_mainData
  6797  000D3E  24F3               	addwf	prodl,w,c
  6798  000D40  6EE1               	movwf	fsr1l,c
  6799  000D42  0E0B               	movlw	high _hx_mainData
  6800  000D44  20F4               	addwfc	prodh,w,c
  6801  000D46  6EE2               	movwf	fsr1h,c
  6802  000D48  CFDF FFE7          	movff	indf2,indf1
  6803                           
  6804                           ; BSR set to: 2
  6805  000D4C  2B10               	incf	run_I2C@rx_index& (0+255),f,b
  6806                           
  6807                           ; BSR set to: 2
  6808  000D4E  2B05               	incf	run_I2C@i_2002& (0+255),f,b
  6809  000D50                     l1368:
  6810                           
  6811                           ; BSR set to: 2
  6812                           
  6813                           ; BSR set to: 2
  6814  000D50  510C               	movf	run_I2C@numRx& (0+255),w,b
  6815  000D52  5D05               	subwf	run_I2C@i_2002& (0+255),w,b
  6816  000D54  A0D8               	btfss	status,0,c
  6817  000D56  D7E4               	goto	l1369
  6818                           
  6819                           ; BSR set to: 2
  6820                           ;HX_I2C.c: 149: }
  6821                           ;HX_I2C.c: 151: hx_mainDataIndex = rx_index;
  6822  000D58  C210  F03F         	movff	run_I2C@rx_index,_hx_mainDataIndex
  6823                           
  6824                           ; BSR set to: 2
  6825                           ;HX_I2C.c: 152: hx_state = 0x10;
  6826  000D5C  0E10               	movlw	16
  6827  000D5E  6E45               	movwf	_hx_state,c
  6828                           
  6829                           ;HX_I2C.c: 153: }
  6830  000D60  0012               	return	
  6831  000D62                     l1366:
  6832                           
  6833                           ; BSR set to: 2
  6834                           ;HX_I2C.c: 154: else if (mode == 0x30)
  6835                           
  6836                           ; BSR set to: 2
  6837  000D62  0E30               	movlw	48
  6838  000D64  190F               	xorwf	run_I2C@mode& (0+255),w,b
  6839  000D66  A4D8               	btfss	status,2,c
  6840  000D68  D00A               	goto	l1372
  6841                           
  6842                           ; BSR set to: 2
  6843                           ;HX_I2C.c: 155: {
  6844                           ;HX_I2C.c: 156: hx_mainData[0] = 0x10;
  6845  000D6A  0E10               	movlw	16
  6846  000D6C  010B               	movlb	11	; () banked
  6847  000D6E  6FC0               	movwf	_hx_mainData& (0+255),b
  6848                           
  6849                           ;HX_I2C.c: 157: hx_mainData[1] = 0xAA;
  6850  000D70  0EAA               	movlw	170
  6851  000D72  6FC1               	movwf	(_hx_mainData+1)& (0+255),b
  6852                           
  6853                           ;HX_I2C.c: 158: hx_mainDataIndex = 2;
  6854  000D74  0E02               	movlw	2
  6855  000D76  6E3F               	movwf	_hx_mainDataIndex,c
  6856                           
  6857                           ;HX_I2C.c: 159: hx_state = 0x10;
  6858  000D78  0E10               	movlw	16
  6859  000D7A  6E45               	movwf	_hx_state,c
  6860                           
  6861                           ;HX_I2C.c: 160: }
  6862  000D7C  0012               	return	
  6863  000D7E                     l1372:
  6864                           
  6865                           ;HX_I2C.c: 162: {
  6866                           ;HX_I2C.c: 163: *debugArr = 0xBB;
  6867                           
  6868                           ; BSR set to: 11
  6869  000D7E  0E31               	movlw	49
  6870  000D80  0102               	movlb	2	; () banked
  6871  000D82  190F               	xorwf	run_I2C@mode& (0+255),w,b
  6872  000D84  A4D8               	btfss	status,2,c
  6873  000D86  D017               	goto	l1374
  6874                           
  6875                           ; BSR set to: 2
  6876                           ;HX_I2C.c: 164: writeI2C(debugArr, 1, 0x5a);
  6877  000D88  C200  F070         	movff	run_I2C@debugArr,writeI2C@txData
  6878  000D8C  C201  F071         	movff	run_I2C@debugArr+1,writeI2C@txData+1
  6879  000D90  0E01               	movlw	1
  6880  000D92  0100               	movlb	0	; () banked
  6881  000D94  6F72               	movwf	writeI2C@size& (0+255),b
  6882  000D96  0E00               	movlw	0
  6883  000D98  6F74               	movwf	(writeI2C@slaveAddr+1)& (0+255),b
  6884  000D9A  0E5A               	movlw	90
  6885  000D9C  6F73               	movwf	writeI2C@slaveAddr& (0+255),b
  6886  000D9E  ECAC  F01A         	call	_writeI2C	;wreg free
  6887                           
  6888                           ;HX_I2C.c: 165: hx_mainData[0] = 0x10;
  6889  000DA2  0E10               	movlw	16
  6890  000DA4  010B               	movlb	11	; () banked
  6891  000DA6  6FC0               	movwf	_hx_mainData& (0+255),b
  6892                           
  6893                           ; BSR set to: 11
  6894                           ;HX_I2C.c: 166: hx_mainData[1] = 0xBB;
  6895  000DA8  0EBB               	movlw	187
  6896  000DAA  6FC1               	movwf	(_hx_mainData+1)& (0+255),b
  6897                           
  6898                           ; BSR set to: 11
  6899                           ;HX_I2C.c: 167: hx_mainDataIndex = 2;
  6900  000DAC  0E02               	movlw	2
  6901  000DAE  6E3F               	movwf	_hx_mainDataIndex,c
  6902                           
  6903                           ; BSR set to: 11
  6904                           ;HX_I2C.c: 168: hx_state = 0x10;
  6905  000DB0  0E10               	movlw	16
  6906  000DB2  6E45               	movwf	_hx_state,c
  6907                           
  6908                           ;HX_I2C.c: 169: }
  6909  000DB4  0012               	return	
  6910  000DB6                     l1374:
  6911                           
  6912                           ;HX_I2C.c: 170: else if (mode == 0x32)
  6913                           
  6914                           ; BSR set to: 11
  6915  000DB6  0E32               	movlw	50
  6916  000DB8  0102               	movlb	2	; () banked
  6917  000DBA  190F               	xorwf	run_I2C@mode& (0+255),w,b
  6918  000DBC  A4D8               	btfss	status,2,c
  6919  000DBE  D015               	goto	l1376
  6920                           
  6921                           ; BSR set to: 2
  6922                           ;HX_I2C.c: 171: {
  6923                           ;HX_I2C.c: 172: readI2C(&hx_mainData[1], 1, 0x5a);
  6924  000DC0  0EC1               	movlw	low (_hx_mainData+1)
  6925  000DC2  0100               	movlb	0	; () banked
  6926  000DC4  6F70               	movwf	readI2C@rxData& (0+255),b
  6927  000DC6  0E0B               	movlw	high (_hx_mainData+1)
  6928  000DC8  6F71               	movwf	(readI2C@rxData+1)& (0+255),b
  6929  000DCA  0E01               	movlw	1
  6930  000DCC  6F72               	movwf	readI2C@numOfRx& (0+255),b
  6931  000DCE  0E00               	movlw	0
  6932  000DD0  6F74               	movwf	(readI2C@slaveAddr+1)& (0+255),b
  6933  000DD2  0E5A               	movlw	90
  6934  000DD4  6F73               	movwf	readI2C@slaveAddr& (0+255),b
  6935  000DD6  EC00  F01C         	call	_readI2C	;wreg free
  6936                           
  6937                           ;HX_I2C.c: 173: hx_mainData[0] = 0x10;
  6938  000DDA  0E10               	movlw	16
  6939  000DDC  010B               	movlb	11	; () banked
  6940  000DDE  6FC0               	movwf	_hx_mainData& (0+255),b
  6941                           
  6942                           ; BSR set to: 11
  6943                           ;HX_I2C.c: 174: hx_mainDataIndex = 2;
  6944  000DE0  0E02               	movlw	2
  6945  000DE2  6E3F               	movwf	_hx_mainDataIndex,c
  6946                           
  6947                           ; BSR set to: 11
  6948                           ;HX_I2C.c: 175: hx_state = 0x10;
  6949  000DE4  0E10               	movlw	16
  6950  000DE6  6E45               	movwf	_hx_state,c
  6951                           
  6952                           ;HX_I2C.c: 176: }
  6953  000DE8  0012               	return	
  6954  000DEA                     l1376:
  6955                           
  6956                           ;HX_I2C.c: 177: else
  6957                           ;HX_I2C.c: 178: {
  6958                           ;HX_I2C.c: 179: hx_state = 0x20;
  6959                           
  6960                           ; BSR set to: 11
  6961  000DEA  0E20               	movlw	32
  6962  000DEC  6E45               	movwf	_hx_state,c
  6963                           
  6964                           ;HX_I2C.c: 180: return;
  6965  000DEE  0012               	return	
  6966  000DF0                     __end_of_run_I2C:
  6967                           	opt stack 0
  6968                           tblptru	equ	0xFF8
  6969                           tblptrh	equ	0xFF7
  6970                           tblptrl	equ	0xFF6
  6971                           tablat	equ	0xFF5
  6972                           prodh	equ	0xFF4
  6973                           prodl	equ	0xFF3
  6974                           intcon	equ	0xFF2
  6975                           postinc0	equ	0xFEE
  6976                           wreg	equ	0xFE8
  6977                           indf1	equ	0xFE7
  6978                           postinc1	equ	0xFE6
  6979                           postdec1	equ	0xFE5
  6980                           fsr1h	equ	0xFE2
  6981                           fsr1l	equ	0xFE1
  6982                           indf2	equ	0xFDF
  6983                           postinc2	equ	0xFDE
  6984                           fsr2h	equ	0xFDA
  6985                           fsr2l	equ	0xFD9
  6986                           status	equ	0xFD8
  6987                           
  6988 ;; *************** function _readI2C *****************
  6989 ;; Defined at:
  6990 ;;		line 44 in file "Utils.c"
  6991 ;; Parameters:    Size  Location     Type
  6992 ;;  rxData          2   16[BANK0 ] PTR unsigned char 
  6993 ;;		 -> hx_mainData(61), 
  6994 ;;  numOfRx         1   18[BANK0 ] unsigned char 
  6995 ;;  slaveAddr       2   19[BANK0 ] unsigned int 
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;  timeOut         2   21[BANK0 ] unsigned int 
  6998 ;;  status          1   23[BANK0 ] enum E11632
  6999 ;; Return value:  Size  Location     Type
  7000 ;;                  1    wreg      unsigned char 
  7001 ;; Registers used:
  7002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7003 ;; Tracked objects:
  7004 ;;		On entry : 0/0
  7005 ;;		On exit  : 0/0
  7006 ;;		Unchanged: 0/0
  7007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7008 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7009 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7011 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7012 ;;Total ram usage:        8 bytes
  7013 ;; Hardware stack levels used:    1
  7014 ;; Hardware stack levels required when called:    9
  7015 ;; This function calls:
  7016 ;;		_I2C1_MasterRead
  7017 ;; This function is called by:
  7018 ;;		_run_I2C
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           	psect	text11
  7023  003800                     __ptext11:
  7024                           	opt stack 0
  7025  003800                     _readI2C:
  7026                           	opt stack 20
  7027                           
  7028                           ;Utils.c: 46: I2C1_MESSAGE_STATUS status;
  7029                           ;Utils.c: 47: uint16_t timeOut;
  7030                           ;Utils.c: 48: while(status != I2C1_MESSAGE_FAIL)
  7031                           
  7032                           ;incstack = 0
  7033  003800  D020               	goto	l265
  7034  003802                     
  7035                           ;Utils.c: 49: {
  7036                           ;Utils.c: 51: I2C1_MasterRead( rxData,
  7037                           ;Utils.c: 52: numOfRx,
  7038                           ;Utils.c: 53: slaveAddr,
  7039                           ;Utils.c: 54: &status);
  7040  003802  C070  F069         	movff	readI2C@rxData,I2C1_MasterRead@pdata
  7041  003806  C071  F06A         	movff	readI2C@rxData+1,I2C1_MasterRead@pdata+1
  7042  00380A  C072  F06B         	movff	readI2C@numOfRx,I2C1_MasterRead@length
  7043  00380E  C073  F06C         	movff	readI2C@slaveAddr,I2C1_MasterRead@address
  7044  003812  C074  F06D         	movff	readI2C@slaveAddr+1,I2C1_MasterRead@address+1
  7045  003816  0E77               	movlw	low readI2C@status
  7046  003818  0100               	movlb	0	; () banked
  7047  00381A  6F6E               	movwf	I2C1_MasterRead@pflag& (0+255),b
  7048  00381C  0E00               	movlw	high readI2C@status
  7049  00381E  6F6F               	movwf	(I2C1_MasterRead@pflag+1)& (0+255),b
  7050  003820  EC88  F01B         	call	_I2C1_MasterRead	;wreg free
  7051  003824  0E02               	movlw	2
  7052  003826  0100               	movlb	0	; () banked
  7053  003828  1977               	xorwf	readI2C@status& (0+255),w,b
  7054  00382A  B4D8               	btfsc	status,2,c
  7055  00382C  D7FB               	goto	l260
  7056                           
  7057                           ; BSR set to: 0
  7058                           ;Utils.c: 59: if (status == I2C1_MESSAGE_COMPLETE)
  7059                           
  7060                           ; BSR set to: 0
  7061  00382E  5177               	movf	readI2C@status& (0+255),w,b
  7062  003830  B4D8               	btfsc	status,2,c
  7063  003832  0012               	return	
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;Utils.c: 69: if (timeOut == 100)
  7067                           
  7068                           ; BSR set to: 0
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;Utils.c: 60: return 0;
  7072                           ;	Return value of _readI2C is never used
  7073  003834  0E64               	movlw	100
  7074  003836  1975               	xorwf	readI2C@timeOut& (0+255),w,b
  7075  003838  1176               	iorwf	(readI2C@timeOut+1)& (0+255),w,b
  7076  00383A  B4D8               	btfsc	status,2,c
  7077  00383C  0012               	return	
  7078                           
  7079                           ; BSR set to: 0
  7080                           ;Utils.c: 71: else
  7081                           ;Utils.c: 72: timeOut++;
  7082                           
  7083                           ; BSR set to: 0
  7084                           
  7085                           ; BSR set to: 0
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;Utils.c: 70: return 0;
  7089                           ;	Return value of _readI2C is never used
  7090  00383E  4B75               	infsnz	readI2C@timeOut& (0+255),f,b
  7091  003840  2B76               	incf	(readI2C@timeOut+1)& (0+255),f,b
  7092  003842                     l265:
  7093                           
  7094                           ; BSR set to: 0
  7095                           
  7096                           ; BSR set to: 0
  7097  003842  0100               	movlb	0	; () banked
  7098  003844  0577               	decf	readI2C@status& (0+255),w,b
  7099  003846  B4D8               	btfsc	status,2,c
  7100  003848  0012               	return	
  7101  00384A  D7DB               	goto	l258
  7102  00384C                     __end_of_readI2C:
  7103                           	opt stack 0
  7104                           tblptru	equ	0xFF8
  7105                           tblptrh	equ	0xFF7
  7106                           tblptrl	equ	0xFF6
  7107                           tablat	equ	0xFF5
  7108                           prodh	equ	0xFF4
  7109                           prodl	equ	0xFF3
  7110                           intcon	equ	0xFF2
  7111                           postinc0	equ	0xFEE
  7112                           wreg	equ	0xFE8
  7113                           indf1	equ	0xFE7
  7114                           postinc1	equ	0xFE6
  7115                           postdec1	equ	0xFE5
  7116                           fsr1h	equ	0xFE2
  7117                           fsr1l	equ	0xFE1
  7118                           indf2	equ	0xFDF
  7119                           postinc2	equ	0xFDE
  7120                           fsr2h	equ	0xFDA
  7121                           fsr2l	equ	0xFD9
  7122                           status	equ	0xFD8
  7123                           
  7124 ;; *************** function _I2C1_MasterRead *****************
  7125 ;; Defined at:
  7126 ;;		line 621 in file "mcc_generated_files/i2c1.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
  7129 ;;		 -> hx_mainData(61), 
  7130 ;;  length          1   11[BANK0 ] unsigned char 
  7131 ;;  address         2   12[BANK0 ] unsigned int 
  7132 ;;  pflag           2   14[BANK0 ] PTR enum E11632
  7133 ;;		 -> readI2C@status(1), 
  7134 ;; Auto vars:     Size  Location     Type
  7135 ;;		None
  7136 ;; Return value:  Size  Location     Type
  7137 ;;                  1    wreg      void 
  7138 ;; Registers used:
  7139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7140 ;; Tracked objects:
  7141 ;;		On entry : 0/0
  7142 ;;		On exit  : 0/0
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7145 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7148 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7149 ;;Total ram usage:        7 bytes
  7150 ;; Hardware stack levels used:    1
  7151 ;; Hardware stack levels required when called:    8
  7152 ;; This function calls:
  7153 ;;		_I2C1_MasterReadTRBBuild
  7154 ;;		_I2C1_MasterTRBInsert
  7155 ;; This function is called by:
  7156 ;;		_readI2C
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           	psect	text12
  7161  003710                     __ptext12:
  7162                           	opt stack 0
  7163  003710                     _I2C1_MasterRead:
  7164                           	opt stack 20
  7165                           
  7166                           ;i2c1.c: 627: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  7167                           ;i2c1.c: 630: if (i2c1_object.trStatus.s.full != 1)
  7168                           
  7169                           ; BSR set to: 0
  7170                           ;incstack = 0
  7171  003710  0102               	movlb	2	; () banked
  7172  003712  B1DF               	btfsc	(_i2c1_object+4)& (0+255),0,b
  7173  003714  D01E               	goto	l1496
  7174                           
  7175                           ; BSR set to: 2
  7176                           ;i2c1.c: 631: {
  7177                           ;i2c1.c: 632: I2C1_MasterReadTRBBuild(&trBlock, pdata, length, address);
  7178  003716  0EEC               	movlw	low I2C1_MasterRead@trBlock
  7179  003718  0100               	movlb	0	; () banked
  7180  00371A  6F60               	movwf	I2C1_MasterReadTRBBuild@ptrb& (0+255),b
  7181  00371C  0E03               	movlw	high I2C1_MasterRead@trBlock
  7182  00371E  6F61               	movwf	(I2C1_MasterReadTRBBuild@ptrb+1)& (0+255),b
  7183  003720  C069  F062         	movff	I2C1_MasterRead@pdata,I2C1_MasterReadTRBBuild@pdata
  7184  003724  C06A  F063         	movff	I2C1_MasterRead@pdata+1,I2C1_MasterReadTRBBuild@pdata+1
  7185  003728  C06B  F064         	movff	I2C1_MasterRead@length,I2C1_MasterReadTRBBuild@length
  7186  00372C  C06C  F065         	movff	I2C1_MasterRead@address,I2C1_MasterReadTRBBuild@address
  7187  003730  C06D  F066         	movff	I2C1_MasterRead@address+1,I2C1_MasterReadTRBBuild@address+1
  7188  003734  EC5F  F01B         	call	_I2C1_MasterReadTRBBuild	;wreg free
  7189                           
  7190                           ;i2c1.c: 633: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  7191  003738  0EEC               	movlw	low I2C1_MasterRead@trBlock
  7192  00373A  0100               	movlb	0	; () banked
  7193  00373C  6F60               	movwf	I2C1_MasterTRBInsert@ptrb_list& (0+255),b
  7194  00373E  0E03               	movlw	high I2C1_MasterRead@trBlock
  7195  003740  6F61               	movwf	(I2C1_MasterTRBInsert@ptrb_list+1)& (0+255),b
  7196  003742  C06E  F062         	movff	I2C1_MasterRead@pflag,I2C1_MasterTRBInsert@pflag
  7197  003746  C06F  F063         	movff	I2C1_MasterRead@pflag+1,I2C1_MasterTRBInsert@pflag+1
  7198  00374A  0E01               	movlw	1
  7199  00374C  ECEF  F017         	call	_I2C1_MasterTRBInsert
  7200                           
  7201                           ;i2c1.c: 634: }
  7202  003750  0012               	return	
  7203  003752                     l1496:
  7204                           
  7205                           ;i2c1.c: 635: else
  7206                           ;i2c1.c: 636: {
  7207                           ;i2c1.c: 637: *pflag = I2C1_MESSAGE_FAIL;
  7208  003752  C06E  FFD9         	movff	I2C1_MasterRead@pflag,fsr2l
  7209  003756  C06F  FFDA         	movff	I2C1_MasterRead@pflag+1,fsr2h
  7210  00375A  0E01               	movlw	1
  7211  00375C  6EDF               	movwf	indf2,c
  7212  00375E  0012               	return	
  7213  003760                     __end_of_I2C1_MasterRead:
  7214                           	opt stack 0
  7215                           tblptru	equ	0xFF8
  7216                           tblptrh	equ	0xFF7
  7217                           tblptrl	equ	0xFF6
  7218                           tablat	equ	0xFF5
  7219                           prodh	equ	0xFF4
  7220                           prodl	equ	0xFF3
  7221                           intcon	equ	0xFF2
  7222                           postinc0	equ	0xFEE
  7223                           wreg	equ	0xFE8
  7224                           indf1	equ	0xFE7
  7225                           postinc1	equ	0xFE6
  7226                           postdec1	equ	0xFE5
  7227                           fsr1h	equ	0xFE2
  7228                           fsr1l	equ	0xFE1
  7229                           indf2	equ	0xFDF
  7230                           postinc2	equ	0xFDE
  7231                           fsr2h	equ	0xFDA
  7232                           fsr2l	equ	0xFD9
  7233                           status	equ	0xFD8
  7234                           
  7235 ;; *************** function _run_ASLBoron *****************
  7236 ;; Defined at:
  7237 ;;		line 17 in file "HX_ASL_BORON.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;  hx_inData       2  115[BANK0 ] PTR unsigned char 
  7240 ;;		 -> hx_inData(64), 
  7241 ;;  size            1  117[BANK0 ] unsigned char 
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;  i               1  243[BANK1 ] unsigned char 
  7244 ;;  cnfg_arr      256    0[BANK12] unsigned char [256]
  7245 ;;  data_index      2  246[BANK1 ] unsigned int 
  7246 ;;  rpt_run         2  237[BANK1 ] unsigned char [2]
  7247 ;;  mode_run        1  245[BANK1 ] unsigned char 
  7248 ;;  cnfg_cnt        1  244[BANK1 ] unsigned char 
  7249 ;;  cnfg_run        1  242[BANK1 ] unsigned char 
  7250 ;;  test_run        1  241[BANK1 ] unsigned char 
  7251 ;;  calc_checksu    1  240[BANK1 ] unsigned char 
  7252 ;;  checksum        1  239[BANK1 ] unsigned char 
  7253 ;; Return value:  Size  Location     Type
  7254 ;;                  1    wreg      void 
  7255 ;; Registers used:
  7256 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7262 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7263 ;;      Locals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0     256       0       0
  7264 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7265 ;;      Totals:         0       6      15       0       0       0       0       0       0       0       0       0       
      +0     256       0       0
  7266 ;;Total ram usage:      277 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; Hardware stack levels required when called:   13
  7269 ;; This function calls:
  7270 ;;		_calcChecksum
  7271 ;;		_write_ASLBoron_cnfg
  7272 ;;		_write_ASLBoron_cstm_cnfg
  7273 ;;		_write_ASLBoron_debug
  7274 ;;		_write_ASLBoron_test
  7275 ;; This function is called by:
  7276 ;;		_main
  7277 ;; This function uses a non-reentrant model
  7278 ;;
  7279                           
  7280                           	psect	text13
  7281  0013F6                     __ptext13:
  7282                           	opt stack 0
  7283  0013F6                     _run_ASLBoron:
  7284                           	opt stack 17
  7285                           
  7286                           ;HX_ASL_BORON.c: 19: uint8_t mode_run = 0;
  7287                           
  7288                           ;incstack = 0
  7289  0013F6  0E00               	movlw	0
  7290  0013F8  0101               	movlb	1	; () banked
  7291  0013FA  6FF5               	movwf	run_ASLBoron@mode_run& (0+255),b
  7292                           
  7293                           ;HX_ASL_BORON.c: 20: uint8_t test_run = 0;
  7294  0013FC  0E00               	movlw	0
  7295  0013FE  6FF1               	movwf	run_ASLBoron@test_run& (0+255),b
  7296                           
  7297                           ;HX_ASL_BORON.c: 21: uint8_t cnfg_run = 0;
  7298  001400  0E00               	movlw	0
  7299  001402  6FF2               	movwf	run_ASLBoron@cnfg_run& (0+255),b
  7300                           
  7301                           ;HX_ASL_BORON.c: 22: uint8_t cnfg_cnt = 0;
  7302  001404  0E00               	movlw	0
  7303  001406  6FF4               	movwf	run_ASLBoron@cnfg_cnt& (0+255),b
  7304                           
  7305                           ;HX_ASL_BORON.c: 23: uint8_t cnfg_arr[256];
  7306                           ;HX_ASL_BORON.c: 24: uint16_t data_index = 0;
  7307  001408  0E00               	movlw	0
  7308  00140A  6FF7               	movwf	(run_ASLBoron@data_index+1)& (0+255),b
  7309  00140C  0E00               	movlw	0
  7310  00140E  6FF6               	movwf	run_ASLBoron@data_index& (0+255),b
  7311                           
  7312                           ;HX_ASL_BORON.c: 25: uint8_t rpt_run[2];
  7313                           ;HX_ASL_BORON.c: 26: uint8_t checksum = 0;
  7314  001410  0E00               	movlw	0
  7315  001412  6FEF               	movwf	run_ASLBoron@checksum& (0+255),b
  7316                           
  7317                           ;HX_ASL_BORON.c: 27: uint8_t calc_checksum = 0;
  7318  001414  0E00               	movlw	0
  7319  001416  6FF0               	movwf	run_ASLBoron@calc_checksum& (0+255),b
  7320                           
  7321                           ; BSR set to: 1
  7322                           ;HX_ASL_BORON.c: 29: mode_run = hx_inData[data_index++];
  7323  001418  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7324  00141A  0100               	movlb	0	; () banked
  7325  00141C  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7326  00141E  6ED9               	movwf	fsr2l,c
  7327  001420  0101               	movlb	1	; () banked
  7328  001422  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7329  001424  0100               	movlb	0	; () banked
  7330  001426  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7331  001428  6EDA               	movwf	fsr2h,c
  7332  00142A  50DF               	movf	indf2,w,c
  7333  00142C  0101               	movlb	1	; () banked
  7334  00142E  6FF5               	movwf	run_ASLBoron@mode_run& (0+255),b
  7335                           
  7336                           ; BSR set to: 1
  7337  001430  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7338  001432  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7339                           
  7340                           ; BSR set to: 1
  7341                           ;HX_ASL_BORON.c: 30: if (!(mode_run == 0x00 ||
  7342                           ;HX_ASL_BORON.c: 31: mode_run == 0x01 ||
  7343                           ;HX_ASL_BORON.c: 32: mode_run == 0x02 ||
  7344                           ;HX_ASL_BORON.c: 33: mode_run == 0xAA))
  7345  001434  51F5               	movf	run_ASLBoron@mode_run& (0+255),w,b
  7346  001436  B4D8               	btfsc	status,2,c
  7347  001438  D00E               	goto	l1021
  7348                           
  7349                           ; BSR set to: 1
  7350  00143A  05F5               	decf	run_ASLBoron@mode_run& (0+255),w,b
  7351  00143C  B4D8               	btfsc	status,2,c
  7352  00143E  D00B               	goto	l1021
  7353                           
  7354                           ; BSR set to: 1
  7355  001440  0E02               	movlw	2
  7356  001442  19F5               	xorwf	run_ASLBoron@mode_run& (0+255),w,b
  7357  001444  B4D8               	btfsc	status,2,c
  7358  001446  D007               	goto	l1021
  7359                           
  7360                           ; BSR set to: 1
  7361  001448  0EAA               	movlw	170
  7362  00144A  19F5               	xorwf	run_ASLBoron@mode_run& (0+255),w,b
  7363  00144C  B4D8               	btfsc	status,2,c
  7364  00144E  D003               	goto	l1021
  7365                           
  7366                           ; BSR set to: 1
  7367                           ;HX_ASL_BORON.c: 34: {
  7368                           ;HX_ASL_BORON.c: 35: hx_state = 0x21;
  7369  001450  0E21               	movlw	33
  7370  001452  6E45               	movwf	_hx_state,c
  7371                           
  7372                           ; BSR set to: 1
  7373                           ;HX_ASL_BORON.c: 37: }
  7374                           
  7375                           ; BSR set to: 1
  7376                           ;HX_ASL_BORON.c: 36: return;
  7377  001454  0012               	return	
  7378  001456                     l1021:
  7379                           
  7380                           ; BSR set to: 1
  7381                           ;HX_ASL_BORON.c: 38: else
  7382                           ;HX_ASL_BORON.c: 39: {
  7383                           ;HX_ASL_BORON.c: 40: test_run = hx_inData[data_index++];
  7384                           
  7385                           ; BSR set to: 1
  7386  001456  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7387  001458  0100               	movlb	0	; () banked
  7388  00145A  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7389  00145C  6ED9               	movwf	fsr2l,c
  7390  00145E  0101               	movlb	1	; () banked
  7391  001460  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7392  001462  0100               	movlb	0	; () banked
  7393  001464  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7394  001466  6EDA               	movwf	fsr2h,c
  7395  001468  50DF               	movf	indf2,w,c
  7396  00146A  0101               	movlb	1	; () banked
  7397  00146C  6FF1               	movwf	run_ASLBoron@test_run& (0+255),b
  7398                           
  7399                           ; BSR set to: 1
  7400  00146E  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7401  001470  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7402                           
  7403                           ; BSR set to: 1
  7404                           ;HX_ASL_BORON.c: 41: if (mode_run == 0x02)
  7405  001472  0E02               	movlw	2
  7406  001474  19F5               	xorwf	run_ASLBoron@mode_run& (0+255),w,b
  7407  001476  A4D8               	btfss	status,2,c
  7408  001478  D049               	goto	l1024
  7409                           
  7410                           ; BSR set to: 1
  7411                           ;HX_ASL_BORON.c: 42: {
  7412                           ;HX_ASL_BORON.c: 43: cnfg_cnt = hx_inData[data_index++];
  7413  00147A  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7414  00147C  0100               	movlb	0	; () banked
  7415  00147E  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7416  001480  6ED9               	movwf	fsr2l,c
  7417  001482  0101               	movlb	1	; () banked
  7418  001484  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7419  001486  0100               	movlb	0	; () banked
  7420  001488  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7421  00148A  6EDA               	movwf	fsr2h,c
  7422  00148C  50DF               	movf	indf2,w,c
  7423  00148E  0101               	movlb	1	; () banked
  7424  001490  6FF4               	movwf	run_ASLBoron@cnfg_cnt& (0+255),b
  7425                           
  7426                           ; BSR set to: 1
  7427  001492  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7428  001494  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7429                           
  7430                           ; BSR set to: 1
  7431                           ;HX_ASL_BORON.c: 44: if ((3*cnfg_cnt > 256) || (cnfg_cnt < 1))
  7432  001496  51F4               	movf	run_ASLBoron@cnfg_cnt& (0+255),w,b
  7433  001498  0D03               	mullw	3
  7434  00149A  BEF4               	btfsc	prodh,7,c
  7435  00149C  D005               	goto	u8430
  7436  00149E  04F3               	decf	prodl,w,c
  7437  0014A0  0E01               	movlw	1
  7438  0014A2  58F4               	subwfb	prodh,w,c
  7439  0014A4  B0D8               	btfsc	status,0,c
  7440  0014A6  D003               	goto	u8440
  7441  0014A8                     u8430:
  7442                           
  7443                           ; BSR set to: 1
  7444  0014A8  51F4               	movf	run_ASLBoron@cnfg_cnt& (0+255),w,b
  7445  0014AA  A4D8               	btfss	status,2,c
  7446  0014AC  D003               	goto	l1025
  7447  0014AE                     u8440:
  7448                           
  7449                           ; BSR set to: 1
  7450                           ;HX_ASL_BORON.c: 45: {
  7451                           ;HX_ASL_BORON.c: 46: hx_state = 0x40;
  7452                           
  7453                           ; BSR set to: 1
  7454  0014AE  0E40               	movlw	64
  7455  0014B0  6E45               	movwf	_hx_state,c
  7456                           
  7457                           ; BSR set to: 1
  7458                           ;HX_ASL_BORON.c: 47: return;
  7459  0014B2  0012               	return	
  7460  0014B4                     l1025:
  7461                           
  7462                           ; BSR set to: 1
  7463                           ;HX_ASL_BORON.c: 48: }
  7464                           ;HX_ASL_BORON.c: 49: for (uint8_t i = 0; i < 3*cnfg_cnt; i++)
  7465                           
  7466                           ; BSR set to: 1
  7467  0014B4  0E00               	movlw	0
  7468  0014B6  6FF3               	movwf	run_ASLBoron@i& (0+255),b
  7469  0014B8  D018               	goto	l1028
  7470  0014BA                     
  7471                           ;HX_ASL_BORON.c: 50: {
  7472                           ;HX_ASL_BORON.c: 51: cnfg_arr[i] = hx_inData[data_index++];
  7473                           
  7474                           ; BSR set to: 1
  7475  0014BA  0101               	movlb	1	; () banked
  7476  0014BC  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7477  0014BE  0100               	movlb	0	; () banked
  7478  0014C0  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7479  0014C2  6ED9               	movwf	fsr2l,c
  7480  0014C4  0101               	movlb	1	; () banked
  7481  0014C6  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7482  0014C8  0100               	movlb	0	; () banked
  7483  0014CA  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7484  0014CC  6EDA               	movwf	fsr2h,c
  7485  0014CE  0101               	movlb	1	; () banked
  7486  0014D0  51F3               	movf	run_ASLBoron@i& (0+255),w,b
  7487  0014D2  0D01               	mullw	1
  7488  0014D4  0E00               	movlw	low run_ASLBoron@cnfg_arr
  7489  0014D6  24F3               	addwf	prodl,w,c
  7490  0014D8  6EE1               	movwf	fsr1l,c
  7491  0014DA  0E0C               	movlw	high run_ASLBoron@cnfg_arr
  7492  0014DC  20F4               	addwfc	prodh,w,c
  7493  0014DE  6EE2               	movwf	fsr1h,c
  7494  0014E0  CFDF FFE7          	movff	indf2,indf1
  7495                           
  7496                           ; BSR set to: 1
  7497  0014E4  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7498  0014E6  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7499                           
  7500                           ; BSR set to: 1
  7501  0014E8  2BF3               	incf	run_ASLBoron@i& (0+255),f,b
  7502  0014EA                     l1028:
  7503                           
  7504                           ; BSR set to: 1
  7505                           
  7506                           ; BSR set to: 1
  7507  0014EA  51F4               	movf	run_ASLBoron@cnfg_cnt& (0+255),w,b
  7508  0014EC  0D03               	mullw	3
  7509  0014EE  51F3               	movf	run_ASLBoron@i& (0+255),w,b
  7510  0014F0  0100               	movlb	0	; () banked
  7511  0014F2  6FD6               	movwf	??_run_ASLBoron& (0+255),b
  7512  0014F4  6BD7               	clrf	(??_run_ASLBoron+1)& (0+255),b
  7513  0014F6  50F3               	movf	prodl,w,c
  7514  0014F8  5DD6               	subwf	??_run_ASLBoron& (0+255),w,b
  7515  0014FA  51D7               	movf	(??_run_ASLBoron+1)& (0+255),w,b
  7516  0014FC  0A80               	xorlw	128
  7517  0014FE  6FD8               	movwf	(??_run_ASLBoron+2)& (0+255),b
  7518  001500  50F4               	movf	prodh,w,c
  7519  001502  0A80               	xorlw	128
  7520  001504  59D8               	subwfb	(??_run_ASLBoron+2)& (0+255),w,b
  7521  001506  B0D8               	btfsc	status,0,c
  7522  001508  D010               	goto	l1031
  7523  00150A  D7D7               	goto	l1029
  7524  00150C                     l1024:
  7525                           
  7526                           ;HX_ASL_BORON.c: 54: else
  7527                           ;HX_ASL_BORON.c: 55: {
  7528                           ;HX_ASL_BORON.c: 56: cnfg_run = hx_inData[data_index++];
  7529                           
  7530                           ; BSR set to: 0
  7531  00150C  0101               	movlb	1	; () banked
  7532  00150E  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7533  001510  0100               	movlb	0	; () banked
  7534  001512  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7535  001514  6ED9               	movwf	fsr2l,c
  7536  001516  0101               	movlb	1	; () banked
  7537  001518  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7538  00151A  0100               	movlb	0	; () banked
  7539  00151C  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7540  00151E  6EDA               	movwf	fsr2h,c
  7541  001520  50DF               	movf	indf2,w,c
  7542  001522  0101               	movlb	1	; () banked
  7543  001524  6FF2               	movwf	run_ASLBoron@cnfg_run& (0+255),b
  7544                           
  7545                           ; BSR set to: 1
  7546  001526  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7547  001528  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7548  00152A                     l1031:
  7549                           
  7550                           ;HX_ASL_BORON.c: 57: }
  7551                           ;HX_ASL_BORON.c: 58: rpt_run[0] = hx_inData[data_index] == 0 ? 1 : hx_inData[data_index]
      +                          ;
  7552                           
  7553                           ; BSR set to: 1
  7554  00152A  0101               	movlb	1	; () banked
  7555  00152C  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7556  00152E  0100               	movlb	0	; () banked
  7557  001530  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7558  001532  6ED9               	movwf	fsr2l,c
  7559  001534  0101               	movlb	1	; () banked
  7560  001536  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7561  001538  0100               	movlb	0	; () banked
  7562  00153A  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7563  00153C  6EDA               	movwf	fsr2h,c
  7564  00153E  50DF               	movf	indf2,w,c
  7565  001540  B4D8               	btfsc	status,2,c
  7566  001542  D011               	goto	l1033
  7567                           
  7568                           ; BSR set to: 0
  7569  001544  0101               	movlb	1	; () banked
  7570  001546  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7571  001548  0100               	movlb	0	; () banked
  7572  00154A  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7573  00154C  6ED9               	movwf	fsr2l,c
  7574  00154E  0101               	movlb	1	; () banked
  7575  001550  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7576  001552  0100               	movlb	0	; () banked
  7577  001554  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7578  001556  6EDA               	movwf	fsr2h,c
  7579  001558  50DF               	movf	indf2,w,c
  7580  00155A  6FD6               	movwf	??_run_ASLBoron& (0+255),b
  7581  00155C  51D6               	movf	??_run_ASLBoron& (0+255),w,b
  7582  00155E  0101               	movlb	1	; () banked
  7583  001560  6FE9               	movwf	_run_ASLBoron$1381& (0+255),b
  7584  001562  6BEA               	clrf	(_run_ASLBoron$1381+1)& (0+255),b
  7585  001564  D005               	goto	l1035
  7586  001566                     l1033:
  7587                           
  7588                           ; BSR set to: 1
  7589  001566  0E00               	movlw	0
  7590  001568  0101               	movlb	1	; () banked
  7591  00156A  6FEA               	movwf	(_run_ASLBoron$1381+1)& (0+255),b
  7592  00156C  0E01               	movlw	1
  7593  00156E  6FE9               	movwf	_run_ASLBoron$1381& (0+255),b
  7594  001570                     l1035:
  7595                           
  7596                           ; BSR set to: 1
  7597                           
  7598                           ; BSR set to: 1
  7599  001570  C1E9  F1ED         	movff	_run_ASLBoron$1381,run_ASLBoron@rpt_run
  7600                           
  7601                           ; BSR set to: 1
  7602                           ;HX_ASL_BORON.c: 59: data_index++;
  7603  001574  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7604  001576  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7605                           
  7606                           ; BSR set to: 1
  7607                           ;HX_ASL_BORON.c: 60: rpt_run[1] = hx_inData[data_index] == 0 ? 1 : hx_inData[data_index]
      +                          ;
  7608  001578  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7609  00157A  0100               	movlb	0	; () banked
  7610  00157C  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7611  00157E  6ED9               	movwf	fsr2l,c
  7612  001580  0101               	movlb	1	; () banked
  7613  001582  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7614  001584  0100               	movlb	0	; () banked
  7615  001586  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7616  001588  6EDA               	movwf	fsr2h,c
  7617  00158A  50DF               	movf	indf2,w,c
  7618  00158C  B4D8               	btfsc	status,2,c
  7619  00158E  D011               	goto	l1037
  7620                           
  7621                           ; BSR set to: 0
  7622  001590  0101               	movlb	1	; () banked
  7623  001592  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7624  001594  0100               	movlb	0	; () banked
  7625  001596  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7626  001598  6ED9               	movwf	fsr2l,c
  7627  00159A  0101               	movlb	1	; () banked
  7628  00159C  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7629  00159E  0100               	movlb	0	; () banked
  7630  0015A0  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7631  0015A2  6EDA               	movwf	fsr2h,c
  7632  0015A4  50DF               	movf	indf2,w,c
  7633  0015A6  6FD6               	movwf	??_run_ASLBoron& (0+255),b
  7634  0015A8  51D6               	movf	??_run_ASLBoron& (0+255),w,b
  7635  0015AA  0101               	movlb	1	; () banked
  7636  0015AC  6FEB               	movwf	_run_ASLBoron$1382& (0+255),b
  7637  0015AE  6BEC               	clrf	(_run_ASLBoron$1382+1)& (0+255),b
  7638  0015B0  D005               	goto	l1039
  7639  0015B2                     l1037:
  7640                           
  7641                           ; BSR set to: 1
  7642  0015B2  0E00               	movlw	0
  7643  0015B4  0101               	movlb	1	; () banked
  7644  0015B6  6FEC               	movwf	(_run_ASLBoron$1382+1)& (0+255),b
  7645  0015B8  0E01               	movlw	1
  7646  0015BA  6FEB               	movwf	_run_ASLBoron$1382& (0+255),b
  7647  0015BC                     l1039:
  7648                           
  7649                           ; BSR set to: 1
  7650                           
  7651                           ; BSR set to: 1
  7652  0015BC  C1EB  F1EE         	movff	_run_ASLBoron$1382,run_ASLBoron@rpt_run+1
  7653                           
  7654                           ; BSR set to: 1
  7655                           ;HX_ASL_BORON.c: 61: data_index++;
  7656  0015C0  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7657  0015C2  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7658                           
  7659                           ; BSR set to: 1
  7660                           ;HX_ASL_BORON.c: 62: checksum = hx_inData[data_index++];
  7661  0015C4  51F6               	movf	run_ASLBoron@data_index& (0+255),w,b
  7662  0015C6  0100               	movlb	0	; () banked
  7663  0015C8  25D3               	addwf	run_ASLBoron@hx_inData& (0+255),w,b
  7664  0015CA  6ED9               	movwf	fsr2l,c
  7665  0015CC  0101               	movlb	1	; () banked
  7666  0015CE  51F7               	movf	(run_ASLBoron@data_index+1)& (0+255),w,b
  7667  0015D0  0100               	movlb	0	; () banked
  7668  0015D2  21D4               	addwfc	(run_ASLBoron@hx_inData+1)& (0+255),w,b
  7669  0015D4  6EDA               	movwf	fsr2h,c
  7670  0015D6  50DF               	movf	indf2,w,c
  7671  0015D8  0101               	movlb	1	; () banked
  7672  0015DA  6FEF               	movwf	run_ASLBoron@checksum& (0+255),b
  7673                           
  7674                           ; BSR set to: 1
  7675  0015DC  4BF6               	infsnz	run_ASLBoron@data_index& (0+255),f,b
  7676  0015DE  2BF7               	incf	(run_ASLBoron@data_index+1)& (0+255),f,b
  7677                           
  7678                           ; BSR set to: 1
  7679                           ;HX_ASL_BORON.c: 63: calc_checksum = calcChecksum(hx_inData, data_index-1);
  7680  0015E0  C0D3  F060         	movff	run_ASLBoron@hx_inData,calcChecksum@data
  7681  0015E4  C0D4  F061         	movff	run_ASLBoron@hx_inData+1,calcChecksum@data+1
  7682  0015E8  05F6               	decf	run_ASLBoron@data_index& (0+255),w,b
  7683  0015EA  0100               	movlb	0	; () banked
  7684  0015EC  6F62               	movwf	calcChecksum@size& (0+255),b
  7685  0015EE  EC86  F01E         	call	_calcChecksum	;wreg free
  7686  0015F2  0101               	movlb	1	; () banked
  7687  0015F4  6FF0               	movwf	run_ASLBoron@calc_checksum& (0+255),b
  7688                           
  7689                           ; BSR set to: 1
  7690                           ;HX_ASL_BORON.c: 64: if (calc_checksum != checksum)
  7691  0015F6  51EF               	movf	run_ASLBoron@checksum& (0+255),w,b
  7692  0015F8  19F0               	xorwf	run_ASLBoron@calc_checksum& (0+255),w,b
  7693  0015FA  B4D8               	btfsc	status,2,c
  7694  0015FC  D04E               	goto	l1042
  7695                           
  7696                           ; BSR set to: 1
  7697                           ;HX_ASL_BORON.c: 65: {
  7698                           ;HX_ASL_BORON.c: 66: hx_state = 0x20;
  7699  0015FE  0E20               	movlw	32
  7700  001600  6E45               	movwf	_hx_state,c
  7701                           
  7702                           ; BSR set to: 1
  7703                           ;HX_ASL_BORON.c: 68: }
  7704                           
  7705                           ; BSR set to: 1
  7706                           ;HX_ASL_BORON.c: 67: return;
  7707  001602  0012               	return	
  7708  001604                     
  7709                           ; BSR set to: 1
  7710                           ;HX_ASL_BORON.c: 74: hx_mainDataIndex = 1;
  7711                           
  7712                           ; BSR set to: 1
  7713  001604  0E01               	movlw	1
  7714  001606  6E3F               	movwf	_hx_mainDataIndex,c
  7715                           
  7716                           ; BSR set to: 1
  7717                           ;HX_ASL_BORON.c: 75: write_ASLBoron_test(test_run, rpt_run, hx_mainData);
  7718  001608  0EED               	movlw	low run_ASLBoron@rpt_run
  7719  00160A  0100               	movlb	0	; () banked
  7720  00160C  6FC7               	movwf	write_ASLBoron_test@run_rpt& (0+255),b
  7721  00160E  0E01               	movlw	high run_ASLBoron@rpt_run
  7722  001610  6FC8               	movwf	(write_ASLBoron_test@run_rpt+1)& (0+255),b
  7723  001612  0EC0               	movlw	low _hx_mainData
  7724  001614  6FC9               	movwf	write_ASLBoron_test@rxBuffer& (0+255),b
  7725  001616  0E0B               	movlw	high _hx_mainData
  7726  001618  6FCA               	movwf	(write_ASLBoron_test@rxBuffer+1)& (0+255),b
  7727  00161A  0101               	movlb	1	; () banked
  7728  00161C  51F1               	movf	run_ASLBoron@test_run& (0+255),w,b
  7729  00161E  ECF8  F006         	call	_write_ASLBoron_test
  7730                           
  7731                           ;HX_ASL_BORON.c: 76: hx_state = 0x10;
  7732  001622  0E10               	movlw	16
  7733  001624  6E45               	movwf	_hx_state,c
  7734                           
  7735                           ;HX_ASL_BORON.c: 77: break;
  7736  001626  0012               	return	
  7737  001628                     
  7738                           ;HX_ASL_BORON.c: 80: hx_mainDataIndex = 1;
  7739  001628  0E01               	movlw	1
  7740  00162A  6E3F               	movwf	_hx_mainDataIndex,c
  7741                           
  7742                           ;HX_ASL_BORON.c: 81: write_ASLBoron_cnfg(cnfg_run, hx_mainData);
  7743  00162C  0EC0               	movlw	low _hx_mainData
  7744  00162E  0100               	movlb	0	; () banked
  7745  001630  6F62               	movwf	write_ASLBoron_cnfg@rxBuffer& (0+255),b
  7746  001632  0E0B               	movlw	high _hx_mainData
  7747  001634  6F63               	movwf	(write_ASLBoron_cnfg@rxBuffer+1)& (0+255),b
  7748  001636  0101               	movlb	1	; () banked
  7749  001638  51F2               	movf	run_ASLBoron@cnfg_run& (0+255),w,b
  7750  00163A  EC15  F01A         	call	_write_ASLBoron_cnfg
  7751                           
  7752                           ;HX_ASL_BORON.c: 82: hx_state = 0x10;
  7753  00163E  0E10               	movlw	16
  7754  001640  6E45               	movwf	_hx_state,c
  7755                           
  7756                           ;HX_ASL_BORON.c: 83: break;
  7757  001642  0012               	return	
  7758  001644                     
  7759                           ;HX_ASL_BORON.c: 86: hx_mainDataIndex = 1;
  7760  001644  0E01               	movlw	1
  7761  001646  6E3F               	movwf	_hx_mainDataIndex,c
  7762                           
  7763                           ;HX_ASL_BORON.c: 87: write_ASLBoron_cstm_cnfg(cnfg_arr, 3*cnfg_cnt, hx_mainData);
  7764  001648  0E00               	movlw	low run_ASLBoron@cnfg_arr
  7765  00164A  0100               	movlb	0	; () banked
  7766  00164C  6F60               	movwf	write_ASLBoron_cstm_cnfg@cnfg_arr& (0+255),b
  7767  00164E  0E0C               	movlw	high run_ASLBoron@cnfg_arr
  7768  001650  6F61               	movwf	(write_ASLBoron_cstm_cnfg@cnfg_arr+1)& (0+255),b
  7769  001652  0101               	movlb	1	; () banked
  7770  001654  51F4               	movf	run_ASLBoron@cnfg_cnt& (0+255),w,b
  7771  001656  0D03               	mullw	3
  7772  001658  CFF3 F062          	movff	prodl,write_ASLBoron_cstm_cnfg@cnfg_arr_size
  7773  00165C  CFF4 F063          	movff	prodh,write_ASLBoron_cstm_cnfg@cnfg_arr_size+1
  7774  001660  0EC0               	movlw	low _hx_mainData
  7775  001662  0100               	movlb	0	; () banked
  7776  001664  6F64               	movwf	write_ASLBoron_cstm_cnfg@rxBuffer& (0+255),b
  7777  001666  0E0B               	movlw	high _hx_mainData
  7778  001668  6F65               	movwf	(write_ASLBoron_cstm_cnfg@rxBuffer+1)& (0+255),b
  7779  00166A  EC72  F020         	call	_write_ASLBoron_cstm_cnfg	;wreg free
  7780                           
  7781                           ;HX_ASL_BORON.c: 88: hx_state = 0x10;
  7782  00166E  0E10               	movlw	16
  7783  001670  6E45               	movwf	_hx_state,c
  7784                           
  7785                           ;HX_ASL_BORON.c: 89: break;
  7786  001672  0012               	return	
  7787  001674                     
  7788                           ;HX_ASL_BORON.c: 92: hx_mainDataIndex = 1;
  7789  001674  0E01               	movlw	1
  7790  001676  6E3F               	movwf	_hx_mainDataIndex,c
  7791                           
  7792                           ;HX_ASL_BORON.c: 93: write_ASLBoron_debug(test_run, cnfg_run, hx_mainData);
  7793  001678  C1F2  F0C8         	movff	run_ASLBoron@cnfg_run,write_ASLBoron_debug@run_cnfg
  7794  00167C  0EC0               	movlw	low _hx_mainData
  7795  00167E  0100               	movlb	0	; () banked
  7796  001680  6FC9               	movwf	write_ASLBoron_debug@rxBuffer& (0+255),b
  7797  001682  0E0B               	movlw	high _hx_mainData
  7798  001684  6FCA               	movwf	(write_ASLBoron_debug@rxBuffer+1)& (0+255),b
  7799  001686  0101               	movlb	1	; () banked
  7800  001688  51F1               	movf	run_ASLBoron@test_run& (0+255),w,b
  7801  00168A  EC37  F014         	call	_write_ASLBoron_debug
  7802                           
  7803                           ;HX_ASL_BORON.c: 94: hx_state = 0x10;
  7804  00168E  0E10               	movlw	16
  7805  001690  6E45               	movwf	_hx_state,c
  7806                           
  7807                           ;HX_ASL_BORON.c: 95: break;
  7808  001692  0012               	return	
  7809  001694                     
  7810                           ;HX_ASL_BORON.c: 98: hx_state = 0x40;
  7811  001694  0E40               	movlw	64
  7812  001696  6E45               	movwf	_hx_state,c
  7813                           
  7814                           ;HX_ASL_BORON.c: 100: }
  7815                           
  7816                           ;HX_ASL_BORON.c: 99: break;
  7817  001698  0012               	return	
  7818  00169A                     l1042:
  7819  00169A  0101               	movlb	1	; () banked
  7820  00169C  51F5               	movf	run_ASLBoron@mode_run& (0+255),w,b
  7821                           
  7822                           ; Switch size 1, requested type "space"
  7823                           ; Number of cases is 4, Range of values is 0 to 170
  7824                           ; switch strategies available:
  7825                           ; Name         Instructions Cycles
  7826                           ; simple_byte           13     7 (average)
  7827                           ;	Chosen strategy is simple_byte
  7828  00169E  0A00               	xorlw	0	; case 0
  7829  0016A0  B4D8               	btfsc	status,2,c
  7830  0016A2  D7B0               	goto	l1043
  7831  0016A4  0A01               	xorlw	1	; case 1
  7832  0016A6  B4D8               	btfsc	status,2,c
  7833  0016A8  D7BF               	goto	l1045
  7834  0016AA  0A03               	xorlw	3	; case 2
  7835  0016AC  B4D8               	btfsc	status,2,c
  7836  0016AE  D7CA               	goto	l1046
  7837  0016B0  0AA8               	xorlw	168	; case 170
  7838  0016B2  B4D8               	btfsc	status,2,c
  7839  0016B4  D7DF               	goto	l1047
  7840  0016B6  D7EE               	goto	l1048
  7841  0016B8                     __end_of_run_ASLBoron:
  7842                           	opt stack 0
  7843                           tblptru	equ	0xFF8
  7844                           tblptrh	equ	0xFF7
  7845                           tblptrl	equ	0xFF6
  7846                           tablat	equ	0xFF5
  7847                           prodh	equ	0xFF4
  7848                           prodl	equ	0xFF3
  7849                           intcon	equ	0xFF2
  7850                           postinc0	equ	0xFEE
  7851                           wreg	equ	0xFE8
  7852                           indf1	equ	0xFE7
  7853                           postinc1	equ	0xFE6
  7854                           postdec1	equ	0xFE5
  7855                           fsr1h	equ	0xFE2
  7856                           fsr1l	equ	0xFE1
  7857                           indf2	equ	0xFDF
  7858                           postinc2	equ	0xFDE
  7859                           fsr2h	equ	0xFDA
  7860                           fsr2l	equ	0xFD9
  7861                           status	equ	0xFD8
  7862                           
  7863 ;; *************** function _write_ASLBoron_test *****************
  7864 ;; Defined at:
  7865 ;;		line 105 in file "HX_ASL_BORON.c"
  7866 ;; Parameters:    Size  Location     Type
  7867 ;;  run_test        1    wreg     unsigned char 
  7868 ;;  run_rpt         2  103[BANK0 ] PTR unsigned char 
  7869 ;;		 -> run_ASLBoron@rpt_run(2), 
  7870 ;;  rxBuffer        2  105[BANK0 ] PTR unsigned char 
  7871 ;;		 -> hx_mainData(61), 
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  run_test        1  110[BANK0 ] unsigned char 
  7874 ;;  j               2  113[BANK0 ] int 
  7875 ;;  i               2  111[BANK0 ] int 
  7876 ;; Return value:  Size  Location     Type
  7877 ;;                  1    wreg      void 
  7878 ;; Registers used:
  7879 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7880 ;; Tracked objects:
  7881 ;;		On entry : 0/0
  7882 ;;		On exit  : 0/0
  7883 ;;		Unchanged: 0/0
  7884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7885 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7886 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7887 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7888 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7889 ;;Total ram usage:       12 bytes
  7890 ;; Hardware stack levels used:    1
  7891 ;; Hardware stack levels required when called:   12
  7892 ;; This function calls:
  7893 ;;		_ASLB_ADC
  7894 ;;		_ASLB_ADCReferenceVoltage
  7895 ;;		_ASLB_AnalogMuxReadingSetup
  7896 ;;		_ASLB_CFCVVaricap
  7897 ;;		_ASLB_CTHERM
  7898 ;;		_ASLB_ColpittsOscillator
  7899 ;;		_ASLB_CommonGate
  7900 ;;		_ASLB_ContinuityESD
  7901 ;;		_ASLB_CurrentLimitDACVoltage
  7902 ;;		_ASLB_DACReferenceVoltage
  7903 ;;		_ASLB_DigitalRegulatorVoltage
  7904 ;;		_ASLB_ExternalReferenceVoltage
  7905 ;;		_ASLB_HeaterFBSignals
  7906 ;;		_ASLB_HeaterFunctionality
  7907 ;;		_ASLB_InternalTempSensor
  7908 ;;		_ASLB_MuxOpenCircuit
  7909 ;;		_ASLB_MuxReadingVDD
  7910 ;;		_ASLB_OscillatorRegulatorVoltage
  7911 ;;		_ASLB_PierceOscillator
  7912 ;;		_ASLB_RDResistor
  7913 ;;		_ASLB_SheetResistance
  7914 ;;		_ASLB_TempSetDACVoltage
  7915 ;;		_ASLB_VaricapBiasSteering
  7916 ;;		_ASLB_VaricapDACVoltage
  7917 ;;		_ASLB_ZTCReferenceCurrent
  7918 ;; This function is called by:
  7919 ;;		_run_ASLBoron
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           	psect	text14
  7924  000DF0                     __ptext14:
  7925                           	opt stack 0
  7926  000DF0                     _write_ASLBoron_test:
  7927                           	opt stack 17
  7928                           
  7929                           ;incstack = 0
  7930                           ;write_ASLBoron_test@run_test stored from wreg
  7931  000DF0  0100               	movlb	0	; () banked
  7932  000DF2  6FCE               	movwf	write_ASLBoron_test@run_test& (0+255),b
  7933                           
  7934                           ;HX_ASL_BORON.c: 107: int i,j;
  7935                           ;HX_ASL_BORON.c: 109: for (i = 0; i < run_rpt[0]; i++)
  7936  000DF4  0E00               	movlw	0
  7937  000DF6  0100               	movlb	0	; () banked
  7938  000DF8  6FD0               	movwf	(write_ASLBoron_test@i+1)& (0+255),b
  7939  000DFA  0E00               	movlw	0
  7940  000DFC  6FCF               	movwf	write_ASLBoron_test@i& (0+255),b
  7941  000DFE  D172               	goto	l1051
  7942  000E00                     
  7943                           ; BSR set to: 0
  7944                           ;HX_ASL_BORON.c: 110: {
  7945                           ;HX_ASL_BORON.c: 111: for (j = 0; j < run_rpt[1]; j++)
  7946                           
  7947                           ; BSR set to: 0
  7948  000E00  0E00               	movlw	0
  7949  000E02  6FD2               	movwf	(write_ASLBoron_test@j+1)& (0+255),b
  7950  000E04  0E00               	movlw	0
  7951  000E06  6FD1               	movwf	write_ASLBoron_test@j& (0+255),b
  7952  000E08  D158               	goto	l1053
  7953  000E0A                     
  7954                           ; BSR set to: 0
  7955                           ;HX_ASL_BORON.c: 116: ASLB_ContinuityESD(&rxBuffer[1]);
  7956                           
  7957                           ; BSR set to: 0
  7958  000E0A  0E01               	movlw	1
  7959  000E0C  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  7960  000E0E  6F60               	movwf	ASLB_ContinuityESD@rxBuffer& (0+255),b
  7961  000E10  0E00               	movlw	0
  7962  000E12  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  7963  000E14  6F61               	movwf	(ASLB_ContinuityESD@rxBuffer+1)& (0+255),b
  7964  000E16  EC71  F020         	call	_ASLB_ContinuityESD	;wreg free
  7965  000E1A  D0EF               	goto	l11351
  7966  000E1C                     
  7967                           ;HX_ASL_BORON.c: 121: ASLB_SheetResistance(&rxBuffer[1]);
  7968  000E1C  0E01               	movlw	1
  7969  000E1E  0100               	movlb	0	; () banked
  7970  000E20  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  7971  000E22  6FC4               	movwf	ASLB_SheetResistance@rxBuffer& (0+255),b
  7972  000E24  0E00               	movlw	0
  7973  000E26  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  7974  000E28  6FC5               	movwf	(ASLB_SheetResistance@rxBuffer+1)& (0+255),b
  7975  000E2A  ECE0  F018         	call	_ASLB_SheetResistance	;wreg free
  7976  000E2E  D0E5               	goto	l11351
  7977  000E30                     
  7978                           ;HX_ASL_BORON.c: 126: ASLB_HeaterFunctionality(&rxBuffer[1]);
  7979  000E30  0E01               	movlw	1
  7980  000E32  0100               	movlb	0	; () banked
  7981  000E34  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  7982  000E36  6F72               	movwf	ASLB_HeaterFunctionality@rxBuffer& (0+255),b
  7983  000E38  0E00               	movlw	0
  7984  000E3A  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  7985  000E3C  6F73               	movwf	(ASLB_HeaterFunctionality@rxBuffer+1)& (0+255),b
  7986  000E3E  EC81  F016         	call	_ASLB_HeaterFunctionality	;wreg free
  7987  000E42  D0DB               	goto	l11351
  7988  000E44                     
  7989                           ;HX_ASL_BORON.c: 131: ASLB_AnalogMuxReadingSetup(&rxBuffer[1]);
  7990  000E44  0E01               	movlw	1
  7991  000E46  0100               	movlb	0	; () banked
  7992  000E48  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  7993  000E4A  6F72               	movwf	ASLB_AnalogMuxReadingSetup@rxBuffer& (0+255),b
  7994  000E4C  0E00               	movlw	0
  7995  000E4E  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  7996  000E50  6F73               	movwf	(ASLB_AnalogMuxReadingSetup@rxBuffer+1)& (0+255),b
  7997  000E52  EC72  F019         	call	_ASLB_AnalogMuxReadingSetup	;wreg free
  7998  000E56  D0D1               	goto	l11351
  7999  000E58                     
  8000                           ;HX_ASL_BORON.c: 136: ASLB_CTHERM(&rxBuffer[1]);
  8001  000E58  0E01               	movlw	1
  8002  000E5A  0100               	movlb	0	; () banked
  8003  000E5C  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8004  000E5E  6F62               	movwf	ASLB_CTHERM@rxBuffer& (0+255),b
  8005  000E60  0E00               	movlw	0
  8006  000E62  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8007  000E64  6F63               	movwf	(ASLB_CTHERM@rxBuffer+1)& (0+255),b
  8008  000E66  EC0B  F01F         	call	_ASLB_CTHERM	;wreg free
  8009  000E6A  D0C7               	goto	l11351
  8010  000E6C                     
  8011                           ;HX_ASL_BORON.c: 141: ASLB_ADCReferenceVoltage(&rxBuffer[1]);
  8012  000E6C  0E01               	movlw	1
  8013  000E6E  0100               	movlb	0	; () banked
  8014  000E70  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8015  000E72  6F62               	movwf	ASLB_ADCReferenceVoltage@rxBuffer& (0+255),b
  8016  000E74  0E00               	movlw	0
  8017  000E76  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8018  000E78  6F63               	movwf	(ASLB_ADCReferenceVoltage@rxBuffer+1)& (0+255),b
  8019  000E7A  ECE2  F01E         	call	_ASLB_ADCReferenceVoltage	;wreg free
  8020  000E7E  D0BD               	goto	l11351
  8021  000E80                     
  8022                           ;HX_ASL_BORON.c: 146: ASLB_HeaterFBSignals(&rxBuffer[1]);
  8023  000E80  0E01               	movlw	1
  8024  000E82  0100               	movlb	0	; () banked
  8025  000E84  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8026  000E86  6F62               	movwf	ASLB_HeaterFBSignals@rxBuffer& (0+255),b
  8027  000E88  0E00               	movlw	0
  8028  000E8A  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8029  000E8C  6F63               	movwf	(ASLB_HeaterFBSignals@rxBuffer+1)& (0+255),b
  8030  000E8E  EC6E  F01C         	call	_ASLB_HeaterFBSignals	;wreg free
  8031  000E92  D0B3               	goto	l11351
  8032  000E94                     
  8033                           ;HX_ASL_BORON.c: 151: ASLB_InternalTempSensor(&rxBuffer[1]);
  8034  000E94  0E01               	movlw	1
  8035  000E96  0100               	movlb	0	; () banked
  8036  000E98  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8037  000E9A  6F62               	movwf	ASLB_InternalTempSensor@rxBuffer& (0+255),b
  8038  000E9C  0E00               	movlw	0
  8039  000E9E  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8040  000EA0  6F63               	movwf	(ASLB_InternalTempSensor@rxBuffer+1)& (0+255),b
  8041  000EA2  ECD4  F01D         	call	_ASLB_InternalTempSensor	;wreg free
  8042  000EA6  D0A9               	goto	l11351
  8043  000EA8                     
  8044                           ;HX_ASL_BORON.c: 156: ASLB_MuxReadingVDD(&rxBuffer[1]);
  8045  000EA8  0E01               	movlw	1
  8046  000EAA  0100               	movlb	0	; () banked
  8047  000EAC  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8048  000EAE  6F62               	movwf	ASLB_MuxReadingVDD@rxBuffer& (0+255),b
  8049  000EB0  0E00               	movlw	0
  8050  000EB2  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8051  000EB4  6F63               	movwf	(ASLB_MuxReadingVDD@rxBuffer+1)& (0+255),b
  8052  000EB6  ECCD  F01E         	call	_ASLB_MuxReadingVDD	;wreg free
  8053  000EBA  D09F               	goto	l11351
  8054  000EBC                     
  8055                           ;HX_ASL_BORON.c: 161: ASLB_DACReferenceVoltage(&rxBuffer[1]);
  8056  000EBC  0E01               	movlw	1
  8057  000EBE  0100               	movlb	0	; () banked
  8058  000EC0  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8059  000EC2  6F62               	movwf	ASLB_DACReferenceVoltage@rxBuffer& (0+255),b
  8060  000EC4  0E00               	movlw	0
  8061  000EC6  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8062  000EC8  6F63               	movwf	(ASLB_DACReferenceVoltage@rxBuffer+1)& (0+255),b
  8063  000ECA  EC08  F01E         	call	_ASLB_DACReferenceVoltage	;wreg free
  8064  000ECE  D095               	goto	l11351
  8065  000ED0                     
  8066                           ;HX_ASL_BORON.c: 166: ASLB_VaricapDACVoltage(&rxBuffer[1]);
  8067  000ED0  0E01               	movlw	1
  8068  000ED2  0100               	movlb	0	; () banked
  8069  000ED4  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8070  000ED6  6F62               	movwf	ASLB_VaricapDACVoltage@rxBuffer& (0+255),b
  8071  000ED8  0E00               	movlw	0
  8072  000EDA  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8073  000EDC  6F63               	movwf	(ASLB_VaricapDACVoltage@rxBuffer+1)& (0+255),b
  8074  000EDE  ECA0  F01D         	call	_ASLB_VaricapDACVoltage	;wreg free
  8075  000EE2  D08B               	goto	l11351
  8076  000EE4                     
  8077                           ;HX_ASL_BORON.c: 171: ASLB_TempSetDACVoltage(&rxBuffer[1]);
  8078  000EE4  0E01               	movlw	1
  8079  000EE6  0100               	movlb	0	; () banked
  8080  000EE8  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8081  000EEA  6F62               	movwf	ASLB_TempSetDACVoltage@rxBuffer& (0+255),b
  8082  000EEC  0E00               	movlw	0
  8083  000EEE  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8084  000EF0  6F63               	movwf	(ASLB_TempSetDACVoltage@rxBuffer+1)& (0+255),b
  8085  000EF2  EC4A  F01A         	call	_ASLB_TempSetDACVoltage	;wreg free
  8086  000EF6  D081               	goto	l11351
  8087  000EF8                     
  8088                           ;HX_ASL_BORON.c: 176: ASLB_CurrentLimitDACVoltage(&rxBuffer[1]);
  8089  000EF8  0E01               	movlw	1
  8090  000EFA  0100               	movlb	0	; () banked
  8091  000EFC  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8092  000EFE  6F68               	movwf	ASLB_CurrentLimitDACVoltage@rxBuffer& (0+255),b
  8093  000F00  0E00               	movlw	0
  8094  000F02  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8095  000F04  6F69               	movwf	(ASLB_CurrentLimitDACVoltage@rxBuffer+1)& (0+255),b
  8096  000F06  ECE0  F019         	call	_ASLB_CurrentLimitDACVoltage	;wreg free
  8097  000F0A  D077               	goto	l11351
  8098  000F0C                     
  8099                           ;HX_ASL_BORON.c: 181: ASLB_DigitalRegulatorVoltage(&rxBuffer[1]);
  8100  000F0C  0E01               	movlw	1
  8101  000F0E  0100               	movlb	0	; () banked
  8102  000F10  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8103  000F12  6F62               	movwf	ASLB_DigitalRegulatorVoltage@rxBuffer& (0+255),b
  8104  000F14  0E00               	movlw	0
  8105  000F16  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8106  000F18  6F63               	movwf	(ASLB_DigitalRegulatorVoltage@rxBuffer+1)& (0+255),b
  8107  000F1A  ECEE  F01D         	call	_ASLB_DigitalRegulatorVoltage	;wreg free
  8108  000F1E  D06D               	goto	l11351
  8109  000F20                     
  8110                           ;HX_ASL_BORON.c: 186: ASLB_ZTCReferenceCurrent(&rxBuffer[1]);
  8111  000F20  0E01               	movlw	1
  8112  000F22  0100               	movlb	0	; () banked
  8113  000F24  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8114  000F26  6F62               	movwf	ASLB_ZTCReferenceCurrent@rxBuffer& (0+255),b
  8115  000F28  0E00               	movlw	0
  8116  000F2A  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8117  000F2C  6F63               	movwf	(ASLB_ZTCReferenceCurrent@rxBuffer+1)& (0+255),b
  8118  000F2E  EC86  F01D         	call	_ASLB_ZTCReferenceCurrent	;wreg free
  8119  000F32  D063               	goto	l11351
  8120  000F34                     
  8121                           ;HX_ASL_BORON.c: 191: ASLB_MuxOpenCircuit(&rxBuffer[1]);
  8122  000F34  0E01               	movlw	1
  8123  000F36  0100               	movlb	0	; () banked
  8124  000F38  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8125  000F3A  6F62               	movwf	ASLB_MuxOpenCircuit@rxBuffer& (0+255),b
  8126  000F3C  0E00               	movlw	0
  8127  000F3E  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8128  000F40  6F63               	movwf	(ASLB_MuxOpenCircuit@rxBuffer+1)& (0+255),b
  8129  000F42  ECBA  F01D         	call	_ASLB_MuxOpenCircuit	;wreg free
  8130  000F46  D059               	goto	l11351
  8131  000F48                     
  8132                           ;HX_ASL_BORON.c: 196: ASLB_OscillatorRegulatorVoltage(&rxBuffer[1]);
  8133  000F48  0E01               	movlw	1
  8134  000F4A  0100               	movlb	0	; () banked
  8135  000F4C  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8136  000F4E  6F62               	movwf	ASLB_OscillatorRegulatorVoltage@rxBuffer& (0+255),b
  8137  000F50  0E00               	movlw	0
  8138  000F52  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8139  000F54  6F63               	movwf	(ASLB_OscillatorRegulatorVoltage@rxBuffer+1)& (0+255),b
  8140  000F56  EC73  F01F         	call	_ASLB_OscillatorRegulatorVoltage	;wreg free
  8141  000F5A  D04F               	goto	l11351
  8142  000F5C                     
  8143                           ;HX_ASL_BORON.c: 201: ASLB_ExternalReferenceVoltage(&rxBuffer[1]);
  8144  000F5C  0E01               	movlw	1
  8145  000F5E  0100               	movlb	0	; () banked
  8146  000F60  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8147  000F62  6F62               	movwf	ASLB_ExternalReferenceVoltage@rxBuffer& (0+255),b
  8148  000F64  0E00               	movlw	0
  8149  000F66  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8150  000F68  6F63               	movwf	(ASLB_ExternalReferenceVoltage@rxBuffer+1)& (0+255),b
  8151  000F6A  EC80  F01F         	call	_ASLB_ExternalReferenceVoltage	;wreg free
  8152  000F6E  D045               	goto	l11351
  8153  000F70                     
  8154                           ;HX_ASL_BORON.c: 206: ASLB_VaricapBiasSteering(&rxBuffer[1]);
  8155  000F70  0E01               	movlw	1
  8156  000F72  0100               	movlb	0	; () banked
  8157  000F74  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8158  000F76  6F62               	movwf	ASLB_VaricapBiasSteering@rxBuffer& (0+255),b
  8159  000F78  0E00               	movlw	0
  8160  000F7A  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8161  000F7C  6F63               	movwf	(ASLB_VaricapBiasSteering@rxBuffer+1)& (0+255),b
  8162  000F7E  EC04  F020         	call	_ASLB_VaricapBiasSteering	;wreg free
  8163  000F82  D03B               	goto	l11351
  8164  000F84                     
  8165                           ;HX_ASL_BORON.c: 211: ASLB_ColpittsOscillator(&rxBuffer[1]);
  8166  000F84  0E01               	movlw	1
  8167  000F86  0100               	movlb	0	; () banked
  8168  000F88  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8169  000F8A  6F60               	movwf	ASLB_ColpittsOscillator@rxBuffer& (0+255),b
  8170  000F8C  0E00               	movlw	0
  8171  000F8E  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8172  000F90  6F61               	movwf	(ASLB_ColpittsOscillator@rxBuffer+1)& (0+255),b
  8173  000F92  EC50  F020         	call	_ASLB_ColpittsOscillator	;wreg free
  8174  000F96  D031               	goto	l11351
  8175  000F98                     
  8176                           ;HX_ASL_BORON.c: 216: ASLB_PierceOscillator(&rxBuffer[1]);
  8177  000F98  0E01               	movlw	1
  8178  000F9A  0100               	movlb	0	; () banked
  8179  000F9C  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8180  000F9E  6F60               	movwf	ASLB_PierceOscillator@rxBuffer& (0+255),b
  8181  000FA0  0E00               	movlw	0
  8182  000FA2  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8183  000FA4  6F61               	movwf	(ASLB_PierceOscillator@rxBuffer+1)& (0+255),b
  8184  000FA6  EC48  F020         	call	_ASLB_PierceOscillator	;wreg free
  8185  000FAA  D027               	goto	l11351
  8186  000FAC                     
  8187                           ;HX_ASL_BORON.c: 221: ASLB_RDResistor(&rxBuffer[1]);
  8188  000FAC  0E01               	movlw	1
  8189  000FAE  0100               	movlb	0	; () banked
  8190  000FB0  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8191  000FB2  6F60               	movwf	ASLB_RDResistor@rxBuffer& (0+255),b
  8192  000FB4  0E00               	movlw	0
  8193  000FB6  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8194  000FB8  6F61               	movwf	(ASLB_RDResistor@rxBuffer+1)& (0+255),b
  8195  000FBA  EC44  F020         	call	_ASLB_RDResistor	;wreg free
  8196  000FBE  D01D               	goto	l11351
  8197  000FC0                     
  8198                           ;HX_ASL_BORON.c: 226: ASLB_CFCVVaricap(&rxBuffer[1]);
  8199  000FC0  0E01               	movlw	1
  8200  000FC2  0100               	movlb	0	; () banked
  8201  000FC4  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8202  000FC6  6F60               	movwf	ASLB_CFCVVaricap@rxBuffer& (0+255),b
  8203  000FC8  0E00               	movlw	0
  8204  000FCA  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8205  000FCC  6F61               	movwf	(ASLB_CFCVVaricap@rxBuffer+1)& (0+255),b
  8206  000FCE  EC54  F020         	call	_ASLB_CFCVVaricap	;wreg free
  8207  000FD2  D013               	goto	l11351
  8208  000FD4                     
  8209                           ;HX_ASL_BORON.c: 231: ASLB_CommonGate(&rxBuffer[1]);
  8210  000FD4  0E01               	movlw	1
  8211  000FD6  0100               	movlb	0	; () banked
  8212  000FD8  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8213  000FDA  6F60               	movwf	ASLB_CommonGate@rxBuffer& (0+255),b
  8214  000FDC  0E00               	movlw	0
  8215  000FDE  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8216  000FE0  6F61               	movwf	(ASLB_CommonGate@rxBuffer+1)& (0+255),b
  8217  000FE2  EC4C  F020         	call	_ASLB_CommonGate	;wreg free
  8218  000FE6  D009               	goto	l11351
  8219  000FE8                     
  8220                           ;HX_ASL_BORON.c: 236: ASLB_ADC(&rxBuffer[1]);
  8221  000FE8  0E01               	movlw	1
  8222  000FEA  0100               	movlb	0	; () banked
  8223  000FEC  25C9               	addwf	write_ASLBoron_test@rxBuffer& (0+255),w,b
  8224  000FEE  6F60               	movwf	ASLB_ADC@rxBuffer& (0+255),b
  8225  000FF0  0E00               	movlw	0
  8226  000FF2  21CA               	addwfc	(write_ASLBoron_test@rxBuffer+1)& (0+255),w,b
  8227  000FF4  6F61               	movwf	(ASLB_ADC@rxBuffer+1)& (0+255),b
  8228  000FF6  EC58  F020         	call	_ASLB_ADC	;wreg free
  8229  000FFA                     l11351:
  8230                           
  8231                           ;HX_ASL_BORON.c: 237: rxBuffer[0] = 0x10;
  8232  000FFA  C0C9  FFD9         	movff	write_ASLBoron_test@rxBuffer,fsr2l
  8233  000FFE  C0CA  FFDA         	movff	write_ASLBoron_test@rxBuffer+1,fsr2h
  8234  001002  0E10               	movlw	16
  8235  001004  D007               	goto	L25
  8236  001006                     
  8237                           ;HX_ASL_BORON.c: 242: hx_state = 0x40;
  8238  001006  0E40               	movlw	64
  8239  001008  6E45               	movwf	_hx_state,c
  8240                           
  8241                           ;HX_ASL_BORON.c: 243: rxBuffer[0] = 0x00;
  8242  00100A  C0C9  FFD9         	movff	write_ASLBoron_test@rxBuffer,fsr2l
  8243  00100E  C0CA  FFDA         	movff	write_ASLBoron_test@rxBuffer+1,fsr2h
  8244  001012  0E00               	movlw	0
  8245  001014                     L25:
  8246  001014  6EDF               	movwf	indf2,c
  8247                           
  8248                           ;HX_ASL_BORON.c: 245: }
  8249                           
  8250                           ;HX_ASL_BORON.c: 244: break;
  8251  001016  D04E               	goto	l1057
  8252  001018  0100               	movlb	0	; () banked
  8253  00101A  51CE               	movf	write_ASLBoron_test@run_test& (0+255),w,b
  8254                           
  8255                           ; Switch size 1, requested type "space"
  8256                           ; Number of cases is 25, Range of values is 0 to 24
  8257                           ; switch strategies available:
  8258                           ; Name         Instructions Cycles
  8259                           ; simple_byte           76    39 (average)
  8260                           ;	Chosen strategy is simple_byte
  8261  00101C  0A00               	xorlw	0	; case 0
  8262  00101E  B4D8               	btfsc	status,2,c
  8263  001020  D6F4               	goto	l1056
  8264  001022  0A01               	xorlw	1	; case 1
  8265  001024  B4D8               	btfsc	status,2,c
  8266  001026  D6FA               	goto	l1058
  8267  001028  0A03               	xorlw	3	; case 2
  8268  00102A  B4D8               	btfsc	status,2,c
  8269  00102C  D701               	goto	l1059
  8270  00102E  0A01               	xorlw	1	; case 3
  8271  001030  B4D8               	btfsc	status,2,c
  8272  001032  D708               	goto	l1060
  8273  001034  0A07               	xorlw	7	; case 4
  8274  001036  B4D8               	btfsc	status,2,c
  8275  001038  D70F               	goto	l1061
  8276  00103A  0A01               	xorlw	1	; case 5
  8277  00103C  B4D8               	btfsc	status,2,c
  8278  00103E  D716               	goto	l1062
  8279  001040  0A03               	xorlw	3	; case 6
  8280  001042  B4D8               	btfsc	status,2,c
  8281  001044  D71D               	goto	l1063
  8282  001046  0A01               	xorlw	1	; case 7
  8283  001048  B4D8               	btfsc	status,2,c
  8284  00104A  D724               	goto	l1064
  8285  00104C  0A0F               	xorlw	15	; case 8
  8286  00104E  B4D8               	btfsc	status,2,c
  8287  001050  D72B               	goto	l1065
  8288  001052  0A01               	xorlw	1	; case 9
  8289  001054  B4D8               	btfsc	status,2,c
  8290  001056  D732               	goto	l1066
  8291  001058  0A03               	xorlw	3	; case 10
  8292  00105A  B4D8               	btfsc	status,2,c
  8293  00105C  D739               	goto	l1067
  8294  00105E  0A01               	xorlw	1	; case 11
  8295  001060  B4D8               	btfsc	status,2,c
  8296  001062  D740               	goto	l1068
  8297  001064  0A07               	xorlw	7	; case 12
  8298  001066  B4D8               	btfsc	status,2,c
  8299  001068  D747               	goto	l1069
  8300  00106A  0A01               	xorlw	1	; case 13
  8301  00106C  B4D8               	btfsc	status,2,c
  8302  00106E  D74E               	goto	l1070
  8303  001070  0A03               	xorlw	3	; case 14
  8304  001072  B4D8               	btfsc	status,2,c
  8305  001074  D755               	goto	l1071
  8306  001076  0A01               	xorlw	1	; case 15
  8307  001078  B4D8               	btfsc	status,2,c
  8308  00107A  D75C               	goto	l1072
  8309  00107C  0A1F               	xorlw	31	; case 16
  8310  00107E  B4D8               	btfsc	status,2,c
  8311  001080  D763               	goto	l1073
  8312  001082  0A01               	xorlw	1	; case 17
  8313  001084  B4D8               	btfsc	status,2,c
  8314  001086  D76A               	goto	l1074
  8315  001088  0A03               	xorlw	3	; case 18
  8316  00108A  B4D8               	btfsc	status,2,c
  8317  00108C  D771               	goto	l1075
  8318  00108E  0A01               	xorlw	1	; case 19
  8319  001090  B4D8               	btfsc	status,2,c
  8320  001092  D778               	goto	l1076
  8321  001094  0A07               	xorlw	7	; case 20
  8322  001096  B4D8               	btfsc	status,2,c
  8323  001098  D77F               	goto	l1077
  8324  00109A  0A01               	xorlw	1	; case 21
  8325  00109C  B4D8               	btfsc	status,2,c
  8326  00109E  D786               	goto	l1078
  8327  0010A0  0A03               	xorlw	3	; case 22
  8328  0010A2  B4D8               	btfsc	status,2,c
  8329  0010A4  D78D               	goto	l1079
  8330  0010A6  0A01               	xorlw	1	; case 23
  8331  0010A8  B4D8               	btfsc	status,2,c
  8332  0010AA  D794               	goto	l1080
  8333  0010AC  0A0F               	xorlw	15	; case 24
  8334  0010AE  B4D8               	btfsc	status,2,c
  8335  0010B0  D79B               	goto	l1081
  8336  0010B2  D7A9               	goto	l1082
  8337  0010B4                     l1057:
  8338                           
  8339                           ; BSR set to: 0
  8340  0010B4  0100               	movlb	0	; () banked
  8341  0010B6  4BD1               	infsnz	write_ASLBoron_test@j& (0+255),f,b
  8342  0010B8  2BD2               	incf	(write_ASLBoron_test@j+1)& (0+255),f,b
  8343  0010BA                     l1053:
  8344                           
  8345                           ; BSR set to: 0
  8346                           
  8347                           ; BSR set to: 0
  8348  0010BA  EE20 F001          	lfsr	2,1
  8349  0010BE  51C7               	movf	write_ASLBoron_test@run_rpt& (0+255),w,b
  8350  0010C0  26D9               	addwf	fsr2l,f,c
  8351  0010C2  51C8               	movf	(write_ASLBoron_test@run_rpt+1)& (0+255),w,b
  8352  0010C4  22DA               	addwfc	fsr2h,f,c
  8353  0010C6  50DF               	movf	indf2,w,c
  8354  0010C8  6FCB               	movwf	??_write_ASLBoron_test& (0+255),b
  8355  0010CA  6BCC               	clrf	(??_write_ASLBoron_test+1)& (0+255),b
  8356  0010CC  51CB               	movf	??_write_ASLBoron_test& (0+255),w,b
  8357  0010CE  5DD1               	subwf	write_ASLBoron_test@j& (0+255),w,b
  8358  0010D0  51D2               	movf	(write_ASLBoron_test@j+1)& (0+255),w,b
  8359  0010D2  0A80               	xorlw	128
  8360  0010D4  6FCD               	movwf	(??_write_ASLBoron_test+2)& (0+255),b
  8361  0010D6  51CC               	movf	(??_write_ASLBoron_test+1)& (0+255),w,b
  8362  0010D8  0A80               	xorlw	128
  8363  0010DA  59CD               	subwfb	(??_write_ASLBoron_test+2)& (0+255),w,b
  8364  0010DC  A0D8               	btfss	status,0,c
  8365  0010DE  D79C               	goto	l1055
  8366                           
  8367                           ; BSR set to: 0
  8368                           
  8369                           ; BSR set to: 0
  8370  0010E0  4BCF               	infsnz	write_ASLBoron_test@i& (0+255),f,b
  8371  0010E2  2BD0               	incf	(write_ASLBoron_test@i+1)& (0+255),f,b
  8372  0010E4                     l1051:
  8373                           
  8374                           ; BSR set to: 0
  8375                           
  8376                           ; BSR set to: 0
  8377  0010E4  C0C7  FFD9         	movff	write_ASLBoron_test@run_rpt,fsr2l
  8378  0010E8  C0C8  FFDA         	movff	write_ASLBoron_test@run_rpt+1,fsr2h
  8379  0010EC  50DF               	movf	indf2,w,c
  8380  0010EE  6FCB               	movwf	??_write_ASLBoron_test& (0+255),b
  8381  0010F0  6BCC               	clrf	(??_write_ASLBoron_test+1)& (0+255),b
  8382  0010F2  51CB               	movf	??_write_ASLBoron_test& (0+255),w,b
  8383  0010F4  5DCF               	subwf	write_ASLBoron_test@i& (0+255),w,b
  8384  0010F6  51D0               	movf	(write_ASLBoron_test@i+1)& (0+255),w,b
  8385  0010F8  0A80               	xorlw	128
  8386  0010FA  6FCD               	movwf	(??_write_ASLBoron_test+2)& (0+255),b
  8387  0010FC  51CC               	movf	(??_write_ASLBoron_test+1)& (0+255),w,b
  8388  0010FE  0A80               	xorlw	128
  8389  001100  59CD               	subwfb	(??_write_ASLBoron_test+2)& (0+255),w,b
  8390  001102  B0D8               	btfsc	status,0,c
  8391  001104  0012               	return	
  8392  001106  D67C               	goto	l1052
  8393  001108                     __end_of_write_ASLBoron_test:
  8394                           	opt stack 0
  8395                           tblptru	equ	0xFF8
  8396                           tblptrh	equ	0xFF7
  8397                           tblptrl	equ	0xFF6
  8398                           tablat	equ	0xFF5
  8399                           prodh	equ	0xFF4
  8400                           prodl	equ	0xFF3
  8401                           intcon	equ	0xFF2
  8402                           postinc0	equ	0xFEE
  8403                           wreg	equ	0xFE8
  8404                           indf1	equ	0xFE7
  8405                           postinc1	equ	0xFE6
  8406                           postdec1	equ	0xFE5
  8407                           fsr1h	equ	0xFE2
  8408                           fsr1l	equ	0xFE1
  8409                           indf2	equ	0xFDF
  8410                           postinc2	equ	0xFDE
  8411                           fsr2h	equ	0xFDA
  8412                           fsr2l	equ	0xFD9
  8413                           status	equ	0xFD8
  8414                           
  8415 ;; *************** function _ASLB_ZTCReferenceCurrent *****************
  8416 ;; Defined at:
  8417 ;;		line 719 in file "HX_ASL_BORON.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
  8420 ;;		 -> hx_mainData(61), 
  8421 ;; Auto vars:     Size  Location     Type
  8422 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
  8423 ;;  rx_index        1    4[BANK0 ] unsigned char 
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      void 
  8426 ;; Registers used:
  8427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8433 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8434 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8436 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8437 ;;Total ram usage:       74 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    8
  8440 ;; This function calls:
  8441 ;;		_setupCmdReadbackPkt
  8442 ;; This function is called by:
  8443 ;;		_write_ASLBoron_test
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           	psect	text15
  8448  003B0C                     __ptext15:
  8449                           	opt stack 0
  8450  003B0C                     _ASLB_ZTCReferenceCurrent:
  8451                           	opt stack 20
  8452                           
  8453                           ;HX_ASL_BORON.c: 727: uint8_t rx_index = 0;
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;incstack = 0
  8457  003B0C  0E00               	movlw	0
  8458  003B0E  0100               	movlb	0	; () banked
  8459  003B10  6F64               	movwf	ASLB_ZTCReferenceCurrent@rx_index& (0+255),b
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;HX_ASL_BORON.c: 730: LATCH_ADC_DATA |= 0x000E;
  8463  003B12  0E0E               	movlw	14
  8464  003B14  0105               	movlb	5	; () banked
  8465  003B16  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
  8466  003B18  0E00               	movlw	0
  8467  003B1A  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
  8468  003B1C  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
  8469  003B1E  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
  8470                           
  8471                           ; BSR set to: 5
  8472                           ;HX_ASL_BORON.c: 731: LATCH_ADC_DATA &= 0xFFFE;
  8473  003B20  0EFE               	movlw	254
  8474  003B22  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
  8475  003B24  0EFF               	movlw	255
  8476  003B26  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
  8477  003B28  0E00               	movlw	0
  8478  003B2A  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
  8479  003B2C  0E00               	movlw	0
  8480  003B2E  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
  8481                           
  8482                           ; BSR set to: 5
  8483                           ;HX_ASL_BORON.c: 733: txRxPkt cmdReadbackPkt;
  8484                           ;HX_ASL_BORON.c: 734: setupCmdReadbackPkt(&cmdReadbackPkt);
  8485  003B30  0E65               	movlw	low ASLB_ZTCReferenceCurrent@cmdReadbackPkt
  8486  003B32  0100               	movlb	0	; () banked
  8487  003B34  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  8488  003B36  0E00               	movlw	high ASLB_ZTCReferenceCurrent@cmdReadbackPkt
  8489  003B38  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  8490  003B3A  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
  8491  003B3E  0012               	return		;funcret
  8492  003B40                     __end_of_ASLB_ZTCReferenceCurrent:
  8493                           	opt stack 0
  8494                           tblptru	equ	0xFF8
  8495                           tblptrh	equ	0xFF7
  8496                           tblptrl	equ	0xFF6
  8497                           tablat	equ	0xFF5
  8498                           prodh	equ	0xFF4
  8499                           prodl	equ	0xFF3
  8500                           intcon	equ	0xFF2
  8501                           postinc0	equ	0xFEE
  8502                           wreg	equ	0xFE8
  8503                           indf1	equ	0xFE7
  8504                           postinc1	equ	0xFE6
  8505                           postdec1	equ	0xFE5
  8506                           fsr1h	equ	0xFE2
  8507                           fsr1l	equ	0xFE1
  8508                           indf2	equ	0xFDF
  8509                           postinc2	equ	0xFDE
  8510                           fsr2h	equ	0xFDA
  8511                           fsr2l	equ	0xFD9
  8512                           status	equ	0xFD8
  8513                           
  8514 ;; *************** function _ASLB_VaricapDACVoltage *****************
  8515 ;; Defined at:
  8516 ;;		line 611 in file "HX_ASL_BORON.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
  8519 ;;		 -> hx_mainData(61), 
  8520 ;; Auto vars:     Size  Location     Type
  8521 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
  8522 ;;  rx_index        1    4[BANK0 ] unsigned char 
  8523 ;; Return value:  Size  Location     Type
  8524 ;;                  1    wreg      void 
  8525 ;; Registers used:
  8526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 0/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8532 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8533 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8535 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8536 ;;Total ram usage:       74 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; Hardware stack levels required when called:    8
  8539 ;; This function calls:
  8540 ;;		_setupCmdReadbackPkt
  8541 ;; This function is called by:
  8542 ;;		_write_ASLBoron_test
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           	psect	text16
  8547  003B40                     __ptext16:
  8548                           	opt stack 0
  8549  003B40                     _ASLB_VaricapDACVoltage:
  8550                           	opt stack 20
  8551                           
  8552                           ;HX_ASL_BORON.c: 621: uint8_t rx_index = 0;
  8553                           
  8554                           ;incstack = 0
  8555  003B40  0E00               	movlw	0
  8556  003B42  0100               	movlb	0	; () banked
  8557  003B44  6F64               	movwf	ASLB_VaricapDACVoltage@rx_index& (0+255),b
  8558                           
  8559                           ; BSR set to: 0
  8560                           ;HX_ASL_BORON.c: 624: LATCH_ADC_DATA |= 0x0009;
  8561  003B46  0E09               	movlw	9
  8562  003B48  0105               	movlb	5	; () banked
  8563  003B4A  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
  8564  003B4C  0E00               	movlw	0
  8565  003B4E  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
  8566  003B50  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
  8567  003B52  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
  8568                           
  8569                           ; BSR set to: 5
  8570                           ;HX_ASL_BORON.c: 625: LATCH_ADC_DATA &= 0xFFF9;
  8571  003B54  0EF9               	movlw	249
  8572  003B56  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
  8573  003B58  0EFF               	movlw	255
  8574  003B5A  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
  8575  003B5C  0E00               	movlw	0
  8576  003B5E  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
  8577  003B60  0E00               	movlw	0
  8578  003B62  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
  8579                           
  8580                           ; BSR set to: 5
  8581                           ;HX_ASL_BORON.c: 627: txRxPkt cmdReadbackPkt;
  8582                           ;HX_ASL_BORON.c: 628: setupCmdReadbackPkt(&cmdReadbackPkt);
  8583  003B64  0E65               	movlw	low ASLB_VaricapDACVoltage@cmdReadbackPkt
  8584  003B66  0100               	movlb	0	; () banked
  8585  003B68  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  8586  003B6A  0E00               	movlw	high ASLB_VaricapDACVoltage@cmdReadbackPkt
  8587  003B6C  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  8588  003B6E  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
  8589  003B72  0012               	return		;funcret
  8590  003B74                     __end_of_ASLB_VaricapDACVoltage:
  8591                           	opt stack 0
  8592                           tblptru	equ	0xFF8
  8593                           tblptrh	equ	0xFF7
  8594                           tblptrl	equ	0xFF6
  8595                           tablat	equ	0xFF5
  8596                           prodh	equ	0xFF4
  8597                           prodl	equ	0xFF3
  8598                           intcon	equ	0xFF2
  8599                           postinc0	equ	0xFEE
  8600                           wreg	equ	0xFE8
  8601                           indf1	equ	0xFE7
  8602                           postinc1	equ	0xFE6
  8603                           postdec1	equ	0xFE5
  8604                           fsr1h	equ	0xFE2
  8605                           fsr1l	equ	0xFE1
  8606                           indf2	equ	0xFDF
  8607                           postinc2	equ	0xFDE
  8608                           fsr2h	equ	0xFDA
  8609                           fsr2l	equ	0xFD9
  8610                           status	equ	0xFD8
  8611                           
  8612 ;; *************** function _ASLB_VaricapBiasSteering *****************
  8613 ;; Defined at:
  8614 ;;		line 788 in file "HX_ASL_BORON.c"
  8615 ;; Parameters:    Size  Location     Type
  8616 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
  8617 ;;		 -> hx_mainData(61), 
  8618 ;; Auto vars:     Size  Location     Type
  8619 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
  8620 ;;  rx_index        1    4[BANK0 ] unsigned char 
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  1    wreg      void 
  8623 ;; Registers used:
  8624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8625 ;; Tracked objects:
  8626 ;;		On entry : 0/0
  8627 ;;		On exit  : 0/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8630 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8631 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8633 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8634 ;;Total ram usage:       74 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; Hardware stack levels required when called:    8
  8637 ;; This function calls:
  8638 ;;		_setupCmdReadbackPkt
  8639 ;; This function is called by:
  8640 ;;		_write_ASLBoron_test
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644                           	psect	text17
  8645  004008                     __ptext17:
  8646                           	opt stack 0
  8647  004008                     _ASLB_VaricapBiasSteering:
  8648                           	opt stack 20
  8649                           
  8650                           ;HX_ASL_BORON.c: 794: uint8_t rx_index = 0;
  8651                           
  8652                           ;incstack = 0
  8653  004008  0E00               	movlw	0
  8654  00400A  0100               	movlb	0	; () banked
  8655  00400C  6F64               	movwf	ASLB_VaricapBiasSteering@rx_index& (0+255),b
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;HX_ASL_BORON.c: 797: txRxPkt cmdReadbackPkt;
  8659                           ;HX_ASL_BORON.c: 798: setupCmdReadbackPkt(&cmdReadbackPkt);
  8660  00400E  0E65               	movlw	low ASLB_VaricapBiasSteering@cmdReadbackPkt
  8661  004010  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  8662  004012  0E00               	movlw	high ASLB_VaricapBiasSteering@cmdReadbackPkt
  8663  004014  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  8664  004016  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
  8665  00401A  0012               	return		;funcret
  8666  00401C                     __end_of_ASLB_VaricapBiasSteering:
  8667                           	opt stack 0
  8668                           tblptru	equ	0xFF8
  8669                           tblptrh	equ	0xFF7
  8670                           tblptrl	equ	0xFF6
  8671                           tablat	equ	0xFF5
  8672                           prodh	equ	0xFF4
  8673                           prodl	equ	0xFF3
  8674                           intcon	equ	0xFF2
  8675                           postinc0	equ	0xFEE
  8676                           wreg	equ	0xFE8
  8677                           indf1	equ	0xFE7
  8678                           postinc1	equ	0xFE6
  8679                           postdec1	equ	0xFE5
  8680                           fsr1h	equ	0xFE2
  8681                           fsr1l	equ	0xFE1
  8682                           indf2	equ	0xFDF
  8683                           postinc2	equ	0xFDE
  8684                           fsr2h	equ	0xFDA
  8685                           fsr2l	equ	0xFD9
  8686                           status	equ	0xFD8
  8687                           
  8688 ;; *************** function _ASLB_TempSetDACVoltage *****************
  8689 ;; Defined at:
  8690 ;;		line 631 in file "HX_ASL_BORON.c"
  8691 ;; Parameters:    Size  Location     Type
  8692 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
  8693 ;;		 -> hx_mainData(61), 
  8694 ;; Auto vars:     Size  Location     Type
  8695 ;;  i               2   76[BANK0 ] int 
  8696 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
  8697 ;;  rx_index        1    4[BANK0 ] unsigned char 
  8698 ;; Return value:  Size  Location     Type
  8699 ;;                  1    wreg      void 
  8700 ;; Registers used:
  8701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8702 ;; Tracked objects:
  8703 ;;		On entry : 0/0
  8704 ;;		On exit  : 0/0
  8705 ;;		Unchanged: 0/0
  8706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8707 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8708 ;;      Locals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8710 ;;      Totals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8711 ;;Total ram usage:       76 bytes
  8712 ;; Hardware stack levels used:    1
  8713 ;; Hardware stack levels required when called:    8
  8714 ;; This function calls:
  8715 ;;		_setTempCtrlDAC
  8716 ;;		_setupCmdReadbackPkt
  8717 ;; This function is called by:
  8718 ;;		_write_ASLBoron_test
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722                           	psect	text18
  8723  003494                     __ptext18:
  8724                           	opt stack 0
  8725  003494                     _ASLB_TempSetDACVoltage:
  8726                           	opt stack 20
  8727                           
  8728                           ;HX_ASL_BORON.c: 641: uint8_t rx_index = 0;
  8729                           
  8730                           ;incstack = 0
  8731  003494  0E00               	movlw	0
  8732  003496  0100               	movlb	0	; () banked
  8733  003498  6F64               	movwf	ASLB_TempSetDACVoltage@rx_index& (0+255),b
  8734                           
  8735                           ; BSR set to: 0
  8736                           ;HX_ASL_BORON.c: 644: txRxPkt cmdReadbackPkt;
  8737                           ;HX_ASL_BORON.c: 645: setupCmdReadbackPkt(&cmdReadbackPkt);
  8738  00349A  0E65               	movlw	low ASLB_TempSetDACVoltage@cmdReadbackPkt
  8739  00349C  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  8740  00349E  0E00               	movlw	high ASLB_TempSetDACVoltage@cmdReadbackPkt
  8741  0034A0  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  8742  0034A2  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
  8743                           
  8744                           ;HX_ASL_BORON.c: 648: for (int i = 0; i < 4096; i += 819)
  8745  0034A6  0E00               	movlw	0
  8746  0034A8  0100               	movlb	0	; () banked
  8747  0034AA  6FAD               	movwf	(ASLB_TempSetDACVoltage@i+1)& (0+255),b
  8748  0034AC  0E00               	movlw	0
  8749  0034AE  6FAC               	movwf	ASLB_TempSetDACVoltage@i& (0+255),b
  8750  0034B0                     l10557:
  8751                           
  8752                           ; BSR set to: 0
  8753  0034B0  BFAD               	btfsc	(ASLB_TempSetDACVoltage@i+1)& (0+255),7,b
  8754  0034B2  D004               	goto	l1149
  8755  0034B4  0E10               	movlw	16
  8756  0034B6  5DAD               	subwf	(ASLB_TempSetDACVoltage@i+1)& (0+255),w,b
  8757  0034B8  B0D8               	btfsc	status,0,c
  8758  0034BA  0012               	return	
  8759  0034BC                     l1149:
  8760                           
  8761                           ; BSR set to: 0
  8762                           ;HX_ASL_BORON.c: 649: {
  8763                           ;HX_ASL_BORON.c: 650: if (!setTempCtrlDAC(i))
  8764                           
  8765                           ; BSR set to: 0
  8766  0034BC  C0AC  F060         	movff	ASLB_TempSetDACVoltage@i,setTempCtrlDAC@value12bit
  8767  0034C0  C0AD  F061         	movff	ASLB_TempSetDACVoltage@i+1,setTempCtrlDAC@value12bit+1
  8768  0034C4  ECF7  F01E         	call	_setTempCtrlDAC	;wreg free
  8769  0034C8  0900               	iorlw	0
  8770  0034CA  B4D8               	btfsc	status,2,c
  8771  0034CC  0012               	return	
  8772                           
  8773                           ;HX_ASL_BORON.c: 654: }
  8774                           ;HX_ASL_BORON.c: 657: LATCH_ADC_DATA |= 0x000B;
  8775                           
  8776                           ;HX_ASL_BORON.c: 651: {
  8777                           ;HX_ASL_BORON.c: 653: break;
  8778  0034CE  0E0B               	movlw	11
  8779  0034D0  0105               	movlb	5	; () banked
  8780  0034D2  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
  8781  0034D4  0E00               	movlw	0
  8782  0034D6  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
  8783  0034D8  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
  8784  0034DA  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
  8785                           
  8786                           ;HX_ASL_BORON.c: 658: LATCH_ADC_DATA &= 0xFFFB;
  8787  0034DC  0EFB               	movlw	251
  8788  0034DE  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
  8789  0034E0  0EFF               	movlw	255
  8790  0034E2  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
  8791  0034E4  0E00               	movlw	0
  8792  0034E6  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
  8793  0034E8  0E00               	movlw	0
  8794  0034EA  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
  8795  0034EC  0100               	movlb	0	; () banked
  8796  0034EE  0E33               	movlw	51
  8797  0034F0  27AC               	addwf	ASLB_TempSetDACVoltage@i& (0+255),f,b
  8798  0034F2  0E03               	movlw	3
  8799  0034F4  23AD               	addwfc	(ASLB_TempSetDACVoltage@i+1)& (0+255),f,b
  8800  0034F6  D7DC               	goto	l10557
  8801  0034F8                     __end_of_ASLB_TempSetDACVoltage:
  8802                           	opt stack 0
  8803                           tblptru	equ	0xFF8
  8804                           tblptrh	equ	0xFF7
  8805                           tblptrl	equ	0xFF6
  8806                           tablat	equ	0xFF5
  8807                           prodh	equ	0xFF4
  8808                           prodl	equ	0xFF3
  8809                           intcon	equ	0xFF2
  8810                           postinc0	equ	0xFEE
  8811                           wreg	equ	0xFE8
  8812                           indf1	equ	0xFE7
  8813                           postinc1	equ	0xFE6
  8814                           postdec1	equ	0xFE5
  8815                           fsr1h	equ	0xFE2
  8816                           fsr1l	equ	0xFE1
  8817                           indf2	equ	0xFDF
  8818                           postinc2	equ	0xFDE
  8819                           fsr2h	equ	0xFDA
  8820                           fsr2l	equ	0xFD9
  8821                           status	equ	0xFD8
  8822                           
  8823 ;; *************** function _setTempCtrlDAC *****************
  8824 ;; Defined at:
  8825 ;;		line 1145 in file "HX_ASL_BORON.c"
  8826 ;; Parameters:    Size  Location     Type
  8827 ;;  value12bit      2    0[BANK0 ] unsigned int 
  8828 ;; Auto vars:     Size  Location     Type
  8829 ;;		None
  8830 ;; Return value:  Size  Location     Type
  8831 ;;                  1    wreg      unsigned char 
  8832 ;; Registers used:
  8833 ;;		wreg, status,2, status,0
  8834 ;; Tracked objects:
  8835 ;;		On entry : 0/0
  8836 ;;		On exit  : 0/0
  8837 ;;		Unchanged: 0/0
  8838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8839 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8842 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8843 ;;Total ram usage:        2 bytes
  8844 ;; Hardware stack levels used:    1
  8845 ;; Hardware stack levels required when called:    7
  8846 ;; This function calls:
  8847 ;;		Nothing
  8848 ;; This function is called by:
  8849 ;;		_ASLB_TempSetDACVoltage
  8850 ;; This function uses a non-reentrant model
  8851 ;;
  8852                           
  8853                           	psect	text19
  8854  003DEE                     __ptext19:
  8855                           	opt stack 0
  8856  003DEE                     _setTempCtrlDAC:
  8857                           	opt stack 20
  8858                           
  8859                           ;HX_ASL_BORON.c: 1147: if (value12bit > 4095)
  8860                           
  8861                           ;incstack = 0
  8862  003DEE  0E10               	movlw	16
  8863  003DF0  0100               	movlb	0	; () banked
  8864  003DF2  5D61               	subwf	(setTempCtrlDAC@value12bit+1)& (0+255),w,b
  8865  003DF4  A0D8               	btfss	status,0,c
  8866  003DF6  D002               	goto	l1247
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;HX_ASL_BORON.c: 1148: {
  8870                           ;HX_ASL_BORON.c: 1149: return 0;
  8871  003DF8  0E00               	movlw	0
  8872                           
  8873                           ; BSR set to: 0
  8874  003DFA  0012               	return	
  8875  003DFC                     l1247:
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;HX_ASL_BORON.c: 1150: }
  8879                           ;HX_ASL_BORON.c: 1154: LATCH_OVEN_DATA |= 0x0040;
  8880                           
  8881                           ; BSR set to: 0
  8882  003DFC  0102               	movlb	2	; () banked
  8883  003DFE  8DE2               	bsf	_LATCH_OVEN_DATA& (0+255),6,b
  8884                           
  8885                           ;HX_ASL_BORON.c: 1155: LATCH_OVEN_DATA |= 0x0080;
  8886  003E00  8FE2               	bsf	_LATCH_OVEN_DATA& (0+255),7,b
  8887                           
  8888                           ;HX_ASL_BORON.c: 1158: LATCH_BIAS_DATA |= 0x0001;
  8889  003E02  0105               	movlb	5	; () banked
  8890  003E04  81E1               	bsf	_LATCH_BIAS_DATA& (0+255),0,b
  8891                           
  8892                           ; BSR set to: 5
  8893                           ;HX_ASL_BORON.c: 1161: LATCH_HEAT_DAC_DATA = value12bit;
  8894  003E06  C060  F5E9         	movff	setTempCtrlDAC@value12bit,_LATCH_HEAT_DAC_DATA
  8895  003E0A  C061  F5EA         	movff	setTempCtrlDAC@value12bit+1,_LATCH_HEAT_DAC_DATA+1
  8896  003E0E  6BEB               	clrf	(_LATCH_HEAT_DAC_DATA+2)& (0+255),b
  8897  003E10  6BEC               	clrf	(_LATCH_HEAT_DAC_DATA+3)& (0+255),b
  8898                           
  8899                           ; BSR set to: 5
  8900                           ;HX_ASL_BORON.c: 1165: return 1;
  8901  003E12  0E01               	movlw	1
  8902  003E14  0012               	return	
  8903  003E16                     __end_of_setTempCtrlDAC:
  8904                           	opt stack 0
  8905                           tblptru	equ	0xFF8
  8906                           tblptrh	equ	0xFF7
  8907                           tblptrl	equ	0xFF6
  8908                           tablat	equ	0xFF5
  8909                           prodh	equ	0xFF4
  8910                           prodl	equ	0xFF3
  8911                           intcon	equ	0xFF2
  8912                           postinc0	equ	0xFEE
  8913                           wreg	equ	0xFE8
  8914                           indf1	equ	0xFE7
  8915                           postinc1	equ	0xFE6
  8916                           postdec1	equ	0xFE5
  8917                           fsr1h	equ	0xFE2
  8918                           fsr1l	equ	0xFE1
  8919                           indf2	equ	0xFDF
  8920                           postinc2	equ	0xFDE
  8921                           fsr2h	equ	0xFDA
  8922                           fsr2l	equ	0xFD9
  8923                           status	equ	0xFD8
  8924                           
  8925 ;; *************** function _ASLB_SheetResistance *****************
  8926 ;; Defined at:
  8927 ;;		line 347 in file "HX_ASL_BORON.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;  rxBuffer        2  100[BANK0 ] PTR unsigned char 
  8930 ;;		 -> hx_mainData(61), 
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  rx_index        1  102[BANK0 ] unsigned char 
  8933 ;; Return value:  Size  Location     Type
  8934 ;;                  1    wreg      void 
  8935 ;; Registers used:
  8936 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8937 ;; Tracked objects:
  8938 ;;		On entry : 0/0
  8939 ;;		On exit  : 0/0
  8940 ;;		Unchanged: 0/0
  8941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8942 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8943 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8945 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8946 ;;Total ram usage:        3 bytes
  8947 ;; Hardware stack levels used:    1
  8948 ;; Hardware stack levels required when called:   11
  8949 ;; This function calls:
  8950 ;;		_checkAndSendLatchData
  8951 ;; This function is called by:
  8952 ;;		_write_ASLBoron_test
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           	psect	text20
  8957  0031C0                     __ptext20:
  8958                           	opt stack 0
  8959  0031C0                     _ASLB_SheetResistance:
  8960                           	opt stack 17
  8961                           
  8962                           ;HX_ASL_BORON.c: 366: uint8_t rx_index = 0;
  8963                           
  8964                           ;incstack = 0
  8965  0031C0  0E00               	movlw	0
  8966  0031C2  0100               	movlb	0	; () banked
  8967  0031C4  6FC6               	movwf	ASLB_SheetResistance@rx_index& (0+255),b
  8968                           
  8969                           ;HX_ASL_BORON.c: 369: tsld.LATCH_OSC0_DATA = 0x0000;
  8970  0031C6  0E00               	movlw	0
  8971  0031C8  0106               	movlb	6	; () banked
  8972  0031CA  6FD6               	movwf	(_tsld+1)& (0+255),b
  8973  0031CC  0E00               	movlw	0
  8974  0031CE  6FD5               	movwf	_tsld& (0+255),b
  8975                           
  8976                           ;HX_ASL_BORON.c: 370: tsld.LATCH_OSC1_DATA = 0x0000;
  8977  0031D0  0E00               	movlw	0
  8978  0031D2  6FD8               	movwf	(_tsld+3)& (0+255),b
  8979  0031D4  0E00               	movlw	0
  8980  0031D6  6FD7               	movwf	(_tsld+2)& (0+255),b
  8981                           
  8982                           ;HX_ASL_BORON.c: 371: tsld.LATCH_OSC2_DATA = 0x0000;
  8983  0031D8  0E00               	movlw	0
  8984  0031DA  6FDA               	movwf	(_tsld+5)& (0+255),b
  8985  0031DC  0E00               	movlw	0
  8986  0031DE  6FD9               	movwf	(_tsld+4)& (0+255),b
  8987                           
  8988                           ;HX_ASL_BORON.c: 372: tsld.LATCH_ANALOG_DATA = 0x0000;
  8989  0031E0  0E00               	movlw	0
  8990  0031E2  6FDC               	movwf	(_tsld+7)& (0+255),b
  8991  0031E4  0E00               	movlw	0
  8992  0031E6  6FDB               	movwf	(_tsld+6)& (0+255),b
  8993                           
  8994                           ;HX_ASL_BORON.c: 373: tsld.LATCH_OVEN_DATA = 0x0000;
  8995  0031E8  0E00               	movlw	0
  8996  0031EA  6FDE               	movwf	(_tsld+9)& (0+255),b
  8997  0031EC  0E00               	movlw	0
  8998  0031EE  6FDD               	movwf	(_tsld+8)& (0+255),b
  8999                           
  9000                           ;HX_ASL_BORON.c: 374: tsld.LATCH_HEAT_DAC_DATA = 0x0000;
  9001  0031F0  0E00               	movlw	0
  9002  0031F2  6FE0               	movwf	(_tsld+11)& (0+255),b
  9003  0031F4  0E00               	movlw	0
  9004  0031F6  6FDF               	movwf	(_tsld+10)& (0+255),b
  9005                           
  9006                           ;HX_ASL_BORON.c: 375: tsld.LATCH_VARACTOR_DAC_DATA = 0x0000;
  9007  0031F8  0E00               	movlw	0
  9008  0031FA  6FE2               	movwf	(_tsld+13)& (0+255),b
  9009  0031FC  0E00               	movlw	0
  9010  0031FE  6FE1               	movwf	(_tsld+12)& (0+255),b
  9011                           
  9012                           ;HX_ASL_BORON.c: 376: tsld.LATCH_BIAS_DATA = 0x0000;
  9013  003200  0E00               	movlw	0
  9014  003202  6FE4               	movwf	(_tsld+15)& (0+255),b
  9015  003204  0E00               	movlw	0
  9016  003206  6FE3               	movwf	(_tsld+14)& (0+255),b
  9017                           
  9018                           ;HX_ASL_BORON.c: 377: tsld.LATCH_CMOS_DATA = 0x0000;
  9019  003208  0E00               	movlw	0
  9020  00320A  6FE6               	movwf	(_tsld+17)& (0+255),b
  9021  00320C  0E00               	movlw	0
  9022  00320E  6FE5               	movwf	(_tsld+16)& (0+255),b
  9023                           
  9024                           ;HX_ASL_BORON.c: 378: tsld.LATCH_ADC_DATA = 0x0000;
  9025  003210  0E00               	movlw	0
  9026  003212  6FE8               	movwf	(_tsld+19)& (0+255),b
  9027  003214  0E00               	movlw	0
  9028  003216  6FE7               	movwf	(_tsld+18)& (0+255),b
  9029                           
  9030                           ;HX_ASL_BORON.c: 379: tsld.LATCH_ADC_MUX_DATA = 0x0000;
  9031  003218  0E00               	movlw	0
  9032  00321A  6FEA               	movwf	(_tsld+21)& (0+255),b
  9033  00321C  0E00               	movlw	0
  9034  00321E  6FE9               	movwf	(_tsld+20)& (0+255),b
  9035                           
  9036                           ;HX_ASL_BORON.c: 380: tsld.LATCH_OCXO_DIVISOR_DATA = 0x0000;
  9037  003220  0E00               	movlw	0
  9038  003222  6FEC               	movwf	(_tsld+23)& (0+255),b
  9039  003224  0E00               	movlw	0
  9040  003226  6FEB               	movwf	(_tsld+22)& (0+255),b
  9041                           
  9042                           ;HX_ASL_BORON.c: 381: tsld.LATCH_CLOCK_SELECT_DATA = 0x0000;
  9043  003228  0E00               	movlw	0
  9044  00322A  6FEE               	movwf	(_tsld+25)& (0+255),b
  9045  00322C  0E00               	movlw	0
  9046  00322E  6FED               	movwf	(_tsld+24)& (0+255),b
  9047                           
  9048                           ; BSR set to: 6
  9049                           ;HX_ASL_BORON.c: 383: if (!checkAndSendLatchData(rxBuffer, &rx_index))
  9050  003230  C0C4  F072         	movff	ASLB_SheetResistance@rxBuffer,checkAndSendLatchData@rxBuffer
  9051  003234  C0C5  F073         	movff	ASLB_SheetResistance@rxBuffer+1,checkAndSendLatchData@rxBuffer+1
  9052  003238  0EC6               	movlw	low ASLB_SheetResistance@rx_index
  9053  00323A  0100               	movlb	0	; () banked
  9054  00323C  6F74               	movwf	checkAndSendLatchData@rx_index& (0+255),b
  9055  00323E  0E00               	movlw	high ASLB_SheetResistance@rx_index
  9056  003240  6F75               	movwf	(checkAndSendLatchData@rx_index+1)& (0+255),b
  9057  003242  EC76  F000         	call	_checkAndSendLatchData	;wreg free
  9058  003246  0900               	iorlw	0
  9059  003248  B4D8               	btfsc	status,2,c
  9060  00324A  0012               	return	
  9061                           
  9062                           ;HX_ASL_BORON.c: 387: }
  9063                           ;HX_ASL_BORON.c: 392: hx_mainDataIndex += rx_index;
  9064                           
  9065                           ;HX_ASL_BORON.c: 384: {
  9066                           ;HX_ASL_BORON.c: 386: return;
  9067  00324C  0100               	movlb	0	; () banked
  9068  00324E  51C6               	movf	ASLB_SheetResistance@rx_index& (0+255),w,b
  9069  003250  263F               	addwf	_hx_mainDataIndex,f,c
  9070  003252  0012               	return		;funcret
  9071  003254                     __end_of_ASLB_SheetResistance:
  9072                           	opt stack 0
  9073                           tblptru	equ	0xFF8
  9074                           tblptrh	equ	0xFF7
  9075                           tblptrl	equ	0xFF6
  9076                           tablat	equ	0xFF5
  9077                           prodh	equ	0xFF4
  9078                           prodl	equ	0xFF3
  9079                           intcon	equ	0xFF2
  9080                           postinc0	equ	0xFEE
  9081                           wreg	equ	0xFE8
  9082                           indf1	equ	0xFE7
  9083                           postinc1	equ	0xFE6
  9084                           postdec1	equ	0xFE5
  9085                           fsr1h	equ	0xFE2
  9086                           fsr1l	equ	0xFE1
  9087                           indf2	equ	0xFDF
  9088                           postinc2	equ	0xFDE
  9089                           fsr2h	equ	0xFDA
  9090                           fsr2l	equ	0xFD9
  9091                           status	equ	0xFD8
  9092                           
  9093 ;; *************** function _checkAndSendLatchData *****************
  9094 ;; Defined at:
  9095 ;;		line 1243 in file "HX_ASL_BORON.c"
  9096 ;; Parameters:    Size  Location     Type
  9097 ;;  rxBuffer        2   18[BANK0 ] PTR unsigned char 
  9098 ;;		 -> hx_mainData(61), 
  9099 ;;  rx_index        2   20[BANK0 ] PTR unsigned char 
  9100 ;;		 -> ASLB_SheetResistance@rx_index(1), 
  9101 ;; Auto vars:     Size  Location     Type
  9102 ;;  clock_select   71    0[BANK10] struct TxRxPacket
  9103 ;;  readback_clo   71  142[BANK9 ] struct TxRxPacket
  9104 ;;  ocxo_divisor   71  142[BANK5 ] struct TxRxPacket
  9105 ;;  readback_ocx   71   71[BANK9 ] struct TxRxPacket
  9106 ;;  adc_mux_pkt    71   71[BANK5 ] struct TxRxPacket
  9107 ;;  readback_adc   71    0[BANK9 ] struct TxRxPacket
  9108 ;;  adc_pkt        71  142[BANK4 ] struct TxRxPacket
  9109 ;;  readback_adc   71  142[BANK8 ] struct TxRxPacket
  9110 ;;  cmos_pkt       71   71[BANK4 ] struct TxRxPacket
  9111 ;;  readback_cmo   71   71[BANK8 ] struct TxRxPacket
  9112 ;;  bias_pkt       71    0[BANK4 ] struct TxRxPacket
  9113 ;;  readback_bia   71    0[BANK8 ] struct TxRxPacket
  9114 ;;  varactor_dac   71  142[BANK3 ] struct TxRxPacket
  9115 ;;  readback_var   71  142[BANK7 ] struct TxRxPacket
  9116 ;;  heat_dac_pkt   71   71[BANK3 ] struct TxRxPacket
  9117 ;;  readback_hea   71   71[BANK7 ] struct TxRxPacket
  9118 ;;  oven_pkt       71    0[BANK3 ] struct TxRxPacket
  9119 ;;  readback_ove   71    0[BANK7 ] struct TxRxPacket
  9120 ;;  analog_pkt     71  142[BANK2 ] struct TxRxPacket
  9121 ;;  readback_ana   71  142[BANK6 ] struct TxRxPacket
  9122 ;;  osc2_pkt       71   71[BANK2 ] struct TxRxPacket
  9123 ;;  readback_osc   71   71[BANK6 ] struct TxRxPacket
  9124 ;;  osc1_pkt       71    0[BANK2 ] struct TxRxPacket
  9125 ;;  readback_osc   71    0[BANK6 ] struct TxRxPacket
  9126 ;;  osc0_pkt       71  162[BANK1 ] struct TxRxPacket
  9127 ;;  readback_osc   71    0[BANK5 ] struct TxRxPacket
  9128 ;;  stream         48   25[BANK0 ] PTR struct TxRxPacket[24
  9129 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
  9130 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
  9131 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
  9132 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
  9133 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
  9134 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
  9135 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
  9136 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
  9137 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
  9138 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
  9139 ;;  readbackPkts   24   73[BANK0 ] PTR struct TxRxPacket[12
  9140 ;;		 -> checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkA
      +ndSendLatchData@readback_adc_mux_pkt(71), checkAndSendLatchData@readback_adc_pkt(71), 
  9141 ;;		 -> checkAndSendLatchData@readback_cmos_pkt(71), checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@
      +readback_varactor_dac_pkt(71), checkAndSendLatchData@readback_heat_dac_pkt(71), 
  9142 ;;		 -> checkAndSendLatchData@readback_oven_pkt(71), checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchDat
      +a@readback_osc2_pkt(71), checkAndSendLatchData@readback_osc1_pkt(71), 
  9143 ;;		 -> checkAndSendLatchData@readback_osc0_pkt(71), 
  9144 ;;  latchSendCou    1   99[BANK0 ] unsigned char 
  9145 ;;  readbackSend    1   98[BANK0 ] unsigned char 
  9146 ;;  noError         1   97[BANK0 ] unsigned char 
  9147 ;;  stream_statu    1   24[BANK0 ] unsigned char 
  9148 ;; Return value:  Size  Location     Type
  9149 ;;                  1    wreg      unsigned char 
  9150 ;; Registers used:
  9151 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9152 ;; Tracked objects:
  9153 ;;		On entry : 0/0
  9154 ;;		On exit  : 0/0
  9155 ;;		Unchanged: 0/0
  9156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9157 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9158 ;;      Locals:         0      76      71     213     213     213     213     213     213     213     213      71       
      +0       0       0       0
  9159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9160 ;;      Totals:         0      82      71     213     213     213     213     213     213     213     213      71       
      +0       0       0       0
  9161 ;;Total ram usage:     1928 bytes
  9162 ;; Hardware stack levels used:    1
  9163 ;; Hardware stack levels required when called:   10
  9164 ;; This function calls:
  9165 ;;		_filterLatchPacketResponses
  9166 ;;		_setupCmdReadbackPkt
  9167 ;;		_setupLatchPkt
  9168 ;;		_streamBoronComm
  9169 ;; This function is called by:
  9170 ;;		_ASLB_SheetResistance
  9171 ;; This function uses a non-reentrant model
  9172 ;;
  9173                           
  9174                           	psect	text21
  9175  0000EC                     __ptext21:
  9176                           	opt stack 0
  9177  0000EC                     _checkAndSendLatchData:
  9178                           	opt stack 17
  9179                           
  9180                           ;HX_ASL_BORON.c: 1251: uint8_t noError = 0;
  9181                           
  9182                           ;incstack = 0
  9183  0000EC  0E00               	movlw	0
  9184  0000EE  0100               	movlb	0	; () banked
  9185  0000F0  6FC1               	movwf	checkAndSendLatchData@noError& (0+255),b
  9186                           
  9187                           ;HX_ASL_BORON.c: 1252: uint8_t latchSendCount = 0;
  9188  0000F2  0E00               	movlw	0
  9189  0000F4  6FC3               	movwf	checkAndSendLatchData@latchSendCount& (0+255),b
  9190                           
  9191                           ;HX_ASL_BORON.c: 1253: uint8_t readbackSendCount = 0;
  9192  0000F6  0E00               	movlw	0
  9193  0000F8  6FC2               	movwf	checkAndSendLatchData@readbackSendCount& (0+255),b
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;HX_ASL_BORON.c: 1255: txRxPkt* stream[(2*12)];
  9197                           ;HX_ASL_BORON.c: 1256: txRxPkt* readbackPkts[12];
  9198                           ;HX_ASL_BORON.c: 1257: uint8_t stream_status;
  9199                           ;HX_ASL_BORON.c: 1262: if (!(LATCH_OSC0_DATA & tsld.LATCH_OSC0_DATA))
  9200  0000FA  0105               	movlb	5	; () banked
  9201  0000FC  51F9               	movf	_LATCH_OSC0_DATA& (0+255),w,b
  9202  0000FE  0106               	movlb	6	; () banked
  9203  000100  15D5               	andwf	_tsld& (0+255),w,b
  9204  000102  0100               	movlb	0	; () banked
  9205  000104  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9206  000106  0105               	movlb	5	; () banked
  9207  000108  51FA               	movf	(_LATCH_OSC0_DATA+1)& (0+255),w,b
  9208  00010A  0106               	movlb	6	; () banked
  9209  00010C  15D6               	andwf	(_tsld+1)& (0+255),w,b
  9210  00010E  0100               	movlb	0	; () banked
  9211  000110  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9212  000112  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9213  000114  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9214  000116  A4D8               	btfss	status,2,c
  9215  000118  D043               	goto	l1269
  9216                           
  9217                           ; BSR set to: 0
  9218                           ;HX_ASL_BORON.c: 1263: {
  9219                           ;HX_ASL_BORON.c: 1265: LATCH_OSC0_DATA = tsld.LATCH_OSC0_DATA;
  9220  00011A  C6D5  F5F9         	movff	_tsld,_LATCH_OSC0_DATA
  9221  00011E  C6D6  F5FA         	movff	_tsld+1,_LATCH_OSC0_DATA+1
  9222  000122  0105               	movlb	5	; () banked
  9223  000124  6BFB               	clrf	(_LATCH_OSC0_DATA+2)& (0+255),b
  9224  000126  6BFC               	clrf	(_LATCH_OSC0_DATA+3)& (0+255),b
  9225                           
  9226                           ; BSR set to: 5
  9227                           ;HX_ASL_BORON.c: 1268: txRxPkt osc0_pkt;
  9228                           ;HX_ASL_BORON.c: 1271: setupLatchPkt(&osc0_pkt, LATCH_OSC0_DATA, 0x0);
  9229  000128  0EA2               	movlw	low checkAndSendLatchData@osc0_pkt
  9230  00012A  0100               	movlb	0	; () banked
  9231  00012C  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9232  00012E  0E01               	movlw	high checkAndSendLatchData@osc0_pkt
  9233  000130  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9234  000132  C5F9  F067         	movff	_LATCH_OSC0_DATA,setupLatchPkt@latch_data
  9235  000136  C5FA  F068         	movff	_LATCH_OSC0_DATA+1,setupLatchPkt@latch_data+1
  9236  00013A  0E00               	movlw	0
  9237  00013C  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9238  00013E  EC44  F017         	call	_setupLatchPkt	;wreg free
  9239                           
  9240                           ;HX_ASL_BORON.c: 1274: stream[latchSendCount++] = &osc0_pkt;
  9241  000142  0100               	movlb	0	; () banked
  9242  000144  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9243  000146  0D02               	mullw	2
  9244  000148  0E79               	movlw	low checkAndSendLatchData@stream
  9245  00014A  24F3               	addwf	prodl,w,c
  9246  00014C  6ED9               	movwf	fsr2l,c
  9247  00014E  0E00               	movlw	high checkAndSendLatchData@stream
  9248  000150  20F4               	addwfc	prodh,w,c
  9249  000152  6EDA               	movwf	fsr2h,c
  9250  000154  0EA2               	movlw	low checkAndSendLatchData@osc0_pkt
  9251  000156  6EDE               	movwf	postinc2,c
  9252  000158  0E01               	movlw	high checkAndSendLatchData@osc0_pkt
  9253  00015A  6EDD               	movwf	postdec2,c
  9254                           
  9255                           ; BSR set to: 0
  9256  00015C  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9257                           
  9258                           ; BSR set to: 0
  9259                           ;HX_ASL_BORON.c: 1277: txRxPkt readback_osc0_pkt;
  9260                           ;HX_ASL_BORON.c: 1278: setupCmdReadbackPkt(&readback_osc0_pkt);
  9261  00015E  0E00               	movlw	low checkAndSendLatchData@readback_osc0_pkt
  9262  000160  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9263  000162  0E05               	movlw	high checkAndSendLatchData@readback_osc0_pkt
  9264  000164  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9265  000166  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9266                           
  9267                           ;HX_ASL_BORON.c: 1279: stream[latchSendCount++] = &readback_osc0_pkt;
  9268  00016A  0100               	movlb	0	; () banked
  9269  00016C  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9270  00016E  0D02               	mullw	2
  9271  000170  0E79               	movlw	low checkAndSendLatchData@stream
  9272  000172  24F3               	addwf	prodl,w,c
  9273  000174  6ED9               	movwf	fsr2l,c
  9274  000176  0E00               	movlw	high checkAndSendLatchData@stream
  9275  000178  20F4               	addwfc	prodh,w,c
  9276  00017A  6EDA               	movwf	fsr2h,c
  9277  00017C  0E00               	movlw	low checkAndSendLatchData@readback_osc0_pkt
  9278  00017E  6EDE               	movwf	postinc2,c
  9279  000180  0E05               	movlw	high checkAndSendLatchData@readback_osc0_pkt
  9280  000182  6EDD               	movwf	postdec2,c
  9281                           
  9282                           ; BSR set to: 0
  9283  000184  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9284                           
  9285                           ; BSR set to: 0
  9286                           ;HX_ASL_BORON.c: 1282: readbackPkts[readbackSendCount++] = &readback_osc0_pkt;
  9287  000186  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9288  000188  0D02               	mullw	2
  9289  00018A  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9290  00018C  24F3               	addwf	prodl,w,c
  9291  00018E  6ED9               	movwf	fsr2l,c
  9292  000190  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9293  000192  20F4               	addwfc	prodh,w,c
  9294  000194  6EDA               	movwf	fsr2h,c
  9295  000196  0E00               	movlw	low checkAndSendLatchData@readback_osc0_pkt
  9296  000198  6EDE               	movwf	postinc2,c
  9297  00019A  0E05               	movlw	high checkAndSendLatchData@readback_osc0_pkt
  9298  00019C  6EDD               	movwf	postdec2,c
  9299                           
  9300                           ; BSR set to: 0
  9301  00019E  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9302  0001A0                     l1269:
  9303                           
  9304                           ; BSR set to: 0
  9305                           ;HX_ASL_BORON.c: 1283: }
  9306                           ;HX_ASL_BORON.c: 1285: if (!(LATCH_OSC1_DATA & tsld.LATCH_OSC1_DATA))
  9307                           
  9308                           ; BSR set to: 0
  9309  0001A0  0105               	movlb	5	; () banked
  9310  0001A2  51F5               	movf	_LATCH_OSC1_DATA& (0+255),w,b
  9311  0001A4  0106               	movlb	6	; () banked
  9312  0001A6  15D7               	andwf	(_tsld+2)& (0+255),w,b
  9313  0001A8  0100               	movlb	0	; () banked
  9314  0001AA  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9315  0001AC  0105               	movlb	5	; () banked
  9316  0001AE  51F6               	movf	(_LATCH_OSC1_DATA+1)& (0+255),w,b
  9317  0001B0  0106               	movlb	6	; () banked
  9318  0001B2  15D8               	andwf	(_tsld+3)& (0+255),w,b
  9319  0001B4  0100               	movlb	0	; () banked
  9320  0001B6  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9321  0001B8  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9322  0001BA  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9323  0001BC  A4D8               	btfss	status,2,c
  9324  0001BE  D043               	goto	l1270
  9325                           
  9326                           ; BSR set to: 0
  9327                           ;HX_ASL_BORON.c: 1286: {
  9328                           ;HX_ASL_BORON.c: 1287: LATCH_OSC1_DATA = tsld.LATCH_OSC1_DATA;
  9329  0001C0  C6D7  F5F5         	movff	_tsld+2,_LATCH_OSC1_DATA
  9330  0001C4  C6D8  F5F6         	movff	_tsld+3,_LATCH_OSC1_DATA+1
  9331  0001C8  0105               	movlb	5	; () banked
  9332  0001CA  6BF7               	clrf	(_LATCH_OSC1_DATA+2)& (0+255),b
  9333  0001CC  6BF8               	clrf	(_LATCH_OSC1_DATA+3)& (0+255),b
  9334                           
  9335                           ; BSR set to: 5
  9336                           ;HX_ASL_BORON.c: 1288: txRxPkt osc1_pkt;
  9337                           ;HX_ASL_BORON.c: 1289: setupLatchPkt(&osc1_pkt, LATCH_OSC1_DATA, 0x1);
  9338  0001CE  0E00               	movlw	low checkAndSendLatchData@osc1_pkt
  9339  0001D0  0100               	movlb	0	; () banked
  9340  0001D2  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9341  0001D4  0E02               	movlw	high checkAndSendLatchData@osc1_pkt
  9342  0001D6  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9343  0001D8  C5F5  F067         	movff	_LATCH_OSC1_DATA,setupLatchPkt@latch_data
  9344  0001DC  C5F6  F068         	movff	_LATCH_OSC1_DATA+1,setupLatchPkt@latch_data+1
  9345  0001E0  0E01               	movlw	1
  9346  0001E2  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9347  0001E4  EC44  F017         	call	_setupLatchPkt	;wreg free
  9348                           
  9349                           ;HX_ASL_BORON.c: 1290: stream[latchSendCount++] = &osc1_pkt;
  9350  0001E8  0100               	movlb	0	; () banked
  9351  0001EA  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9352  0001EC  0D02               	mullw	2
  9353  0001EE  0E79               	movlw	low checkAndSendLatchData@stream
  9354  0001F0  24F3               	addwf	prodl,w,c
  9355  0001F2  6ED9               	movwf	fsr2l,c
  9356  0001F4  0E00               	movlw	high checkAndSendLatchData@stream
  9357  0001F6  20F4               	addwfc	prodh,w,c
  9358  0001F8  6EDA               	movwf	fsr2h,c
  9359  0001FA  0E00               	movlw	low checkAndSendLatchData@osc1_pkt
  9360  0001FC  6EDE               	movwf	postinc2,c
  9361  0001FE  0E02               	movlw	high checkAndSendLatchData@osc1_pkt
  9362  000200  6EDD               	movwf	postdec2,c
  9363                           
  9364                           ; BSR set to: 0
  9365  000202  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;HX_ASL_BORON.c: 1291: txRxPkt readback_osc1_pkt;
  9369                           ;HX_ASL_BORON.c: 1292: setupCmdReadbackPkt(&readback_osc1_pkt);
  9370  000204  0E00               	movlw	low checkAndSendLatchData@readback_osc1_pkt
  9371  000206  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9372  000208  0E06               	movlw	high checkAndSendLatchData@readback_osc1_pkt
  9373  00020A  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9374  00020C  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9375                           
  9376                           ;HX_ASL_BORON.c: 1293: stream[latchSendCount++] = &readback_osc1_pkt;
  9377  000210  0100               	movlb	0	; () banked
  9378  000212  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9379  000214  0D02               	mullw	2
  9380  000216  0E79               	movlw	low checkAndSendLatchData@stream
  9381  000218  24F3               	addwf	prodl,w,c
  9382  00021A  6ED9               	movwf	fsr2l,c
  9383  00021C  0E00               	movlw	high checkAndSendLatchData@stream
  9384  00021E  20F4               	addwfc	prodh,w,c
  9385  000220  6EDA               	movwf	fsr2h,c
  9386  000222  0E00               	movlw	low checkAndSendLatchData@readback_osc1_pkt
  9387  000224  6EDE               	movwf	postinc2,c
  9388  000226  0E06               	movlw	high checkAndSendLatchData@readback_osc1_pkt
  9389  000228  6EDD               	movwf	postdec2,c
  9390                           
  9391                           ; BSR set to: 0
  9392  00022A  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9393                           
  9394                           ; BSR set to: 0
  9395                           ;HX_ASL_BORON.c: 1294: readbackPkts[readbackSendCount++] = &readback_osc1_pkt;
  9396  00022C  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9397  00022E  0D02               	mullw	2
  9398  000230  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9399  000232  24F3               	addwf	prodl,w,c
  9400  000234  6ED9               	movwf	fsr2l,c
  9401  000236  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9402  000238  20F4               	addwfc	prodh,w,c
  9403  00023A  6EDA               	movwf	fsr2h,c
  9404  00023C  0E00               	movlw	low checkAndSendLatchData@readback_osc1_pkt
  9405  00023E  6EDE               	movwf	postinc2,c
  9406  000240  0E06               	movlw	high checkAndSendLatchData@readback_osc1_pkt
  9407  000242  6EDD               	movwf	postdec2,c
  9408                           
  9409                           ; BSR set to: 0
  9410  000244  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9411  000246                     l1270:
  9412                           
  9413                           ; BSR set to: 0
  9414                           ;HX_ASL_BORON.c: 1295: }
  9415                           ;HX_ASL_BORON.c: 1297: if (!(LATCH_OSC2_DATA & tsld.LATCH_OSC2_DATA))
  9416                           
  9417                           ; BSR set to: 0
  9418  000246  0105               	movlb	5	; () banked
  9419  000248  51F1               	movf	_LATCH_OSC2_DATA& (0+255),w,b
  9420  00024A  0106               	movlb	6	; () banked
  9421  00024C  15D9               	andwf	(_tsld+4)& (0+255),w,b
  9422  00024E  0100               	movlb	0	; () banked
  9423  000250  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9424  000252  0105               	movlb	5	; () banked
  9425  000254  51F2               	movf	(_LATCH_OSC2_DATA+1)& (0+255),w,b
  9426  000256  0106               	movlb	6	; () banked
  9427  000258  15DA               	andwf	(_tsld+5)& (0+255),w,b
  9428  00025A  0100               	movlb	0	; () banked
  9429  00025C  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9430  00025E  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9431  000260  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9432  000262  A4D8               	btfss	status,2,c
  9433  000264  D043               	goto	l1271
  9434                           
  9435                           ; BSR set to: 0
  9436                           ;HX_ASL_BORON.c: 1298: {
  9437                           ;HX_ASL_BORON.c: 1299: LATCH_OSC2_DATA = tsld.LATCH_OSC2_DATA;
  9438  000266  C6D9  F5F1         	movff	_tsld+4,_LATCH_OSC2_DATA
  9439  00026A  C6DA  F5F2         	movff	_tsld+5,_LATCH_OSC2_DATA+1
  9440  00026E  0105               	movlb	5	; () banked
  9441  000270  6BF3               	clrf	(_LATCH_OSC2_DATA+2)& (0+255),b
  9442  000272  6BF4               	clrf	(_LATCH_OSC2_DATA+3)& (0+255),b
  9443                           
  9444                           ; BSR set to: 5
  9445                           ;HX_ASL_BORON.c: 1300: txRxPkt osc2_pkt;
  9446                           ;HX_ASL_BORON.c: 1301: setupLatchPkt(&osc2_pkt, LATCH_OSC2_DATA, 0x2);
  9447  000274  0E47               	movlw	low checkAndSendLatchData@osc2_pkt
  9448  000276  0100               	movlb	0	; () banked
  9449  000278  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9450  00027A  0E02               	movlw	high checkAndSendLatchData@osc2_pkt
  9451  00027C  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9452  00027E  C5F1  F067         	movff	_LATCH_OSC2_DATA,setupLatchPkt@latch_data
  9453  000282  C5F2  F068         	movff	_LATCH_OSC2_DATA+1,setupLatchPkt@latch_data+1
  9454  000286  0E02               	movlw	2
  9455  000288  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9456  00028A  EC44  F017         	call	_setupLatchPkt	;wreg free
  9457                           
  9458                           ;HX_ASL_BORON.c: 1302: stream[latchSendCount++] = &osc2_pkt;
  9459  00028E  0100               	movlb	0	; () banked
  9460  000290  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9461  000292  0D02               	mullw	2
  9462  000294  0E79               	movlw	low checkAndSendLatchData@stream
  9463  000296  24F3               	addwf	prodl,w,c
  9464  000298  6ED9               	movwf	fsr2l,c
  9465  00029A  0E00               	movlw	high checkAndSendLatchData@stream
  9466  00029C  20F4               	addwfc	prodh,w,c
  9467  00029E  6EDA               	movwf	fsr2h,c
  9468  0002A0  0E47               	movlw	low checkAndSendLatchData@osc2_pkt
  9469  0002A2  6EDE               	movwf	postinc2,c
  9470  0002A4  0E02               	movlw	high checkAndSendLatchData@osc2_pkt
  9471  0002A6  6EDD               	movwf	postdec2,c
  9472                           
  9473                           ; BSR set to: 0
  9474  0002A8  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9475                           
  9476                           ; BSR set to: 0
  9477                           ;HX_ASL_BORON.c: 1303: txRxPkt readback_osc2_pkt;
  9478                           ;HX_ASL_BORON.c: 1304: setupCmdReadbackPkt(&readback_osc2_pkt);
  9479  0002AA  0E47               	movlw	low checkAndSendLatchData@readback_osc2_pkt
  9480  0002AC  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9481  0002AE  0E06               	movlw	high checkAndSendLatchData@readback_osc2_pkt
  9482  0002B0  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9483  0002B2  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9484                           
  9485                           ;HX_ASL_BORON.c: 1305: stream[latchSendCount++] = &readback_osc2_pkt;
  9486  0002B6  0100               	movlb	0	; () banked
  9487  0002B8  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9488  0002BA  0D02               	mullw	2
  9489  0002BC  0E79               	movlw	low checkAndSendLatchData@stream
  9490  0002BE  24F3               	addwf	prodl,w,c
  9491  0002C0  6ED9               	movwf	fsr2l,c
  9492  0002C2  0E00               	movlw	high checkAndSendLatchData@stream
  9493  0002C4  20F4               	addwfc	prodh,w,c
  9494  0002C6  6EDA               	movwf	fsr2h,c
  9495  0002C8  0E47               	movlw	low checkAndSendLatchData@readback_osc2_pkt
  9496  0002CA  6EDE               	movwf	postinc2,c
  9497  0002CC  0E06               	movlw	high checkAndSendLatchData@readback_osc2_pkt
  9498  0002CE  6EDD               	movwf	postdec2,c
  9499                           
  9500                           ; BSR set to: 0
  9501  0002D0  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9502                           
  9503                           ; BSR set to: 0
  9504                           ;HX_ASL_BORON.c: 1306: readbackPkts[readbackSendCount++] = &readback_osc2_pkt;
  9505  0002D2  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9506  0002D4  0D02               	mullw	2
  9507  0002D6  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9508  0002D8  24F3               	addwf	prodl,w,c
  9509  0002DA  6ED9               	movwf	fsr2l,c
  9510  0002DC  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9511  0002DE  20F4               	addwfc	prodh,w,c
  9512  0002E0  6EDA               	movwf	fsr2h,c
  9513  0002E2  0E47               	movlw	low checkAndSendLatchData@readback_osc2_pkt
  9514  0002E4  6EDE               	movwf	postinc2,c
  9515  0002E6  0E06               	movlw	high checkAndSendLatchData@readback_osc2_pkt
  9516  0002E8  6EDD               	movwf	postdec2,c
  9517                           
  9518                           ; BSR set to: 0
  9519  0002EA  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9520  0002EC                     l1271:
  9521                           
  9522                           ; BSR set to: 0
  9523                           ;HX_ASL_BORON.c: 1307: }
  9524                           ;HX_ASL_BORON.c: 1309: if (!(LATCH_ANALOG_DATA & tsld.LATCH_ANALOG_DATA))
  9525                           
  9526                           ; BSR set to: 0
  9527  0002EC  0105               	movlb	5	; () banked
  9528  0002EE  51ED               	movf	_LATCH_ANALOG_DATA& (0+255),w,b
  9529  0002F0  0106               	movlb	6	; () banked
  9530  0002F2  15DB               	andwf	(_tsld+6)& (0+255),w,b
  9531  0002F4  0100               	movlb	0	; () banked
  9532  0002F6  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9533  0002F8  0105               	movlb	5	; () banked
  9534  0002FA  51EE               	movf	(_LATCH_ANALOG_DATA+1)& (0+255),w,b
  9535  0002FC  0106               	movlb	6	; () banked
  9536  0002FE  15DC               	andwf	(_tsld+7)& (0+255),w,b
  9537  000300  0100               	movlb	0	; () banked
  9538  000302  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9539  000304  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9540  000306  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9541  000308  A4D8               	btfss	status,2,c
  9542  00030A  D043               	goto	l1272
  9543                           
  9544                           ; BSR set to: 0
  9545                           ;HX_ASL_BORON.c: 1310: {
  9546                           ;HX_ASL_BORON.c: 1311: LATCH_ANALOG_DATA = tsld.LATCH_ANALOG_DATA;
  9547  00030C  C6DB  F5ED         	movff	_tsld+6,_LATCH_ANALOG_DATA
  9548  000310  C6DC  F5EE         	movff	_tsld+7,_LATCH_ANALOG_DATA+1
  9549  000314  0105               	movlb	5	; () banked
  9550  000316  6BEF               	clrf	(_LATCH_ANALOG_DATA+2)& (0+255),b
  9551  000318  6BF0               	clrf	(_LATCH_ANALOG_DATA+3)& (0+255),b
  9552                           
  9553                           ; BSR set to: 5
  9554                           ;HX_ASL_BORON.c: 1312: txRxPkt analog_pkt;
  9555                           ;HX_ASL_BORON.c: 1313: setupLatchPkt(&analog_pkt, LATCH_ANALOG_DATA, 0x3);
  9556  00031A  0E8E               	movlw	low checkAndSendLatchData@analog_pkt
  9557  00031C  0100               	movlb	0	; () banked
  9558  00031E  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9559  000320  0E02               	movlw	high checkAndSendLatchData@analog_pkt
  9560  000322  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9561  000324  C5ED  F067         	movff	_LATCH_ANALOG_DATA,setupLatchPkt@latch_data
  9562  000328  C5EE  F068         	movff	_LATCH_ANALOG_DATA+1,setupLatchPkt@latch_data+1
  9563  00032C  0E03               	movlw	3
  9564  00032E  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9565  000330  EC44  F017         	call	_setupLatchPkt	;wreg free
  9566                           
  9567                           ;HX_ASL_BORON.c: 1314: stream[latchSendCount++] = &analog_pkt;
  9568  000334  0100               	movlb	0	; () banked
  9569  000336  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9570  000338  0D02               	mullw	2
  9571  00033A  0E79               	movlw	low checkAndSendLatchData@stream
  9572  00033C  24F3               	addwf	prodl,w,c
  9573  00033E  6ED9               	movwf	fsr2l,c
  9574  000340  0E00               	movlw	high checkAndSendLatchData@stream
  9575  000342  20F4               	addwfc	prodh,w,c
  9576  000344  6EDA               	movwf	fsr2h,c
  9577  000346  0E8E               	movlw	low checkAndSendLatchData@analog_pkt
  9578  000348  6EDE               	movwf	postinc2,c
  9579  00034A  0E02               	movlw	high checkAndSendLatchData@analog_pkt
  9580  00034C  6EDD               	movwf	postdec2,c
  9581                           
  9582                           ; BSR set to: 0
  9583  00034E  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;HX_ASL_BORON.c: 1315: txRxPkt readback_analog_pkt;
  9587                           ;HX_ASL_BORON.c: 1316: setupCmdReadbackPkt(&readback_analog_pkt);
  9588  000350  0E8E               	movlw	low checkAndSendLatchData@readback_analog_pkt
  9589  000352  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9590  000354  0E06               	movlw	high checkAndSendLatchData@readback_analog_pkt
  9591  000356  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9592  000358  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9593                           
  9594                           ;HX_ASL_BORON.c: 1317: stream[latchSendCount++] = &readback_analog_pkt;
  9595  00035C  0100               	movlb	0	; () banked
  9596  00035E  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9597  000360  0D02               	mullw	2
  9598  000362  0E79               	movlw	low checkAndSendLatchData@stream
  9599  000364  24F3               	addwf	prodl,w,c
  9600  000366  6ED9               	movwf	fsr2l,c
  9601  000368  0E00               	movlw	high checkAndSendLatchData@stream
  9602  00036A  20F4               	addwfc	prodh,w,c
  9603  00036C  6EDA               	movwf	fsr2h,c
  9604  00036E  0E8E               	movlw	low checkAndSendLatchData@readback_analog_pkt
  9605  000370  6EDE               	movwf	postinc2,c
  9606  000372  0E06               	movlw	high checkAndSendLatchData@readback_analog_pkt
  9607  000374  6EDD               	movwf	postdec2,c
  9608                           
  9609                           ; BSR set to: 0
  9610  000376  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;HX_ASL_BORON.c: 1318: readbackPkts[readbackSendCount++] = &readback_analog_pkt;
  9614  000378  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9615  00037A  0D02               	mullw	2
  9616  00037C  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9617  00037E  24F3               	addwf	prodl,w,c
  9618  000380  6ED9               	movwf	fsr2l,c
  9619  000382  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9620  000384  20F4               	addwfc	prodh,w,c
  9621  000386  6EDA               	movwf	fsr2h,c
  9622  000388  0E8E               	movlw	low checkAndSendLatchData@readback_analog_pkt
  9623  00038A  6EDE               	movwf	postinc2,c
  9624  00038C  0E06               	movlw	high checkAndSendLatchData@readback_analog_pkt
  9625  00038E  6EDD               	movwf	postdec2,c
  9626                           
  9627                           ; BSR set to: 0
  9628  000390  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9629  000392                     l1272:
  9630                           
  9631                           ; BSR set to: 0
  9632                           ;HX_ASL_BORON.c: 1319: }
  9633                           ;HX_ASL_BORON.c: 1321: if (!(LATCH_OVEN_DATA & tsld.LATCH_OVEN_DATA))
  9634                           
  9635                           ; BSR set to: 0
  9636  000392  0102               	movlb	2	; () banked
  9637  000394  51E2               	movf	_LATCH_OVEN_DATA& (0+255),w,b
  9638  000396  0106               	movlb	6	; () banked
  9639  000398  15DD               	andwf	(_tsld+8)& (0+255),w,b
  9640  00039A  0100               	movlb	0	; () banked
  9641  00039C  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9642  00039E  0102               	movlb	2	; () banked
  9643  0003A0  51E3               	movf	(_LATCH_OVEN_DATA+1)& (0+255),w,b
  9644  0003A2  0106               	movlb	6	; () banked
  9645  0003A4  15DE               	andwf	(_tsld+9)& (0+255),w,b
  9646  0003A6  0100               	movlb	0	; () banked
  9647  0003A8  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9648  0003AA  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9649  0003AC  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9650  0003AE  A4D8               	btfss	status,2,c
  9651  0003B0  D043               	goto	l1273
  9652                           
  9653                           ; BSR set to: 0
  9654                           ;HX_ASL_BORON.c: 1322: {
  9655                           ;HX_ASL_BORON.c: 1323: LATCH_OVEN_DATA = tsld.LATCH_OVEN_DATA;
  9656  0003B2  C6DD  F2E2         	movff	_tsld+8,_LATCH_OVEN_DATA
  9657  0003B6  C6DE  F2E3         	movff	_tsld+9,_LATCH_OVEN_DATA+1
  9658  0003BA  0102               	movlb	2	; () banked
  9659  0003BC  6BE4               	clrf	(_LATCH_OVEN_DATA+2)& (0+255),b
  9660  0003BE  6BE5               	clrf	(_LATCH_OVEN_DATA+3)& (0+255),b
  9661                           
  9662                           ; BSR set to: 2
  9663                           ;HX_ASL_BORON.c: 1324: txRxPkt oven_pkt;
  9664                           ;HX_ASL_BORON.c: 1325: setupLatchPkt(&oven_pkt, LATCH_OVEN_DATA, 0x4);
  9665  0003C0  0E00               	movlw	low checkAndSendLatchData@oven_pkt
  9666  0003C2  0100               	movlb	0	; () banked
  9667  0003C4  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9668  0003C6  0E03               	movlw	high checkAndSendLatchData@oven_pkt
  9669  0003C8  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9670  0003CA  C2E2  F067         	movff	_LATCH_OVEN_DATA,setupLatchPkt@latch_data
  9671  0003CE  C2E3  F068         	movff	_LATCH_OVEN_DATA+1,setupLatchPkt@latch_data+1
  9672  0003D2  0E04               	movlw	4
  9673  0003D4  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9674  0003D6  EC44  F017         	call	_setupLatchPkt	;wreg free
  9675                           
  9676                           ;HX_ASL_BORON.c: 1326: stream[latchSendCount++] = &oven_pkt;
  9677  0003DA  0100               	movlb	0	; () banked
  9678  0003DC  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9679  0003DE  0D02               	mullw	2
  9680  0003E0  0E79               	movlw	low checkAndSendLatchData@stream
  9681  0003E2  24F3               	addwf	prodl,w,c
  9682  0003E4  6ED9               	movwf	fsr2l,c
  9683  0003E6  0E00               	movlw	high checkAndSendLatchData@stream
  9684  0003E8  20F4               	addwfc	prodh,w,c
  9685  0003EA  6EDA               	movwf	fsr2h,c
  9686  0003EC  0E00               	movlw	low checkAndSendLatchData@oven_pkt
  9687  0003EE  6EDE               	movwf	postinc2,c
  9688  0003F0  0E03               	movlw	high checkAndSendLatchData@oven_pkt
  9689  0003F2  6EDD               	movwf	postdec2,c
  9690                           
  9691                           ; BSR set to: 0
  9692  0003F4  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;HX_ASL_BORON.c: 1327: txRxPkt readback_oven_pkt;
  9696                           ;HX_ASL_BORON.c: 1328: setupCmdReadbackPkt(&readback_oven_pkt);
  9697  0003F6  0E00               	movlw	low checkAndSendLatchData@readback_oven_pkt
  9698  0003F8  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9699  0003FA  0E07               	movlw	high checkAndSendLatchData@readback_oven_pkt
  9700  0003FC  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9701  0003FE  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9702                           
  9703                           ;HX_ASL_BORON.c: 1329: stream[latchSendCount++] = &readback_oven_pkt;
  9704  000402  0100               	movlb	0	; () banked
  9705  000404  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9706  000406  0D02               	mullw	2
  9707  000408  0E79               	movlw	low checkAndSendLatchData@stream
  9708  00040A  24F3               	addwf	prodl,w,c
  9709  00040C  6ED9               	movwf	fsr2l,c
  9710  00040E  0E00               	movlw	high checkAndSendLatchData@stream
  9711  000410  20F4               	addwfc	prodh,w,c
  9712  000412  6EDA               	movwf	fsr2h,c
  9713  000414  0E00               	movlw	low checkAndSendLatchData@readback_oven_pkt
  9714  000416  6EDE               	movwf	postinc2,c
  9715  000418  0E07               	movlw	high checkAndSendLatchData@readback_oven_pkt
  9716  00041A  6EDD               	movwf	postdec2,c
  9717                           
  9718                           ; BSR set to: 0
  9719  00041C  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9720                           
  9721                           ; BSR set to: 0
  9722                           ;HX_ASL_BORON.c: 1330: readbackPkts[readbackSendCount++] = &readback_oven_pkt;
  9723  00041E  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9724  000420  0D02               	mullw	2
  9725  000422  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9726  000424  24F3               	addwf	prodl,w,c
  9727  000426  6ED9               	movwf	fsr2l,c
  9728  000428  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9729  00042A  20F4               	addwfc	prodh,w,c
  9730  00042C  6EDA               	movwf	fsr2h,c
  9731  00042E  0E00               	movlw	low checkAndSendLatchData@readback_oven_pkt
  9732  000430  6EDE               	movwf	postinc2,c
  9733  000432  0E07               	movlw	high checkAndSendLatchData@readback_oven_pkt
  9734  000434  6EDD               	movwf	postdec2,c
  9735                           
  9736                           ; BSR set to: 0
  9737  000436  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9738  000438                     l1273:
  9739                           
  9740                           ; BSR set to: 0
  9741                           ;HX_ASL_BORON.c: 1331: }
  9742                           ;HX_ASL_BORON.c: 1333: if (!(LATCH_HEAT_DAC_DATA & tsld.LATCH_HEAT_DAC_DATA))
  9743                           
  9744                           ; BSR set to: 0
  9745  000438  0105               	movlb	5	; () banked
  9746  00043A  51E9               	movf	_LATCH_HEAT_DAC_DATA& (0+255),w,b
  9747  00043C  0106               	movlb	6	; () banked
  9748  00043E  15DF               	andwf	(_tsld+10)& (0+255),w,b
  9749  000440  0100               	movlb	0	; () banked
  9750  000442  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9751  000444  0105               	movlb	5	; () banked
  9752  000446  51EA               	movf	(_LATCH_HEAT_DAC_DATA+1)& (0+255),w,b
  9753  000448  0106               	movlb	6	; () banked
  9754  00044A  15E0               	andwf	(_tsld+11)& (0+255),w,b
  9755  00044C  0100               	movlb	0	; () banked
  9756  00044E  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9757  000450  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9758  000452  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9759  000454  A4D8               	btfss	status,2,c
  9760  000456  D043               	goto	l1274
  9761                           
  9762                           ; BSR set to: 0
  9763                           ;HX_ASL_BORON.c: 1334: {
  9764                           ;HX_ASL_BORON.c: 1335: LATCH_HEAT_DAC_DATA = tsld.LATCH_HEAT_DAC_DATA;
  9765  000458  C6DF  F5E9         	movff	_tsld+10,_LATCH_HEAT_DAC_DATA
  9766  00045C  C6E0  F5EA         	movff	_tsld+11,_LATCH_HEAT_DAC_DATA+1
  9767  000460  0105               	movlb	5	; () banked
  9768  000462  6BEB               	clrf	(_LATCH_HEAT_DAC_DATA+2)& (0+255),b
  9769  000464  6BEC               	clrf	(_LATCH_HEAT_DAC_DATA+3)& (0+255),b
  9770                           
  9771                           ; BSR set to: 5
  9772                           ;HX_ASL_BORON.c: 1336: txRxPkt heat_dac_pkt;
  9773                           ;HX_ASL_BORON.c: 1337: setupLatchPkt(&heat_dac_pkt, LATCH_HEAT_DAC_DATA, 0x5);
  9774  000466  0E47               	movlw	low checkAndSendLatchData@heat_dac_pkt
  9775  000468  0100               	movlb	0	; () banked
  9776  00046A  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9777  00046C  0E03               	movlw	high checkAndSendLatchData@heat_dac_pkt
  9778  00046E  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9779  000470  C5E9  F067         	movff	_LATCH_HEAT_DAC_DATA,setupLatchPkt@latch_data
  9780  000474  C5EA  F068         	movff	_LATCH_HEAT_DAC_DATA+1,setupLatchPkt@latch_data+1
  9781  000478  0E05               	movlw	5
  9782  00047A  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9783  00047C  EC44  F017         	call	_setupLatchPkt	;wreg free
  9784                           
  9785                           ;HX_ASL_BORON.c: 1338: stream[latchSendCount++] = &heat_dac_pkt;
  9786  000480  0100               	movlb	0	; () banked
  9787  000482  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9788  000484  0D02               	mullw	2
  9789  000486  0E79               	movlw	low checkAndSendLatchData@stream
  9790  000488  24F3               	addwf	prodl,w,c
  9791  00048A  6ED9               	movwf	fsr2l,c
  9792  00048C  0E00               	movlw	high checkAndSendLatchData@stream
  9793  00048E  20F4               	addwfc	prodh,w,c
  9794  000490  6EDA               	movwf	fsr2h,c
  9795  000492  0E47               	movlw	low checkAndSendLatchData@heat_dac_pkt
  9796  000494  6EDE               	movwf	postinc2,c
  9797  000496  0E03               	movlw	high checkAndSendLatchData@heat_dac_pkt
  9798  000498  6EDD               	movwf	postdec2,c
  9799                           
  9800                           ; BSR set to: 0
  9801  00049A  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9802                           
  9803                           ; BSR set to: 0
  9804                           ;HX_ASL_BORON.c: 1339: txRxPkt readback_heat_dac_pkt;
  9805                           ;HX_ASL_BORON.c: 1340: setupCmdReadbackPkt(&readback_heat_dac_pkt);
  9806  00049C  0E47               	movlw	low checkAndSendLatchData@readback_heat_dac_pkt
  9807  00049E  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9808  0004A0  0E07               	movlw	high checkAndSendLatchData@readback_heat_dac_pkt
  9809  0004A2  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9810  0004A4  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9811                           
  9812                           ;HX_ASL_BORON.c: 1341: stream[latchSendCount++] = &readback_heat_dac_pkt;
  9813  0004A8  0100               	movlb	0	; () banked
  9814  0004AA  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9815  0004AC  0D02               	mullw	2
  9816  0004AE  0E79               	movlw	low checkAndSendLatchData@stream
  9817  0004B0  24F3               	addwf	prodl,w,c
  9818  0004B2  6ED9               	movwf	fsr2l,c
  9819  0004B4  0E00               	movlw	high checkAndSendLatchData@stream
  9820  0004B6  20F4               	addwfc	prodh,w,c
  9821  0004B8  6EDA               	movwf	fsr2h,c
  9822  0004BA  0E47               	movlw	low checkAndSendLatchData@readback_heat_dac_pkt
  9823  0004BC  6EDE               	movwf	postinc2,c
  9824  0004BE  0E07               	movlw	high checkAndSendLatchData@readback_heat_dac_pkt
  9825  0004C0  6EDD               	movwf	postdec2,c
  9826                           
  9827                           ; BSR set to: 0
  9828  0004C2  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9829                           
  9830                           ; BSR set to: 0
  9831                           ;HX_ASL_BORON.c: 1342: readbackPkts[readbackSendCount++] = &readback_heat_dac_pkt;
  9832  0004C4  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9833  0004C6  0D02               	mullw	2
  9834  0004C8  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9835  0004CA  24F3               	addwf	prodl,w,c
  9836  0004CC  6ED9               	movwf	fsr2l,c
  9837  0004CE  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9838  0004D0  20F4               	addwfc	prodh,w,c
  9839  0004D2  6EDA               	movwf	fsr2h,c
  9840  0004D4  0E47               	movlw	low checkAndSendLatchData@readback_heat_dac_pkt
  9841  0004D6  6EDE               	movwf	postinc2,c
  9842  0004D8  0E07               	movlw	high checkAndSendLatchData@readback_heat_dac_pkt
  9843  0004DA  6EDD               	movwf	postdec2,c
  9844                           
  9845                           ; BSR set to: 0
  9846  0004DC  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9847  0004DE                     l1274:
  9848                           
  9849                           ; BSR set to: 0
  9850                           ;HX_ASL_BORON.c: 1343: }
  9851                           ;HX_ASL_BORON.c: 1345: if (!(LATCH_VARACTOR_DAC_DATA & tsld.LATCH_VARACTOR_DAC_DATA))
  9852                           
  9853                           ; BSR set to: 0
  9854  0004DE  0105               	movlb	5	; () banked
  9855  0004E0  51E5               	movf	_LATCH_VARACTOR_DAC_DATA& (0+255),w,b
  9856  0004E2  0106               	movlb	6	; () banked
  9857  0004E4  15E1               	andwf	(_tsld+12)& (0+255),w,b
  9858  0004E6  0100               	movlb	0	; () banked
  9859  0004E8  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9860  0004EA  0105               	movlb	5	; () banked
  9861  0004EC  51E6               	movf	(_LATCH_VARACTOR_DAC_DATA+1)& (0+255),w,b
  9862  0004EE  0106               	movlb	6	; () banked
  9863  0004F0  15E2               	andwf	(_tsld+13)& (0+255),w,b
  9864  0004F2  0100               	movlb	0	; () banked
  9865  0004F4  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9866  0004F6  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9867  0004F8  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9868  0004FA  A4D8               	btfss	status,2,c
  9869  0004FC  D043               	goto	l1275
  9870                           
  9871                           ; BSR set to: 0
  9872                           ;HX_ASL_BORON.c: 1346: {
  9873                           ;HX_ASL_BORON.c: 1347: LATCH_VARACTOR_DAC_DATA = tsld.LATCH_VARACTOR_DAC_DATA;
  9874  0004FE  C6E1  F5E5         	movff	_tsld+12,_LATCH_VARACTOR_DAC_DATA
  9875  000502  C6E2  F5E6         	movff	_tsld+13,_LATCH_VARACTOR_DAC_DATA+1
  9876  000506  0105               	movlb	5	; () banked
  9877  000508  6BE7               	clrf	(_LATCH_VARACTOR_DAC_DATA+2)& (0+255),b
  9878  00050A  6BE8               	clrf	(_LATCH_VARACTOR_DAC_DATA+3)& (0+255),b
  9879                           
  9880                           ; BSR set to: 5
  9881                           ;HX_ASL_BORON.c: 1348: txRxPkt varactor_dac_pkt;
  9882                           ;HX_ASL_BORON.c: 1349: setupLatchPkt(&varactor_dac_pkt, LATCH_VARACTOR_DAC_DATA, 0x6);
  9883  00050C  0E8E               	movlw	low checkAndSendLatchData@varactor_dac_pkt
  9884  00050E  0100               	movlb	0	; () banked
  9885  000510  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9886  000512  0E03               	movlw	high checkAndSendLatchData@varactor_dac_pkt
  9887  000514  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9888  000516  C5E5  F067         	movff	_LATCH_VARACTOR_DAC_DATA,setupLatchPkt@latch_data
  9889  00051A  C5E6  F068         	movff	_LATCH_VARACTOR_DAC_DATA+1,setupLatchPkt@latch_data+1
  9890  00051E  0E06               	movlw	6
  9891  000520  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
  9892  000522  EC44  F017         	call	_setupLatchPkt	;wreg free
  9893                           
  9894                           ;HX_ASL_BORON.c: 1350: stream[latchSendCount++] = &varactor_dac_pkt;
  9895  000526  0100               	movlb	0	; () banked
  9896  000528  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9897  00052A  0D02               	mullw	2
  9898  00052C  0E79               	movlw	low checkAndSendLatchData@stream
  9899  00052E  24F3               	addwf	prodl,w,c
  9900  000530  6ED9               	movwf	fsr2l,c
  9901  000532  0E00               	movlw	high checkAndSendLatchData@stream
  9902  000534  20F4               	addwfc	prodh,w,c
  9903  000536  6EDA               	movwf	fsr2h,c
  9904  000538  0E8E               	movlw	low checkAndSendLatchData@varactor_dac_pkt
  9905  00053A  6EDE               	movwf	postinc2,c
  9906  00053C  0E03               	movlw	high checkAndSendLatchData@varactor_dac_pkt
  9907  00053E  6EDD               	movwf	postdec2,c
  9908                           
  9909                           ; BSR set to: 0
  9910  000540  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9911                           
  9912                           ; BSR set to: 0
  9913                           ;HX_ASL_BORON.c: 1351: txRxPkt readback_varactor_dac_pkt;
  9914                           ;HX_ASL_BORON.c: 1352: setupCmdReadbackPkt(&readback_varactor_dac_pkt);
  9915  000542  0E8E               	movlw	low checkAndSendLatchData@readback_varactor_dac_pkt
  9916  000544  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
  9917  000546  0E07               	movlw	high checkAndSendLatchData@readback_varactor_dac_pkt
  9918  000548  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
  9919  00054A  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
  9920                           
  9921                           ;HX_ASL_BORON.c: 1353: stream[latchSendCount++] = &readback_varactor_dac_pkt;
  9922  00054E  0100               	movlb	0	; () banked
  9923  000550  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
  9924  000552  0D02               	mullw	2
  9925  000554  0E79               	movlw	low checkAndSendLatchData@stream
  9926  000556  24F3               	addwf	prodl,w,c
  9927  000558  6ED9               	movwf	fsr2l,c
  9928  00055A  0E00               	movlw	high checkAndSendLatchData@stream
  9929  00055C  20F4               	addwfc	prodh,w,c
  9930  00055E  6EDA               	movwf	fsr2h,c
  9931  000560  0E8E               	movlw	low checkAndSendLatchData@readback_varactor_dac_pkt
  9932  000562  6EDE               	movwf	postinc2,c
  9933  000564  0E07               	movlw	high checkAndSendLatchData@readback_varactor_dac_pkt
  9934  000566  6EDD               	movwf	postdec2,c
  9935                           
  9936                           ; BSR set to: 0
  9937  000568  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
  9938                           
  9939                           ; BSR set to: 0
  9940                           ;HX_ASL_BORON.c: 1354: readbackPkts[readbackSendCount++] = &readback_varactor_dac_pkt;
  9941  00056A  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
  9942  00056C  0D02               	mullw	2
  9943  00056E  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
  9944  000570  24F3               	addwf	prodl,w,c
  9945  000572  6ED9               	movwf	fsr2l,c
  9946  000574  0E00               	movlw	high checkAndSendLatchData@readbackPkts
  9947  000576  20F4               	addwfc	prodh,w,c
  9948  000578  6EDA               	movwf	fsr2h,c
  9949  00057A  0E8E               	movlw	low checkAndSendLatchData@readback_varactor_dac_pkt
  9950  00057C  6EDE               	movwf	postinc2,c
  9951  00057E  0E07               	movlw	high checkAndSendLatchData@readback_varactor_dac_pkt
  9952  000580  6EDD               	movwf	postdec2,c
  9953                           
  9954                           ; BSR set to: 0
  9955  000582  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
  9956  000584                     l1275:
  9957                           
  9958                           ; BSR set to: 0
  9959                           ;HX_ASL_BORON.c: 1355: }
  9960                           ;HX_ASL_BORON.c: 1357: if (!(LATCH_BIAS_DATA & tsld.LATCH_BIAS_DATA))
  9961                           
  9962                           ; BSR set to: 0
  9963  000584  0105               	movlb	5	; () banked
  9964  000586  51E1               	movf	_LATCH_BIAS_DATA& (0+255),w,b
  9965  000588  0106               	movlb	6	; () banked
  9966  00058A  15E3               	andwf	(_tsld+14)& (0+255),w,b
  9967  00058C  0100               	movlb	0	; () banked
  9968  00058E  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
  9969  000590  0105               	movlb	5	; () banked
  9970  000592  51E2               	movf	(_LATCH_BIAS_DATA+1)& (0+255),w,b
  9971  000594  0106               	movlb	6	; () banked
  9972  000596  15E4               	andwf	(_tsld+15)& (0+255),w,b
  9973  000598  0100               	movlb	0	; () banked
  9974  00059A  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
  9975  00059C  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
  9976  00059E  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
  9977  0005A0  A4D8               	btfss	status,2,c
  9978  0005A2  D043               	goto	l1276
  9979                           
  9980                           ; BSR set to: 0
  9981                           ;HX_ASL_BORON.c: 1358: {
  9982                           ;HX_ASL_BORON.c: 1359: LATCH_BIAS_DATA = tsld.LATCH_BIAS_DATA;
  9983  0005A4  C6E3  F5E1         	movff	_tsld+14,_LATCH_BIAS_DATA
  9984  0005A8  C6E4  F5E2         	movff	_tsld+15,_LATCH_BIAS_DATA+1
  9985  0005AC  0105               	movlb	5	; () banked
  9986  0005AE  6BE3               	clrf	(_LATCH_BIAS_DATA+2)& (0+255),b
  9987  0005B0  6BE4               	clrf	(_LATCH_BIAS_DATA+3)& (0+255),b
  9988                           
  9989                           ; BSR set to: 5
  9990                           ;HX_ASL_BORON.c: 1360: txRxPkt bias_pkt;
  9991                           ;HX_ASL_BORON.c: 1361: setupLatchPkt(&bias_pkt, LATCH_BIAS_DATA, 0x7);
  9992  0005B2  0E00               	movlw	low checkAndSendLatchData@bias_pkt
  9993  0005B4  0100               	movlb	0	; () banked
  9994  0005B6  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
  9995  0005B8  0E04               	movlw	high checkAndSendLatchData@bias_pkt
  9996  0005BA  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
  9997  0005BC  C5E1  F067         	movff	_LATCH_BIAS_DATA,setupLatchPkt@latch_data
  9998  0005C0  C5E2  F068         	movff	_LATCH_BIAS_DATA+1,setupLatchPkt@latch_data+1
  9999  0005C4  0E07               	movlw	7
 10000  0005C6  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 10001  0005C8  EC44  F017         	call	_setupLatchPkt	;wreg free
 10002                           
 10003                           ;HX_ASL_BORON.c: 1362: stream[latchSendCount++] = &bias_pkt;
 10004  0005CC  0100               	movlb	0	; () banked
 10005  0005CE  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10006  0005D0  0D02               	mullw	2
 10007  0005D2  0E79               	movlw	low checkAndSendLatchData@stream
 10008  0005D4  24F3               	addwf	prodl,w,c
 10009  0005D6  6ED9               	movwf	fsr2l,c
 10010  0005D8  0E00               	movlw	high checkAndSendLatchData@stream
 10011  0005DA  20F4               	addwfc	prodh,w,c
 10012  0005DC  6EDA               	movwf	fsr2h,c
 10013  0005DE  0E00               	movlw	low checkAndSendLatchData@bias_pkt
 10014  0005E0  6EDE               	movwf	postinc2,c
 10015  0005E2  0E04               	movlw	high checkAndSendLatchData@bias_pkt
 10016  0005E4  6EDD               	movwf	postdec2,c
 10017                           
 10018                           ; BSR set to: 0
 10019  0005E6  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10020                           
 10021                           ; BSR set to: 0
 10022                           ;HX_ASL_BORON.c: 1363: txRxPkt readback_bias_pkt;
 10023                           ;HX_ASL_BORON.c: 1364: setupCmdReadbackPkt(&readback_bias_pkt);
 10024  0005E8  0E00               	movlw	low checkAndSendLatchData@readback_bias_pkt
 10025  0005EA  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 10026  0005EC  0E08               	movlw	high checkAndSendLatchData@readback_bias_pkt
 10027  0005EE  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 10028  0005F0  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 10029                           
 10030                           ;HX_ASL_BORON.c: 1365: stream[latchSendCount++] = &readback_bias_pkt;
 10031  0005F4  0100               	movlb	0	; () banked
 10032  0005F6  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10033  0005F8  0D02               	mullw	2
 10034  0005FA  0E79               	movlw	low checkAndSendLatchData@stream
 10035  0005FC  24F3               	addwf	prodl,w,c
 10036  0005FE  6ED9               	movwf	fsr2l,c
 10037  000600  0E00               	movlw	high checkAndSendLatchData@stream
 10038  000602  20F4               	addwfc	prodh,w,c
 10039  000604  6EDA               	movwf	fsr2h,c
 10040  000606  0E00               	movlw	low checkAndSendLatchData@readback_bias_pkt
 10041  000608  6EDE               	movwf	postinc2,c
 10042  00060A  0E08               	movlw	high checkAndSendLatchData@readback_bias_pkt
 10043  00060C  6EDD               	movwf	postdec2,c
 10044                           
 10045                           ; BSR set to: 0
 10046  00060E  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;HX_ASL_BORON.c: 1366: readbackPkts[readbackSendCount++] = &readback_bias_pkt;
 10050  000610  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
 10051  000612  0D02               	mullw	2
 10052  000614  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10053  000616  24F3               	addwf	prodl,w,c
 10054  000618  6ED9               	movwf	fsr2l,c
 10055  00061A  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10056  00061C  20F4               	addwfc	prodh,w,c
 10057  00061E  6EDA               	movwf	fsr2h,c
 10058  000620  0E00               	movlw	low checkAndSendLatchData@readback_bias_pkt
 10059  000622  6EDE               	movwf	postinc2,c
 10060  000624  0E08               	movlw	high checkAndSendLatchData@readback_bias_pkt
 10061  000626  6EDD               	movwf	postdec2,c
 10062                           
 10063                           ; BSR set to: 0
 10064  000628  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
 10065  00062A                     l1276:
 10066                           
 10067                           ; BSR set to: 0
 10068                           ;HX_ASL_BORON.c: 1367: }
 10069                           ;HX_ASL_BORON.c: 1369: if (!(LATCH_CMOS_DATA & tsld.LATCH_CMOS_DATA))
 10070                           
 10071                           ; BSR set to: 0
 10072  00062A  0105               	movlb	5	; () banked
 10073  00062C  51DD               	movf	_LATCH_CMOS_DATA& (0+255),w,b
 10074  00062E  0106               	movlb	6	; () banked
 10075  000630  15E5               	andwf	(_tsld+16)& (0+255),w,b
 10076  000632  0100               	movlb	0	; () banked
 10077  000634  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10078  000636  0105               	movlb	5	; () banked
 10079  000638  51DE               	movf	(_LATCH_CMOS_DATA+1)& (0+255),w,b
 10080  00063A  0106               	movlb	6	; () banked
 10081  00063C  15E6               	andwf	(_tsld+17)& (0+255),w,b
 10082  00063E  0100               	movlb	0	; () banked
 10083  000640  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
 10084  000642  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10085  000644  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
 10086  000646  A4D8               	btfss	status,2,c
 10087  000648  D043               	goto	l1277
 10088                           
 10089                           ; BSR set to: 0
 10090                           ;HX_ASL_BORON.c: 1370: {
 10091                           ;HX_ASL_BORON.c: 1371: LATCH_CMOS_DATA = tsld.LATCH_CMOS_DATA;
 10092  00064A  C6E5  F5DD         	movff	_tsld+16,_LATCH_CMOS_DATA
 10093  00064E  C6E6  F5DE         	movff	_tsld+17,_LATCH_CMOS_DATA+1
 10094  000652  0105               	movlb	5	; () banked
 10095  000654  6BDF               	clrf	(_LATCH_CMOS_DATA+2)& (0+255),b
 10096  000656  6BE0               	clrf	(_LATCH_CMOS_DATA+3)& (0+255),b
 10097                           
 10098                           ; BSR set to: 5
 10099                           ;HX_ASL_BORON.c: 1372: txRxPkt cmos_pkt;
 10100                           ;HX_ASL_BORON.c: 1373: setupLatchPkt(&cmos_pkt, LATCH_CMOS_DATA, 0x8);
 10101  000658  0E47               	movlw	low checkAndSendLatchData@cmos_pkt
 10102  00065A  0100               	movlb	0	; () banked
 10103  00065C  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 10104  00065E  0E04               	movlw	high checkAndSendLatchData@cmos_pkt
 10105  000660  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 10106  000662  C5DD  F067         	movff	_LATCH_CMOS_DATA,setupLatchPkt@latch_data
 10107  000666  C5DE  F068         	movff	_LATCH_CMOS_DATA+1,setupLatchPkt@latch_data+1
 10108  00066A  0E08               	movlw	8
 10109  00066C  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 10110  00066E  EC44  F017         	call	_setupLatchPkt	;wreg free
 10111                           
 10112                           ;HX_ASL_BORON.c: 1374: stream[latchSendCount++] = &cmos_pkt;
 10113  000672  0100               	movlb	0	; () banked
 10114  000674  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10115  000676  0D02               	mullw	2
 10116  000678  0E79               	movlw	low checkAndSendLatchData@stream
 10117  00067A  24F3               	addwf	prodl,w,c
 10118  00067C  6ED9               	movwf	fsr2l,c
 10119  00067E  0E00               	movlw	high checkAndSendLatchData@stream
 10120  000680  20F4               	addwfc	prodh,w,c
 10121  000682  6EDA               	movwf	fsr2h,c
 10122  000684  0E47               	movlw	low checkAndSendLatchData@cmos_pkt
 10123  000686  6EDE               	movwf	postinc2,c
 10124  000688  0E04               	movlw	high checkAndSendLatchData@cmos_pkt
 10125  00068A  6EDD               	movwf	postdec2,c
 10126                           
 10127                           ; BSR set to: 0
 10128  00068C  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10129                           
 10130                           ; BSR set to: 0
 10131                           ;HX_ASL_BORON.c: 1375: txRxPkt readback_cmos_pkt;
 10132                           ;HX_ASL_BORON.c: 1376: setupCmdReadbackPkt(&readback_cmos_pkt);
 10133  00068E  0E47               	movlw	low checkAndSendLatchData@readback_cmos_pkt
 10134  000690  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 10135  000692  0E08               	movlw	high checkAndSendLatchData@readback_cmos_pkt
 10136  000694  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 10137  000696  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 10138                           
 10139                           ;HX_ASL_BORON.c: 1377: stream[latchSendCount++] = &readback_cmos_pkt;
 10140  00069A  0100               	movlb	0	; () banked
 10141  00069C  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10142  00069E  0D02               	mullw	2
 10143  0006A0  0E79               	movlw	low checkAndSendLatchData@stream
 10144  0006A2  24F3               	addwf	prodl,w,c
 10145  0006A4  6ED9               	movwf	fsr2l,c
 10146  0006A6  0E00               	movlw	high checkAndSendLatchData@stream
 10147  0006A8  20F4               	addwfc	prodh,w,c
 10148  0006AA  6EDA               	movwf	fsr2h,c
 10149  0006AC  0E47               	movlw	low checkAndSendLatchData@readback_cmos_pkt
 10150  0006AE  6EDE               	movwf	postinc2,c
 10151  0006B0  0E08               	movlw	high checkAndSendLatchData@readback_cmos_pkt
 10152  0006B2  6EDD               	movwf	postdec2,c
 10153                           
 10154                           ; BSR set to: 0
 10155  0006B4  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10156                           
 10157                           ; BSR set to: 0
 10158                           ;HX_ASL_BORON.c: 1378: readbackPkts[readbackSendCount++] = &readback_cmos_pkt;
 10159  0006B6  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
 10160  0006B8  0D02               	mullw	2
 10161  0006BA  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10162  0006BC  24F3               	addwf	prodl,w,c
 10163  0006BE  6ED9               	movwf	fsr2l,c
 10164  0006C0  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10165  0006C2  20F4               	addwfc	prodh,w,c
 10166  0006C4  6EDA               	movwf	fsr2h,c
 10167  0006C6  0E47               	movlw	low checkAndSendLatchData@readback_cmos_pkt
 10168  0006C8  6EDE               	movwf	postinc2,c
 10169  0006CA  0E08               	movlw	high checkAndSendLatchData@readback_cmos_pkt
 10170  0006CC  6EDD               	movwf	postdec2,c
 10171                           
 10172                           ; BSR set to: 0
 10173  0006CE  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
 10174  0006D0                     l1277:
 10175                           
 10176                           ; BSR set to: 0
 10177                           ;HX_ASL_BORON.c: 1379: }
 10178                           ;HX_ASL_BORON.c: 1381: if (!(LATCH_ADC_DATA & tsld.LATCH_ADC_DATA))
 10179                           
 10180                           ; BSR set to: 0
 10181  0006D0  0105               	movlb	5	; () banked
 10182  0006D2  51D9               	movf	_LATCH_ADC_DATA& (0+255),w,b
 10183  0006D4  0106               	movlb	6	; () banked
 10184  0006D6  15E7               	andwf	(_tsld+18)& (0+255),w,b
 10185  0006D8  0100               	movlb	0	; () banked
 10186  0006DA  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10187  0006DC  0105               	movlb	5	; () banked
 10188  0006DE  51DA               	movf	(_LATCH_ADC_DATA+1)& (0+255),w,b
 10189  0006E0  0106               	movlb	6	; () banked
 10190  0006E2  15E8               	andwf	(_tsld+19)& (0+255),w,b
 10191  0006E4  0100               	movlb	0	; () banked
 10192  0006E6  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
 10193  0006E8  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10194  0006EA  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
 10195  0006EC  A4D8               	btfss	status,2,c
 10196  0006EE  D043               	goto	l1278
 10197                           
 10198                           ; BSR set to: 0
 10199                           ;HX_ASL_BORON.c: 1382: {
 10200                           ;HX_ASL_BORON.c: 1383: LATCH_ADC_DATA = tsld.LATCH_ADC_DATA;
 10201  0006F0  C6E7  F5D9         	movff	_tsld+18,_LATCH_ADC_DATA
 10202  0006F4  C6E8  F5DA         	movff	_tsld+19,_LATCH_ADC_DATA+1
 10203  0006F8  0105               	movlb	5	; () banked
 10204  0006FA  6BDB               	clrf	(_LATCH_ADC_DATA+2)& (0+255),b
 10205  0006FC  6BDC               	clrf	(_LATCH_ADC_DATA+3)& (0+255),b
 10206                           
 10207                           ; BSR set to: 5
 10208                           ;HX_ASL_BORON.c: 1384: txRxPkt adc_pkt;
 10209                           ;HX_ASL_BORON.c: 1385: setupLatchPkt(&adc_pkt, LATCH_ADC_DATA, 0x9);
 10210  0006FE  0E8E               	movlw	low checkAndSendLatchData@adc_pkt
 10211  000700  0100               	movlb	0	; () banked
 10212  000702  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 10213  000704  0E04               	movlw	high checkAndSendLatchData@adc_pkt
 10214  000706  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 10215  000708  C5D9  F067         	movff	_LATCH_ADC_DATA,setupLatchPkt@latch_data
 10216  00070C  C5DA  F068         	movff	_LATCH_ADC_DATA+1,setupLatchPkt@latch_data+1
 10217  000710  0E09               	movlw	9
 10218  000712  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 10219  000714  EC44  F017         	call	_setupLatchPkt	;wreg free
 10220                           
 10221                           ;HX_ASL_BORON.c: 1386: stream[latchSendCount++] = &adc_pkt;
 10222  000718  0100               	movlb	0	; () banked
 10223  00071A  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10224  00071C  0D02               	mullw	2
 10225  00071E  0E79               	movlw	low checkAndSendLatchData@stream
 10226  000720  24F3               	addwf	prodl,w,c
 10227  000722  6ED9               	movwf	fsr2l,c
 10228  000724  0E00               	movlw	high checkAndSendLatchData@stream
 10229  000726  20F4               	addwfc	prodh,w,c
 10230  000728  6EDA               	movwf	fsr2h,c
 10231  00072A  0E8E               	movlw	low checkAndSendLatchData@adc_pkt
 10232  00072C  6EDE               	movwf	postinc2,c
 10233  00072E  0E04               	movlw	high checkAndSendLatchData@adc_pkt
 10234  000730  6EDD               	movwf	postdec2,c
 10235                           
 10236                           ; BSR set to: 0
 10237  000732  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10238                           
 10239                           ; BSR set to: 0
 10240                           ;HX_ASL_BORON.c: 1387: txRxPkt readback_adc_pkt;
 10241                           ;HX_ASL_BORON.c: 1388: setupCmdReadbackPkt(&readback_adc_pkt);
 10242  000734  0E8E               	movlw	low checkAndSendLatchData@readback_adc_pkt
 10243  000736  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 10244  000738  0E08               	movlw	high checkAndSendLatchData@readback_adc_pkt
 10245  00073A  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 10246  00073C  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 10247                           
 10248                           ;HX_ASL_BORON.c: 1389: stream[latchSendCount++] = &readback_adc_pkt;
 10249  000740  0100               	movlb	0	; () banked
 10250  000742  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10251  000744  0D02               	mullw	2
 10252  000746  0E79               	movlw	low checkAndSendLatchData@stream
 10253  000748  24F3               	addwf	prodl,w,c
 10254  00074A  6ED9               	movwf	fsr2l,c
 10255  00074C  0E00               	movlw	high checkAndSendLatchData@stream
 10256  00074E  20F4               	addwfc	prodh,w,c
 10257  000750  6EDA               	movwf	fsr2h,c
 10258  000752  0E8E               	movlw	low checkAndSendLatchData@readback_adc_pkt
 10259  000754  6EDE               	movwf	postinc2,c
 10260  000756  0E08               	movlw	high checkAndSendLatchData@readback_adc_pkt
 10261  000758  6EDD               	movwf	postdec2,c
 10262                           
 10263                           ; BSR set to: 0
 10264  00075A  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10265                           
 10266                           ; BSR set to: 0
 10267                           ;HX_ASL_BORON.c: 1390: readbackPkts[readbackSendCount++] = &readback_adc_pkt;
 10268  00075C  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
 10269  00075E  0D02               	mullw	2
 10270  000760  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10271  000762  24F3               	addwf	prodl,w,c
 10272  000764  6ED9               	movwf	fsr2l,c
 10273  000766  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10274  000768  20F4               	addwfc	prodh,w,c
 10275  00076A  6EDA               	movwf	fsr2h,c
 10276  00076C  0E8E               	movlw	low checkAndSendLatchData@readback_adc_pkt
 10277  00076E  6EDE               	movwf	postinc2,c
 10278  000770  0E08               	movlw	high checkAndSendLatchData@readback_adc_pkt
 10279  000772  6EDD               	movwf	postdec2,c
 10280                           
 10281                           ; BSR set to: 0
 10282  000774  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
 10283  000776                     l1278:
 10284                           
 10285                           ; BSR set to: 0
 10286                           ;HX_ASL_BORON.c: 1391: }
 10287                           ;HX_ASL_BORON.c: 1393: if (!(LATCH_ADC_MUX_DATA & tsld.LATCH_ADC_MUX_DATA))
 10288                           
 10289                           ; BSR set to: 0
 10290  000776  0106               	movlb	6	; () banked
 10291  000778  51F3               	movf	_LATCH_ADC_MUX_DATA& (0+255),w,b
 10292  00077A  15E9               	andwf	(_tsld+20)& (0+255),w,b
 10293  00077C  0100               	movlb	0	; () banked
 10294  00077E  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10295  000780  0106               	movlb	6	; () banked
 10296  000782  51F4               	movf	(_LATCH_ADC_MUX_DATA+1)& (0+255),w,b
 10297  000784  15EA               	andwf	(_tsld+21)& (0+255),w,b
 10298  000786  0100               	movlb	0	; () banked
 10299  000788  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
 10300  00078A  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10301  00078C  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
 10302  00078E  A4D8               	btfss	status,2,c
 10303  000790  D043               	goto	l1279
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;HX_ASL_BORON.c: 1394: {
 10307                           ;HX_ASL_BORON.c: 1395: LATCH_ADC_MUX_DATA = tsld.LATCH_ADC_MUX_DATA;
 10308  000792  C6E9  F6F3         	movff	_tsld+20,_LATCH_ADC_MUX_DATA
 10309  000796  C6EA  F6F4         	movff	_tsld+21,_LATCH_ADC_MUX_DATA+1
 10310  00079A  0106               	movlb	6	; () banked
 10311  00079C  6BF5               	clrf	(_LATCH_ADC_MUX_DATA+2)& (0+255),b
 10312  00079E  6BF6               	clrf	(_LATCH_ADC_MUX_DATA+3)& (0+255),b
 10313                           
 10314                           ; BSR set to: 6
 10315                           ;HX_ASL_BORON.c: 1396: txRxPkt adc_mux_pkt;
 10316                           ;HX_ASL_BORON.c: 1397: setupLatchPkt(&adc_mux_pkt, LATCH_ADC_MUX_DATA, 0xA);
 10317  0007A0  0E47               	movlw	low checkAndSendLatchData@adc_mux_pkt
 10318  0007A2  0100               	movlb	0	; () banked
 10319  0007A4  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 10320  0007A6  0E05               	movlw	high checkAndSendLatchData@adc_mux_pkt
 10321  0007A8  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 10322  0007AA  C6F3  F067         	movff	_LATCH_ADC_MUX_DATA,setupLatchPkt@latch_data
 10323  0007AE  C6F4  F068         	movff	_LATCH_ADC_MUX_DATA+1,setupLatchPkt@latch_data+1
 10324  0007B2  0E0A               	movlw	10
 10325  0007B4  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 10326  0007B6  EC44  F017         	call	_setupLatchPkt	;wreg free
 10327                           
 10328                           ;HX_ASL_BORON.c: 1398: stream[latchSendCount++] = &adc_mux_pkt;
 10329  0007BA  0100               	movlb	0	; () banked
 10330  0007BC  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10331  0007BE  0D02               	mullw	2
 10332  0007C0  0E79               	movlw	low checkAndSendLatchData@stream
 10333  0007C2  24F3               	addwf	prodl,w,c
 10334  0007C4  6ED9               	movwf	fsr2l,c
 10335  0007C6  0E00               	movlw	high checkAndSendLatchData@stream
 10336  0007C8  20F4               	addwfc	prodh,w,c
 10337  0007CA  6EDA               	movwf	fsr2h,c
 10338  0007CC  0E47               	movlw	low checkAndSendLatchData@adc_mux_pkt
 10339  0007CE  6EDE               	movwf	postinc2,c
 10340  0007D0  0E05               	movlw	high checkAndSendLatchData@adc_mux_pkt
 10341  0007D2  6EDD               	movwf	postdec2,c
 10342                           
 10343                           ; BSR set to: 0
 10344  0007D4  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10345                           
 10346                           ; BSR set to: 0
 10347                           ;HX_ASL_BORON.c: 1399: txRxPkt readback_adc_mux_pkt;
 10348                           ;HX_ASL_BORON.c: 1400: setupCmdReadbackPkt(&readback_adc_mux_pkt);
 10349  0007D6  0E00               	movlw	low checkAndSendLatchData@readback_adc_mux_pkt
 10350  0007D8  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 10351  0007DA  0E09               	movlw	high checkAndSendLatchData@readback_adc_mux_pkt
 10352  0007DC  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 10353  0007DE  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 10354                           
 10355                           ;HX_ASL_BORON.c: 1401: stream[latchSendCount++] = &readback_adc_mux_pkt;
 10356  0007E2  0100               	movlb	0	; () banked
 10357  0007E4  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10358  0007E6  0D02               	mullw	2
 10359  0007E8  0E79               	movlw	low checkAndSendLatchData@stream
 10360  0007EA  24F3               	addwf	prodl,w,c
 10361  0007EC  6ED9               	movwf	fsr2l,c
 10362  0007EE  0E00               	movlw	high checkAndSendLatchData@stream
 10363  0007F0  20F4               	addwfc	prodh,w,c
 10364  0007F2  6EDA               	movwf	fsr2h,c
 10365  0007F4  0E00               	movlw	low checkAndSendLatchData@readback_adc_mux_pkt
 10366  0007F6  6EDE               	movwf	postinc2,c
 10367  0007F8  0E09               	movlw	high checkAndSendLatchData@readback_adc_mux_pkt
 10368  0007FA  6EDD               	movwf	postdec2,c
 10369                           
 10370                           ; BSR set to: 0
 10371  0007FC  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10372                           
 10373                           ; BSR set to: 0
 10374                           ;HX_ASL_BORON.c: 1402: readbackPkts[readbackSendCount++] = &readback_adc_mux_pkt;
 10375  0007FE  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
 10376  000800  0D02               	mullw	2
 10377  000802  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10378  000804  24F3               	addwf	prodl,w,c
 10379  000806  6ED9               	movwf	fsr2l,c
 10380  000808  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10381  00080A  20F4               	addwfc	prodh,w,c
 10382  00080C  6EDA               	movwf	fsr2h,c
 10383  00080E  0E00               	movlw	low checkAndSendLatchData@readback_adc_mux_pkt
 10384  000810  6EDE               	movwf	postinc2,c
 10385  000812  0E09               	movlw	high checkAndSendLatchData@readback_adc_mux_pkt
 10386  000814  6EDD               	movwf	postdec2,c
 10387                           
 10388                           ; BSR set to: 0
 10389  000816  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
 10390  000818                     l1279:
 10391                           
 10392                           ; BSR set to: 0
 10393                           ;HX_ASL_BORON.c: 1403: }
 10394                           ;HX_ASL_BORON.c: 1405: if (!(LATCH_OCXO_DIVISOR_DATA & tsld.LATCH_OCXO_DIVISOR_DATA))
 10395                           
 10396                           ; BSR set to: 0
 10397  000818  0106               	movlb	6	; () banked
 10398  00081A  51EF               	movf	_LATCH_OCXO_DIVISOR_DATA& (0+255),w,b
 10399  00081C  15EB               	andwf	(_tsld+22)& (0+255),w,b
 10400  00081E  0100               	movlb	0	; () banked
 10401  000820  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10402  000822  0106               	movlb	6	; () banked
 10403  000824  51F0               	movf	(_LATCH_OCXO_DIVISOR_DATA+1)& (0+255),w,b
 10404  000826  15EC               	andwf	(_tsld+23)& (0+255),w,b
 10405  000828  0100               	movlb	0	; () banked
 10406  00082A  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
 10407  00082C  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10408  00082E  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
 10409  000830  A4D8               	btfss	status,2,c
 10410  000832  D043               	goto	l1280
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;HX_ASL_BORON.c: 1406: {
 10414                           ;HX_ASL_BORON.c: 1407: LATCH_OCXO_DIVISOR_DATA = tsld.LATCH_OCXO_DIVISOR_DATA;
 10415  000834  C6EB  F6EF         	movff	_tsld+22,_LATCH_OCXO_DIVISOR_DATA
 10416  000838  C6EC  F6F0         	movff	_tsld+23,_LATCH_OCXO_DIVISOR_DATA+1
 10417  00083C  0106               	movlb	6	; () banked
 10418  00083E  6BF1               	clrf	(_LATCH_OCXO_DIVISOR_DATA+2)& (0+255),b
 10419  000840  6BF2               	clrf	(_LATCH_OCXO_DIVISOR_DATA+3)& (0+255),b
 10420                           
 10421                           ; BSR set to: 6
 10422                           ;HX_ASL_BORON.c: 1408: txRxPkt ocxo_divisor_pkt;
 10423                           ;HX_ASL_BORON.c: 1409: setupLatchPkt(&ocxo_divisor_pkt, LATCH_OCXO_DIVISOR_DATA, 0xB);
 10424  000842  0E8E               	movlw	low checkAndSendLatchData@ocxo_divisor_pkt
 10425  000844  0100               	movlb	0	; () banked
 10426  000846  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 10427  000848  0E05               	movlw	high checkAndSendLatchData@ocxo_divisor_pkt
 10428  00084A  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 10429  00084C  C6EF  F067         	movff	_LATCH_OCXO_DIVISOR_DATA,setupLatchPkt@latch_data
 10430  000850  C6F0  F068         	movff	_LATCH_OCXO_DIVISOR_DATA+1,setupLatchPkt@latch_data+1
 10431  000854  0E0B               	movlw	11
 10432  000856  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 10433  000858  EC44  F017         	call	_setupLatchPkt	;wreg free
 10434                           
 10435                           ;HX_ASL_BORON.c: 1410: stream[latchSendCount++] = &ocxo_divisor_pkt;
 10436  00085C  0100               	movlb	0	; () banked
 10437  00085E  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10438  000860  0D02               	mullw	2
 10439  000862  0E79               	movlw	low checkAndSendLatchData@stream
 10440  000864  24F3               	addwf	prodl,w,c
 10441  000866  6ED9               	movwf	fsr2l,c
 10442  000868  0E00               	movlw	high checkAndSendLatchData@stream
 10443  00086A  20F4               	addwfc	prodh,w,c
 10444  00086C  6EDA               	movwf	fsr2h,c
 10445  00086E  0E8E               	movlw	low checkAndSendLatchData@ocxo_divisor_pkt
 10446  000870  6EDE               	movwf	postinc2,c
 10447  000872  0E05               	movlw	high checkAndSendLatchData@ocxo_divisor_pkt
 10448  000874  6EDD               	movwf	postdec2,c
 10449                           
 10450                           ; BSR set to: 0
 10451  000876  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10452                           
 10453                           ; BSR set to: 0
 10454                           ;HX_ASL_BORON.c: 1411: txRxPkt readback_ocxo_divisor_pkt;
 10455                           ;HX_ASL_BORON.c: 1412: setupCmdReadbackPkt(&readback_ocxo_divisor_pkt);
 10456  000878  0E47               	movlw	low checkAndSendLatchData@readback_ocxo_divisor_pkt
 10457  00087A  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 10458  00087C  0E09               	movlw	high checkAndSendLatchData@readback_ocxo_divisor_pkt
 10459  00087E  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 10460  000880  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 10461                           
 10462                           ;HX_ASL_BORON.c: 1413: stream[latchSendCount++] = &readback_ocxo_divisor_pkt;
 10463  000884  0100               	movlb	0	; () banked
 10464  000886  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10465  000888  0D02               	mullw	2
 10466  00088A  0E79               	movlw	low checkAndSendLatchData@stream
 10467  00088C  24F3               	addwf	prodl,w,c
 10468  00088E  6ED9               	movwf	fsr2l,c
 10469  000890  0E00               	movlw	high checkAndSendLatchData@stream
 10470  000892  20F4               	addwfc	prodh,w,c
 10471  000894  6EDA               	movwf	fsr2h,c
 10472  000896  0E47               	movlw	low checkAndSendLatchData@readback_ocxo_divisor_pkt
 10473  000898  6EDE               	movwf	postinc2,c
 10474  00089A  0E09               	movlw	high checkAndSendLatchData@readback_ocxo_divisor_pkt
 10475  00089C  6EDD               	movwf	postdec2,c
 10476                           
 10477                           ; BSR set to: 0
 10478  00089E  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10479                           
 10480                           ; BSR set to: 0
 10481                           ;HX_ASL_BORON.c: 1414: readbackPkts[readbackSendCount++] = &readback_ocxo_divisor_pkt;
 10482  0008A0  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
 10483  0008A2  0D02               	mullw	2
 10484  0008A4  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10485  0008A6  24F3               	addwf	prodl,w,c
 10486  0008A8  6ED9               	movwf	fsr2l,c
 10487  0008AA  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10488  0008AC  20F4               	addwfc	prodh,w,c
 10489  0008AE  6EDA               	movwf	fsr2h,c
 10490  0008B0  0E47               	movlw	low checkAndSendLatchData@readback_ocxo_divisor_pkt
 10491  0008B2  6EDE               	movwf	postinc2,c
 10492  0008B4  0E09               	movlw	high checkAndSendLatchData@readback_ocxo_divisor_pkt
 10493  0008B6  6EDD               	movwf	postdec2,c
 10494                           
 10495                           ; BSR set to: 0
 10496  0008B8  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
 10497  0008BA                     l1280:
 10498                           
 10499                           ; BSR set to: 0
 10500                           ;HX_ASL_BORON.c: 1415: }
 10501                           ;HX_ASL_BORON.c: 1417: if (!(LATCH_CLOCK_SELECT_DATA & tsld.LATCH_CLOCK_SELECT_DATA))
 10502                           
 10503                           ; BSR set to: 0
 10504  0008BA  0105               	movlb	5	; () banked
 10505  0008BC  51D5               	movf	_LATCH_CLOCK_SELECT_DATA& (0+255),w,b
 10506  0008BE  0106               	movlb	6	; () banked
 10507  0008C0  15ED               	andwf	(_tsld+24)& (0+255),w,b
 10508  0008C2  0100               	movlb	0	; () banked
 10509  0008C4  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10510  0008C6  0105               	movlb	5	; () banked
 10511  0008C8  51D6               	movf	(_LATCH_CLOCK_SELECT_DATA+1)& (0+255),w,b
 10512  0008CA  0106               	movlb	6	; () banked
 10513  0008CC  15EE               	andwf	(_tsld+25)& (0+255),w,b
 10514  0008CE  0100               	movlb	0	; () banked
 10515  0008D0  6F77               	movwf	(??_checkAndSendLatchData+1)& (0+255),b
 10516  0008D2  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10517  0008D4  1177               	iorwf	(??_checkAndSendLatchData+1)& (0+255),w,b
 10518  0008D6  A4D8               	btfss	status,2,c
 10519  0008D8  D043               	goto	l1281
 10520                           
 10521                           ; BSR set to: 0
 10522                           ;HX_ASL_BORON.c: 1418: {
 10523                           ;HX_ASL_BORON.c: 1419: LATCH_CLOCK_SELECT_DATA = tsld.LATCH_CLOCK_SELECT_DATA;
 10524  0008DA  C6ED  F5D5         	movff	_tsld+24,_LATCH_CLOCK_SELECT_DATA
 10525  0008DE  C6EE  F5D6         	movff	_tsld+25,_LATCH_CLOCK_SELECT_DATA+1
 10526  0008E2  0105               	movlb	5	; () banked
 10527  0008E4  6BD7               	clrf	(_LATCH_CLOCK_SELECT_DATA+2)& (0+255),b
 10528  0008E6  6BD8               	clrf	(_LATCH_CLOCK_SELECT_DATA+3)& (0+255),b
 10529                           
 10530                           ; BSR set to: 5
 10531                           ;HX_ASL_BORON.c: 1420: txRxPkt clock_select_pkt;
 10532                           ;HX_ASL_BORON.c: 1421: setupLatchPkt(&clock_select_pkt, LATCH_CLOCK_SELECT_DATA, LATCH_C
      +                          LOCK_SELECT_DATA);
 10533  0008E8  0E00               	movlw	low checkAndSendLatchData@clock_select_pkt
 10534  0008EA  0100               	movlb	0	; () banked
 10535  0008EC  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 10536  0008EE  0E0A               	movlw	high checkAndSendLatchData@clock_select_pkt
 10537  0008F0  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 10538  0008F2  C5D5  F067         	movff	_LATCH_CLOCK_SELECT_DATA,setupLatchPkt@latch_data
 10539  0008F6  C5D6  F068         	movff	_LATCH_CLOCK_SELECT_DATA+1,setupLatchPkt@latch_data+1
 10540  0008FA  C5D5  F069         	movff	_LATCH_CLOCK_SELECT_DATA,setupLatchPkt@latch_num
 10541  0008FE  EC44  F017         	call	_setupLatchPkt	;wreg free
 10542                           
 10543                           ;HX_ASL_BORON.c: 1422: stream[latchSendCount++] = &clock_select_pkt;
 10544  000902  0100               	movlb	0	; () banked
 10545  000904  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10546  000906  0D02               	mullw	2
 10547  000908  0E79               	movlw	low checkAndSendLatchData@stream
 10548  00090A  24F3               	addwf	prodl,w,c
 10549  00090C  6ED9               	movwf	fsr2l,c
 10550  00090E  0E00               	movlw	high checkAndSendLatchData@stream
 10551  000910  20F4               	addwfc	prodh,w,c
 10552  000912  6EDA               	movwf	fsr2h,c
 10553  000914  0E00               	movlw	low checkAndSendLatchData@clock_select_pkt
 10554  000916  6EDE               	movwf	postinc2,c
 10555  000918  0E0A               	movlw	high checkAndSendLatchData@clock_select_pkt
 10556  00091A  6EDD               	movwf	postdec2,c
 10557                           
 10558                           ; BSR set to: 0
 10559  00091C  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10560                           
 10561                           ; BSR set to: 0
 10562                           ;HX_ASL_BORON.c: 1423: txRxPkt readback_clock_select_pkt;
 10563                           ;HX_ASL_BORON.c: 1424: setupCmdReadbackPkt(&readback_clock_select_pkt);
 10564  00091E  0E8E               	movlw	low checkAndSendLatchData@readback_clock_select_pkt
 10565  000920  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 10566  000922  0E09               	movlw	high checkAndSendLatchData@readback_clock_select_pkt
 10567  000924  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 10568  000926  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 10569                           
 10570                           ;HX_ASL_BORON.c: 1425: stream[latchSendCount++] = &readback_clock_select_pkt;
 10571  00092A  0100               	movlb	0	; () banked
 10572  00092C  51C3               	movf	checkAndSendLatchData@latchSendCount& (0+255),w,b
 10573  00092E  0D02               	mullw	2
 10574  000930  0E79               	movlw	low checkAndSendLatchData@stream
 10575  000932  24F3               	addwf	prodl,w,c
 10576  000934  6ED9               	movwf	fsr2l,c
 10577  000936  0E00               	movlw	high checkAndSendLatchData@stream
 10578  000938  20F4               	addwfc	prodh,w,c
 10579  00093A  6EDA               	movwf	fsr2h,c
 10580  00093C  0E8E               	movlw	low checkAndSendLatchData@readback_clock_select_pkt
 10581  00093E  6EDE               	movwf	postinc2,c
 10582  000940  0E09               	movlw	high checkAndSendLatchData@readback_clock_select_pkt
 10583  000942  6EDD               	movwf	postdec2,c
 10584                           
 10585                           ; BSR set to: 0
 10586  000944  2BC3               	incf	checkAndSendLatchData@latchSendCount& (0+255),f,b
 10587                           
 10588                           ; BSR set to: 0
 10589                           ;HX_ASL_BORON.c: 1426: readbackPkts[readbackSendCount++] = &readback_clock_select_pkt;
 10590  000946  51C2               	movf	checkAndSendLatchData@readbackSendCount& (0+255),w,b
 10591  000948  0D02               	mullw	2
 10592  00094A  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10593  00094C  24F3               	addwf	prodl,w,c
 10594  00094E  6ED9               	movwf	fsr2l,c
 10595  000950  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10596  000952  20F4               	addwfc	prodh,w,c
 10597  000954  6EDA               	movwf	fsr2h,c
 10598  000956  0E8E               	movlw	low checkAndSendLatchData@readback_clock_select_pkt
 10599  000958  6EDE               	movwf	postinc2,c
 10600  00095A  0E09               	movlw	high checkAndSendLatchData@readback_clock_select_pkt
 10601  00095C  6EDD               	movwf	postdec2,c
 10602                           
 10603                           ; BSR set to: 0
 10604  00095E  2BC2               	incf	checkAndSendLatchData@readbackSendCount& (0+255),f,b
 10605  000960                     l1281:
 10606                           
 10607                           ; BSR set to: 0
 10608                           ;HX_ASL_BORON.c: 1427: }
 10609                           ;HX_ASL_BORON.c: 1430: stream_status = streamBoronComm(BORON_COMM_TYPE, stream, latchSen
      +                          dCount);
 10610                           
 10611                           ; BSR set to: 0
 10612  000960  0E79               	movlw	low checkAndSendLatchData@stream
 10613  000962  6F6E               	movwf	streamBoronComm@pktArr& (0+255),b
 10614  000964  0E00               	movlw	high checkAndSendLatchData@stream
 10615  000966  6F6F               	movwf	(streamBoronComm@pktArr+1)& (0+255),b
 10616  000968  C0C3  F070         	movff	checkAndSendLatchData@latchSendCount,streamBoronComm@pktSize
 10617  00096C  5030               	movf	_BORON_COMM_TYPE,w,c
 10618  00096E  EC6E  F01E         	call	_streamBoronComm
 10619  000972  0100               	movlb	0	; () banked
 10620  000974  6F78               	movwf	checkAndSendLatchData@stream_status& (0+255),b
 10621                           
 10622                           ; BSR set to: 0
 10623                           ;HX_ASL_BORON.c: 1433: if (stream_status != 0)
 10624  000976  5178               	movf	checkAndSendLatchData@stream_status& (0+255),w,b
 10625  000978  B4D8               	btfsc	status,2,c
 10626  00097A  D002               	goto	l1282
 10627                           
 10628                           ; BSR set to: 0
 10629                           ;HX_ASL_BORON.c: 1434: {
 10630                           ;HX_ASL_BORON.c: 1437: noError = 1;
 10631  00097C  0E01               	movlw	1
 10632  00097E  D025               	goto	L26
 10633  000980                     l1282:
 10634                           
 10635                           ; BSR set to: 0
 10636                           ;HX_ASL_BORON.c: 1439: else
 10637                           ;HX_ASL_BORON.c: 1440: {
 10638                           ;HX_ASL_BORON.c: 1441: rxBuffer[*rx_index++] = 0x41;
 10639                           
 10640                           ; BSR set to: 0
 10641  000980  C074  FFD9         	movff	checkAndSendLatchData@rx_index,fsr2l
 10642  000984  C075  FFDA         	movff	checkAndSendLatchData@rx_index+1,fsr2h
 10643  000988  50DF               	movf	indf2,w,c
 10644  00098A  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10645  00098C  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10646  00098E  0D01               	mullw	1
 10647  000990  50F3               	movf	prodl,w,c
 10648  000992  2572               	addwf	checkAndSendLatchData@rxBuffer& (0+255),w,b
 10649  000994  6ED9               	movwf	fsr2l,c
 10650  000996  50F4               	movf	prodh,w,c
 10651  000998  2173               	addwfc	(checkAndSendLatchData@rxBuffer+1)& (0+255),w,b
 10652  00099A  6EDA               	movwf	fsr2h,c
 10653  00099C  0E41               	movlw	65
 10654  00099E  6EDF               	movwf	indf2,c
 10655                           
 10656                           ; BSR set to: 0
 10657  0009A0  4B74               	infsnz	checkAndSendLatchData@rx_index& (0+255),f,b
 10658  0009A2  2B75               	incf	(checkAndSendLatchData@rx_index+1)& (0+255),f,b
 10659                           
 10660                           ; BSR set to: 0
 10661                           ;HX_ASL_BORON.c: 1442: rxBuffer[*rx_index++] = 0xEE;
 10662  0009A4  C074  FFD9         	movff	checkAndSendLatchData@rx_index,fsr2l
 10663  0009A8  C075  FFDA         	movff	checkAndSendLatchData@rx_index+1,fsr2h
 10664  0009AC  50DF               	movf	indf2,w,c
 10665  0009AE  6F76               	movwf	??_checkAndSendLatchData& (0+255),b
 10666  0009B0  5176               	movf	??_checkAndSendLatchData& (0+255),w,b
 10667  0009B2  0D01               	mullw	1
 10668  0009B4  50F3               	movf	prodl,w,c
 10669  0009B6  2572               	addwf	checkAndSendLatchData@rxBuffer& (0+255),w,b
 10670  0009B8  6ED9               	movwf	fsr2l,c
 10671  0009BA  50F4               	movf	prodh,w,c
 10672  0009BC  2173               	addwfc	(checkAndSendLatchData@rxBuffer+1)& (0+255),w,b
 10673  0009BE  6EDA               	movwf	fsr2h,c
 10674  0009C0  0EEE               	movlw	238
 10675  0009C2  6EDF               	movwf	indf2,c
 10676  0009C4  4B74               	infsnz	checkAndSendLatchData@rx_index& (0+255),f,b
 10677  0009C6  2B75               	incf	(checkAndSendLatchData@rx_index+1)& (0+255),f,b
 10678                           
 10679                           ; BSR set to: 0
 10680                           ;HX_ASL_BORON.c: 1443: noError = 0;
 10681  0009C8  0E00               	movlw	0
 10682  0009CA                     L26:
 10683  0009CA  6FC1               	movwf	checkAndSendLatchData@noError& (0+255),b
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;HX_ASL_BORON.c: 1444: }
 10687                           ;HX_ASL_BORON.c: 1446: noError = filterLatchPacketResponses(rxBuffer, rx_index, readback
      +                          Pkts, readbackSendCount);
 10688                           
 10689                           ; BSR set to: 0
 10690  0009CC  C072  F060         	movff	checkAndSendLatchData@rxBuffer,filterLatchPacketResponses@rxBuffer
 10691  0009D0  C073  F061         	movff	checkAndSendLatchData@rxBuffer+1,filterLatchPacketResponses@rxBuffer+1
 10692  0009D4  C074  F062         	movff	checkAndSendLatchData@rx_index,filterLatchPacketResponses@rx_index
 10693  0009D8  C075  F063         	movff	checkAndSendLatchData@rx_index+1,filterLatchPacketResponses@rx_index+1
 10694  0009DC  0EA9               	movlw	low checkAndSendLatchData@readbackPkts
 10695  0009DE  6F64               	movwf	filterLatchPacketResponses@readbackPkts& (0+255),b
 10696  0009E0  0E00               	movlw	high checkAndSendLatchData@readbackPkts
 10697  0009E2  6F65               	movwf	(filterLatchPacketResponses@readbackPkts+1)& (0+255),b
 10698  0009E4  C0C2  F066         	movff	checkAndSendLatchData@readbackSendCount,filterLatchPacketResponses@count
 10699  0009E8  EC88  F013         	call	_filterLatchPacketResponses	;wreg free
 10700  0009EC  0100               	movlb	0	; () banked
 10701  0009EE  6FC1               	movwf	checkAndSendLatchData@noError& (0+255),b
 10702                           
 10703                           ; BSR set to: 0
 10704                           ;HX_ASL_BORON.c: 1449: return noError;
 10705  0009F0  51C1               	movf	checkAndSendLatchData@noError& (0+255),w,b
 10706  0009F2  0012               	return	
 10707  0009F4                     __end_of_checkAndSendLatchData:
 10708                           	opt stack 0
 10709                           tblptru	equ	0xFF8
 10710                           tblptrh	equ	0xFF7
 10711                           tblptrl	equ	0xFF6
 10712                           tablat	equ	0xFF5
 10713                           prodh	equ	0xFF4
 10714                           prodl	equ	0xFF3
 10715                           intcon	equ	0xFF2
 10716                           postinc0	equ	0xFEE
 10717                           wreg	equ	0xFE8
 10718                           indf1	equ	0xFE7
 10719                           postinc1	equ	0xFE6
 10720                           postdec1	equ	0xFE5
 10721                           fsr1h	equ	0xFE2
 10722                           fsr1l	equ	0xFE1
 10723                           indf2	equ	0xFDF
 10724                           postinc2	equ	0xFDE
 10725                           postdec2	equ	0xFDD
 10726                           fsr2h	equ	0xFDA
 10727                           fsr2l	equ	0xFD9
 10728                           status	equ	0xFD8
 10729                           
 10730 ;; *************** function _filterLatchPacketResponses *****************
 10731 ;; Defined at:
 10732 ;;		line 1453 in file "HX_ASL_BORON.c"
 10733 ;; Parameters:    Size  Location     Type
 10734 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 10735 ;;		 -> hx_mainData(61), 
 10736 ;;  rx_index        2    2[BANK0 ] PTR unsigned char 
 10737 ;;		 -> ASLB_SheetResistance@rx_index(1), 
 10738 ;;  readbackPkts    2    4[BANK0 ] PTR PTR struct TxRxPacke
 10739 ;;		 -> checkAndSendLatchData@readbackPkts(24), 
 10740 ;;  count           1    6[BANK0 ] unsigned char 
 10741 ;; Auto vars:     Size  Location     Type
 10742 ;;  i               2   10[BANK0 ] int 
 10743 ;;  possibleErro    1   12[BANK0 ] unsigned char 
 10744 ;; Return value:  Size  Location     Type
 10745 ;;                  1    wreg      unsigned char 
 10746 ;; Registers used:
 10747 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10748 ;; Tracked objects:
 10749 ;;		On entry : 0/0
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10753 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10754 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10755 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10756 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10757 ;;Total ram usage:       13 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:    7
 10760 ;; This function calls:
 10761 ;;		Nothing
 10762 ;; This function is called by:
 10763 ;;		_checkAndSendLatchData
 10764 ;; This function uses a non-reentrant model
 10765 ;;
 10766                           
 10767                           	psect	text22
 10768  002710                     __ptext22:
 10769                           	opt stack 0
 10770  002710                     _filterLatchPacketResponses:
 10771                           	opt stack 19
 10772                           
 10773                           ;HX_ASL_BORON.c: 1456: uint8_t possibleError = 0;
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;incstack = 0
 10777  002710  0E00               	movlw	0
 10778  002712  0100               	movlb	0	; () banked
 10779  002714  6F6C               	movwf	filterLatchPacketResponses@possibleError& (0+255),b
 10780                           
 10781                           ;HX_ASL_BORON.c: 1457: for (int i = 0; i < count; i++)
 10782  002716  0E00               	movlw	0
 10783  002718  6F6B               	movwf	(filterLatchPacketResponses@i+1)& (0+255),b
 10784  00271A  0E00               	movlw	0
 10785  00271C  6F6A               	movwf	filterLatchPacketResponses@i& (0+255),b
 10786  00271E  D098               	goto	l1287
 10787  002720                     
 10788                           ; BSR set to: 0
 10789                           ;HX_ASL_BORON.c: 1458: {
 10790                           ;HX_ASL_BORON.c: 1459: possibleError = readbackPkts[i]->data[1];
 10791                           
 10792                           ; BSR set to: 0
 10793  002720  90D8               	bcf	status,0,c
 10794  002722  356A               	rlcf	filterLatchPacketResponses@i& (0+255),w,b
 10795  002724  6ED9               	movwf	fsr2l,c
 10796  002726  356B               	rlcf	(filterLatchPacketResponses@i+1)& (0+255),w,b
 10797  002728  6EDA               	movwf	fsr2h,c
 10798  00272A  5164               	movf	filterLatchPacketResponses@readbackPkts& (0+255),w,b
 10799  00272C  26D9               	addwf	fsr2l,f,c
 10800  00272E  5165               	movf	(filterLatchPacketResponses@readbackPkts+1)& (0+255),w,b
 10801  002730  22DA               	addwfc	fsr2h,f,c
 10802  002732  EE10 F004          	lfsr	1,4
 10803  002736  50DE               	movf	postinc2,w,c
 10804  002738  26E1               	addwf	fsr1l,f,c
 10805  00273A  50DD               	movf	postdec2,w,c
 10806  00273C  22E2               	addwfc	fsr1h,f,c
 10807  00273E  50E7               	movf	indf1,w,c
 10808  002740  6F6C               	movwf	filterLatchPacketResponses@possibleError& (0+255),b
 10809                           
 10810                           ; BSR set to: 0
 10811                           ;HX_ASL_BORON.c: 1462: if (possibleError == 0x11 ||
 10812                           ;HX_ASL_BORON.c: 1463: possibleError == 0x12 ||
 10813                           ;HX_ASL_BORON.c: 1464: possibleError == 0x13 ||
 10814                           ;HX_ASL_BORON.c: 1465: possibleError == 0x14 ||
 10815                           ;HX_ASL_BORON.c: 1466: possibleError == 0x15 ||
 10816                           ;HX_ASL_BORON.c: 1467: possibleError == 0x16 ||
 10817                           ;HX_ASL_BORON.c: 1468: possibleError == 0x21 ||
 10818                           ;HX_ASL_BORON.c: 1469: possibleError == 0x21)
 10819  002742  0E11               	movlw	17
 10820  002744  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10821  002746  B4D8               	btfsc	status,2,c
 10822  002748  D01C               	goto	u6720
 10823                           
 10824                           ; BSR set to: 0
 10825  00274A  0E12               	movlw	18
 10826  00274C  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10827  00274E  B4D8               	btfsc	status,2,c
 10828  002750  D018               	goto	u6720
 10829                           
 10830                           ; BSR set to: 0
 10831  002752  0E13               	movlw	19
 10832  002754  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10833  002756  B4D8               	btfsc	status,2,c
 10834  002758  D014               	goto	u6720
 10835                           
 10836                           ; BSR set to: 0
 10837  00275A  0E14               	movlw	20
 10838  00275C  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10839  00275E  B4D8               	btfsc	status,2,c
 10840  002760  D010               	goto	u6720
 10841                           
 10842                           ; BSR set to: 0
 10843  002762  0E15               	movlw	21
 10844  002764  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10845  002766  B4D8               	btfsc	status,2,c
 10846  002768  D00C               	goto	u6720
 10847                           
 10848                           ; BSR set to: 0
 10849  00276A  0E16               	movlw	22
 10850  00276C  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10851  00276E  B4D8               	btfsc	status,2,c
 10852  002770  D008               	goto	u6720
 10853                           
 10854                           ; BSR set to: 0
 10855  002772  0E21               	movlw	33
 10856  002774  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10857  002776  B4D8               	btfsc	status,2,c
 10858  002778  D004               	goto	u6720
 10859                           
 10860                           ; BSR set to: 0
 10861  00277A  0E21               	movlw	33
 10862  00277C  196C               	xorwf	filterLatchPacketResponses@possibleError& (0+255),w,b
 10863  00277E  A4D8               	btfss	status,2,c
 10864  002780  D065               	goto	l1289
 10865  002782                     u6720:
 10866                           
 10867                           ; BSR set to: 0
 10868                           ;HX_ASL_BORON.c: 1470: {
 10869                           ;HX_ASL_BORON.c: 1471: rxBuffer[*rx_index++] = readbackPkts[i]->data[0];
 10870                           
 10871                           ; BSR set to: 0
 10872  002782  90D8               	bcf	status,0,c
 10873  002784  356A               	rlcf	filterLatchPacketResponses@i& (0+255),w,b
 10874  002786  6ED9               	movwf	fsr2l,c
 10875  002788  356B               	rlcf	(filterLatchPacketResponses@i+1)& (0+255),w,b
 10876  00278A  6EDA               	movwf	fsr2h,c
 10877  00278C  5164               	movf	filterLatchPacketResponses@readbackPkts& (0+255),w,b
 10878  00278E  26D9               	addwf	fsr2l,f,c
 10879  002790  5165               	movf	(filterLatchPacketResponses@readbackPkts+1)& (0+255),w,b
 10880  002792  22DA               	addwfc	fsr2h,f,c
 10881  002794  EE10 F003          	lfsr	1,3
 10882  002798  50DE               	movf	postinc2,w,c
 10883  00279A  26E1               	addwf	fsr1l,f,c
 10884  00279C  50DD               	movf	postdec2,w,c
 10885  00279E  22E2               	addwfc	fsr1h,f,c
 10886  0027A0  C062  FFD9         	movff	filterLatchPacketResponses@rx_index,fsr2l
 10887  0027A4  C063  FFDA         	movff	filterLatchPacketResponses@rx_index+1,fsr2h
 10888  0027A8  50DF               	movf	indf2,w,c
 10889  0027AA  6F67               	movwf	??_filterLatchPacketResponses& (0+255),b
 10890  0027AC  5167               	movf	??_filterLatchPacketResponses& (0+255),w,b
 10891  0027AE  0D01               	mullw	1
 10892  0027B0  50F3               	movf	prodl,w,c
 10893  0027B2  2560               	addwf	filterLatchPacketResponses@rxBuffer& (0+255),w,b
 10894  0027B4  6ED9               	movwf	fsr2l,c
 10895  0027B6  50F4               	movf	prodh,w,c
 10896  0027B8  2161               	addwfc	(filterLatchPacketResponses@rxBuffer+1)& (0+255),w,b
 10897  0027BA  6EDA               	movwf	fsr2h,c
 10898  0027BC  CFE7 FFDF          	movff	indf1,indf2
 10899                           
 10900                           ; BSR set to: 0
 10901  0027C0  4B62               	infsnz	filterLatchPacketResponses@rx_index& (0+255),f,b
 10902  0027C2  2B63               	incf	(filterLatchPacketResponses@rx_index+1)& (0+255),f,b
 10903                           
 10904                           ; BSR set to: 0
 10905                           ;HX_ASL_BORON.c: 1472: rxBuffer[*rx_index++] = readbackPkts[i]->data[1];
 10906  0027C4  90D8               	bcf	status,0,c
 10907  0027C6  356A               	rlcf	filterLatchPacketResponses@i& (0+255),w,b
 10908  0027C8  6ED9               	movwf	fsr2l,c
 10909  0027CA  356B               	rlcf	(filterLatchPacketResponses@i+1)& (0+255),w,b
 10910  0027CC  6EDA               	movwf	fsr2h,c
 10911  0027CE  5164               	movf	filterLatchPacketResponses@readbackPkts& (0+255),w,b
 10912  0027D0  26D9               	addwf	fsr2l,f,c
 10913  0027D2  5165               	movf	(filterLatchPacketResponses@readbackPkts+1)& (0+255),w,b
 10914  0027D4  22DA               	addwfc	fsr2h,f,c
 10915  0027D6  EE10 F004          	lfsr	1,4
 10916  0027DA  50DE               	movf	postinc2,w,c
 10917  0027DC  26E1               	addwf	fsr1l,f,c
 10918  0027DE  50DD               	movf	postdec2,w,c
 10919  0027E0  22E2               	addwfc	fsr1h,f,c
 10920  0027E2  C062  FFD9         	movff	filterLatchPacketResponses@rx_index,fsr2l
 10921  0027E6  C063  FFDA         	movff	filterLatchPacketResponses@rx_index+1,fsr2h
 10922  0027EA  50DF               	movf	indf2,w,c
 10923  0027EC  6F67               	movwf	??_filterLatchPacketResponses& (0+255),b
 10924  0027EE  5167               	movf	??_filterLatchPacketResponses& (0+255),w,b
 10925  0027F0  0D01               	mullw	1
 10926  0027F2  50F3               	movf	prodl,w,c
 10927  0027F4  2560               	addwf	filterLatchPacketResponses@rxBuffer& (0+255),w,b
 10928  0027F6  6ED9               	movwf	fsr2l,c
 10929  0027F8  50F4               	movf	prodh,w,c
 10930  0027FA  2161               	addwfc	(filterLatchPacketResponses@rxBuffer+1)& (0+255),w,b
 10931  0027FC  6EDA               	movwf	fsr2h,c
 10932  0027FE  CFE7 FFDF          	movff	indf1,indf2
 10933  002802  4B62               	infsnz	filterLatchPacketResponses@rx_index& (0+255),f,b
 10934  002804  2B63               	incf	(filterLatchPacketResponses@rx_index+1)& (0+255),f,b
 10935                           
 10936                           ; BSR set to: 0
 10937                           ;HX_ASL_BORON.c: 1473: rxBuffer[*rx_index++] = readbackPkts[i]->data[2];
 10938  002806  90D8               	bcf	status,0,c
 10939  002808  356A               	rlcf	filterLatchPacketResponses@i& (0+255),w,b
 10940  00280A  6ED9               	movwf	fsr2l,c
 10941  00280C  356B               	rlcf	(filterLatchPacketResponses@i+1)& (0+255),w,b
 10942  00280E  6EDA               	movwf	fsr2h,c
 10943  002810  5164               	movf	filterLatchPacketResponses@readbackPkts& (0+255),w,b
 10944  002812  26D9               	addwf	fsr2l,f,c
 10945  002814  5165               	movf	(filterLatchPacketResponses@readbackPkts+1)& (0+255),w,b
 10946  002816  22DA               	addwfc	fsr2h,f,c
 10947  002818  EE10 F005          	lfsr	1,5
 10948  00281C  50DE               	movf	postinc2,w,c
 10949  00281E  26E1               	addwf	fsr1l,f,c
 10950  002820  50DD               	movf	postdec2,w,c
 10951  002822  22E2               	addwfc	fsr1h,f,c
 10952  002824  C062  FFD9         	movff	filterLatchPacketResponses@rx_index,fsr2l
 10953  002828  C063  FFDA         	movff	filterLatchPacketResponses@rx_index+1,fsr2h
 10954  00282C  50DF               	movf	indf2,w,c
 10955  00282E  6F67               	movwf	??_filterLatchPacketResponses& (0+255),b
 10956  002830  5167               	movf	??_filterLatchPacketResponses& (0+255),w,b
 10957  002832  0D01               	mullw	1
 10958  002834  50F3               	movf	prodl,w,c
 10959  002836  2560               	addwf	filterLatchPacketResponses@rxBuffer& (0+255),w,b
 10960  002838  6ED9               	movwf	fsr2l,c
 10961  00283A  50F4               	movf	prodh,w,c
 10962  00283C  2161               	addwfc	(filterLatchPacketResponses@rxBuffer+1)& (0+255),w,b
 10963  00283E  6EDA               	movwf	fsr2h,c
 10964  002840  CFE7 FFDF          	movff	indf1,indf2
 10965                           
 10966                           ; BSR set to: 0
 10967  002844  4B62               	infsnz	filterLatchPacketResponses@rx_index& (0+255),f,b
 10968  002846  2B63               	incf	(filterLatchPacketResponses@rx_index+1)& (0+255),f,b
 10969                           
 10970                           ; BSR set to: 0
 10971                           ;HX_ASL_BORON.c: 1474: return 0;
 10972  002848  0E00               	movlw	0
 10973                           
 10974                           ; BSR set to: 0
 10975  00284A  0012               	return	
 10976  00284C                     l1289:
 10977                           
 10978                           ; BSR set to: 0
 10979                           
 10980                           ; BSR set to: 0
 10981  00284C  4B6A               	infsnz	filterLatchPacketResponses@i& (0+255),f,b
 10982  00284E  2B6B               	incf	(filterLatchPacketResponses@i+1)& (0+255),f,b
 10983  002850                     l1287:
 10984                           
 10985                           ; BSR set to: 0
 10986                           
 10987                           ; BSR set to: 0
 10988  002850  5166               	movf	filterLatchPacketResponses@count& (0+255),w,b
 10989  002852  6F67               	movwf	??_filterLatchPacketResponses& (0+255),b
 10990  002854  6B68               	clrf	(??_filterLatchPacketResponses+1)& (0+255),b
 10991  002856  5167               	movf	??_filterLatchPacketResponses& (0+255),w,b
 10992  002858  5D6A               	subwf	filterLatchPacketResponses@i& (0+255),w,b
 10993  00285A  516B               	movf	(filterLatchPacketResponses@i+1)& (0+255),w,b
 10994  00285C  0A80               	xorlw	128
 10995  00285E  6F69               	movwf	(??_filterLatchPacketResponses+2)& (0+255),b
 10996  002860  5168               	movf	(??_filterLatchPacketResponses+1)& (0+255),w,b
 10997  002862  0A80               	xorlw	128
 10998  002864  5969               	subwfb	(??_filterLatchPacketResponses+2)& (0+255),w,b
 10999  002866  A0D8               	btfss	status,0,c
 11000  002868  D75B               	goto	l1288
 11001                           
 11002                           ; BSR set to: 0
 11003                           ;HX_ASL_BORON.c: 1475: }
 11004                           ;HX_ASL_BORON.c: 1477: }
 11005                           ;HX_ASL_BORON.c: 1478: return 1;
 11006                           
 11007                           ; BSR set to: 0
 11008  00286A  0E01               	movlw	1
 11009  00286C  0012               	return	
 11010  00286E                     __end_of_filterLatchPacketResponses:
 11011                           	opt stack 0
 11012                           tblptru	equ	0xFF8
 11013                           tblptrh	equ	0xFF7
 11014                           tblptrl	equ	0xFF6
 11015                           tablat	equ	0xFF5
 11016                           prodh	equ	0xFF4
 11017                           prodl	equ	0xFF3
 11018                           intcon	equ	0xFF2
 11019                           postinc0	equ	0xFEE
 11020                           wreg	equ	0xFE8
 11021                           indf1	equ	0xFE7
 11022                           postinc1	equ	0xFE6
 11023                           postdec1	equ	0xFE5
 11024                           fsr1h	equ	0xFE2
 11025                           fsr1l	equ	0xFE1
 11026                           indf2	equ	0xFDF
 11027                           postinc2	equ	0xFDE
 11028                           postdec2	equ	0xFDD
 11029                           fsr2h	equ	0xFDA
 11030                           fsr2l	equ	0xFD9
 11031                           status	equ	0xFD8
 11032                           
 11033 ;; *************** function _ASLB_RDResistor *****************
 11034 ;; Defined at:
 11035 ;;		line 823 in file "HX_ASL_BORON.c"
 11036 ;; Parameters:    Size  Location     Type
 11037 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 11038 ;;		 -> hx_mainData(61), 
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;  rx_index        1    2[BANK0 ] unsigned char 
 11041 ;; Return value:  Size  Location     Type
 11042 ;;                  1    wreg      void 
 11043 ;; Registers used:
 11044 ;;		wreg, status,2
 11045 ;; Tracked objects:
 11046 ;;		On entry : 0/0
 11047 ;;		On exit  : 0/0
 11048 ;;		Unchanged: 0/0
 11049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11050 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11053 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11054 ;;Total ram usage:        3 bytes
 11055 ;; Hardware stack levels used:    1
 11056 ;; Hardware stack levels required when called:    7
 11057 ;; This function calls:
 11058 ;;		Nothing
 11059 ;; This function is called by:
 11060 ;;		_write_ASLBoron_test
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           	psect	text23
 11065  004088                     __ptext23:
 11066                           	opt stack 0
 11067  004088                     _ASLB_RDResistor:
 11068                           	opt stack 21
 11069                           
 11070                           ;HX_ASL_BORON.c: 829: uint8_t rx_index = 0;
 11071                           
 11072                           ; BSR set to: 0
 11073                           ;incstack = 0
 11074  004088  0E00               	movlw	0
 11075  00408A  0100               	movlb	0	; () banked
 11076  00408C  6F62               	movwf	ASLB_RDResistor@rx_index& (0+255),b
 11077                           
 11078                           ; BSR set to: 0
 11079  00408E  0012               	return		;funcret
 11080  004090                     __end_of_ASLB_RDResistor:
 11081                           	opt stack 0
 11082                           tblptru	equ	0xFF8
 11083                           tblptrh	equ	0xFF7
 11084                           tblptrl	equ	0xFF6
 11085                           tablat	equ	0xFF5
 11086                           prodh	equ	0xFF4
 11087                           prodl	equ	0xFF3
 11088                           intcon	equ	0xFF2
 11089                           postinc0	equ	0xFEE
 11090                           wreg	equ	0xFE8
 11091                           indf1	equ	0xFE7
 11092                           postinc1	equ	0xFE6
 11093                           postdec1	equ	0xFE5
 11094                           fsr1h	equ	0xFE2
 11095                           fsr1l	equ	0xFE1
 11096                           indf2	equ	0xFDF
 11097                           postinc2	equ	0xFDE
 11098                           postdec2	equ	0xFDD
 11099                           fsr2h	equ	0xFDA
 11100                           fsr2l	equ	0xFD9
 11101                           status	equ	0xFD8
 11102                           
 11103 ;; *************** function _ASLB_PierceOscillator *****************
 11104 ;; Defined at:
 11105 ;;		line 812 in file "HX_ASL_BORON.c"
 11106 ;; Parameters:    Size  Location     Type
 11107 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 11108 ;;		 -> hx_mainData(61), 
 11109 ;; Auto vars:     Size  Location     Type
 11110 ;;  rx_index        1    2[BANK0 ] unsigned char 
 11111 ;; Return value:  Size  Location     Type
 11112 ;;                  1    wreg      void 
 11113 ;; Registers used:
 11114 ;;		wreg, status,2
 11115 ;; Tracked objects:
 11116 ;;		On entry : 0/0
 11117 ;;		On exit  : 0/0
 11118 ;;		Unchanged: 0/0
 11119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11120 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11123 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11124 ;;Total ram usage:        3 bytes
 11125 ;; Hardware stack levels used:    1
 11126 ;; Hardware stack levels required when called:    7
 11127 ;; This function calls:
 11128 ;;		Nothing
 11129 ;; This function is called by:
 11130 ;;		_write_ASLBoron_test
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           	psect	text24
 11135  004090                     __ptext24:
 11136                           	opt stack 0
 11137  004090                     _ASLB_PierceOscillator:
 11138                           	opt stack 21
 11139                           
 11140                           ;HX_ASL_BORON.c: 818: uint8_t rx_index = 0;
 11141                           
 11142                           ; BSR set to: 0
 11143                           ;incstack = 0
 11144  004090  0E00               	movlw	0
 11145  004092  0100               	movlb	0	; () banked
 11146  004094  6F62               	movwf	ASLB_PierceOscillator@rx_index& (0+255),b
 11147                           
 11148                           ; BSR set to: 0
 11149  004096  0012               	return		;funcret
 11150  004098                     __end_of_ASLB_PierceOscillator:
 11151                           	opt stack 0
 11152                           tblptru	equ	0xFF8
 11153                           tblptrh	equ	0xFF7
 11154                           tblptrl	equ	0xFF6
 11155                           tablat	equ	0xFF5
 11156                           prodh	equ	0xFF4
 11157                           prodl	equ	0xFF3
 11158                           intcon	equ	0xFF2
 11159                           postinc0	equ	0xFEE
 11160                           wreg	equ	0xFE8
 11161                           indf1	equ	0xFE7
 11162                           postinc1	equ	0xFE6
 11163                           postdec1	equ	0xFE5
 11164                           fsr1h	equ	0xFE2
 11165                           fsr1l	equ	0xFE1
 11166                           indf2	equ	0xFDF
 11167                           postinc2	equ	0xFDE
 11168                           postdec2	equ	0xFDD
 11169                           fsr2h	equ	0xFDA
 11170                           fsr2l	equ	0xFD9
 11171                           status	equ	0xFD8
 11172                           
 11173 ;; *************** function _ASLB_OscillatorRegulatorVoltage *****************
 11174 ;; Defined at:
 11175 ;;		line 756 in file "HX_ASL_BORON.c"
 11176 ;; Parameters:    Size  Location     Type
 11177 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11178 ;;		 -> hx_mainData(61), 
 11179 ;; Auto vars:     Size  Location     Type
 11180 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11181 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11182 ;; Return value:  Size  Location     Type
 11183 ;;                  1    wreg      void 
 11184 ;; Registers used:
 11185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11186 ;; Tracked objects:
 11187 ;;		On entry : 0/0
 11188 ;;		On exit  : 0/0
 11189 ;;		Unchanged: 0/0
 11190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11191 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11192 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11194 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11195 ;;Total ram usage:       74 bytes
 11196 ;; Hardware stack levels used:    1
 11197 ;; Hardware stack levels required when called:    8
 11198 ;; This function calls:
 11199 ;;		_setupCmdReadbackPkt
 11200 ;; This function is called by:
 11201 ;;		_write_ASLBoron_test
 11202 ;; This function uses a non-reentrant model
 11203 ;;
 11204                           
 11205                           	psect	text25
 11206  003EE6                     __ptext25:
 11207                           	opt stack 0
 11208  003EE6                     _ASLB_OscillatorRegulatorVoltage:
 11209                           	opt stack 20
 11210                           
 11211                           ;HX_ASL_BORON.c: 763: uint8_t rx_index = 0;
 11212                           
 11213                           ; BSR set to: 0
 11214                           ;incstack = 0
 11215  003EE6  0E00               	movlw	0
 11216  003EE8  0100               	movlb	0	; () banked
 11217  003EEA  6F64               	movwf	ASLB_OscillatorRegulatorVoltage@rx_index& (0+255),b
 11218                           
 11219                           ; BSR set to: 0
 11220                           ;HX_ASL_BORON.c: 766: LATCH_BIAS_DATA |= 0x0004;
 11221  003EEC  0105               	movlb	5	; () banked
 11222  003EEE  85E1               	bsf	_LATCH_BIAS_DATA& (0+255),2,b
 11223                           
 11224                           ; BSR set to: 5
 11225                           ;HX_ASL_BORON.c: 768: txRxPkt cmdReadbackPkt;
 11226                           ;HX_ASL_BORON.c: 769: setupCmdReadbackPkt(&cmdReadbackPkt);
 11227  003EF0  0E65               	movlw	low ASLB_OscillatorRegulatorVoltage@cmdReadbackPkt
 11228  003EF2  0100               	movlb	0	; () banked
 11229  003EF4  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11230  003EF6  0E00               	movlw	high ASLB_OscillatorRegulatorVoltage@cmdReadbackPkt
 11231  003EF8  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11232  003EFA  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11233  003EFE  0012               	return		;funcret
 11234  003F00                     __end_of_ASLB_OscillatorRegulatorVoltage:
 11235                           	opt stack 0
 11236                           tblptru	equ	0xFF8
 11237                           tblptrh	equ	0xFF7
 11238                           tblptrl	equ	0xFF6
 11239                           tablat	equ	0xFF5
 11240                           prodh	equ	0xFF4
 11241                           prodl	equ	0xFF3
 11242                           intcon	equ	0xFF2
 11243                           postinc0	equ	0xFEE
 11244                           wreg	equ	0xFE8
 11245                           indf1	equ	0xFE7
 11246                           postinc1	equ	0xFE6
 11247                           postdec1	equ	0xFE5
 11248                           fsr1h	equ	0xFE2
 11249                           fsr1l	equ	0xFE1
 11250                           indf2	equ	0xFDF
 11251                           postinc2	equ	0xFDE
 11252                           postdec2	equ	0xFDD
 11253                           fsr2h	equ	0xFDA
 11254                           fsr2l	equ	0xFD9
 11255                           status	equ	0xFD8
 11256                           
 11257 ;; *************** function _ASLB_MuxReadingVDD *****************
 11258 ;; Defined at:
 11259 ;;		line 575 in file "HX_ASL_BORON.c"
 11260 ;; Parameters:    Size  Location     Type
 11261 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11262 ;;		 -> hx_mainData(61), 
 11263 ;; Auto vars:     Size  Location     Type
 11264 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11265 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11266 ;; Return value:  Size  Location     Type
 11267 ;;                  1    wreg      void 
 11268 ;; Registers used:
 11269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11270 ;; Tracked objects:
 11271 ;;		On entry : 0/0
 11272 ;;		On exit  : 0/0
 11273 ;;		Unchanged: 0/0
 11274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11275 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11276 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11278 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11279 ;;Total ram usage:       74 bytes
 11280 ;; Hardware stack levels used:    1
 11281 ;; Hardware stack levels required when called:    8
 11282 ;; This function calls:
 11283 ;;		_setupCmdReadbackPkt
 11284 ;; This function is called by:
 11285 ;;		_write_ASLBoron_test
 11286 ;; This function uses a non-reentrant model
 11287 ;;
 11288                           
 11289                           	psect	text26
 11290  003D9A                     __ptext26:
 11291                           	opt stack 0
 11292  003D9A                     _ASLB_MuxReadingVDD:
 11293                           	opt stack 20
 11294                           
 11295                           ;HX_ASL_BORON.c: 583: uint8_t rx_index = 0;
 11296                           
 11297                           ;incstack = 0
 11298  003D9A  0E00               	movlw	0
 11299  003D9C  0100               	movlb	0	; () banked
 11300  003D9E  6F64               	movwf	ASLB_MuxReadingVDD@rx_index& (0+255),b
 11301                           
 11302                           ; BSR set to: 0
 11303                           ;HX_ASL_BORON.c: 586: LATCH_ADC_DATA |= 0x0008;
 11304  003DA0  0105               	movlb	5	; () banked
 11305  003DA2  87D9               	bsf	_LATCH_ADC_DATA& (0+255),3,b
 11306                           
 11307                           ; BSR set to: 5
 11308                           ;HX_ASL_BORON.c: 587: LATCH_ADC_DATA &= 0xFFF8;
 11309  003DA4  0EF8               	movlw	248
 11310  003DA6  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 11311  003DA8  0EFF               	movlw	255
 11312  003DAA  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11313  003DAC  0E00               	movlw	0
 11314  003DAE  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11315  003DB0  0E00               	movlw	0
 11316  003DB2  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11317                           
 11318                           ; BSR set to: 5
 11319                           ;HX_ASL_BORON.c: 589: txRxPkt cmdReadbackPkt;
 11320                           ;HX_ASL_BORON.c: 590: setupCmdReadbackPkt(&cmdReadbackPkt);
 11321  003DB4  0E65               	movlw	low ASLB_MuxReadingVDD@cmdReadbackPkt
 11322  003DB6  0100               	movlb	0	; () banked
 11323  003DB8  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11324  003DBA  0E00               	movlw	high ASLB_MuxReadingVDD@cmdReadbackPkt
 11325  003DBC  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11326  003DBE  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11327  003DC2  0012               	return		;funcret
 11328  003DC4                     __end_of_ASLB_MuxReadingVDD:
 11329                           	opt stack 0
 11330                           tblptru	equ	0xFF8
 11331                           tblptrh	equ	0xFF7
 11332                           tblptrl	equ	0xFF6
 11333                           tablat	equ	0xFF5
 11334                           prodh	equ	0xFF4
 11335                           prodl	equ	0xFF3
 11336                           intcon	equ	0xFF2
 11337                           postinc0	equ	0xFEE
 11338                           wreg	equ	0xFE8
 11339                           indf1	equ	0xFE7
 11340                           postinc1	equ	0xFE6
 11341                           postdec1	equ	0xFE5
 11342                           fsr1h	equ	0xFE2
 11343                           fsr1l	equ	0xFE1
 11344                           indf2	equ	0xFDF
 11345                           postinc2	equ	0xFDE
 11346                           postdec2	equ	0xFDD
 11347                           fsr2h	equ	0xFDA
 11348                           fsr2l	equ	0xFD9
 11349                           status	equ	0xFD8
 11350                           
 11351 ;; *************** function _ASLB_MuxOpenCircuit *****************
 11352 ;; Defined at:
 11353 ;;		line 738 in file "HX_ASL_BORON.c"
 11354 ;; Parameters:    Size  Location     Type
 11355 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11356 ;;		 -> hx_mainData(61), 
 11357 ;; Auto vars:     Size  Location     Type
 11358 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11359 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11360 ;; Return value:  Size  Location     Type
 11361 ;;                  1    wreg      void 
 11362 ;; Registers used:
 11363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11364 ;; Tracked objects:
 11365 ;;		On entry : 0/0
 11366 ;;		On exit  : 0/0
 11367 ;;		Unchanged: 0/0
 11368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11369 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11370 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11372 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11373 ;;Total ram usage:       74 bytes
 11374 ;; Hardware stack levels used:    1
 11375 ;; Hardware stack levels required when called:    8
 11376 ;; This function calls:
 11377 ;;		_setupCmdReadbackPkt
 11378 ;; This function is called by:
 11379 ;;		_write_ASLBoron_test
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           	psect	text27
 11384  003B74                     __ptext27:
 11385                           	opt stack 0
 11386  003B74                     _ASLB_MuxOpenCircuit:
 11387                           	opt stack 20
 11388                           
 11389                           ;HX_ASL_BORON.c: 746: uint8_t rx_index = 0;
 11390                           
 11391                           ;incstack = 0
 11392  003B74  0E00               	movlw	0
 11393  003B76  0100               	movlb	0	; () banked
 11394  003B78  6F64               	movwf	ASLB_MuxOpenCircuit@rx_index& (0+255),b
 11395                           
 11396                           ; BSR set to: 0
 11397                           ;HX_ASL_BORON.c: 749: LATCH_ADC_DATA |= 0x000F;
 11398  003B7A  0E0F               	movlw	15
 11399  003B7C  0105               	movlb	5	; () banked
 11400  003B7E  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
 11401  003B80  0E00               	movlw	0
 11402  003B82  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11403  003B84  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11404  003B86  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11405                           
 11406                           ; BSR set to: 5
 11407                           ;HX_ASL_BORON.c: 750: LATCH_ADC_DATA &= 0xFFFF;
 11408  003B88  0EFF               	movlw	255
 11409  003B8A  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 11410  003B8C  0EFF               	movlw	255
 11411  003B8E  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11412  003B90  0E00               	movlw	0
 11413  003B92  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11414  003B94  0E00               	movlw	0
 11415  003B96  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11416                           
 11417                           ; BSR set to: 5
 11418                           ;HX_ASL_BORON.c: 752: txRxPkt cmdReadbackPkt;
 11419                           ;HX_ASL_BORON.c: 753: setupCmdReadbackPkt(&cmdReadbackPkt);
 11420  003B98  0E65               	movlw	low ASLB_MuxOpenCircuit@cmdReadbackPkt
 11421  003B9A  0100               	movlb	0	; () banked
 11422  003B9C  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11423  003B9E  0E00               	movlw	high ASLB_MuxOpenCircuit@cmdReadbackPkt
 11424  003BA0  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11425  003BA2  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11426  003BA6  0012               	return		;funcret
 11427  003BA8                     __end_of_ASLB_MuxOpenCircuit:
 11428                           	opt stack 0
 11429                           tblptru	equ	0xFF8
 11430                           tblptrh	equ	0xFF7
 11431                           tblptrl	equ	0xFF6
 11432                           tablat	equ	0xFF5
 11433                           prodh	equ	0xFF4
 11434                           prodl	equ	0xFF3
 11435                           intcon	equ	0xFF2
 11436                           postinc0	equ	0xFEE
 11437                           wreg	equ	0xFE8
 11438                           indf1	equ	0xFE7
 11439                           postinc1	equ	0xFE6
 11440                           postdec1	equ	0xFE5
 11441                           fsr1h	equ	0xFE2
 11442                           fsr1l	equ	0xFE1
 11443                           indf2	equ	0xFDF
 11444                           postinc2	equ	0xFDE
 11445                           postdec2	equ	0xFDD
 11446                           fsr2h	equ	0xFDA
 11447                           fsr2l	equ	0xFD9
 11448                           status	equ	0xFD8
 11449                           
 11450 ;; *************** function _ASLB_InternalTempSensor *****************
 11451 ;; Defined at:
 11452 ;;		line 555 in file "HX_ASL_BORON.c"
 11453 ;; Parameters:    Size  Location     Type
 11454 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11455 ;;		 -> hx_mainData(61), 
 11456 ;; Auto vars:     Size  Location     Type
 11457 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11458 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11459 ;; Return value:  Size  Location     Type
 11460 ;;                  1    wreg      void 
 11461 ;; Registers used:
 11462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11468 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11469 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11471 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11472 ;;Total ram usage:       74 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    8
 11475 ;; This function calls:
 11476 ;;		_setupCmdReadbackPkt
 11477 ;; This function is called by:
 11478 ;;		_write_ASLBoron_test
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           	psect	text28
 11483  003BA8                     __ptext28:
 11484                           	opt stack 0
 11485  003BA8                     _ASLB_InternalTempSensor:
 11486                           	opt stack 20
 11487                           
 11488                           ;HX_ASL_BORON.c: 563: uint8_t rx_index = 0;
 11489                           
 11490                           ;incstack = 0
 11491  003BA8  0E00               	movlw	0
 11492  003BAA  0100               	movlb	0	; () banked
 11493  003BAC  6F64               	movwf	ASLB_InternalTempSensor@rx_index& (0+255),b
 11494                           
 11495                           ; BSR set to: 0
 11496                           ;HX_ASL_BORON.c: 566: LATCH_ADC_DATA |= 0x0005;
 11497  003BAE  0E05               	movlw	5
 11498  003BB0  0105               	movlb	5	; () banked
 11499  003BB2  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
 11500  003BB4  0E00               	movlw	0
 11501  003BB6  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11502  003BB8  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11503  003BBA  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11504                           
 11505                           ; BSR set to: 5
 11506                           ;HX_ASL_BORON.c: 567: LATCH_ADC_DATA &= 0xFFF5;
 11507  003BBC  0EF5               	movlw	245
 11508  003BBE  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 11509  003BC0  0EFF               	movlw	255
 11510  003BC2  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11511  003BC4  0E00               	movlw	0
 11512  003BC6  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11513  003BC8  0E00               	movlw	0
 11514  003BCA  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11515                           
 11516                           ; BSR set to: 5
 11517                           ;HX_ASL_BORON.c: 569: txRxPkt cmdReadbackPkt;
 11518                           ;HX_ASL_BORON.c: 570: setupCmdReadbackPkt(&cmdReadbackPkt);
 11519  003BCC  0E65               	movlw	low ASLB_InternalTempSensor@cmdReadbackPkt
 11520  003BCE  0100               	movlb	0	; () banked
 11521  003BD0  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11522  003BD2  0E00               	movlw	high ASLB_InternalTempSensor@cmdReadbackPkt
 11523  003BD4  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11524  003BD6  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11525  003BDA  0012               	return		;funcret
 11526  003BDC                     __end_of_ASLB_InternalTempSensor:
 11527                           	opt stack 0
 11528                           tblptru	equ	0xFF8
 11529                           tblptrh	equ	0xFF7
 11530                           tblptrl	equ	0xFF6
 11531                           tablat	equ	0xFF5
 11532                           prodh	equ	0xFF4
 11533                           prodl	equ	0xFF3
 11534                           intcon	equ	0xFF2
 11535                           postinc0	equ	0xFEE
 11536                           wreg	equ	0xFE8
 11537                           indf1	equ	0xFE7
 11538                           postinc1	equ	0xFE6
 11539                           postdec1	equ	0xFE5
 11540                           fsr1h	equ	0xFE2
 11541                           fsr1l	equ	0xFE1
 11542                           indf2	equ	0xFDF
 11543                           postinc2	equ	0xFDE
 11544                           postdec2	equ	0xFDD
 11545                           fsr2h	equ	0xFDA
 11546                           fsr2l	equ	0xFD9
 11547                           status	equ	0xFD8
 11548                           
 11549 ;; *************** function _ASLB_HeaterFunctionality *****************
 11550 ;; Defined at:
 11551 ;;		line 396 in file "HX_ASL_BORON.c"
 11552 ;; Parameters:    Size  Location     Type
 11553 ;;  rxBuffer        2   18[BANK0 ] PTR unsigned char 
 11554 ;;		 -> hx_mainData(61), 
 11555 ;; Auto vars:     Size  Location     Type
 11556 ;;  ovenWrPkt      71  148[BANK2 ] struct TxRxPacket
 11557 ;;  cmdReadbackP   71   77[BANK2 ] struct TxRxPacket
 11558 ;;  heatDacWrPkt   71    6[BANK2 ] struct TxRxPacket
 11559 ;;  trBlock        10    0        struct .[2]
 11560 ;;  stream          4    2[BANK2 ] PTR struct TxRxPacket[2]
 11561 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
 11562 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
 11563 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
 11564 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
 11565 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
 11566 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
 11567 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
 11568 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
 11569 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
 11570 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
 11571 ;;  stream_statu    1    1[BANK2 ] unsigned char 
 11572 ;;  rx_index        1    0[BANK2 ] unsigned char 
 11573 ;; Return value:  Size  Location     Type
 11574 ;;                  1    wreg      void 
 11575 ;; Registers used:
 11576 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11577 ;; Tracked objects:
 11578 ;;		On entry : 0/0
 11579 ;;		On exit  : 0/0
 11580 ;;		Unchanged: 0/0
 11581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11582 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11583 ;;      Locals:         0       0       0     219       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11585 ;;      Totals:         0       2       0     219       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11586 ;;Total ram usage:      221 bytes
 11587 ;; Hardware stack levels used:    1
 11588 ;; Hardware stack levels required when called:   10
 11589 ;; This function calls:
 11590 ;;		_setupCmdReadbackPkt
 11591 ;;		_setupLatchPkt
 11592 ;;		_streamBoronComm
 11593 ;; This function is called by:
 11594 ;;		_write_ASLBoron_test
 11595 ;; This function uses a non-reentrant model
 11596 ;;
 11597                           
 11598                           	psect	text29
 11599  002D02                     __ptext29:
 11600                           	opt stack 0
 11601  002D02                     _ASLB_HeaterFunctionality:
 11602                           	opt stack 18
 11603                           
 11604                           ;HX_ASL_BORON.c: 408: uint8_t rx_index = 0;
 11605                           
 11606                           ;incstack = 0
 11607  002D02  0E00               	movlw	0
 11608  002D04  0102               	movlb	2	; () banked
 11609  002D06  6F00               	movwf	ASLB_HeaterFunctionality@rx_index& (0+255),b
 11610                           
 11611                           ; BSR set to: 2
 11612                           ;HX_ASL_BORON.c: 411: LATCH_OVEN_DATA |= 0x0040;
 11613  002D08  8DE2               	bsf	_LATCH_OVEN_DATA& (0+255),6,b
 11614                           
 11615                           ; BSR set to: 2
 11616                           ;HX_ASL_BORON.c: 414: LATCH_OVEN_DATA |= 0xA000;
 11617  002D0A  0E00               	movlw	0
 11618  002D0C  13E2               	iorwf	_LATCH_OVEN_DATA& (0+255),f,b
 11619  002D0E  0EA0               	movlw	160
 11620  002D10  13E3               	iorwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 11621  002D12  0E00               	movlw	0
 11622  002D14  13E4               	iorwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 11623  002D16  0E00               	movlw	0
 11624  002D18  13E5               	iorwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 11625                           
 11626                           ; BSR set to: 2
 11627                           ;HX_ASL_BORON.c: 415: LATCH_OVEN_DATA &= 0xAFFF;
 11628  002D1A  0EFF               	movlw	255
 11629  002D1C  17E2               	andwf	_LATCH_OVEN_DATA& (0+255),f,b
 11630  002D1E  0EAF               	movlw	175
 11631  002D20  17E3               	andwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 11632  002D22  0E00               	movlw	0
 11633  002D24  17E4               	andwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 11634  002D26  0E00               	movlw	0
 11635  002D28  17E5               	andwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 11636                           
 11637                           ; BSR set to: 2
 11638                           ;HX_ASL_BORON.c: 418: LATCH_OVEN_DATA |= 0x0004;
 11639  002D2A  85E2               	bsf	_LATCH_OVEN_DATA& (0+255),2,b
 11640                           
 11641                           ; BSR set to: 2
 11642                           ;HX_ASL_BORON.c: 421: LATCH_OVEN_DATA |= 0x0003;
 11643  002D2C  0E03               	movlw	3
 11644  002D2E  13E2               	iorwf	_LATCH_OVEN_DATA& (0+255),f,b
 11645  002D30  0E00               	movlw	0
 11646  002D32  13E3               	iorwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 11647  002D34  13E4               	iorwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 11648  002D36  13E5               	iorwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 11649                           
 11650                           ; BSR set to: 2
 11651                           ;HX_ASL_BORON.c: 422: LATCH_OVEN_DATA &= 0xFFF3;
 11652  002D38  0EF3               	movlw	243
 11653  002D3A  17E2               	andwf	_LATCH_OVEN_DATA& (0+255),f,b
 11654  002D3C  0EFF               	movlw	255
 11655  002D3E  17E3               	andwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 11656  002D40  0E00               	movlw	0
 11657  002D42  17E4               	andwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 11658  002D44  0E00               	movlw	0
 11659  002D46  17E5               	andwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 11660                           
 11661                           ;HX_ASL_BORON.c: 425: LATCH_HEAT_DAC_DATA = 0xFAAA;
 11662  002D48  0EAA               	movlw	170
 11663  002D4A  0105               	movlb	5	; () banked
 11664  002D4C  6FE9               	movwf	_LATCH_HEAT_DAC_DATA& (0+255),b
 11665  002D4E  0EFA               	movlw	250
 11666  002D50  6FEA               	movwf	(_LATCH_HEAT_DAC_DATA+1)& (0+255),b
 11667  002D52  0E00               	movlw	0
 11668  002D54  6FEB               	movwf	(_LATCH_HEAT_DAC_DATA+2)& (0+255),b
 11669  002D56  0E00               	movlw	0
 11670  002D58  6FEC               	movwf	(_LATCH_HEAT_DAC_DATA+3)& (0+255),b
 11671                           
 11672                           ; BSR set to: 5
 11673                           ;HX_ASL_BORON.c: 427: txRxPkt cmdReadbackPkt;
 11674                           ;HX_ASL_BORON.c: 428: setupCmdReadbackPkt(&cmdReadbackPkt);
 11675  002D5A  0E4D               	movlw	low ASLB_HeaterFunctionality@cmdReadbackPkt
 11676  002D5C  0100               	movlb	0	; () banked
 11677  002D5E  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11678  002D60  0E02               	movlw	high ASLB_HeaterFunctionality@cmdReadbackPkt
 11679  002D62  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11680  002D64  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11681                           
 11682                           ;HX_ASL_BORON.c: 430: txRxPkt ovenWrPkt;
 11683                           ;HX_ASL_BORON.c: 431: setupLatchPkt(&ovenWrPkt, LATCH_OVEN_DATA, 0x4);
 11684  002D68  0E94               	movlw	low ASLB_HeaterFunctionality@ovenWrPkt
 11685  002D6A  0100               	movlb	0	; () banked
 11686  002D6C  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 11687  002D6E  0E02               	movlw	high ASLB_HeaterFunctionality@ovenWrPkt
 11688  002D70  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 11689  002D72  C2E2  F067         	movff	_LATCH_OVEN_DATA,setupLatchPkt@latch_data
 11690  002D76  C2E3  F068         	movff	_LATCH_OVEN_DATA+1,setupLatchPkt@latch_data+1
 11691  002D7A  0E04               	movlw	4
 11692  002D7C  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 11693  002D7E  EC44  F017         	call	_setupLatchPkt	;wreg free
 11694                           
 11695                           ;HX_ASL_BORON.c: 432: txRxPkt heatDacWrPkt;
 11696                           ;HX_ASL_BORON.c: 433: setupLatchPkt(&heatDacWrPkt, LATCH_HEAT_DAC_DATA, 0x5);
 11697  002D82  0E06               	movlw	low ASLB_HeaterFunctionality@heatDacWrPkt
 11698  002D84  0100               	movlb	0	; () banked
 11699  002D86  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 11700  002D88  0E02               	movlw	high ASLB_HeaterFunctionality@heatDacWrPkt
 11701  002D8A  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 11702  002D8C  C5E9  F067         	movff	_LATCH_HEAT_DAC_DATA,setupLatchPkt@latch_data
 11703  002D90  C5EA  F068         	movff	_LATCH_HEAT_DAC_DATA+1,setupLatchPkt@latch_data+1
 11704  002D94  0E05               	movlw	5
 11705  002D96  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 11706  002D98  EC44  F017         	call	_setupLatchPkt	;wreg free
 11707                           
 11708                           ;HX_ASL_BORON.c: 436: I2C1_TRANSACTION_REQUEST_BLOCK trBlock[2];
 11709                           ;HX_ASL_BORON.c: 437: txRxPkt* stream[2];
 11710                           ;HX_ASL_BORON.c: 438: uint8_t stream_status = 0;
 11711  002D9C  0E00               	movlw	0
 11712  002D9E  0102               	movlb	2	; () banked
 11713  002DA0  6F01               	movwf	ASLB_HeaterFunctionality@stream_status& (0+255),b
 11714                           
 11715                           ; BSR set to: 2
 11716                           ;HX_ASL_BORON.c: 439: stream[0] = &ovenWrPkt;
 11717  002DA2  0E94               	movlw	low ASLB_HeaterFunctionality@ovenWrPkt
 11718  002DA4  6F02               	movwf	ASLB_HeaterFunctionality@stream& (0+255),b
 11719  002DA6  0E02               	movlw	high ASLB_HeaterFunctionality@ovenWrPkt
 11720  002DA8  6F03               	movwf	(ASLB_HeaterFunctionality@stream+1)& (0+255),b
 11721                           
 11722                           ; BSR set to: 2
 11723                           ;HX_ASL_BORON.c: 440: stream[1] = &cmdReadbackPkt;
 11724  002DAA  0E4D               	movlw	low ASLB_HeaterFunctionality@cmdReadbackPkt
 11725  002DAC  6F04               	movwf	(ASLB_HeaterFunctionality@stream+2)& (0+255),b
 11726  002DAE  0E02               	movlw	high ASLB_HeaterFunctionality@cmdReadbackPkt
 11727  002DB0  6F05               	movwf	(ASLB_HeaterFunctionality@stream+3)& (0+255),b
 11728                           
 11729                           ; BSR set to: 2
 11730                           ;HX_ASL_BORON.c: 441: stream_status = streamBoronComm(BORON_COMM_TYPE, stream, 2);
 11731  002DB2  0E02               	movlw	low ASLB_HeaterFunctionality@stream
 11732  002DB4  0100               	movlb	0	; () banked
 11733  002DB6  6F6E               	movwf	streamBoronComm@pktArr& (0+255),b
 11734  002DB8  0E02               	movlw	high ASLB_HeaterFunctionality@stream
 11735  002DBA  6F6F               	movwf	(streamBoronComm@pktArr+1)& (0+255),b
 11736  002DBC  0E02               	movlw	2
 11737  002DBE  6F70               	movwf	streamBoronComm@pktSize& (0+255),b
 11738  002DC0  5030               	movf	_BORON_COMM_TYPE,w,c
 11739  002DC2  EC6E  F01E         	call	_streamBoronComm
 11740  002DC6  0102               	movlb	2	; () banked
 11741  002DC8  6F01               	movwf	ASLB_HeaterFunctionality@stream_status& (0+255),b
 11742                           
 11743                           ; BSR set to: 2
 11744  002DCA  0012               	return		;funcret
 11745  002DCC                     __end_of_ASLB_HeaterFunctionality:
 11746                           	opt stack 0
 11747                           tblptru	equ	0xFF8
 11748                           tblptrh	equ	0xFF7
 11749                           tblptrl	equ	0xFF6
 11750                           tablat	equ	0xFF5
 11751                           prodh	equ	0xFF4
 11752                           prodl	equ	0xFF3
 11753                           intcon	equ	0xFF2
 11754                           postinc0	equ	0xFEE
 11755                           wreg	equ	0xFE8
 11756                           indf1	equ	0xFE7
 11757                           postinc1	equ	0xFE6
 11758                           postdec1	equ	0xFE5
 11759                           fsr1h	equ	0xFE2
 11760                           fsr1l	equ	0xFE1
 11761                           indf2	equ	0xFDF
 11762                           postinc2	equ	0xFDE
 11763                           postdec2	equ	0xFDD
 11764                           fsr2h	equ	0xFDA
 11765                           fsr2l	equ	0xFD9
 11766                           status	equ	0xFD8
 11767                           
 11768 ;; *************** function _ASLB_HeaterFBSignals *****************
 11769 ;; Defined at:
 11770 ;;		line 533 in file "HX_ASL_BORON.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11773 ;;		 -> hx_mainData(61), 
 11774 ;; Auto vars:     Size  Location     Type
 11775 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11776 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11777 ;; Return value:  Size  Location     Type
 11778 ;;                  1    wreg      void 
 11779 ;; Registers used:
 11780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11781 ;; Tracked objects:
 11782 ;;		On entry : 0/0
 11783 ;;		On exit  : 0/0
 11784 ;;		Unchanged: 0/0
 11785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11786 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11787 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11789 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11790 ;;Total ram usage:       74 bytes
 11791 ;; Hardware stack levels used:    1
 11792 ;; Hardware stack levels required when called:    8
 11793 ;; This function calls:
 11794 ;;		_setupCmdReadbackPkt
 11795 ;; This function is called by:
 11796 ;;		_write_ASLBoron_test
 11797 ;; This function uses a non-reentrant model
 11798 ;;
 11799                           
 11800                           	psect	text30
 11801  0038DC                     __ptext30:
 11802                           	opt stack 0
 11803  0038DC                     _ASLB_HeaterFBSignals:
 11804                           	opt stack 20
 11805                           
 11806                           ;HX_ASL_BORON.c: 539: uint8_t rx_index = 0;
 11807                           
 11808                           ; BSR set to: 2
 11809                           ;incstack = 0
 11810  0038DC  0E00               	movlw	0
 11811  0038DE  0100               	movlb	0	; () banked
 11812  0038E0  6F64               	movwf	ASLB_HeaterFBSignals@rx_index& (0+255),b
 11813                           
 11814                           ; BSR set to: 0
 11815                           ;HX_ASL_BORON.c: 543: LATCH_ADC_DATA |= 0x0003;
 11816  0038E2  0E03               	movlw	3
 11817  0038E4  0105               	movlb	5	; () banked
 11818  0038E6  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
 11819  0038E8  0E00               	movlw	0
 11820  0038EA  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11821  0038EC  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11822  0038EE  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11823                           
 11824                           ; BSR set to: 5
 11825                           ;HX_ASL_BORON.c: 544: LATCH_ADC_DATA &= 0xFFF3;
 11826  0038F0  0EF3               	movlw	243
 11827  0038F2  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 11828  0038F4  0EFF               	movlw	255
 11829  0038F6  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11830  0038F8  0E00               	movlw	0
 11831  0038FA  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11832  0038FC  0E00               	movlw	0
 11833  0038FE  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11834                           
 11835                           ; BSR set to: 5
 11836                           ;HX_ASL_BORON.c: 548: LATCH_ADC_DATA |= 0x0004;
 11837  003900  85D9               	bsf	_LATCH_ADC_DATA& (0+255),2,b
 11838                           
 11839                           ; BSR set to: 5
 11840                           ;HX_ASL_BORON.c: 549: LATCH_ADC_DATA &= 0xFFF4;
 11841  003902  0EF4               	movlw	244
 11842  003904  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 11843  003906  0EFF               	movlw	255
 11844  003908  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 11845  00390A  0E00               	movlw	0
 11846  00390C  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 11847  00390E  0E00               	movlw	0
 11848  003910  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 11849                           
 11850                           ; BSR set to: 5
 11851                           ;HX_ASL_BORON.c: 551: txRxPkt cmdReadbackPkt;
 11852                           ;HX_ASL_BORON.c: 552: setupCmdReadbackPkt(&cmdReadbackPkt);
 11853  003912  0E65               	movlw	low ASLB_HeaterFBSignals@cmdReadbackPkt
 11854  003914  0100               	movlb	0	; () banked
 11855  003916  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11856  003918  0E00               	movlw	high ASLB_HeaterFBSignals@cmdReadbackPkt
 11857  00391A  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11858  00391C  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11859  003920  0012               	return		;funcret
 11860  003922                     __end_of_ASLB_HeaterFBSignals:
 11861                           	opt stack 0
 11862                           tblptru	equ	0xFF8
 11863                           tblptrh	equ	0xFF7
 11864                           tblptrl	equ	0xFF6
 11865                           tablat	equ	0xFF5
 11866                           prodh	equ	0xFF4
 11867                           prodl	equ	0xFF3
 11868                           intcon	equ	0xFF2
 11869                           postinc0	equ	0xFEE
 11870                           wreg	equ	0xFE8
 11871                           indf1	equ	0xFE7
 11872                           postinc1	equ	0xFE6
 11873                           postdec1	equ	0xFE5
 11874                           fsr1h	equ	0xFE2
 11875                           fsr1l	equ	0xFE1
 11876                           indf2	equ	0xFDF
 11877                           postinc2	equ	0xFDE
 11878                           postdec2	equ	0xFDD
 11879                           fsr2h	equ	0xFDA
 11880                           fsr2l	equ	0xFD9
 11881                           status	equ	0xFD8
 11882                           
 11883 ;; *************** function _ASLB_ExternalReferenceVoltage *****************
 11884 ;; Defined at:
 11885 ;;		line 772 in file "HX_ASL_BORON.c"
 11886 ;; Parameters:    Size  Location     Type
 11887 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11888 ;;		 -> hx_mainData(61), 
 11889 ;; Auto vars:     Size  Location     Type
 11890 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11891 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11892 ;; Return value:  Size  Location     Type
 11893 ;;                  1    wreg      void 
 11894 ;; Registers used:
 11895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11896 ;; Tracked objects:
 11897 ;;		On entry : 0/0
 11898 ;;		On exit  : 0/0
 11899 ;;		Unchanged: 0/0
 11900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11901 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11902 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11904 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11905 ;;Total ram usage:       74 bytes
 11906 ;; Hardware stack levels used:    1
 11907 ;; Hardware stack levels required when called:    8
 11908 ;; This function calls:
 11909 ;;		_setupCmdReadbackPkt
 11910 ;; This function is called by:
 11911 ;;		_write_ASLBoron_test
 11912 ;; This function uses a non-reentrant model
 11913 ;;
 11914                           
 11915                           	psect	text31
 11916  003F00                     __ptext31:
 11917                           	opt stack 0
 11918  003F00                     _ASLB_ExternalReferenceVoltage:
 11919                           	opt stack 20
 11920                           
 11921                           ;HX_ASL_BORON.c: 779: uint8_t rx_index = 0;
 11922                           
 11923                           ;incstack = 0
 11924  003F00  0E00               	movlw	0
 11925  003F02  0100               	movlb	0	; () banked
 11926  003F04  6F64               	movwf	ASLB_ExternalReferenceVoltage@rx_index& (0+255),b
 11927                           
 11928                           ; BSR set to: 0
 11929                           ;HX_ASL_BORON.c: 782: LATCH_BIAS_DATA |= 0x0010;
 11930  003F06  0105               	movlb	5	; () banked
 11931  003F08  89E1               	bsf	_LATCH_BIAS_DATA& (0+255),4,b
 11932                           
 11933                           ; BSR set to: 5
 11934                           ;HX_ASL_BORON.c: 784: txRxPkt cmdReadbackPkt;
 11935                           ;HX_ASL_BORON.c: 785: setupCmdReadbackPkt(&cmdReadbackPkt);
 11936  003F0A  0E65               	movlw	low ASLB_ExternalReferenceVoltage@cmdReadbackPkt
 11937  003F0C  0100               	movlb	0	; () banked
 11938  003F0E  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 11939  003F10  0E00               	movlw	high ASLB_ExternalReferenceVoltage@cmdReadbackPkt
 11940  003F12  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 11941  003F14  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 11942  003F18  0012               	return		;funcret
 11943  003F1A                     __end_of_ASLB_ExternalReferenceVoltage:
 11944                           	opt stack 0
 11945                           tblptru	equ	0xFF8
 11946                           tblptrh	equ	0xFF7
 11947                           tblptrl	equ	0xFF6
 11948                           tablat	equ	0xFF5
 11949                           prodh	equ	0xFF4
 11950                           prodl	equ	0xFF3
 11951                           intcon	equ	0xFF2
 11952                           postinc0	equ	0xFEE
 11953                           wreg	equ	0xFE8
 11954                           indf1	equ	0xFE7
 11955                           postinc1	equ	0xFE6
 11956                           postdec1	equ	0xFE5
 11957                           fsr1h	equ	0xFE2
 11958                           fsr1l	equ	0xFE1
 11959                           indf2	equ	0xFDF
 11960                           postinc2	equ	0xFDE
 11961                           postdec2	equ	0xFDD
 11962                           fsr2h	equ	0xFDA
 11963                           fsr2l	equ	0xFD9
 11964                           status	equ	0xFD8
 11965                           
 11966 ;; *************** function _ASLB_DigitalRegulatorVoltage *****************
 11967 ;; Defined at:
 11968 ;;		line 701 in file "HX_ASL_BORON.c"
 11969 ;; Parameters:    Size  Location     Type
 11970 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 11971 ;;		 -> hx_mainData(61), 
 11972 ;; Auto vars:     Size  Location     Type
 11973 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 11974 ;;  rx_index        1    4[BANK0 ] unsigned char 
 11975 ;; Return value:  Size  Location     Type
 11976 ;;                  1    wreg      void 
 11977 ;; Registers used:
 11978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11979 ;; Tracked objects:
 11980 ;;		On entry : 0/0
 11981 ;;		On exit  : 0/0
 11982 ;;		Unchanged: 0/0
 11983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11984 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11985 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11987 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11988 ;;Total ram usage:       74 bytes
 11989 ;; Hardware stack levels used:    1
 11990 ;; Hardware stack levels required when called:    8
 11991 ;; This function calls:
 11992 ;;		_setupCmdReadbackPkt
 11993 ;; This function is called by:
 11994 ;;		_write_ASLBoron_test
 11995 ;; This function uses a non-reentrant model
 11996 ;;
 11997                           
 11998                           	psect	text32
 11999  003BDC                     __ptext32:
 12000                           	opt stack 0
 12001  003BDC                     _ASLB_DigitalRegulatorVoltage:
 12002                           	opt stack 20
 12003                           
 12004                           ;HX_ASL_BORON.c: 709: uint8_t rx_index = 0;
 12005                           
 12006                           ;incstack = 0
 12007  003BDC  0E00               	movlw	0
 12008  003BDE  0100               	movlb	0	; () banked
 12009  003BE0  6F64               	movwf	ASLB_DigitalRegulatorVoltage@rx_index& (0+255),b
 12010                           
 12011                           ; BSR set to: 0
 12012                           ;HX_ASL_BORON.c: 712: LATCH_ADC_DATA |= 0x000D;
 12013  003BE2  0E0D               	movlw	13
 12014  003BE4  0105               	movlb	5	; () banked
 12015  003BE6  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
 12016  003BE8  0E00               	movlw	0
 12017  003BEA  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 12018  003BEC  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 12019  003BEE  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 12020                           
 12021                           ; BSR set to: 5
 12022                           ;HX_ASL_BORON.c: 713: LATCH_ADC_DATA &= 0xFFFD;
 12023  003BF0  0EFD               	movlw	253
 12024  003BF2  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 12025  003BF4  0EFF               	movlw	255
 12026  003BF6  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 12027  003BF8  0E00               	movlw	0
 12028  003BFA  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 12029  003BFC  0E00               	movlw	0
 12030  003BFE  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 12031                           
 12032                           ; BSR set to: 5
 12033                           ;HX_ASL_BORON.c: 715: txRxPkt cmdReadbackPkt;
 12034                           ;HX_ASL_BORON.c: 716: setupCmdReadbackPkt(&cmdReadbackPkt);
 12035  003C00  0E65               	movlw	low ASLB_DigitalRegulatorVoltage@cmdReadbackPkt
 12036  003C02  0100               	movlb	0	; () banked
 12037  003C04  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 12038  003C06  0E00               	movlw	high ASLB_DigitalRegulatorVoltage@cmdReadbackPkt
 12039  003C08  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 12040  003C0A  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 12041  003C0E  0012               	return		;funcret
 12042  003C10                     __end_of_ASLB_DigitalRegulatorVoltage:
 12043                           	opt stack 0
 12044                           tblptru	equ	0xFF8
 12045                           tblptrh	equ	0xFF7
 12046                           tblptrl	equ	0xFF6
 12047                           tablat	equ	0xFF5
 12048                           prodh	equ	0xFF4
 12049                           prodl	equ	0xFF3
 12050                           intcon	equ	0xFF2
 12051                           postinc0	equ	0xFEE
 12052                           wreg	equ	0xFE8
 12053                           indf1	equ	0xFE7
 12054                           postinc1	equ	0xFE6
 12055                           postdec1	equ	0xFE5
 12056                           fsr1h	equ	0xFE2
 12057                           fsr1l	equ	0xFE1
 12058                           indf2	equ	0xFDF
 12059                           postinc2	equ	0xFDE
 12060                           postdec2	equ	0xFDD
 12061                           fsr2h	equ	0xFDA
 12062                           fsr2l	equ	0xFD9
 12063                           status	equ	0xFD8
 12064                           
 12065 ;; *************** function _ASLB_DACReferenceVoltage *****************
 12066 ;; Defined at:
 12067 ;;		line 593 in file "HX_ASL_BORON.c"
 12068 ;; Parameters:    Size  Location     Type
 12069 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 12070 ;;		 -> hx_mainData(61), 
 12071 ;; Auto vars:     Size  Location     Type
 12072 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 12073 ;;  rx_index        1    4[BANK0 ] unsigned char 
 12074 ;; Return value:  Size  Location     Type
 12075 ;;                  1    wreg      void 
 12076 ;; Registers used:
 12077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12078 ;; Tracked objects:
 12079 ;;		On entry : 0/0
 12080 ;;		On exit  : 0/0
 12081 ;;		Unchanged: 0/0
 12082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12083 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12084 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12086 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12087 ;;Total ram usage:       74 bytes
 12088 ;; Hardware stack levels used:    1
 12089 ;; Hardware stack levels required when called:    8
 12090 ;; This function calls:
 12091 ;;		_setupCmdReadbackPkt
 12092 ;; This function is called by:
 12093 ;;		_write_ASLBoron_test
 12094 ;; This function uses a non-reentrant model
 12095 ;;
 12096                           
 12097                           	psect	text33
 12098  003C10                     __ptext33:
 12099                           	opt stack 0
 12100  003C10                     _ASLB_DACReferenceVoltage:
 12101                           	opt stack 20
 12102                           
 12103                           ;HX_ASL_BORON.c: 601: uint8_t rx_index = 0;
 12104                           
 12105                           ;incstack = 0
 12106  003C10  0E00               	movlw	0
 12107  003C12  0100               	movlb	0	; () banked
 12108  003C14  6F64               	movwf	ASLB_DACReferenceVoltage@rx_index& (0+255),b
 12109                           
 12110                           ; BSR set to: 0
 12111                           ;HX_ASL_BORON.c: 604: LATCH_ADC_DATA |= 0x0009;
 12112  003C16  0E09               	movlw	9
 12113  003C18  0105               	movlb	5	; () banked
 12114  003C1A  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
 12115  003C1C  0E00               	movlw	0
 12116  003C1E  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 12117  003C20  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 12118  003C22  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 12119                           
 12120                           ; BSR set to: 5
 12121                           ;HX_ASL_BORON.c: 605: LATCH_ADC_DATA &= 0xFFF9;
 12122  003C24  0EF9               	movlw	249
 12123  003C26  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 12124  003C28  0EFF               	movlw	255
 12125  003C2A  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 12126  003C2C  0E00               	movlw	0
 12127  003C2E  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 12128  003C30  0E00               	movlw	0
 12129  003C32  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 12130                           
 12131                           ; BSR set to: 5
 12132                           ;HX_ASL_BORON.c: 607: txRxPkt cmdReadbackPkt;
 12133                           ;HX_ASL_BORON.c: 608: setupCmdReadbackPkt(&cmdReadbackPkt);
 12134  003C34  0E65               	movlw	low ASLB_DACReferenceVoltage@cmdReadbackPkt
 12135  003C36  0100               	movlb	0	; () banked
 12136  003C38  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 12137  003C3A  0E00               	movlw	high ASLB_DACReferenceVoltage@cmdReadbackPkt
 12138  003C3C  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 12139  003C3E  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 12140  003C42  0012               	return		;funcret
 12141  003C44                     __end_of_ASLB_DACReferenceVoltage:
 12142                           	opt stack 0
 12143                           tblptru	equ	0xFF8
 12144                           tblptrh	equ	0xFF7
 12145                           tblptrl	equ	0xFF6
 12146                           tablat	equ	0xFF5
 12147                           prodh	equ	0xFF4
 12148                           prodl	equ	0xFF3
 12149                           intcon	equ	0xFF2
 12150                           postinc0	equ	0xFEE
 12151                           wreg	equ	0xFE8
 12152                           indf1	equ	0xFE7
 12153                           postinc1	equ	0xFE6
 12154                           postdec1	equ	0xFE5
 12155                           fsr1h	equ	0xFE2
 12156                           fsr1l	equ	0xFE1
 12157                           indf2	equ	0xFDF
 12158                           postinc2	equ	0xFDE
 12159                           postdec2	equ	0xFDD
 12160                           fsr2h	equ	0xFDA
 12161                           fsr2l	equ	0xFD9
 12162                           status	equ	0xFD8
 12163                           
 12164 ;; *************** function _ASLB_CurrentLimitDACVoltage *****************
 12165 ;; Defined at:
 12166 ;;		line 668 in file "HX_ASL_BORON.c"
 12167 ;; Parameters:    Size  Location     Type
 12168 ;;  rxBuffer        2    8[BANK0 ] PTR unsigned char 
 12169 ;;		 -> hx_mainData(61), 
 12170 ;; Auto vars:     Size  Location     Type
 12171 ;;  i               2   82[BANK0 ] int 
 12172 ;;  cmdReadbackP   71   11[BANK0 ] struct TxRxPacket
 12173 ;;  rx_index        1   10[BANK0 ] unsigned char 
 12174 ;; Return value:  Size  Location     Type
 12175 ;;                  1    wreg      void 
 12176 ;; Registers used:
 12177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12178 ;; Tracked objects:
 12179 ;;		On entry : 0/0
 12180 ;;		On exit  : 0/0
 12181 ;;		Unchanged: 0/0
 12182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12183 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12184 ;;      Locals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12186 ;;      Totals:         0      76       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12187 ;;Total ram usage:       76 bytes
 12188 ;; Hardware stack levels used:    1
 12189 ;; Hardware stack levels required when called:    8
 12190 ;; This function calls:
 12191 ;;		_setCurrLimitDAC
 12192 ;;		_setupCmdReadbackPkt
 12193 ;; This function is called by:
 12194 ;;		_write_ASLBoron_test
 12195 ;; This function uses a non-reentrant model
 12196 ;;
 12197                           
 12198                           	psect	text34
 12199  0033C0                     __ptext34:
 12200                           	opt stack 0
 12201  0033C0                     _ASLB_CurrentLimitDACVoltage:
 12202                           	opt stack 20
 12203                           
 12204                           ;HX_ASL_BORON.c: 678: uint8_t rx_index = 0;
 12205                           
 12206                           ;incstack = 0
 12207  0033C0  0E00               	movlw	0
 12208  0033C2  0100               	movlb	0	; () banked
 12209  0033C4  6F6A               	movwf	ASLB_CurrentLimitDACVoltage@rx_index& (0+255),b
 12210                           
 12211                           ; BSR set to: 0
 12212                           ;HX_ASL_BORON.c: 681: txRxPkt cmdReadbackPkt;
 12213                           ;HX_ASL_BORON.c: 682: setupCmdReadbackPkt(&cmdReadbackPkt);
 12214  0033C6  0E6B               	movlw	low ASLB_CurrentLimitDACVoltage@cmdReadbackPkt
 12215  0033C8  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 12216  0033CA  0E00               	movlw	high ASLB_CurrentLimitDACVoltage@cmdReadbackPkt
 12217  0033CC  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 12218  0033CE  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 12219                           
 12220                           ;HX_ASL_BORON.c: 685: for (int i = 0; i < 128; i += 25)
 12221  0033D2  0E00               	movlw	0
 12222  0033D4  0100               	movlb	0	; () banked
 12223  0033D6  6FB3               	movwf	(ASLB_CurrentLimitDACVoltage@i+1)& (0+255),b
 12224  0033D8  0E00               	movlw	0
 12225  0033DA  6FB2               	movwf	ASLB_CurrentLimitDACVoltage@i& (0+255),b
 12226  0033DC                     l10573:
 12227                           
 12228                           ; BSR set to: 0
 12229  0033DC  BFB3               	btfsc	(ASLB_CurrentLimitDACVoltage@i+1)& (0+255),7,b
 12230  0033DE  D006               	goto	l1155
 12231  0033E0  51B3               	movf	(ASLB_CurrentLimitDACVoltage@i+1)& (0+255),w,b
 12232  0033E2  E122               	bnz	l1158
 12233  0033E4  0E80               	movlw	128
 12234  0033E6  5DB2               	subwf	ASLB_CurrentLimitDACVoltage@i& (0+255),w,b
 12235  0033E8  B0D8               	btfsc	status,0,c
 12236  0033EA  0012               	return	
 12237  0033EC                     l1155:
 12238                           
 12239                           ; BSR set to: 0
 12240                           ;HX_ASL_BORON.c: 686: {
 12241                           ;HX_ASL_BORON.c: 687: if (!setCurrLimitDAC(i))
 12242                           
 12243                           ; BSR set to: 0
 12244  0033EC  C0B2  F060         	movff	ASLB_CurrentLimitDACVoltage@i,setCurrLimitDAC@value7bit
 12245  0033F0  C0B3  F061         	movff	ASLB_CurrentLimitDACVoltage@i+1,setCurrLimitDAC@value7bit+1
 12246  0033F4  EC91  F018         	call	_setCurrLimitDAC	;wreg free
 12247  0033F8  0900               	iorlw	0
 12248  0033FA  B4D8               	btfsc	status,2,c
 12249  0033FC  0012               	return	
 12250                           
 12251                           ;HX_ASL_BORON.c: 691: }
 12252                           ;HX_ASL_BORON.c: 694: LATCH_ADC_DATA |= 0x000B;
 12253                           
 12254                           ;HX_ASL_BORON.c: 688: {
 12255                           ;HX_ASL_BORON.c: 690: break;
 12256  0033FE  0E0B               	movlw	11
 12257  003400  0105               	movlb	5	; () banked
 12258  003402  13D9               	iorwf	_LATCH_ADC_DATA& (0+255),f,b
 12259  003404  0E00               	movlw	0
 12260  003406  13DA               	iorwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 12261  003408  13DB               	iorwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 12262  00340A  13DC               	iorwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 12263                           
 12264                           ;HX_ASL_BORON.c: 695: LATCH_ADC_DATA &= 0xFFFB;
 12265  00340C  0EFB               	movlw	251
 12266  00340E  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 12267  003410  0EFF               	movlw	255
 12268  003412  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 12269  003414  0E00               	movlw	0
 12270  003416  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 12271  003418  0E00               	movlw	0
 12272  00341A  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 12273  00341C  0E19               	movlw	25
 12274  00341E  0100               	movlb	0	; () banked
 12275  003420  27B2               	addwf	ASLB_CurrentLimitDACVoltage@i& (0+255),f,b
 12276  003422  0E00               	movlw	0
 12277  003424  23B3               	addwfc	(ASLB_CurrentLimitDACVoltage@i+1)& (0+255),f,b
 12278  003426  D7DA               	goto	l10573
 12279  003428                     l1158:
 12280  003428  0012               	return		;funcret
 12281  00342A                     __end_of_ASLB_CurrentLimitDACVoltage:
 12282                           	opt stack 0
 12283                           tblptru	equ	0xFF8
 12284                           tblptrh	equ	0xFF7
 12285                           tblptrl	equ	0xFF6
 12286                           tablat	equ	0xFF5
 12287                           prodh	equ	0xFF4
 12288                           prodl	equ	0xFF3
 12289                           intcon	equ	0xFF2
 12290                           postinc0	equ	0xFEE
 12291                           wreg	equ	0xFE8
 12292                           indf1	equ	0xFE7
 12293                           postinc1	equ	0xFE6
 12294                           postdec1	equ	0xFE5
 12295                           fsr1h	equ	0xFE2
 12296                           fsr1l	equ	0xFE1
 12297                           indf2	equ	0xFDF
 12298                           postinc2	equ	0xFDE
 12299                           postdec2	equ	0xFDD
 12300                           fsr2h	equ	0xFDA
 12301                           fsr2l	equ	0xFD9
 12302                           status	equ	0xFD8
 12303                           
 12304 ;; *************** function _setCurrLimitDAC *****************
 12305 ;; Defined at:
 12306 ;;		line 1168 in file "HX_ASL_BORON.c"
 12307 ;; Parameters:    Size  Location     Type
 12308 ;;  value7bit       2    0[BANK0 ] unsigned int 
 12309 ;; Auto vars:     Size  Location     Type
 12310 ;;		None
 12311 ;; Return value:  Size  Location     Type
 12312 ;;                  1    wreg      unsigned char 
 12313 ;; Registers used:
 12314 ;;		wreg, status,2, status,0
 12315 ;; Tracked objects:
 12316 ;;		On entry : 0/0
 12317 ;;		On exit  : 0/0
 12318 ;;		Unchanged: 0/0
 12319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12320 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12322 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12323 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12324 ;;Total ram usage:        8 bytes
 12325 ;; Hardware stack levels used:    1
 12326 ;; Hardware stack levels required when called:    7
 12327 ;; This function calls:
 12328 ;;		Nothing
 12329 ;; This function is called by:
 12330 ;;		_ASLB_CurrentLimitDACVoltage
 12331 ;; This function uses a non-reentrant model
 12332 ;;
 12333                           
 12334                           	psect	text35
 12335  003122                     __ptext35:
 12336                           	opt stack 0
 12337  003122                     _setCurrLimitDAC:
 12338                           	opt stack 20
 12339                           
 12340                           ;HX_ASL_BORON.c: 1170: if (value7bit > 127)
 12341                           
 12342                           ;incstack = 0
 12343  003122  0100               	movlb	0	; () banked
 12344  003124  5161               	movf	(setCurrLimitDAC@value7bit+1)& (0+255),w,b
 12345  003126  E104               	bnz	u7030
 12346  003128  0E80               	movlw	128
 12347  00312A  5D60               	subwf	setCurrLimitDAC@value7bit& (0+255),w,b
 12348  00312C  A0D8               	btfss	status,0,c
 12349  00312E  D002               	goto	l1251
 12350  003130                     u7030:
 12351                           
 12352                           ; BSR set to: 0
 12353                           ;HX_ASL_BORON.c: 1171: {
 12354                           ;HX_ASL_BORON.c: 1172: return 0;
 12355  003130  0E00               	movlw	0
 12356                           
 12357                           ; BSR set to: 0
 12358  003132  0012               	return	
 12359  003134                     l1251:
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;HX_ASL_BORON.c: 1173: }
 12363                           ;HX_ASL_BORON.c: 1176: LATCH_BIAS_DATA |= 0x0001;
 12364                           
 12365                           ; BSR set to: 0
 12366  003134  0105               	movlb	5	; () banked
 12367  003136  81E1               	bsf	_LATCH_BIAS_DATA& (0+255),0,b
 12368                           
 12369                           ; BSR set to: 5
 12370                           ;HX_ASL_BORON.c: 1179: LATCH_OVEN_DATA |= (value7bit << 9);
 12371  003138  C060  F062         	movff	setCurrLimitDAC@value7bit,??_setCurrLimitDAC
 12372  00313C  C061  F063         	movff	setCurrLimitDAC@value7bit+1,??_setCurrLimitDAC+1
 12373  003140  0E09               	movlw	9
 12374  003142                     u7045:
 12375  003142  90D8               	bcf	status,0,c
 12376  003144  0100               	movlb	0	; () banked
 12377  003146  3762               	rlcf	??_setCurrLimitDAC& (0+255),f,b
 12378  003148  3763               	rlcf	(??_setCurrLimitDAC+1)& (0+255),f,b
 12379  00314A  2EE8               	decfsz	wreg,f,c
 12380  00314C  D7FA               	goto	u7045
 12381  00314E  5162               	movf	??_setCurrLimitDAC& (0+255),w,b
 12382  003150  6F64               	movwf	(??_setCurrLimitDAC+2)& (0+255),b
 12383  003152  5163               	movf	(??_setCurrLimitDAC+1)& (0+255),w,b
 12384  003154  6F65               	movwf	(??_setCurrLimitDAC+3)& (0+255),b
 12385  003156  6B66               	clrf	(??_setCurrLimitDAC+4)& (0+255),b
 12386  003158  6B67               	clrf	(??_setCurrLimitDAC+5)& (0+255),b
 12387  00315A  5164               	movf	(??_setCurrLimitDAC+2)& (0+255),w,b
 12388  00315C  0102               	movlb	2	; () banked
 12389  00315E  13E2               	iorwf	_LATCH_OVEN_DATA& (0+255),f,b
 12390  003160  0100               	movlb	0	; () banked
 12391  003162  5165               	movf	(??_setCurrLimitDAC+3)& (0+255),w,b
 12392  003164  0102               	movlb	2	; () banked
 12393  003166  13E3               	iorwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 12394  003168  0100               	movlb	0	; () banked
 12395  00316A  5166               	movf	(??_setCurrLimitDAC+4)& (0+255),w,b
 12396  00316C  0102               	movlb	2	; () banked
 12397  00316E  13E4               	iorwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 12398  003170  0100               	movlb	0	; () banked
 12399  003172  5167               	movf	(??_setCurrLimitDAC+5)& (0+255),w,b
 12400  003174  0102               	movlb	2	; () banked
 12401  003176  13E5               	iorwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 12402                           
 12403                           ; BSR set to: 2
 12404                           ;HX_ASL_BORON.c: 1180: LATCH_OVEN_DATA &= (value7bit << 9) | 0x01FF;
 12405  003178  C060  F062         	movff	setCurrLimitDAC@value7bit,??_setCurrLimitDAC
 12406  00317C  C061  F063         	movff	setCurrLimitDAC@value7bit+1,??_setCurrLimitDAC+1
 12407  003180  0E09               	movlw	9
 12408  003182                     u7055:
 12409  003182  90D8               	bcf	status,0,c
 12410  003184  0100               	movlb	0	; () banked
 12411  003186  3762               	rlcf	??_setCurrLimitDAC& (0+255),f,b
 12412  003188  3763               	rlcf	(??_setCurrLimitDAC+1)& (0+255),f,b
 12413  00318A  2EE8               	decfsz	wreg,f,c
 12414  00318C  D7FA               	goto	u7055
 12415  00318E  0EFF               	movlw	255
 12416  003190  1162               	iorwf	??_setCurrLimitDAC& (0+255),w,b
 12417  003192  6F64               	movwf	(??_setCurrLimitDAC+2)& (0+255),b
 12418  003194  0E01               	movlw	1
 12419  003196  1163               	iorwf	(??_setCurrLimitDAC+1)& (0+255),w,b
 12420  003198  6F65               	movwf	(??_setCurrLimitDAC+3)& (0+255),b
 12421  00319A  6B66               	clrf	(??_setCurrLimitDAC+4)& (0+255),b
 12422  00319C  6B67               	clrf	(??_setCurrLimitDAC+5)& (0+255),b
 12423  00319E  5164               	movf	(??_setCurrLimitDAC+2)& (0+255),w,b
 12424  0031A0  0102               	movlb	2	; () banked
 12425  0031A2  17E2               	andwf	_LATCH_OVEN_DATA& (0+255),f,b
 12426  0031A4  0100               	movlb	0	; () banked
 12427  0031A6  5165               	movf	(??_setCurrLimitDAC+3)& (0+255),w,b
 12428  0031A8  0102               	movlb	2	; () banked
 12429  0031AA  17E3               	andwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 12430  0031AC  0100               	movlb	0	; () banked
 12431  0031AE  5166               	movf	(??_setCurrLimitDAC+4)& (0+255),w,b
 12432  0031B0  0102               	movlb	2	; () banked
 12433  0031B2  17E4               	andwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 12434  0031B4  0100               	movlb	0	; () banked
 12435  0031B6  5167               	movf	(??_setCurrLimitDAC+5)& (0+255),w,b
 12436  0031B8  0102               	movlb	2	; () banked
 12437  0031BA  17E5               	andwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 12438                           
 12439                           ; BSR set to: 2
 12440                           ;HX_ASL_BORON.c: 1184: return 1;
 12441  0031BC  0E01               	movlw	1
 12442  0031BE  0012               	return	
 12443  0031C0                     __end_of_setCurrLimitDAC:
 12444                           	opt stack 0
 12445                           tblptru	equ	0xFF8
 12446                           tblptrh	equ	0xFF7
 12447                           tblptrl	equ	0xFF6
 12448                           tablat	equ	0xFF5
 12449                           prodh	equ	0xFF4
 12450                           prodl	equ	0xFF3
 12451                           intcon	equ	0xFF2
 12452                           postinc0	equ	0xFEE
 12453                           wreg	equ	0xFE8
 12454                           indf1	equ	0xFE7
 12455                           postinc1	equ	0xFE6
 12456                           postdec1	equ	0xFE5
 12457                           fsr1h	equ	0xFE2
 12458                           fsr1l	equ	0xFE1
 12459                           indf2	equ	0xFDF
 12460                           postinc2	equ	0xFDE
 12461                           postdec2	equ	0xFDD
 12462                           fsr2h	equ	0xFDA
 12463                           fsr2l	equ	0xFD9
 12464                           status	equ	0xFD8
 12465                           
 12466 ;; *************** function _ASLB_ContinuityESD *****************
 12467 ;; Defined at:
 12468 ;;		line 342 in file "HX_ASL_BORON.c"
 12469 ;; Parameters:    Size  Location     Type
 12470 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 12471 ;;		 -> hx_mainData(61), 
 12472 ;; Auto vars:     Size  Location     Type
 12473 ;;		None
 12474 ;; Return value:  Size  Location     Type
 12475 ;;                  1    wreg      void 
 12476 ;; Registers used:
 12477 ;;		None
 12478 ;; Tracked objects:
 12479 ;;		On entry : 0/0
 12480 ;;		On exit  : 0/0
 12481 ;;		Unchanged: 0/0
 12482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12483 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12486 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12487 ;;Total ram usage:        2 bytes
 12488 ;; Hardware stack levels used:    1
 12489 ;; Hardware stack levels required when called:    7
 12490 ;; This function calls:
 12491 ;;		Nothing
 12492 ;; This function is called by:
 12493 ;;		_write_ASLBoron_test
 12494 ;; This function uses a non-reentrant model
 12495 ;;
 12496                           
 12497                           	psect	text36
 12498  0040E2                     __ptext36:
 12499                           	opt stack 0
 12500  0040E2                     _ASLB_ContinuityESD:
 12501                           	opt stack 21
 12502                           
 12503                           ;incstack = 0
 12504  0040E2  0012               	return		;funcret
 12505  0040E4                     __end_of_ASLB_ContinuityESD:
 12506                           	opt stack 0
 12507                           tblptru	equ	0xFF8
 12508                           tblptrh	equ	0xFF7
 12509                           tblptrl	equ	0xFF6
 12510                           tablat	equ	0xFF5
 12511                           prodh	equ	0xFF4
 12512                           prodl	equ	0xFF3
 12513                           intcon	equ	0xFF2
 12514                           postinc0	equ	0xFEE
 12515                           wreg	equ	0xFE8
 12516                           indf1	equ	0xFE7
 12517                           postinc1	equ	0xFE6
 12518                           postdec1	equ	0xFE5
 12519                           fsr1h	equ	0xFE2
 12520                           fsr1l	equ	0xFE1
 12521                           indf2	equ	0xFDF
 12522                           postinc2	equ	0xFDE
 12523                           postdec2	equ	0xFDD
 12524                           fsr2h	equ	0xFDA
 12525                           fsr2l	equ	0xFD9
 12526                           status	equ	0xFD8
 12527                           
 12528 ;; *************** function _ASLB_CommonGate *****************
 12529 ;; Defined at:
 12530 ;;		line 845 in file "HX_ASL_BORON.c"
 12531 ;; Parameters:    Size  Location     Type
 12532 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 12533 ;;		 -> hx_mainData(61), 
 12534 ;; Auto vars:     Size  Location     Type
 12535 ;;  rx_index        1    2[BANK0 ] unsigned char 
 12536 ;; Return value:  Size  Location     Type
 12537 ;;                  1    wreg      void 
 12538 ;; Registers used:
 12539 ;;		wreg, status,2
 12540 ;; Tracked objects:
 12541 ;;		On entry : 0/0
 12542 ;;		On exit  : 0/0
 12543 ;;		Unchanged: 0/0
 12544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12545 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12548 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12549 ;;Total ram usage:        3 bytes
 12550 ;; Hardware stack levels used:    1
 12551 ;; Hardware stack levels required when called:    7
 12552 ;; This function calls:
 12553 ;;		Nothing
 12554 ;; This function is called by:
 12555 ;;		_write_ASLBoron_test
 12556 ;; This function uses a non-reentrant model
 12557 ;;
 12558                           
 12559                           	psect	text37
 12560  004098                     __ptext37:
 12561                           	opt stack 0
 12562  004098                     _ASLB_CommonGate:
 12563                           	opt stack 21
 12564                           
 12565                           ;HX_ASL_BORON.c: 851: uint8_t rx_index = 0;
 12566                           
 12567                           ;incstack = 0
 12568  004098  0E00               	movlw	0
 12569  00409A  0100               	movlb	0	; () banked
 12570  00409C  6F62               	movwf	ASLB_CommonGate@rx_index& (0+255),b
 12571                           
 12572                           ; BSR set to: 0
 12573  00409E  0012               	return		;funcret
 12574  0040A0                     __end_of_ASLB_CommonGate:
 12575                           	opt stack 0
 12576                           tblptru	equ	0xFF8
 12577                           tblptrh	equ	0xFF7
 12578                           tblptrl	equ	0xFF6
 12579                           tablat	equ	0xFF5
 12580                           prodh	equ	0xFF4
 12581                           prodl	equ	0xFF3
 12582                           intcon	equ	0xFF2
 12583                           postinc0	equ	0xFEE
 12584                           wreg	equ	0xFE8
 12585                           indf1	equ	0xFE7
 12586                           postinc1	equ	0xFE6
 12587                           postdec1	equ	0xFE5
 12588                           fsr1h	equ	0xFE2
 12589                           fsr1l	equ	0xFE1
 12590                           indf2	equ	0xFDF
 12591                           postinc2	equ	0xFDE
 12592                           postdec2	equ	0xFDD
 12593                           fsr2h	equ	0xFDA
 12594                           fsr2l	equ	0xFD9
 12595                           status	equ	0xFD8
 12596                           
 12597 ;; *************** function _ASLB_ColpittsOscillator *****************
 12598 ;; Defined at:
 12599 ;;		line 801 in file "HX_ASL_BORON.c"
 12600 ;; Parameters:    Size  Location     Type
 12601 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 12602 ;;		 -> hx_mainData(61), 
 12603 ;; Auto vars:     Size  Location     Type
 12604 ;;  rx_index        1    2[BANK0 ] unsigned char 
 12605 ;; Return value:  Size  Location     Type
 12606 ;;                  1    wreg      void 
 12607 ;; Registers used:
 12608 ;;		wreg, status,2
 12609 ;; Tracked objects:
 12610 ;;		On entry : 0/0
 12611 ;;		On exit  : 0/0
 12612 ;;		Unchanged: 0/0
 12613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12614 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12617 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12618 ;;Total ram usage:        3 bytes
 12619 ;; Hardware stack levels used:    1
 12620 ;; Hardware stack levels required when called:    7
 12621 ;; This function calls:
 12622 ;;		Nothing
 12623 ;; This function is called by:
 12624 ;;		_write_ASLBoron_test
 12625 ;; This function uses a non-reentrant model
 12626 ;;
 12627                           
 12628                           	psect	text38
 12629  0040A0                     __ptext38:
 12630                           	opt stack 0
 12631  0040A0                     _ASLB_ColpittsOscillator:
 12632                           	opt stack 21
 12633                           
 12634                           ;HX_ASL_BORON.c: 807: uint8_t rx_index = 0;
 12635                           
 12636                           ; BSR set to: 0
 12637                           ;incstack = 0
 12638  0040A0  0E00               	movlw	0
 12639  0040A2  0100               	movlb	0	; () banked
 12640  0040A4  6F62               	movwf	ASLB_ColpittsOscillator@rx_index& (0+255),b
 12641                           
 12642                           ; BSR set to: 0
 12643  0040A6  0012               	return		;funcret
 12644  0040A8                     __end_of_ASLB_ColpittsOscillator:
 12645                           	opt stack 0
 12646                           tblptru	equ	0xFF8
 12647                           tblptrh	equ	0xFF7
 12648                           tblptrl	equ	0xFF6
 12649                           tablat	equ	0xFF5
 12650                           prodh	equ	0xFF4
 12651                           prodl	equ	0xFF3
 12652                           intcon	equ	0xFF2
 12653                           postinc0	equ	0xFEE
 12654                           wreg	equ	0xFE8
 12655                           indf1	equ	0xFE7
 12656                           postinc1	equ	0xFE6
 12657                           postdec1	equ	0xFE5
 12658                           fsr1h	equ	0xFE2
 12659                           fsr1l	equ	0xFE1
 12660                           indf2	equ	0xFDF
 12661                           postinc2	equ	0xFDE
 12662                           postdec2	equ	0xFDD
 12663                           fsr2h	equ	0xFDA
 12664                           fsr2l	equ	0xFD9
 12665                           status	equ	0xFD8
 12666                           
 12667 ;; *************** function _ASLB_CTHERM *****************
 12668 ;; Defined at:
 12669 ;;		line 491 in file "HX_ASL_BORON.c"
 12670 ;; Parameters:    Size  Location     Type
 12671 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 12672 ;;		 -> hx_mainData(61), 
 12673 ;; Auto vars:     Size  Location     Type
 12674 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 12675 ;;  rx_index        1    4[BANK0 ] unsigned char 
 12676 ;; Return value:  Size  Location     Type
 12677 ;;                  1    wreg      void 
 12678 ;; Registers used:
 12679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12680 ;; Tracked objects:
 12681 ;;		On entry : 0/0
 12682 ;;		On exit  : 0/0
 12683 ;;		Unchanged: 0/0
 12684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12685 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12686 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12688 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12689 ;;Total ram usage:       74 bytes
 12690 ;; Hardware stack levels used:    1
 12691 ;; Hardware stack levels required when called:    8
 12692 ;; This function calls:
 12693 ;;		_setupCmdReadbackPkt
 12694 ;; This function is called by:
 12695 ;;		_write_ASLBoron_test
 12696 ;; This function uses a non-reentrant model
 12697 ;;
 12698                           
 12699                           	psect	text39
 12700  003E16                     __ptext39:
 12701                           	opt stack 0
 12702  003E16                     _ASLB_CTHERM:
 12703                           	opt stack 20
 12704                           
 12705                           ;HX_ASL_BORON.c: 501: uint8_t rx_index = 0;
 12706                           
 12707                           ; BSR set to: 0
 12708                           ;incstack = 0
 12709  003E16  0E00               	movlw	0
 12710  003E18  0100               	movlb	0	; () banked
 12711  003E1A  6F64               	movwf	ASLB_CTHERM@rx_index& (0+255),b
 12712                           
 12713                           ; BSR set to: 0
 12714                           ;HX_ASL_BORON.c: 505: LATCH_ADC_DATA &= 0xFFF0;
 12715  003E1C  0EF0               	movlw	240
 12716  003E1E  0105               	movlb	5	; () banked
 12717  003E20  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 12718  003E22  0EFF               	movlw	255
 12719  003E24  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 12720  003E26  0E00               	movlw	0
 12721  003E28  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 12722  003E2A  0E00               	movlw	0
 12723  003E2C  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 12724                           
 12725                           ; BSR set to: 5
 12726                           ;HX_ASL_BORON.c: 507: txRxPkt cmdReadbackPkt;
 12727                           ;HX_ASL_BORON.c: 508: setupCmdReadbackPkt(&cmdReadbackPkt);
 12728  003E2E  0E65               	movlw	low ASLB_CTHERM@cmdReadbackPkt
 12729  003E30  0100               	movlb	0	; () banked
 12730  003E32  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 12731  003E34  0E00               	movlw	high ASLB_CTHERM@cmdReadbackPkt
 12732  003E36  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 12733  003E38  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 12734  003E3C  0012               	return		;funcret
 12735  003E3E                     __end_of_ASLB_CTHERM:
 12736                           	opt stack 0
 12737                           tblptru	equ	0xFF8
 12738                           tblptrh	equ	0xFF7
 12739                           tblptrl	equ	0xFF6
 12740                           tablat	equ	0xFF5
 12741                           prodh	equ	0xFF4
 12742                           prodl	equ	0xFF3
 12743                           intcon	equ	0xFF2
 12744                           postinc0	equ	0xFEE
 12745                           wreg	equ	0xFE8
 12746                           indf1	equ	0xFE7
 12747                           postinc1	equ	0xFE6
 12748                           postdec1	equ	0xFE5
 12749                           fsr1h	equ	0xFE2
 12750                           fsr1l	equ	0xFE1
 12751                           indf2	equ	0xFDF
 12752                           postinc2	equ	0xFDE
 12753                           postdec2	equ	0xFDD
 12754                           fsr2h	equ	0xFDA
 12755                           fsr2l	equ	0xFD9
 12756                           status	equ	0xFD8
 12757                           
 12758 ;; *************** function _ASLB_CFCVVaricap *****************
 12759 ;; Defined at:
 12760 ;;		line 834 in file "HX_ASL_BORON.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 12763 ;;		 -> hx_mainData(61), 
 12764 ;; Auto vars:     Size  Location     Type
 12765 ;;  rx_index        1    2[BANK0 ] unsigned char 
 12766 ;; Return value:  Size  Location     Type
 12767 ;;                  1    wreg      void 
 12768 ;; Registers used:
 12769 ;;		wreg, status,2
 12770 ;; Tracked objects:
 12771 ;;		On entry : 0/0
 12772 ;;		On exit  : 0/0
 12773 ;;		Unchanged: 0/0
 12774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12775 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12778 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12779 ;;Total ram usage:        3 bytes
 12780 ;; Hardware stack levels used:    1
 12781 ;; Hardware stack levels required when called:    7
 12782 ;; This function calls:
 12783 ;;		Nothing
 12784 ;; This function is called by:
 12785 ;;		_write_ASLBoron_test
 12786 ;; This function uses a non-reentrant model
 12787 ;;
 12788                           
 12789                           	psect	text40
 12790  0040A8                     __ptext40:
 12791                           	opt stack 0
 12792  0040A8                     _ASLB_CFCVVaricap:
 12793                           	opt stack 21
 12794                           
 12795                           ;HX_ASL_BORON.c: 840: uint8_t rx_index = 0;
 12796                           
 12797                           ;incstack = 0
 12798  0040A8  0E00               	movlw	0
 12799  0040AA  0100               	movlb	0	; () banked
 12800  0040AC  6F62               	movwf	ASLB_CFCVVaricap@rx_index& (0+255),b
 12801                           
 12802                           ; BSR set to: 0
 12803  0040AE  0012               	return		;funcret
 12804  0040B0                     __end_of_ASLB_CFCVVaricap:
 12805                           	opt stack 0
 12806                           tblptru	equ	0xFF8
 12807                           tblptrh	equ	0xFF7
 12808                           tblptrl	equ	0xFF6
 12809                           tablat	equ	0xFF5
 12810                           prodh	equ	0xFF4
 12811                           prodl	equ	0xFF3
 12812                           intcon	equ	0xFF2
 12813                           postinc0	equ	0xFEE
 12814                           wreg	equ	0xFE8
 12815                           indf1	equ	0xFE7
 12816                           postinc1	equ	0xFE6
 12817                           postdec1	equ	0xFE5
 12818                           fsr1h	equ	0xFE2
 12819                           fsr1l	equ	0xFE1
 12820                           indf2	equ	0xFDF
 12821                           postinc2	equ	0xFDE
 12822                           postdec2	equ	0xFDD
 12823                           fsr2h	equ	0xFDA
 12824                           fsr2l	equ	0xFD9
 12825                           status	equ	0xFD8
 12826                           
 12827 ;; *************** function _ASLB_AnalogMuxReadingSetup *****************
 12828 ;; Defined at:
 12829 ;;		line 459 in file "HX_ASL_BORON.c"
 12830 ;; Parameters:    Size  Location     Type
 12831 ;;  rxBuffer        2   18[BANK0 ] PTR unsigned char 
 12832 ;;		 -> hx_mainData(61), 
 12833 ;; Auto vars:     Size  Location     Type
 12834 ;;  ovenWrPkt      71   77[BANK2 ] struct TxRxPacket
 12835 ;;  cmdReadbackP   71    6[BANK2 ] struct TxRxPacket
 12836 ;;  stream          4    2[BANK2 ] PTR struct TxRxPacket[2]
 12837 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
 12838 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
 12839 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
 12840 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
 12841 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
 12842 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
 12843 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
 12844 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
 12845 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
 12846 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
 12847 ;;  stream_statu    1    1[BANK2 ] unsigned char 
 12848 ;;  rx_index        1    0[BANK2 ] unsigned char 
 12849 ;; Return value:  Size  Location     Type
 12850 ;;                  1    wreg      void 
 12851 ;; Registers used:
 12852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12853 ;; Tracked objects:
 12854 ;;		On entry : 0/0
 12855 ;;		On exit  : 0/0
 12856 ;;		Unchanged: 0/0
 12857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12858 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12859 ;;      Locals:         0       0       0     148       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12861 ;;      Totals:         0       2       0     148       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12862 ;;Total ram usage:      150 bytes
 12863 ;; Hardware stack levels used:    1
 12864 ;; Hardware stack levels required when called:   10
 12865 ;; This function calls:
 12866 ;;		_setupCmdReadbackPkt
 12867 ;;		_setupLatchPkt
 12868 ;;		_streamBoronComm
 12869 ;; This function is called by:
 12870 ;;		_write_ASLBoron_test
 12871 ;; This function uses a non-reentrant model
 12872 ;;
 12873                           
 12874                           	psect	text41
 12875  0032E4                     __ptext41:
 12876                           	opt stack 0
 12877  0032E4                     _ASLB_AnalogMuxReadingSetup:
 12878                           	opt stack 18
 12879                           
 12880                           ;HX_ASL_BORON.c: 468: uint8_t rx_index = 0;
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;incstack = 0
 12884  0032E4  0E00               	movlw	0
 12885  0032E6  0102               	movlb	2	; () banked
 12886  0032E8  6F00               	movwf	ASLB_AnalogMuxReadingSetup@rx_index& (0+255),b
 12887                           
 12888                           ; BSR set to: 2
 12889                           ;HX_ASL_BORON.c: 471: LATCH_OVEN_DATA &= 0xF7FF;
 12890  0032EA  0EFF               	movlw	255
 12891  0032EC  17E2               	andwf	_LATCH_OVEN_DATA& (0+255),f,b
 12892  0032EE  0EF7               	movlw	247
 12893  0032F0  17E3               	andwf	(_LATCH_OVEN_DATA+1)& (0+255),f,b
 12894  0032F2  0E00               	movlw	0
 12895  0032F4  17E4               	andwf	(_LATCH_OVEN_DATA+2)& (0+255),f,b
 12896  0032F6  0E00               	movlw	0
 12897  0032F8  17E5               	andwf	(_LATCH_OVEN_DATA+3)& (0+255),f,b
 12898                           
 12899                           ; BSR set to: 2
 12900                           ;HX_ASL_BORON.c: 474: LATCH_OVEN_DATA |= 0x0040;
 12901  0032FA  8DE2               	bsf	_LATCH_OVEN_DATA& (0+255),6,b
 12902                           
 12903                           ; BSR set to: 2
 12904                           ;HX_ASL_BORON.c: 478: txRxPkt cmdReadbackPkt;
 12905                           ;HX_ASL_BORON.c: 479: setupCmdReadbackPkt(&cmdReadbackPkt);
 12906  0032FC  0E06               	movlw	low ASLB_AnalogMuxReadingSetup@cmdReadbackPkt
 12907  0032FE  0100               	movlb	0	; () banked
 12908  003300  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 12909  003302  0E02               	movlw	high ASLB_AnalogMuxReadingSetup@cmdReadbackPkt
 12910  003304  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 12911  003306  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 12912                           
 12913                           ;HX_ASL_BORON.c: 480: txRxPkt ovenWrPkt;
 12914                           ;HX_ASL_BORON.c: 481: setupLatchPkt(&ovenWrPkt, LATCH_OVEN_DATA, 0x4);
 12915  00330A  0E4D               	movlw	low ASLB_AnalogMuxReadingSetup@ovenWrPkt
 12916  00330C  0100               	movlb	0	; () banked
 12917  00330E  6F65               	movwf	setupLatchPkt@pkt& (0+255),b
 12918  003310  0E02               	movlw	high ASLB_AnalogMuxReadingSetup@ovenWrPkt
 12919  003312  6F66               	movwf	(setupLatchPkt@pkt+1)& (0+255),b
 12920  003314  C2E2  F067         	movff	_LATCH_OVEN_DATA,setupLatchPkt@latch_data
 12921  003318  C2E3  F068         	movff	_LATCH_OVEN_DATA+1,setupLatchPkt@latch_data+1
 12922  00331C  0E04               	movlw	4
 12923  00331E  6F69               	movwf	setupLatchPkt@latch_num& (0+255),b
 12924  003320  EC44  F017         	call	_setupLatchPkt	;wreg free
 12925                           
 12926                           ;HX_ASL_BORON.c: 484: txRxPkt* stream[2];
 12927                           ;HX_ASL_BORON.c: 485: uint8_t stream_status = 0;
 12928  003324  0E00               	movlw	0
 12929  003326  0102               	movlb	2	; () banked
 12930  003328  6F01               	movwf	ASLB_AnalogMuxReadingSetup@stream_status& (0+255),b
 12931                           
 12932                           ; BSR set to: 2
 12933                           ;HX_ASL_BORON.c: 486: stream[0] = &ovenWrPkt;
 12934  00332A  0E4D               	movlw	low ASLB_AnalogMuxReadingSetup@ovenWrPkt
 12935  00332C  6F02               	movwf	ASLB_AnalogMuxReadingSetup@stream& (0+255),b
 12936  00332E  0E02               	movlw	high ASLB_AnalogMuxReadingSetup@ovenWrPkt
 12937  003330  6F03               	movwf	(ASLB_AnalogMuxReadingSetup@stream+1)& (0+255),b
 12938                           
 12939                           ; BSR set to: 2
 12940                           ;HX_ASL_BORON.c: 487: stream[1] = &cmdReadbackPkt;
 12941  003332  0E06               	movlw	low ASLB_AnalogMuxReadingSetup@cmdReadbackPkt
 12942  003334  6F04               	movwf	(ASLB_AnalogMuxReadingSetup@stream+2)& (0+255),b
 12943  003336  0E02               	movlw	high ASLB_AnalogMuxReadingSetup@cmdReadbackPkt
 12944  003338  6F05               	movwf	(ASLB_AnalogMuxReadingSetup@stream+3)& (0+255),b
 12945                           
 12946                           ; BSR set to: 2
 12947                           ;HX_ASL_BORON.c: 488: stream_status = streamBoronComm(BORON_COMM_TYPE, stream, 2);
 12948  00333A  0E02               	movlw	low ASLB_AnalogMuxReadingSetup@stream
 12949  00333C  0100               	movlb	0	; () banked
 12950  00333E  6F6E               	movwf	streamBoronComm@pktArr& (0+255),b
 12951  003340  0E02               	movlw	high ASLB_AnalogMuxReadingSetup@stream
 12952  003342  6F6F               	movwf	(streamBoronComm@pktArr+1)& (0+255),b
 12953  003344  0E02               	movlw	2
 12954  003346  6F70               	movwf	streamBoronComm@pktSize& (0+255),b
 12955  003348  5030               	movf	_BORON_COMM_TYPE,w,c
 12956  00334A  EC6E  F01E         	call	_streamBoronComm
 12957  00334E  0102               	movlb	2	; () banked
 12958  003350  6F01               	movwf	ASLB_AnalogMuxReadingSetup@stream_status& (0+255),b
 12959                           
 12960                           ; BSR set to: 2
 12961  003352  0012               	return		;funcret
 12962  003354                     __end_of_ASLB_AnalogMuxReadingSetup:
 12963                           	opt stack 0
 12964                           tblptru	equ	0xFF8
 12965                           tblptrh	equ	0xFF7
 12966                           tblptrl	equ	0xFF6
 12967                           tablat	equ	0xFF5
 12968                           prodh	equ	0xFF4
 12969                           prodl	equ	0xFF3
 12970                           intcon	equ	0xFF2
 12971                           postinc0	equ	0xFEE
 12972                           wreg	equ	0xFE8
 12973                           indf1	equ	0xFE7
 12974                           postinc1	equ	0xFE6
 12975                           postdec1	equ	0xFE5
 12976                           fsr1h	equ	0xFE2
 12977                           fsr1l	equ	0xFE1
 12978                           indf2	equ	0xFDF
 12979                           postinc2	equ	0xFDE
 12980                           postdec2	equ	0xFDD
 12981                           fsr2h	equ	0xFDA
 12982                           fsr2l	equ	0xFD9
 12983                           status	equ	0xFD8
 12984                           
 12985 ;; *************** function _setupLatchPkt *****************
 12986 ;; Defined at:
 12987 ;;		line 1187 in file "HX_ASL_BORON.c"
 12988 ;; Parameters:    Size  Location     Type
 12989 ;;  pkt             2    5[BANK0 ] PTR struct TxRxPacket
 12990 ;;		 -> checkAndSendLatchData@clock_select_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLatchData@ad
      +c_mux_pkt(71), checkAndSendLatchData@adc_pkt(71), 
 12991 ;;		 -> checkAndSendLatchData@cmos_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@varactor_dac_pkt(7
      +1), checkAndSendLatchData@heat_dac_pkt(71), 
 12992 ;;		 -> checkAndSendLatchData@oven_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@osc2_pkt(71), ch
      +eckAndSendLatchData@osc1_pkt(71), 
 12993 ;;		 -> checkAndSendLatchData@osc0_pkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_HeaterFunctionality@heatDacWr
      +Pkt(71), ASLB_HeaterFunctionality@ovenWrPkt(71), 
 12994 ;;  latch_data      2    7[BANK0 ] unsigned int 
 12995 ;;  latch_num       1    9[BANK0 ] unsigned char 
 12996 ;; Auto vars:     Size  Location     Type
 12997 ;;		None
 12998 ;; Return value:  Size  Location     Type
 12999 ;;                  1    wreg      void 
 13000 ;; Registers used:
 13001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13002 ;; Tracked objects:
 13003 ;;		On entry : 0/0
 13004 ;;		On exit  : 0/0
 13005 ;;		Unchanged: 0/0
 13006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13007 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13009 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13010 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13011 ;;Total ram usage:        7 bytes
 13012 ;; Hardware stack levels used:    1
 13013 ;; Hardware stack levels required when called:    8
 13014 ;; This function calls:
 13015 ;;		_calcChecksum
 13016 ;; This function is called by:
 13017 ;;		_ASLB_HeaterFunctionality
 13018 ;;		_ASLB_AnalogMuxReadingSetup
 13019 ;;		_checkAndSendLatchData
 13020 ;; This function uses a non-reentrant model
 13021 ;;
 13022                           
 13023                           	psect	text42
 13024  002E88                     __ptext42:
 13025                           	opt stack 0
 13026  002E88                     _setupLatchPkt:
 13027                           	opt stack 18
 13028                           
 13029                           ;HX_ASL_BORON.c: 1191: pkt->txOrRx = 0;
 13030                           
 13031                           ; BSR set to: 2
 13032                           ;incstack = 0
 13033  002E88  C065  FFD9         	movff	setupLatchPkt@pkt,fsr2l
 13034  002E8C  C066  FFDA         	movff	setupLatchPkt@pkt+1,fsr2h
 13035  002E90  0E00               	movlw	0
 13036  002E92  6EDF               	movwf	indf2,c
 13037                           
 13038                           ;HX_ASL_BORON.c: 1192: pkt->slaveAddr = 0x5A;
 13039  002E94  0100               	movlb	0	; () banked
 13040  002E96  EE20 F001          	lfsr	2,1
 13041  002E9A  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13042  002E9C  26D9               	addwf	fsr2l,f,c
 13043  002E9E  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13044  002EA0  22DA               	addwfc	fsr2h,f,c
 13045  002EA2  0E5A               	movlw	90
 13046  002EA4  6EDE               	movwf	postinc2,c
 13047  002EA6  0E00               	movlw	0
 13048  002EA8  6EDD               	movwf	postdec2,c
 13049                           
 13050                           ; BSR set to: 0
 13051                           ;HX_ASL_BORON.c: 1193: pkt->numOfBytes = 5;
 13052  002EAA  EE20 F043          	lfsr	2,67
 13053  002EAE  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13054  002EB0  26D9               	addwf	fsr2l,f,c
 13055  002EB2  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13056  002EB4  22DA               	addwfc	fsr2h,f,c
 13057  002EB6  0E05               	movlw	5
 13058  002EB8  6EDF               	movwf	indf2,c
 13059                           
 13060                           ; BSR set to: 0
 13061                           ;HX_ASL_BORON.c: 1194: pkt->data[0] = 0x50;
 13062  002EBA  EE20 F003          	lfsr	2,3
 13063  002EBE  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13064  002EC0  26D9               	addwf	fsr2l,f,c
 13065  002EC2  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13066  002EC4  22DA               	addwfc	fsr2h,f,c
 13067  002EC6  0E50               	movlw	80
 13068  002EC8  6EDF               	movwf	indf2,c
 13069                           
 13070                           ; BSR set to: 0
 13071                           ;HX_ASL_BORON.c: 1195: pkt->data[1] = (latch_data >> 8) & 0xFF;
 13072  002ECA  EE20 F004          	lfsr	2,4
 13073  002ECE  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13074  002ED0  26D9               	addwf	fsr2l,f,c
 13075  002ED2  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13076  002ED4  22DA               	addwfc	fsr2h,f,c
 13077  002ED6  5168               	movf	(setupLatchPkt@latch_data+1)& (0+255),w,b
 13078  002ED8  6EDF               	movwf	indf2,c
 13079                           
 13080                           ; BSR set to: 0
 13081                           ;HX_ASL_BORON.c: 1196: pkt->data[2] = latch_data & 0xFF;
 13082  002EDA  EE20 F005          	lfsr	2,5
 13083  002EDE  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13084  002EE0  26D9               	addwf	fsr2l,f,c
 13085  002EE2  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13086  002EE4  22DA               	addwfc	fsr2h,f,c
 13087  002EE6  C067  FFDF         	movff	setupLatchPkt@latch_data,indf2
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;HX_ASL_BORON.c: 1197: pkt->data[3] = latch_num;
 13091  002EEA  EE20 F006          	lfsr	2,6
 13092  002EEE  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13093  002EF0  26D9               	addwf	fsr2l,f,c
 13094  002EF2  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13095  002EF4  22DA               	addwfc	fsr2h,f,c
 13096  002EF6  C069  FFDF         	movff	setupLatchPkt@latch_num,indf2
 13097                           
 13098                           ; BSR set to: 0
 13099                           ;HX_ASL_BORON.c: 1198: pkt->data[4] = calcChecksum(pkt->data, pkt->numOfBytes-1);
 13100  002EFA  0E03               	movlw	3
 13101  002EFC  2565               	addwf	setupLatchPkt@pkt& (0+255),w,b
 13102  002EFE  6F60               	movwf	calcChecksum@data& (0+255),b
 13103  002F00  0E00               	movlw	0
 13104  002F02  2166               	addwfc	(setupLatchPkt@pkt+1)& (0+255),w,b
 13105  002F04  6F61               	movwf	(calcChecksum@data+1)& (0+255),b
 13106  002F06  EE20 F043          	lfsr	2,67
 13107  002F0A  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13108  002F0C  26D9               	addwf	fsr2l,f,c
 13109  002F0E  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13110  002F10  22DA               	addwfc	fsr2h,f,c
 13111  002F12  50DF               	movf	indf2,w,c
 13112  002F14  6F6A               	movwf	??_setupLatchPkt& (0+255),b
 13113  002F16  056A               	decf	??_setupLatchPkt& (0+255),w,b
 13114  002F18  6F62               	movwf	calcChecksum@size& (0+255),b
 13115  002F1A  EC86  F01E         	call	_calcChecksum	;wreg free
 13116  002F1E  0100               	movlb	0	; () banked
 13117  002F20  6F6B               	movwf	(??_setupLatchPkt+1)& (0+255),b
 13118  002F22  EE20 F007          	lfsr	2,7
 13119  002F26  5165               	movf	setupLatchPkt@pkt& (0+255),w,b
 13120  002F28  26D9               	addwf	fsr2l,f,c
 13121  002F2A  5166               	movf	(setupLatchPkt@pkt+1)& (0+255),w,b
 13122  002F2C  22DA               	addwfc	fsr2h,f,c
 13123  002F2E  C06B  FFDF         	movff	??_setupLatchPkt+1,indf2
 13124                           
 13125                           ; BSR set to: 0
 13126  002F32  0012               	return		;funcret
 13127  002F34                     __end_of_setupLatchPkt:
 13128                           	opt stack 0
 13129                           tblptru	equ	0xFF8
 13130                           tblptrh	equ	0xFF7
 13131                           tblptrl	equ	0xFF6
 13132                           tablat	equ	0xFF5
 13133                           prodh	equ	0xFF4
 13134                           prodl	equ	0xFF3
 13135                           intcon	equ	0xFF2
 13136                           postinc0	equ	0xFEE
 13137                           wreg	equ	0xFE8
 13138                           indf1	equ	0xFE7
 13139                           postinc1	equ	0xFE6
 13140                           postdec1	equ	0xFE5
 13141                           fsr1h	equ	0xFE2
 13142                           fsr1l	equ	0xFE1
 13143                           indf2	equ	0xFDF
 13144                           postinc2	equ	0xFDE
 13145                           postdec2	equ	0xFDD
 13146                           fsr2h	equ	0xFDA
 13147                           fsr2l	equ	0xFD9
 13148                           status	equ	0xFD8
 13149                           
 13150 ;; *************** function _ASLB_ADCReferenceVoltage *****************
 13151 ;; Defined at:
 13152 ;;		line 512 in file "HX_ASL_BORON.c"
 13153 ;; Parameters:    Size  Location     Type
 13154 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 13155 ;;		 -> hx_mainData(61), 
 13156 ;; Auto vars:     Size  Location     Type
 13157 ;;  cmdReadbackP   71    5[BANK0 ] struct TxRxPacket
 13158 ;;  rx_index        1    4[BANK0 ] unsigned char 
 13159 ;; Return value:  Size  Location     Type
 13160 ;;                  1    wreg      void 
 13161 ;; Registers used:
 13162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13163 ;; Tracked objects:
 13164 ;;		On entry : 0/0
 13165 ;;		On exit  : 0/0
 13166 ;;		Unchanged: 0/0
 13167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13168 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13169 ;;      Locals:         0      72       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13171 ;;      Totals:         0      74       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13172 ;;Total ram usage:       74 bytes
 13173 ;; Hardware stack levels used:    1
 13174 ;; Hardware stack levels required when called:    8
 13175 ;; This function calls:
 13176 ;;		_setupCmdReadbackPkt
 13177 ;; This function is called by:
 13178 ;;		_write_ASLBoron_test
 13179 ;; This function uses a non-reentrant model
 13180 ;;
 13181                           
 13182                           	psect	text43
 13183  003DC4                     __ptext43:
 13184                           	opt stack 0
 13185  003DC4                     _ASLB_ADCReferenceVoltage:
 13186                           	opt stack 20
 13187                           
 13188                           ;HX_ASL_BORON.c: 521: uint8_t rx_index = 0;
 13189                           
 13190                           ; BSR set to: 0
 13191                           ;incstack = 0
 13192  003DC4  0E00               	movlw	0
 13193  003DC6  0100               	movlb	0	; () banked
 13194  003DC8  6F64               	movwf	ASLB_ADCReferenceVoltage@rx_index& (0+255),b
 13195                           
 13196                           ; BSR set to: 0
 13197                           ;HX_ASL_BORON.c: 524: LATCH_ADC_DATA |= 0x0001;
 13198  003DCA  0105               	movlb	5	; () banked
 13199  003DCC  81D9               	bsf	_LATCH_ADC_DATA& (0+255),0,b
 13200                           
 13201                           ; BSR set to: 5
 13202                           ;HX_ASL_BORON.c: 525: LATCH_ADC_DATA &= 0xFFF1;
 13203  003DCE  0EF1               	movlw	241
 13204  003DD0  17D9               	andwf	_LATCH_ADC_DATA& (0+255),f,b
 13205  003DD2  0EFF               	movlw	255
 13206  003DD4  17DA               	andwf	(_LATCH_ADC_DATA+1)& (0+255),f,b
 13207  003DD6  0E00               	movlw	0
 13208  003DD8  17DB               	andwf	(_LATCH_ADC_DATA+2)& (0+255),f,b
 13209  003DDA  0E00               	movlw	0
 13210  003DDC  17DC               	andwf	(_LATCH_ADC_DATA+3)& (0+255),f,b
 13211                           
 13212                           ; BSR set to: 5
 13213                           ;HX_ASL_BORON.c: 527: txRxPkt cmdReadbackPkt;
 13214                           ;HX_ASL_BORON.c: 528: setupCmdReadbackPkt(&cmdReadbackPkt);
 13215  003DDE  0E65               	movlw	low ASLB_ADCReferenceVoltage@cmdReadbackPkt
 13216  003DE0  0100               	movlb	0	; () banked
 13217  003DE2  6F60               	movwf	setupCmdReadbackPkt@pkt& (0+255),b
 13218  003DE4  0E00               	movlw	high ASLB_ADCReferenceVoltage@cmdReadbackPkt
 13219  003DE6  6F61               	movwf	(setupCmdReadbackPkt@pkt+1)& (0+255),b
 13220  003DE8  EC22  F01E         	call	_setupCmdReadbackPkt	;wreg free
 13221  003DEC  0012               	return		;funcret
 13222  003DEE                     __end_of_ASLB_ADCReferenceVoltage:
 13223                           	opt stack 0
 13224                           tblptru	equ	0xFF8
 13225                           tblptrh	equ	0xFF7
 13226                           tblptrl	equ	0xFF6
 13227                           tablat	equ	0xFF5
 13228                           prodh	equ	0xFF4
 13229                           prodl	equ	0xFF3
 13230                           intcon	equ	0xFF2
 13231                           postinc0	equ	0xFEE
 13232                           wreg	equ	0xFE8
 13233                           indf1	equ	0xFE7
 13234                           postinc1	equ	0xFE6
 13235                           postdec1	equ	0xFE5
 13236                           fsr1h	equ	0xFE2
 13237                           fsr1l	equ	0xFE1
 13238                           indf2	equ	0xFDF
 13239                           postinc2	equ	0xFDE
 13240                           postdec2	equ	0xFDD
 13241                           fsr2h	equ	0xFDA
 13242                           fsr2l	equ	0xFD9
 13243                           status	equ	0xFD8
 13244                           
 13245 ;; *************** function _setupCmdReadbackPkt *****************
 13246 ;; Defined at:
 13247 ;;		line 1201 in file "HX_ASL_BORON.c"
 13248 ;; Parameters:    Size  Location     Type
 13249 ;;  pkt             2    0[BANK0 ] PTR struct TxRxPacket
 13250 ;;		 -> checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkA
      +ndSendLatchData@readback_adc_mux_pkt(71), checkAndSendLatchData@readback_adc_pkt(71), 
 13251 ;;		 -> checkAndSendLatchData@readback_cmos_pkt(71), checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@
      +readback_varactor_dac_pkt(71), checkAndSendLatchData@readback_heat_dac_pkt(71), 
 13252 ;;		 -> checkAndSendLatchData@readback_oven_pkt(71), checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchDat
      +a@readback_osc2_pkt(71), checkAndSendLatchData@readback_osc1_pkt(71), 
 13253 ;;		 -> checkAndSendLatchData@readback_osc0_pkt(71), ASLB_VaricapBiasSteering@cmdReadbackPkt(71), ASLB_ExternalReference
      +Voltage@cmdReadbackPkt(71), ASLB_OscillatorRegulatorVoltage@cmdReadbackPkt(71), 
 13254 ;;		 -> ASLB_MuxOpenCircuit@cmdReadbackPkt(71), ASLB_ZTCReferenceCurrent@cmdReadbackPkt(71), ASLB_DigitalRegulatorVoltag
      +e@cmdReadbackPkt(71), ASLB_CurrentLimitDACVoltage@cmdReadbackPkt(71), 
 13255 ;;		 -> ASLB_TempSetDACVoltage@cmdReadbackPkt(71), ASLB_VaricapDACVoltage@cmdReadbackPkt(71), ASLB_DACReferenceVoltage@c
      +mdReadbackPkt(71), ASLB_MuxReadingVDD@cmdReadbackPkt(71), 
 13256 ;;		 -> ASLB_InternalTempSensor@cmdReadbackPkt(71), ASLB_HeaterFBSignals@cmdReadbackPkt(71), ASLB_ADCReferenceVoltage@cm
      +dReadbackPkt(71), ASLB_CTHERM@cmdReadbackPkt(71), 
 13257 ;;		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
 13258 ;; Auto vars:     Size  Location     Type
 13259 ;;		None
 13260 ;; Return value:  Size  Location     Type
 13261 ;;                  1    wreg      void 
 13262 ;; Registers used:
 13263 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13264 ;; Tracked objects:
 13265 ;;		On entry : 0/0
 13266 ;;		On exit  : 0/0
 13267 ;;		Unchanged: 0/0
 13268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13269 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13272 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13273 ;;Total ram usage:        2 bytes
 13274 ;; Hardware stack levels used:    1
 13275 ;; Hardware stack levels required when called:    7
 13276 ;; This function calls:
 13277 ;;		Nothing
 13278 ;; This function is called by:
 13279 ;;		_ASLB_HeaterFunctionality
 13280 ;;		_ASLB_AnalogMuxReadingSetup
 13281 ;;		_ASLB_CTHERM
 13282 ;;		_ASLB_ADCReferenceVoltage
 13283 ;;		_ASLB_HeaterFBSignals
 13284 ;;		_ASLB_InternalTempSensor
 13285 ;;		_ASLB_MuxReadingVDD
 13286 ;;		_ASLB_DACReferenceVoltage
 13287 ;;		_ASLB_VaricapDACVoltage
 13288 ;;		_ASLB_TempSetDACVoltage
 13289 ;;		_ASLB_CurrentLimitDACVoltage
 13290 ;;		_ASLB_DigitalRegulatorVoltage
 13291 ;;		_ASLB_ZTCReferenceCurrent
 13292 ;;		_ASLB_MuxOpenCircuit
 13293 ;;		_ASLB_OscillatorRegulatorVoltage
 13294 ;;		_ASLB_ExternalReferenceVoltage
 13295 ;;		_ASLB_VaricapBiasSteering
 13296 ;;		_checkAndSendLatchData
 13297 ;; This function uses a non-reentrant model
 13298 ;;
 13299                           
 13300                           	psect	text44
 13301  003C44                     __ptext44:
 13302                           	opt stack 0
 13303  003C44                     _setupCmdReadbackPkt:
 13304                           	opt stack 20
 13305                           
 13306                           ;HX_ASL_BORON.c: 1204: pkt->txOrRx = 1;
 13307                           
 13308                           ;incstack = 0
 13309  003C44  C060  FFD9         	movff	setupCmdReadbackPkt@pkt,fsr2l
 13310  003C48  C061  FFDA         	movff	setupCmdReadbackPkt@pkt+1,fsr2h
 13311  003C4C  0E01               	movlw	1
 13312  003C4E  6EDF               	movwf	indf2,c
 13313                           
 13314                           ;HX_ASL_BORON.c: 1205: pkt->slaveAddr = 0x5A;
 13315  003C50  0100               	movlb	0	; () banked
 13316  003C52  EE20 F001          	lfsr	2,1
 13317  003C56  5160               	movf	setupCmdReadbackPkt@pkt& (0+255),w,b
 13318  003C58  26D9               	addwf	fsr2l,f,c
 13319  003C5A  5161               	movf	(setupCmdReadbackPkt@pkt+1)& (0+255),w,b
 13320  003C5C  22DA               	addwfc	fsr2h,f,c
 13321  003C5E  0E5A               	movlw	90
 13322  003C60  6EDE               	movwf	postinc2,c
 13323  003C62  0E00               	movlw	0
 13324  003C64  6EDD               	movwf	postdec2,c
 13325                           
 13326                           ; BSR set to: 0
 13327                           ;HX_ASL_BORON.c: 1206: pkt->numOfBytes = 3;
 13328  003C66  EE20 F043          	lfsr	2,67
 13329  003C6A  5160               	movf	setupCmdReadbackPkt@pkt& (0+255),w,b
 13330  003C6C  26D9               	addwf	fsr2l,f,c
 13331  003C6E  5161               	movf	(setupCmdReadbackPkt@pkt+1)& (0+255),w,b
 13332  003C70  22DA               	addwfc	fsr2h,f,c
 13333  003C72  0E03               	movlw	3
 13334  003C74  6EDF               	movwf	indf2,c
 13335                           
 13336                           ; BSR set to: 0
 13337  003C76  0012               	return		;funcret
 13338  003C78                     __end_of_setupCmdReadbackPkt:
 13339                           	opt stack 0
 13340                           tblptru	equ	0xFF8
 13341                           tblptrh	equ	0xFF7
 13342                           tblptrl	equ	0xFF6
 13343                           tablat	equ	0xFF5
 13344                           prodh	equ	0xFF4
 13345                           prodl	equ	0xFF3
 13346                           intcon	equ	0xFF2
 13347                           postinc0	equ	0xFEE
 13348                           wreg	equ	0xFE8
 13349                           indf1	equ	0xFE7
 13350                           postinc1	equ	0xFE6
 13351                           postdec1	equ	0xFE5
 13352                           fsr1h	equ	0xFE2
 13353                           fsr1l	equ	0xFE1
 13354                           indf2	equ	0xFDF
 13355                           postinc2	equ	0xFDE
 13356                           postdec2	equ	0xFDD
 13357                           fsr2h	equ	0xFDA
 13358                           fsr2l	equ	0xFD9
 13359                           status	equ	0xFD8
 13360                           
 13361 ;; *************** function _ASLB_ADC *****************
 13362 ;; Defined at:
 13363 ;;		line 856 in file "HX_ASL_BORON.c"
 13364 ;; Parameters:    Size  Location     Type
 13365 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 13366 ;;		 -> hx_mainData(61), 
 13367 ;; Auto vars:     Size  Location     Type
 13368 ;;  rx_index        1    2[BANK0 ] unsigned char 
 13369 ;; Return value:  Size  Location     Type
 13370 ;;                  1    wreg      void 
 13371 ;; Registers used:
 13372 ;;		wreg, status,2
 13373 ;; Tracked objects:
 13374 ;;		On entry : 0/0
 13375 ;;		On exit  : 0/0
 13376 ;;		Unchanged: 0/0
 13377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13378 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13381 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13382 ;;Total ram usage:        3 bytes
 13383 ;; Hardware stack levels used:    1
 13384 ;; Hardware stack levels required when called:    7
 13385 ;; This function calls:
 13386 ;;		Nothing
 13387 ;; This function is called by:
 13388 ;;		_write_ASLBoron_test
 13389 ;; This function uses a non-reentrant model
 13390 ;;
 13391                           
 13392                           	psect	text45
 13393  0040B0                     __ptext45:
 13394                           	opt stack 0
 13395  0040B0                     _ASLB_ADC:
 13396                           	opt stack 21
 13397                           
 13398                           ;HX_ASL_BORON.c: 869: uint8_t rx_index = 0;
 13399                           
 13400                           ; BSR set to: 0
 13401                           ;incstack = 0
 13402  0040B0  0E00               	movlw	0
 13403  0040B2  0100               	movlb	0	; () banked
 13404  0040B4  6F62               	movwf	ASLB_ADC@rx_index& (0+255),b
 13405                           
 13406                           ; BSR set to: 0
 13407  0040B6  0012               	return		;funcret
 13408  0040B8                     __end_of_ASLB_ADC:
 13409                           	opt stack 0
 13410                           tblptru	equ	0xFF8
 13411                           tblptrh	equ	0xFF7
 13412                           tblptrl	equ	0xFF6
 13413                           tablat	equ	0xFF5
 13414                           prodh	equ	0xFF4
 13415                           prodl	equ	0xFF3
 13416                           intcon	equ	0xFF2
 13417                           postinc0	equ	0xFEE
 13418                           wreg	equ	0xFE8
 13419                           indf1	equ	0xFE7
 13420                           postinc1	equ	0xFE6
 13421                           postdec1	equ	0xFE5
 13422                           fsr1h	equ	0xFE2
 13423                           fsr1l	equ	0xFE1
 13424                           indf2	equ	0xFDF
 13425                           postinc2	equ	0xFDE
 13426                           postdec2	equ	0xFDD
 13427                           fsr2h	equ	0xFDA
 13428                           fsr2l	equ	0xFD9
 13429                           status	equ	0xFD8
 13430                           
 13431 ;; *************** function _write_ASLBoron_debug *****************
 13432 ;; Defined at:
 13433 ;;		line 277 in file "HX_ASL_BORON.c"
 13434 ;; Parameters:    Size  Location     Type
 13435 ;;  run_test        1    wreg     unsigned char 
 13436 ;;  run_cnfg        1  104[BANK0 ] unsigned char 
 13437 ;;  rxBuffer        2  105[BANK0 ] PTR unsigned char 
 13438 ;;		 -> hx_mainData(61), 
 13439 ;; Auto vars:     Size  Location     Type
 13440 ;;  run_test        1  107[BANK0 ] unsigned char 
 13441 ;; Return value:  Size  Location     Type
 13442 ;;                  1    wreg      void 
 13443 ;; Registers used:
 13444 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13445 ;; Tracked objects:
 13446 ;;		On entry : 0/0
 13447 ;;		On exit  : 0/0
 13448 ;;		Unchanged: 0/0
 13449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13450 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13451 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13453 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13454 ;;Total ram usage:        4 bytes
 13455 ;; Hardware stack levels used:    1
 13456 ;; Hardware stack levels required when called:   11
 13457 ;; This function calls:
 13458 ;;		_ASLB_debug0
 13459 ;;		_ASLB_debug1
 13460 ;;		_ASLB_debug2
 13461 ;;		_ASLB_debug3
 13462 ;;		_cycleBoronPower
 13463 ;;		_findMaxI2CSpeed
 13464 ;;		_resetLATCHData
 13465 ;;		_resetSFRData
 13466 ;;		_setCommI2C
 13467 ;;		_setCommSingleWire
 13468 ;; This function is called by:
 13469 ;;		_run_ASLBoron
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473                           	psect	text46
 13474  00286E                     __ptext46:
 13475                           	opt stack 0
 13476  00286E                     _write_ASLBoron_debug:
 13477                           	opt stack 18
 13478                           
 13479                           ; BSR set to: 0
 13480                           ;incstack = 0
 13481                           ;write_ASLBoron_debug@run_test stored from wreg
 13482  00286E  0100               	movlb	0	; () banked
 13483  002870  6FCB               	movwf	write_ASLBoron_debug@run_test& (0+255),b
 13484                           
 13485                           ;HX_ASL_BORON.c: 279: switch(run_test)
 13486  002872  D081               	goto	l1099
 13487  002874                     
 13488                           ;HX_ASL_BORON.c: 282: cycleBoronPower();
 13489  002874  ECA7  F01F         	call	_cycleBoronPower	;wreg free
 13490                           
 13491                           ;HX_ASL_BORON.c: 283: break;
 13492  002878  0012               	return	
 13493  00287A                     
 13494                           ;HX_ASL_BORON.c: 286: ASLB_debug0(&rxBuffer[1]);
 13495  00287A  0E01               	movlw	1
 13496  00287C  0100               	movlb	0	; () banked
 13497  00287E  25C9               	addwf	write_ASLBoron_debug@rxBuffer& (0+255),w,b
 13498  002880  6F60               	movwf	ASLB_debug0@rxBuffer& (0+255),b
 13499  002882  0E00               	movlw	0
 13500  002884  21CA               	addwfc	(write_ASLBoron_debug@rxBuffer+1)& (0+255),w,b
 13501  002886  6F61               	movwf	(ASLB_debug0@rxBuffer+1)& (0+255),b
 13502  002888  EC46  F01F         	call	_ASLB_debug0	;wreg free
 13503                           
 13504                           ;HX_ASL_BORON.c: 287: rxBuffer[0] = 0x10;
 13505  00288C  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13506  002890  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13507  002894  0E10               	movlw	16
 13508  002896  6EDF               	movwf	indf2,c
 13509                           
 13510                           ;HX_ASL_BORON.c: 288: break;
 13511  002898  0012               	return	
 13512  00289A                     
 13513                           ;HX_ASL_BORON.c: 291: ASLB_debug1(&rxBuffer[1]);
 13514  00289A  0E01               	movlw	1
 13515  00289C  0100               	movlb	0	; () banked
 13516  00289E  25C9               	addwf	write_ASLBoron_debug@rxBuffer& (0+255),w,b
 13517  0028A0  6F72               	movwf	ASLB_debug1@rxBuffer& (0+255),b
 13518  0028A2  0E00               	movlw	0
 13519  0028A4  21CA               	addwfc	(write_ASLBoron_debug@rxBuffer+1)& (0+255),w,b
 13520  0028A6  6F73               	movwf	(ASLB_debug1@rxBuffer+1)& (0+255),b
 13521  0028A8  EC9B  F010         	call	_ASLB_debug1	;wreg free
 13522                           
 13523                           ;HX_ASL_BORON.c: 292: rxBuffer[0] = 0x10;
 13524  0028AC  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13525  0028B0  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13526  0028B4  0E10               	movlw	16
 13527  0028B6  6EDF               	movwf	indf2,c
 13528                           
 13529                           ;HX_ASL_BORON.c: 293: break;
 13530  0028B8  0012               	return	
 13531  0028BA                     
 13532                           ;HX_ASL_BORON.c: 296: ASLB_debug2(&rxBuffer[1]);
 13533  0028BA  0E01               	movlw	1
 13534  0028BC  0100               	movlb	0	; () banked
 13535  0028BE  25C9               	addwf	write_ASLBoron_debug@rxBuffer& (0+255),w,b
 13536  0028C0  6F78               	movwf	ASLB_debug2@rxBuffer& (0+255),b
 13537  0028C2  0E00               	movlw	0
 13538  0028C4  21CA               	addwfc	(write_ASLBoron_debug@rxBuffer+1)& (0+255),w,b
 13539  0028C6  6F79               	movwf	(ASLB_debug2@rxBuffer+1)& (0+255),b
 13540  0028C8  EC6B  F01D         	call	_ASLB_debug2	;wreg free
 13541                           
 13542                           ;HX_ASL_BORON.c: 297: rxBuffer[0] = 0x10;
 13543  0028CC  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13544  0028D0  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13545  0028D4  0E10               	movlw	16
 13546  0028D6  6EDF               	movwf	indf2,c
 13547                           
 13548                           ;HX_ASL_BORON.c: 298: break;
 13549  0028D8  0012               	return	
 13550  0028DA                     
 13551                           ;HX_ASL_BORON.c: 301: ASLB_debug3(run_cnfg, &rxBuffer[1]);
 13552  0028DA  0E01               	movlw	1
 13553  0028DC  0100               	movlb	0	; () banked
 13554  0028DE  25C9               	addwf	write_ASLBoron_debug@rxBuffer& (0+255),w,b
 13555  0028E0  6F61               	movwf	ASLB_debug3@rxBuffer& (0+255),b
 13556  0028E2  0E00               	movlw	0
 13557  0028E4  21CA               	addwfc	(write_ASLBoron_debug@rxBuffer+1)& (0+255),w,b
 13558  0028E6  6F62               	movwf	(ASLB_debug3@rxBuffer+1)& (0+255),b
 13559  0028E8  51C8               	movf	write_ASLBoron_debug@run_cnfg& (0+255),w,b
 13560  0028EA  EC7C  F01A         	call	_ASLB_debug3
 13561                           
 13562                           ;HX_ASL_BORON.c: 302: rxBuffer[0] = 0x10;
 13563  0028EE  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13564  0028F2  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13565  0028F6  0E10               	movlw	16
 13566  0028F8  6EDF               	movwf	indf2,c
 13567                           
 13568                           ;HX_ASL_BORON.c: 303: break;
 13569  0028FA  0012               	return	
 13570  0028FC                     
 13571                           ;HX_ASL_BORON.c: 306: resetSFRData();
 13572  0028FC  EC9A  F017         	call	_resetSFRData	;wreg free
 13573                           
 13574                           ;HX_ASL_BORON.c: 307: rxBuffer[0] = 0x10;
 13575  002900  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13576  002904  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13577  002908  0E10               	movlw	16
 13578  00290A  6EDF               	movwf	indf2,c
 13579                           
 13580                           ;HX_ASL_BORON.c: 308: break;
 13581  00290C  0012               	return	
 13582  00290E                     
 13583                           ;HX_ASL_BORON.c: 311: resetLATCHData();
 13584  00290E  ECDC  F014         	call	_resetLATCHData	;wreg free
 13585                           
 13586                           ;HX_ASL_BORON.c: 312: rxBuffer[0] = 0x10;
 13587  002912  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13588  002916  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13589  00291A  0E10               	movlw	16
 13590  00291C  6EDF               	movwf	indf2,c
 13591                           
 13592                           ;HX_ASL_BORON.c: 313: break;
 13593  00291E  0012               	return	
 13594  002920                     
 13595                           ;HX_ASL_BORON.c: 316: setCommSingleWire();
 13596  002920  EC5C  F020         	call	_setCommSingleWire	;wreg free
 13597                           
 13598                           ;HX_ASL_BORON.c: 317: rxBuffer[0] = 0x10;
 13599  002924  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13600  002928  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13601  00292C  0E10               	movlw	16
 13602  00292E  6EDF               	movwf	indf2,c
 13603                           
 13604                           ;HX_ASL_BORON.c: 318: break;
 13605  002930  0012               	return	
 13606  002932                     
 13607                           ;HX_ASL_BORON.c: 321: setCommI2C();
 13608  002932  EC5F  F020         	call	_setCommI2C	;wreg free
 13609                           
 13610                           ;HX_ASL_BORON.c: 322: rxBuffer[0] = 0x10;
 13611  002936  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13612  00293A  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13613  00293E  0E10               	movlw	16
 13614  002940  6EDF               	movwf	indf2,c
 13615                           
 13616                           ;HX_ASL_BORON.c: 323: break;
 13617  002942  0012               	return	
 13618  002944                     
 13619                           ;HX_ASL_BORON.c: 326: findMaxI2CSpeed(&rxBuffer[1]);
 13620  002944  0E01               	movlw	1
 13621  002946  0100               	movlb	0	; () banked
 13622  002948  25C9               	addwf	write_ASLBoron_debug@rxBuffer& (0+255),w,b
 13623  00294A  6F75               	movwf	findMaxI2CSpeed@rxBuffer& (0+255),b
 13624  00294C  0E00               	movlw	0
 13625  00294E  21CA               	addwfc	(write_ASLBoron_debug@rxBuffer+1)& (0+255),w,b
 13626  002950  6F76               	movwf	(findMaxI2CSpeed@rxBuffer+1)& (0+255),b
 13627  002952  EC1A  F012         	call	_findMaxI2CSpeed	;wreg free
 13628                           
 13629                           ;HX_ASL_BORON.c: 327: rxBuffer[0] = 0x10;
 13630  002956  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13631  00295A  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13632  00295E  0E10               	movlw	16
 13633  002960  6EDF               	movwf	indf2,c
 13634                           
 13635                           ;HX_ASL_BORON.c: 328: break;
 13636  002962  0012               	return	
 13637  002964                     
 13638                           ;HX_ASL_BORON.c: 336: hx_state = 0x40;
 13639  002964  0E40               	movlw	64
 13640  002966  6E45               	movwf	_hx_state,c
 13641                           
 13642                           ;HX_ASL_BORON.c: 337: rxBuffer[0] = 0x00;
 13643  002968  C0C9  FFD9         	movff	write_ASLBoron_debug@rxBuffer,fsr2l
 13644  00296C  C0CA  FFDA         	movff	write_ASLBoron_debug@rxBuffer+1,fsr2h
 13645  002970  0E00               	movlw	0
 13646  002972  6EDF               	movwf	indf2,c
 13647                           
 13648                           ;HX_ASL_BORON.c: 339: }
 13649                           
 13650                           ;HX_ASL_BORON.c: 338: break;
 13651  002974  0012               	return	
 13652  002976                     l1099:
 13653  002976  0100               	movlb	0	; () banked
 13654  002978  51CB               	movf	write_ASLBoron_debug@run_test& (0+255),w,b
 13655                           
 13656                           ; Switch size 1, requested type "space"
 13657                           ; Number of cases is 10, Range of values is 0 to 9
 13658                           ; switch strategies available:
 13659                           ; Name         Instructions Cycles
 13660                           ; simple_byte           31    16 (average)
 13661                           ;	Chosen strategy is simple_byte
 13662  00297A  0A00               	xorlw	0	; case 0
 13663  00297C  B4D8               	btfsc	status,2,c
 13664  00297E  D77A               	goto	l1100
 13665  002980  0A01               	xorlw	1	; case 1
 13666  002982  B4D8               	btfsc	status,2,c
 13667  002984  D77A               	goto	l1102
 13668  002986  0A03               	xorlw	3	; case 2
 13669  002988  B4D8               	btfsc	status,2,c
 13670  00298A  D787               	goto	l1103
 13671  00298C  0A01               	xorlw	1	; case 3
 13672  00298E  B4D8               	btfsc	status,2,c
 13673  002990  D794               	goto	l1104
 13674  002992  0A07               	xorlw	7	; case 4
 13675  002994  B4D8               	btfsc	status,2,c
 13676  002996  D7A1               	goto	l1105
 13677  002998  0A01               	xorlw	1	; case 5
 13678  00299A  B4D8               	btfsc	status,2,c
 13679  00299C  D7AF               	goto	l1106
 13680  00299E  0A03               	xorlw	3	; case 6
 13681  0029A0  B4D8               	btfsc	status,2,c
 13682  0029A2  D7B5               	goto	l1107
 13683  0029A4  0A01               	xorlw	1	; case 7
 13684  0029A6  B4D8               	btfsc	status,2,c
 13685  0029A8  D7BB               	goto	l1108
 13686  0029AA  0A0F               	xorlw	15	; case 8
 13687  0029AC  B4D8               	btfsc	status,2,c
 13688  0029AE  D7C1               	goto	l1109
 13689  0029B0  0A01               	xorlw	1	; case 9
 13690  0029B2  B4D8               	btfsc	status,2,c
 13691  0029B4  D7C7               	goto	l1110
 13692  0029B6  D7D6               	goto	l1111
 13693  0029B8                     __end_of_write_ASLBoron_debug:
 13694                           	opt stack 0
 13695                           tblptru	equ	0xFF8
 13696                           tblptrh	equ	0xFF7
 13697                           tblptrl	equ	0xFF6
 13698                           tablat	equ	0xFF5
 13699                           prodh	equ	0xFF4
 13700                           prodl	equ	0xFF3
 13701                           intcon	equ	0xFF2
 13702                           postinc0	equ	0xFEE
 13703                           wreg	equ	0xFE8
 13704                           indf1	equ	0xFE7
 13705                           postinc1	equ	0xFE6
 13706                           postdec1	equ	0xFE5
 13707                           fsr1h	equ	0xFE2
 13708                           fsr1l	equ	0xFE1
 13709                           indf2	equ	0xFDF
 13710                           postinc2	equ	0xFDE
 13711                           postdec2	equ	0xFDD
 13712                           fsr2h	equ	0xFDA
 13713                           fsr2l	equ	0xFD9
 13714                           status	equ	0xFD8
 13715                           
 13716 ;; *************** function _setCommSingleWire *****************
 13717 ;; Defined at:
 13718 ;;		line 1010 in file "HX_ASL_BORON.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;		None
 13721 ;; Auto vars:     Size  Location     Type
 13722 ;;		None
 13723 ;; Return value:  Size  Location     Type
 13724 ;;                  1    wreg      void 
 13725 ;; Registers used:
 13726 ;;		wreg, status,2
 13727 ;; Tracked objects:
 13728 ;;		On entry : 0/0
 13729 ;;		On exit  : 0/0
 13730 ;;		Unchanged: 0/0
 13731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13736 ;;Total ram usage:        0 bytes
 13737 ;; Hardware stack levels used:    1
 13738 ;; Hardware stack levels required when called:    7
 13739 ;; This function calls:
 13740 ;;		Nothing
 13741 ;; This function is called by:
 13742 ;;		_write_ASLBoron_debug
 13743 ;; This function uses a non-reentrant model
 13744 ;;
 13745                           
 13746                           	psect	text47
 13747  0040B8                     __ptext47:
 13748                           	opt stack 0
 13749  0040B8                     _setCommSingleWire:
 13750                           	opt stack 21
 13751                           
 13752                           ;HX_ASL_BORON.c: 1012: BORON_COMM_TYPE = 1;
 13753                           
 13754                           ;incstack = 0
 13755  0040B8  0E01               	movlw	1
 13756  0040BA  6E30               	movwf	_BORON_COMM_TYPE,c
 13757  0040BC  0012               	return		;funcret
 13758  0040BE                     __end_of_setCommSingleWire:
 13759                           	opt stack 0
 13760                           tblptru	equ	0xFF8
 13761                           tblptrh	equ	0xFF7
 13762                           tblptrl	equ	0xFF6
 13763                           tablat	equ	0xFF5
 13764                           prodh	equ	0xFF4
 13765                           prodl	equ	0xFF3
 13766                           intcon	equ	0xFF2
 13767                           postinc0	equ	0xFEE
 13768                           wreg	equ	0xFE8
 13769                           indf1	equ	0xFE7
 13770                           postinc1	equ	0xFE6
 13771                           postdec1	equ	0xFE5
 13772                           fsr1h	equ	0xFE2
 13773                           fsr1l	equ	0xFE1
 13774                           indf2	equ	0xFDF
 13775                           postinc2	equ	0xFDE
 13776                           postdec2	equ	0xFDD
 13777                           fsr2h	equ	0xFDA
 13778                           fsr2l	equ	0xFD9
 13779                           status	equ	0xFD8
 13780                           
 13781 ;; *************** function _setCommI2C *****************
 13782 ;; Defined at:
 13783 ;;		line 1015 in file "HX_ASL_BORON.c"
 13784 ;; Parameters:    Size  Location     Type
 13785 ;;		None
 13786 ;; Auto vars:     Size  Location     Type
 13787 ;;		None
 13788 ;; Return value:  Size  Location     Type
 13789 ;;                  1    wreg      void 
 13790 ;; Registers used:
 13791 ;;		wreg, status,2
 13792 ;; Tracked objects:
 13793 ;;		On entry : 0/0
 13794 ;;		On exit  : 0/0
 13795 ;;		Unchanged: 0/0
 13796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13801 ;;Total ram usage:        0 bytes
 13802 ;; Hardware stack levels used:    1
 13803 ;; Hardware stack levels required when called:    7
 13804 ;; This function calls:
 13805 ;;		Nothing
 13806 ;; This function is called by:
 13807 ;;		_write_ASLBoron_debug
 13808 ;; This function uses a non-reentrant model
 13809 ;;
 13810                           
 13811                           	psect	text48
 13812  0040BE                     __ptext48:
 13813                           	opt stack 0
 13814  0040BE                     _setCommI2C:
 13815                           	opt stack 21
 13816                           
 13817                           ;HX_ASL_BORON.c: 1017: BORON_COMM_TYPE = 0;
 13818                           
 13819                           ;incstack = 0
 13820  0040BE  0E00               	movlw	0
 13821  0040C0  6E30               	movwf	_BORON_COMM_TYPE,c
 13822  0040C2  0012               	return		;funcret
 13823  0040C4                     __end_of_setCommI2C:
 13824                           	opt stack 0
 13825                           tblptru	equ	0xFF8
 13826                           tblptrh	equ	0xFF7
 13827                           tblptrl	equ	0xFF6
 13828                           tablat	equ	0xFF5
 13829                           prodh	equ	0xFF4
 13830                           prodl	equ	0xFF3
 13831                           intcon	equ	0xFF2
 13832                           postinc0	equ	0xFEE
 13833                           wreg	equ	0xFE8
 13834                           indf1	equ	0xFE7
 13835                           postinc1	equ	0xFE6
 13836                           postdec1	equ	0xFE5
 13837                           fsr1h	equ	0xFE2
 13838                           fsr1l	equ	0xFE1
 13839                           indf2	equ	0xFDF
 13840                           postinc2	equ	0xFDE
 13841                           postdec2	equ	0xFDD
 13842                           fsr2h	equ	0xFDA
 13843                           fsr2l	equ	0xFD9
 13844                           status	equ	0xFD8
 13845                           
 13846 ;; *************** function _resetSFRData *****************
 13847 ;; Defined at:
 13848 ;;		line 1481 in file "HX_ASL_BORON.c"
 13849 ;; Parameters:    Size  Location     Type
 13850 ;;		None
 13851 ;; Auto vars:     Size  Location     Type
 13852 ;;		None
 13853 ;; Return value:  Size  Location     Type
 13854 ;;                  1    wreg      void 
 13855 ;; Registers used:
 13856 ;;		wreg, status,2
 13857 ;; Tracked objects:
 13858 ;;		On entry : 0/0
 13859 ;;		On exit  : 0/0
 13860 ;;		Unchanged: 0/0
 13861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13866 ;;Total ram usage:        0 bytes
 13867 ;; Hardware stack levels used:    1
 13868 ;; Hardware stack levels required when called:    7
 13869 ;; This function calls:
 13870 ;;		Nothing
 13871 ;; This function is called by:
 13872 ;;		_write_ASLBoron_debug
 13873 ;; This function uses a non-reentrant model
 13874 ;;
 13875                           
 13876                           	psect	text49
 13877  002F34                     __ptext49:
 13878                           	opt stack 0
 13879  002F34                     _resetSFRData:
 13880                           	opt stack 21
 13881                           
 13882                           ;HX_ASL_BORON.c: 1483: SFR_P0_DATA = 0x00;
 13883                           
 13884                           ;incstack = 0
 13885  002F34  0E00               	movlw	0
 13886  002F36  0102               	movlb	2	; () banked
 13887  002F38  6FFC               	movwf	_SFR_P0_DATA& (0+255),b
 13888                           
 13889                           ;HX_ASL_BORON.c: 1484: SFR_P1_DATA = 0x00;
 13890  002F3A  0E00               	movlw	0
 13891  002F3C  6FFB               	movwf	_SFR_P1_DATA& (0+255),b
 13892                           
 13893                           ;HX_ASL_BORON.c: 1485: SFR_OSC0_DATA = 0x00;
 13894  002F3E  0E00               	movlw	0
 13895  002F40  6FFA               	movwf	_SFR_OSC0_DATA& (0+255),b
 13896                           
 13897                           ;HX_ASL_BORON.c: 1486: SFR_OSC1_DATA = 0x00;
 13898  002F42  0E00               	movlw	0
 13899  002F44  6FF9               	movwf	_SFR_OSC1_DATA& (0+255),b
 13900                           
 13901                           ;HX_ASL_BORON.c: 1487: SFR_OSC2_DATA = 0x00;
 13902  002F46  0E00               	movlw	0
 13903  002F48  6FF8               	movwf	_SFR_OSC2_DATA& (0+255),b
 13904                           
 13905                           ;HX_ASL_BORON.c: 1488: SFR_ANALOG_DATA = 0x00;
 13906  002F4A  0E00               	movlw	0
 13907  002F4C  6FF7               	movwf	_SFR_ANALOG_DATA& (0+255),b
 13908                           
 13909                           ;HX_ASL_BORON.c: 1489: SFR_OVEN_DATA = 0x00;
 13910  002F4E  0E00               	movlw	0
 13911  002F50  6FF6               	movwf	_SFR_OVEN_DATA& (0+255),b
 13912                           
 13913                           ;HX_ASL_BORON.c: 1490: SFR_HEAT_DATA = 0x00;
 13914  002F52  0E00               	movlw	0
 13915  002F54  6FF5               	movwf	_SFR_HEAT_DATA& (0+255),b
 13916                           
 13917                           ;HX_ASL_BORON.c: 1491: SFR_VAR_DATA = 0x00;
 13918  002F56  0E00               	movlw	0
 13919  002F58  6FF4               	movwf	_SFR_VAR_DATA& (0+255),b
 13920                           
 13921                           ;HX_ASL_BORON.c: 1492: SFR_BIAS_DATA = 0x00;
 13922  002F5A  0E00               	movlw	0
 13923  002F5C  6FF3               	movwf	_SFR_BIAS_DATA& (0+255),b
 13924                           
 13925                           ;HX_ASL_BORON.c: 1493: SFR_EXT_DATA = 0x00;
 13926  002F5E  0E00               	movlw	0
 13927  002F60  6FF2               	movwf	_SFR_EXT_DATA& (0+255),b
 13928                           
 13929                           ;HX_ASL_BORON.c: 1494: SFR_CMOS_OUT_DATA = 0x00;
 13930  002F62  0E00               	movlw	0
 13931  002F64  6FF1               	movwf	_SFR_CMOS_OUT_DATA& (0+255),b
 13932                           
 13933                           ;HX_ASL_BORON.c: 1495: SFR_OCXO_DIV_DATA = 0x00;
 13934  002F66  0E00               	movlw	0
 13935  002F68  6FF0               	movwf	_SFR_OCXO_DIV_DATA& (0+255),b
 13936                           
 13937                           ;HX_ASL_BORON.c: 1496: SFR_CLK_SEL_DATA = 0x00;
 13938  002F6A  0E00               	movlw	0
 13939  002F6C  6FEF               	movwf	_SFR_CLK_SEL_DATA& (0+255),b
 13940                           
 13941                           ;HX_ASL_BORON.c: 1497: SFR_ADC_DIV_DATA = 0x00;
 13942  002F6E  0E00               	movlw	0
 13943  002F70  6FEE               	movwf	_SFR_ADC_DIV_DATA& (0+255),b
 13944                           
 13945                           ;HX_ASL_BORON.c: 1498: SFR_ADC_MUX_DATA = 0x00;
 13946  002F72  0E00               	movlw	0
 13947  002F74  6FED               	movwf	_SFR_ADC_MUX_DATA& (0+255),b
 13948                           
 13949                           ;HX_ASL_BORON.c: 1499: SFR_ASIC_REV_DATA = 0x00;
 13950  002F76  0E00               	movlw	0
 13951  002F78  6FEC               	movwf	_SFR_ASIC_REV_DATA& (0+255),b
 13952                           
 13953                           ;HX_ASL_BORON.c: 1500: SFR_OTP_MR_DATA = 0x00;
 13954  002F7A  0E00               	movlw	0
 13955  002F7C  6FEB               	movwf	_SFR_OTP_MR_DATA& (0+255),b
 13956                           
 13957                           ;HX_ASL_BORON.c: 1501: SFR_OTP_MPP_DATA = 0x00;
 13958  002F7E  0E00               	movlw	0
 13959  002F80  6FEA               	movwf	_SFR_OTP_MPP_DATA& (0+255),b
 13960                           
 13961                           ;HX_ASL_BORON.c: 1502: SFR_OTP_MRR_LO_DATA = 0x00;
 13962  002F82  0E00               	movlw	0
 13963  002F84  6FE9               	movwf	_SFR_OTP_MRR_LO_DATA& (0+255),b
 13964                           
 13965                           ;HX_ASL_BORON.c: 1503: SFR_OTP_MRR_HI_DATA = 0x00;
 13966  002F86  0E00               	movlw	0
 13967  002F88  6FE8               	movwf	_SFR_OTP_MRR_HI_DATA& (0+255),b
 13968                           
 13969                           ;HX_ASL_BORON.c: 1504: SFR_OTP_WR_ADDR_HIGH_DATA = 0x00;
 13970  002F8A  0E00               	movlw	0
 13971  002F8C  6FE7               	movwf	_SFR_OTP_WR_ADDR_HIGH_DATA& (0+255),b
 13972                           
 13973                           ;HX_ASL_BORON.c: 1505: SFR_OTP_WR_ADDR_LOW_DATA = 0x00;
 13974  002F8E  0E00               	movlw	0
 13975  002F90  6FE6               	movwf	_SFR_OTP_WR_ADDR_LOW_DATA& (0+255),b
 13976                           
 13977                           ;HX_ASL_BORON.c: 1506: SFR_OTP_WR_DATA_DATA = 0x00;
 13978  002F92  0E00               	movlw	0
 13979  002F94  0103               	movlb	3	; () banked
 13980  002F96  6FEB               	movwf	_SFR_OTP_WR_DATA_DATA& (0+255),b
 13981                           
 13982                           ;HX_ASL_BORON.c: 1507: SFR_OTP_DIV_100US_HIGH_DATA = 0x00;
 13983  002F98  0E00               	movlw	0
 13984  002F9A  6FEA               	movwf	_SFR_OTP_DIV_100US_HIGH_DATA& (0+255),b
 13985                           
 13986                           ;HX_ASL_BORON.c: 1508: SFR_OTP_DIV_100US_LOW_DATA = 0x00;
 13987  002F9C  0E00               	movlw	0
 13988  002F9E  6FE9               	movwf	_SFR_OTP_DIV_100US_LOW_DATA& (0+255),b
 13989                           
 13990                           ;HX_ASL_BORON.c: 1509: SFR_OTP_DIV_400US_HIGH_DATA = 0x00;
 13991  002FA0  0E00               	movlw	0
 13992  002FA2  6FE8               	movwf	_SFR_OTP_DIV_400US_HIGH_DATA& (0+255),b
 13993                           
 13994                           ;HX_ASL_BORON.c: 1510: SFR_OTP_DIV_400US_LOW_DATA = 0x00;
 13995  002FA4  0E00               	movlw	0
 13996  002FA6  6FE7               	movwf	_SFR_OTP_DIV_400US_LOW_DATA& (0+255),b
 13997                           
 13998                           ;HX_ASL_BORON.c: 1511: SFR_OTP_ST_TIMING_DATA = 0x00;
 13999  002FA8  0E00               	movlw	0
 14000  002FAA  6FE6               	movwf	_SFR_OTP_ST_TIMING_DATA& (0+255),b
 14001                           
 14002                           ;HX_ASL_BORON.c: 1512: SFR_SW_100US_LOW_DATA = 0x00;
 14003  002FAC  0E00               	movlw	0
 14004  002FAE  6FE5               	movwf	_SFR_SW_100US_LOW_DATA& (0+255),b
 14005                           
 14006                           ;HX_ASL_BORON.c: 1513: SFR_SW_100US_HIGH_DATA = 0x00;
 14007  002FB0  0E00               	movlw	0
 14008  002FB2  6FE4               	movwf	_SFR_SW_100US_HIGH_DATA& (0+255),b
 14009                           
 14010                           ;HX_ASL_BORON.c: 1514: SFR_SW_ST_DET_DATA = 0x00;
 14011  002FB4  0E00               	movlw	0
 14012  002FB6  6FE3               	movwf	_SFR_SW_ST_DET_DATA& (0+255),b
 14013                           
 14014                           ;HX_ASL_BORON.c: 1515: SFR_SW_WR_BIT_DATA = 0x00;
 14015  002FB8  0E00               	movlw	0
 14016  002FBA  6FE2               	movwf	_SFR_SW_WR_BIT_DATA& (0+255),b
 14017                           
 14018                           ;HX_ASL_BORON.c: 1516: SFR_SW_BIT_INT_DATA = 0x00;
 14019  002FBC  0E00               	movlw	0
 14020  002FBE  6FE1               	movwf	_SFR_SW_BIT_INT_DATA& (0+255),b
 14021                           
 14022                           ;HX_ASL_BORON.c: 1517: SFR_SW_WR_BYT_DATA = 0x00;
 14023  002FC0  0E00               	movlw	0
 14024  002FC2  6FE0               	movwf	_SFR_SW_WR_BYT_DATA& (0+255),b
 14025                           
 14026                           ;HX_ASL_BORON.c: 1518: SFR_SW_BYT_INT_DATA = 0x00;
 14027  002FC4  0E00               	movlw	0
 14028  002FC6  6FDF               	movwf	_SFR_SW_BYT_INT_DATA& (0+255),b
 14029                           
 14030                           ;HX_ASL_BORON.c: 1519: SFR_SW_DET_BIT_DATA = 0x00;
 14031  002FC8  0E00               	movlw	0
 14032  002FCA  6FDE               	movwf	_SFR_SW_DET_BIT_DATA& (0+255),b
 14033                           
 14034                           ;HX_ASL_BORON.c: 1520: SFR_SW_BIT_DATA_DATA = 0x00;
 14035  002FCC  0E00               	movlw	0
 14036  002FCE  6FDD               	movwf	_SFR_SW_BIT_DATA_DATA& (0+255),b
 14037                           
 14038                           ;HX_ASL_BORON.c: 1521: SFR_SW_BIT_DATA_ST_DATA = 0x00;
 14039  002FD0  0E00               	movlw	0
 14040  002FD2  6FDC               	movwf	_SFR_SW_BIT_DATA_ST_DATA& (0+255),b
 14041                           
 14042                           ;HX_ASL_BORON.c: 1522: SFR_SW_STOP_DET_DATA = 0x00;
 14043  002FD4  0E00               	movlw	0
 14044  002FD6  6FDB               	movwf	_SFR_SW_STOP_DET_DATA& (0+255),b
 14045                           
 14046                           ;HX_ASL_BORON.c: 1523: SFR_SW_STOP_DET_ST_DATA = 0x00;
 14047  002FD8  0E00               	movlw	0
 14048  002FDA  6FDA               	movwf	_SFR_SW_STOP_DET_ST_DATA& (0+255),b
 14049                           
 14050                           ; BSR set to: 3
 14051  002FDC  0012               	return		;funcret
 14052  002FDE                     __end_of_resetSFRData:
 14053                           	opt stack 0
 14054                           tblptru	equ	0xFF8
 14055                           tblptrh	equ	0xFF7
 14056                           tblptrl	equ	0xFF6
 14057                           tablat	equ	0xFF5
 14058                           prodh	equ	0xFF4
 14059                           prodl	equ	0xFF3
 14060                           intcon	equ	0xFF2
 14061                           postinc0	equ	0xFEE
 14062                           wreg	equ	0xFE8
 14063                           indf1	equ	0xFE7
 14064                           postinc1	equ	0xFE6
 14065                           postdec1	equ	0xFE5
 14066                           fsr1h	equ	0xFE2
 14067                           fsr1l	equ	0xFE1
 14068                           indf2	equ	0xFDF
 14069                           postinc2	equ	0xFDE
 14070                           postdec2	equ	0xFDD
 14071                           fsr2h	equ	0xFDA
 14072                           fsr2l	equ	0xFD9
 14073                           status	equ	0xFD8
 14074                           
 14075 ;; *************** function _resetLATCHData *****************
 14076 ;; Defined at:
 14077 ;;		line 1526 in file "HX_ASL_BORON.c"
 14078 ;; Parameters:    Size  Location     Type
 14079 ;;		None
 14080 ;; Auto vars:     Size  Location     Type
 14081 ;;		None
 14082 ;; Return value:  Size  Location     Type
 14083 ;;                  1    wreg      void 
 14084 ;; Registers used:
 14085 ;;		wreg, status,2
 14086 ;; Tracked objects:
 14087 ;;		On entry : 0/0
 14088 ;;		On exit  : 0/0
 14089 ;;		Unchanged: 0/0
 14090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14095 ;;Total ram usage:        0 bytes
 14096 ;; Hardware stack levels used:    1
 14097 ;; Hardware stack levels required when called:    7
 14098 ;; This function calls:
 14099 ;;		Nothing
 14100 ;; This function is called by:
 14101 ;;		_write_ASLBoron_debug
 14102 ;; This function uses a non-reentrant model
 14103 ;;
 14104                           
 14105                           	psect	text50
 14106  0029B8                     __ptext50:
 14107                           	opt stack 0
 14108  0029B8                     _resetLATCHData:
 14109                           	opt stack 21
 14110                           
 14111                           ;HX_ASL_BORON.c: 1528: LATCH_OSC0_DATA = 0x000B;
 14112                           
 14113                           ; BSR set to: 3
 14114                           ;incstack = 0
 14115  0029B8  0E0B               	movlw	11
 14116  0029BA  0105               	movlb	5	; () banked
 14117  0029BC  6FF9               	movwf	_LATCH_OSC0_DATA& (0+255),b
 14118  0029BE  0E00               	movlw	0
 14119  0029C0  6FFA               	movwf	(_LATCH_OSC0_DATA+1)& (0+255),b
 14120  0029C2  0E00               	movlw	0
 14121  0029C4  6FFB               	movwf	(_LATCH_OSC0_DATA+2)& (0+255),b
 14122  0029C6  0E00               	movlw	0
 14123  0029C8  6FFC               	movwf	(_LATCH_OSC0_DATA+3)& (0+255),b
 14124                           
 14125                           ;HX_ASL_BORON.c: 1529: LATCH_OSC1_DATA = 0x0000;
 14126  0029CA  0E00               	movlw	0
 14127  0029CC  6FF5               	movwf	_LATCH_OSC1_DATA& (0+255),b
 14128  0029CE  0E00               	movlw	0
 14129  0029D0  6FF6               	movwf	(_LATCH_OSC1_DATA+1)& (0+255),b
 14130  0029D2  0E00               	movlw	0
 14131  0029D4  6FF7               	movwf	(_LATCH_OSC1_DATA+2)& (0+255),b
 14132  0029D6  0E00               	movlw	0
 14133  0029D8  6FF8               	movwf	(_LATCH_OSC1_DATA+3)& (0+255),b
 14134                           
 14135                           ;HX_ASL_BORON.c: 1530: LATCH_OSC2_DATA = 0x0000;
 14136  0029DA  0E00               	movlw	0
 14137  0029DC  6FF1               	movwf	_LATCH_OSC2_DATA& (0+255),b
 14138  0029DE  0E00               	movlw	0
 14139  0029E0  6FF2               	movwf	(_LATCH_OSC2_DATA+1)& (0+255),b
 14140  0029E2  0E00               	movlw	0
 14141  0029E4  6FF3               	movwf	(_LATCH_OSC2_DATA+2)& (0+255),b
 14142  0029E6  0E00               	movlw	0
 14143  0029E8  6FF4               	movwf	(_LATCH_OSC2_DATA+3)& (0+255),b
 14144                           
 14145                           ;HX_ASL_BORON.c: 1531: LATCH_ANALOG_DATA = 0x0000;
 14146  0029EA  0E00               	movlw	0
 14147  0029EC  6FED               	movwf	_LATCH_ANALOG_DATA& (0+255),b
 14148  0029EE  0E00               	movlw	0
 14149  0029F0  6FEE               	movwf	(_LATCH_ANALOG_DATA+1)& (0+255),b
 14150  0029F2  0E00               	movlw	0
 14151  0029F4  6FEF               	movwf	(_LATCH_ANALOG_DATA+2)& (0+255),b
 14152  0029F6  0E00               	movlw	0
 14153  0029F8  6FF0               	movwf	(_LATCH_ANALOG_DATA+3)& (0+255),b
 14154                           
 14155                           ;HX_ASL_BORON.c: 1532: LATCH_OVEN_DATA = 0x0000;
 14156  0029FA  0E00               	movlw	0
 14157  0029FC  0102               	movlb	2	; () banked
 14158  0029FE  6FE2               	movwf	_LATCH_OVEN_DATA& (0+255),b
 14159  002A00  0E00               	movlw	0
 14160  002A02  6FE3               	movwf	(_LATCH_OVEN_DATA+1)& (0+255),b
 14161  002A04  0E00               	movlw	0
 14162  002A06  6FE4               	movwf	(_LATCH_OVEN_DATA+2)& (0+255),b
 14163  002A08  0E00               	movlw	0
 14164  002A0A  6FE5               	movwf	(_LATCH_OVEN_DATA+3)& (0+255),b
 14165                           
 14166                           ;HX_ASL_BORON.c: 1533: LATCH_HEAT_DAC_DATA = 0x0000;
 14167  002A0C  0E00               	movlw	0
 14168  002A0E  0105               	movlb	5	; () banked
 14169  002A10  6FE9               	movwf	_LATCH_HEAT_DAC_DATA& (0+255),b
 14170  002A12  0E00               	movlw	0
 14171  002A14  6FEA               	movwf	(_LATCH_HEAT_DAC_DATA+1)& (0+255),b
 14172  002A16  0E00               	movlw	0
 14173  002A18  6FEB               	movwf	(_LATCH_HEAT_DAC_DATA+2)& (0+255),b
 14174  002A1A  0E00               	movlw	0
 14175  002A1C  6FEC               	movwf	(_LATCH_HEAT_DAC_DATA+3)& (0+255),b
 14176                           
 14177                           ;HX_ASL_BORON.c: 1534: LATCH_VARACTOR_DAC_DATA = 0x0000;
 14178  002A1E  0E00               	movlw	0
 14179  002A20  6FE5               	movwf	_LATCH_VARACTOR_DAC_DATA& (0+255),b
 14180  002A22  0E00               	movlw	0
 14181  002A24  6FE6               	movwf	(_LATCH_VARACTOR_DAC_DATA+1)& (0+255),b
 14182  002A26  0E00               	movlw	0
 14183  002A28  6FE7               	movwf	(_LATCH_VARACTOR_DAC_DATA+2)& (0+255),b
 14184  002A2A  0E00               	movlw	0
 14185  002A2C  6FE8               	movwf	(_LATCH_VARACTOR_DAC_DATA+3)& (0+255),b
 14186                           
 14187                           ;HX_ASL_BORON.c: 1535: LATCH_BIAS_DATA = 0x0000;
 14188  002A2E  0E00               	movlw	0
 14189  002A30  6FE1               	movwf	_LATCH_BIAS_DATA& (0+255),b
 14190  002A32  0E00               	movlw	0
 14191  002A34  6FE2               	movwf	(_LATCH_BIAS_DATA+1)& (0+255),b
 14192  002A36  0E00               	movlw	0
 14193  002A38  6FE3               	movwf	(_LATCH_BIAS_DATA+2)& (0+255),b
 14194  002A3A  0E00               	movlw	0
 14195  002A3C  6FE4               	movwf	(_LATCH_BIAS_DATA+3)& (0+255),b
 14196                           
 14197                           ;HX_ASL_BORON.c: 1536: LATCH_CMOS_DATA = 0x0000;
 14198  002A3E  0E00               	movlw	0
 14199  002A40  6FDD               	movwf	_LATCH_CMOS_DATA& (0+255),b
 14200  002A42  0E00               	movlw	0
 14201  002A44  6FDE               	movwf	(_LATCH_CMOS_DATA+1)& (0+255),b
 14202  002A46  0E00               	movlw	0
 14203  002A48  6FDF               	movwf	(_LATCH_CMOS_DATA+2)& (0+255),b
 14204  002A4A  0E00               	movlw	0
 14205  002A4C  6FE0               	movwf	(_LATCH_CMOS_DATA+3)& (0+255),b
 14206                           
 14207                           ;HX_ASL_BORON.c: 1537: LATCH_ADC_DATA = 0x0000;
 14208  002A4E  0E00               	movlw	0
 14209  002A50  6FD9               	movwf	_LATCH_ADC_DATA& (0+255),b
 14210  002A52  0E00               	movlw	0
 14211  002A54  6FDA               	movwf	(_LATCH_ADC_DATA+1)& (0+255),b
 14212  002A56  0E00               	movlw	0
 14213  002A58  6FDB               	movwf	(_LATCH_ADC_DATA+2)& (0+255),b
 14214  002A5A  0E00               	movlw	0
 14215  002A5C  6FDC               	movwf	(_LATCH_ADC_DATA+3)& (0+255),b
 14216                           
 14217                           ;HX_ASL_BORON.c: 1538: LATCH_ADC_MUX_DATA = 0x0000;
 14218  002A5E  0E00               	movlw	0
 14219  002A60  0106               	movlb	6	; () banked
 14220  002A62  6FF3               	movwf	_LATCH_ADC_MUX_DATA& (0+255),b
 14221  002A64  0E00               	movlw	0
 14222  002A66  6FF4               	movwf	(_LATCH_ADC_MUX_DATA+1)& (0+255),b
 14223  002A68  0E00               	movlw	0
 14224  002A6A  6FF5               	movwf	(_LATCH_ADC_MUX_DATA+2)& (0+255),b
 14225  002A6C  0E00               	movlw	0
 14226  002A6E  6FF6               	movwf	(_LATCH_ADC_MUX_DATA+3)& (0+255),b
 14227                           
 14228                           ;HX_ASL_BORON.c: 1539: LATCH_OCXO_DIVISOR_DATA = 0x0000;
 14229  002A70  0E00               	movlw	0
 14230  002A72  6FEF               	movwf	_LATCH_OCXO_DIVISOR_DATA& (0+255),b
 14231  002A74  0E00               	movlw	0
 14232  002A76  6FF0               	movwf	(_LATCH_OCXO_DIVISOR_DATA+1)& (0+255),b
 14233  002A78  0E00               	movlw	0
 14234  002A7A  6FF1               	movwf	(_LATCH_OCXO_DIVISOR_DATA+2)& (0+255),b
 14235  002A7C  0E00               	movlw	0
 14236  002A7E  6FF2               	movwf	(_LATCH_OCXO_DIVISOR_DATA+3)& (0+255),b
 14237                           
 14238                           ;HX_ASL_BORON.c: 1540: LATCH_CLOCK_SELECT_DATA = 0x0000;
 14239  002A80  0E00               	movlw	0
 14240  002A82  0105               	movlb	5	; () banked
 14241  002A84  6FD5               	movwf	_LATCH_CLOCK_SELECT_DATA& (0+255),b
 14242  002A86  0E00               	movlw	0
 14243  002A88  6FD6               	movwf	(_LATCH_CLOCK_SELECT_DATA+1)& (0+255),b
 14244  002A8A  0E00               	movlw	0
 14245  002A8C  6FD7               	movwf	(_LATCH_CLOCK_SELECT_DATA+2)& (0+255),b
 14246  002A8E  0E00               	movlw	0
 14247  002A90  6FD8               	movwf	(_LATCH_CLOCK_SELECT_DATA+3)& (0+255),b
 14248                           
 14249                           ; BSR set to: 5
 14250  002A92  0012               	return		;funcret
 14251  002A94                     __end_of_resetLATCHData:
 14252                           	opt stack 0
 14253                           tblptru	equ	0xFF8
 14254                           tblptrh	equ	0xFF7
 14255                           tblptrl	equ	0xFF6
 14256                           tablat	equ	0xFF5
 14257                           prodh	equ	0xFF4
 14258                           prodl	equ	0xFF3
 14259                           intcon	equ	0xFF2
 14260                           postinc0	equ	0xFEE
 14261                           wreg	equ	0xFE8
 14262                           indf1	equ	0xFE7
 14263                           postinc1	equ	0xFE6
 14264                           postdec1	equ	0xFE5
 14265                           fsr1h	equ	0xFE2
 14266                           fsr1l	equ	0xFE1
 14267                           indf2	equ	0xFDF
 14268                           postinc2	equ	0xFDE
 14269                           postdec2	equ	0xFDD
 14270                           fsr2h	equ	0xFDA
 14271                           fsr2l	equ	0xFD9
 14272                           status	equ	0xFD8
 14273                           
 14274 ;; *************** function _findMaxI2CSpeed *****************
 14275 ;; Defined at:
 14276 ;;		line 1020 in file "HX_ASL_BORON.c"
 14277 ;; Parameters:    Size  Location     Type
 14278 ;;  rxBuffer        2   21[BANK0 ] PTR unsigned char 
 14279 ;;		 -> hx_mainData(61), 
 14280 ;; Auto vars:     Size  Location     Type
 14281 ;;  i               1    9[BANK2 ] unsigned char 
 14282 ;;  ramWrPkt       71   82[BANK2 ] struct TxRxPacket
 14283 ;;  cmdReadbackP   71   10[BANK2 ] struct TxRxPacket
 14284 ;;  stream          4    2[BANK2 ] PTR struct TxRxPacket[2]
 14285 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
 14286 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
 14287 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
 14288 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
 14289 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
 14290 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
 14291 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
 14292 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
 14293 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
 14294 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
 14295 ;;  bRate           2    7[BANK2 ] unsigned int 
 14296 ;;  rx_index        1   81[BANK2 ] unsigned char 
 14297 ;;  ramData         1    6[BANK2 ] unsigned char 
 14298 ;;  ramAddrLo       1    1[BANK2 ] unsigned char 
 14299 ;;  ramAddrHi       1    0[BANK2 ] unsigned char 
 14300 ;; Return value:  Size  Location     Type
 14301 ;;                  1    wreg      void 
 14302 ;; Registers used:
 14303 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14304 ;; Tracked objects:
 14305 ;;		On entry : 0/0
 14306 ;;		On exit  : 0/0
 14307 ;;		Unchanged: 0/0
 14308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14309 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14310 ;;      Locals:         0       0       0     153       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14312 ;;      Totals:         0       2       0     153       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14313 ;;Total ram usage:      155 bytes
 14314 ;; Hardware stack levels used:    1
 14315 ;; Hardware stack levels required when called:    9
 14316 ;; This function calls:
 14317 ;;		_adjustI2CBaudRate
 14318 ;;		_calcBaudRate
 14319 ;;		_calcChecksum
 14320 ;;		_streamI2C
 14321 ;; This function is called by:
 14322 ;;		_write_ASLBoron_debug
 14323 ;; This function uses a non-reentrant model
 14324 ;;
 14325                           
 14326                           	psect	text51
 14327  002434                     __ptext51:
 14328                           	opt stack 0
 14329  002434                     _findMaxI2CSpeed:
 14330                           	opt stack 19
 14331                           
 14332                           ;HX_ASL_BORON.c: 1022: uint8_t rx_index = 0;
 14333                           
 14334                           ; BSR set to: 5
 14335                           ;incstack = 0
 14336  002434  0E00               	movlw	0
 14337  002436  0102               	movlb	2	; () banked
 14338  002438  6F51               	movwf	findMaxI2CSpeed@rx_index& (0+255),b
 14339                           
 14340                           ;HX_ASL_BORON.c: 1024: uint8_t ramAddrHi = 0x00;
 14341  00243A  0E00               	movlw	0
 14342  00243C  6F00               	movwf	findMaxI2CSpeed@ramAddrHi& (0+255),b
 14343                           
 14344                           ;HX_ASL_BORON.c: 1025: uint8_t ramAddrLo = 0x31;
 14345  00243E  0E31               	movlw	49
 14346  002440  6F01               	movwf	findMaxI2CSpeed@ramAddrLo& (0+255),b
 14347                           
 14348                           ;HX_ASL_BORON.c: 1026: uint8_t ramData = 0xBB;
 14349  002442  0EBB               	movlw	187
 14350  002444  6F06               	movwf	findMaxI2CSpeed@ramData& (0+255),b
 14351                           
 14352                           ;HX_ASL_BORON.c: 1028: uint16_t bRate = 0;
 14353  002446  0E00               	movlw	0
 14354  002448  6F08               	movwf	(findMaxI2CSpeed@bRate+1)& (0+255),b
 14355  00244A  0E00               	movlw	0
 14356  00244C  6F07               	movwf	findMaxI2CSpeed@bRate& (0+255),b
 14357                           
 14358                           ;HX_ASL_BORON.c: 1030: txRxPkt ramWrPkt;
 14359                           ;HX_ASL_BORON.c: 1031: ramWrPkt.txOrRx = 0;
 14360  00244E  0E00               	movlw	0
 14361  002450  6F52               	movwf	findMaxI2CSpeed@ramWrPkt& (0+255),b
 14362                           
 14363                           ;HX_ASL_BORON.c: 1032: ramWrPkt.slaveAddr = 0x5A;
 14364  002452  0E00               	movlw	0
 14365  002454  6F54               	movwf	(findMaxI2CSpeed@ramWrPkt+2)& (0+255),b
 14366  002456  0E5A               	movlw	90
 14367  002458  6F53               	movwf	(findMaxI2CSpeed@ramWrPkt+1)& (0+255),b
 14368                           
 14369                           ;HX_ASL_BORON.c: 1033: ramWrPkt.numOfBytes = 6;
 14370  00245A  0E06               	movlw	6
 14371  00245C  6F95               	movwf	(findMaxI2CSpeed@ramWrPkt+67)& (0+255),b
 14372                           
 14373                           ;HX_ASL_BORON.c: 1034: ramWrPkt.data[0] = 0x32;
 14374  00245E  0E32               	movlw	50
 14375  002460  6F55               	movwf	(findMaxI2CSpeed@ramWrPkt+3)& (0+255),b
 14376                           
 14377                           ; BSR set to: 2
 14378                           ;HX_ASL_BORON.c: 1035: ramWrPkt.data[1] = ramAddrLo;
 14379  002462  C201  F256         	movff	findMaxI2CSpeed@ramAddrLo,findMaxI2CSpeed@ramWrPkt+4
 14380                           
 14381                           ; BSR set to: 2
 14382                           ;HX_ASL_BORON.c: 1036: ramWrPkt.data[2] = ramAddrHi;
 14383  002466  C200  F257         	movff	findMaxI2CSpeed@ramAddrHi,findMaxI2CSpeed@ramWrPkt+5
 14384                           
 14385                           ;HX_ASL_BORON.c: 1037: ramWrPkt.data[3] = 1;
 14386  00246A  0E01               	movlw	1
 14387  00246C  6F58               	movwf	(findMaxI2CSpeed@ramWrPkt+6)& (0+255),b
 14388                           
 14389                           ; BSR set to: 2
 14390                           ;HX_ASL_BORON.c: 1038: ramWrPkt.data[4] = ramData;
 14391  00246E  C206  F259         	movff	findMaxI2CSpeed@ramData,findMaxI2CSpeed@ramWrPkt+7
 14392                           
 14393                           ; BSR set to: 2
 14394                           ;HX_ASL_BORON.c: 1039: ramWrPkt.data[5] = calcChecksum(ramWrPkt.data, ramWrPkt.numOfByte
      +                          s-1);
 14395  002472  0E55               	movlw	low (findMaxI2CSpeed@ramWrPkt+3)
 14396  002474  0100               	movlb	0	; () banked
 14397  002476  6F60               	movwf	calcChecksum@data& (0+255),b
 14398  002478  0E02               	movlw	high (findMaxI2CSpeed@ramWrPkt+3)
 14399  00247A  6F61               	movwf	(calcChecksum@data+1)& (0+255),b
 14400  00247C  0102               	movlb	2	; () banked
 14401  00247E  0595               	decf	(findMaxI2CSpeed@ramWrPkt+67)& (0+255),w,b
 14402  002480  0100               	movlb	0	; () banked
 14403  002482  6F62               	movwf	calcChecksum@size& (0+255),b
 14404  002484  EC86  F01E         	call	_calcChecksum	;wreg free
 14405  002488  0102               	movlb	2	; () banked
 14406  00248A  6F5A               	movwf	(findMaxI2CSpeed@ramWrPkt+8)& (0+255),b
 14407                           
 14408                           ; BSR set to: 2
 14409                           ;HX_ASL_BORON.c: 1042: txRxPkt cmdReadbackPkt;
 14410                           ;HX_ASL_BORON.c: 1043: cmdReadbackPkt.txOrRx = 1;
 14411  00248C  0E01               	movlw	1
 14412  00248E  6F0A               	movwf	findMaxI2CSpeed@cmdReadbackPkt& (0+255),b
 14413                           
 14414                           ; BSR set to: 2
 14415                           ;HX_ASL_BORON.c: 1044: cmdReadbackPkt.slaveAddr = 0x5A;
 14416  002490  0E00               	movlw	0
 14417  002492  6F0C               	movwf	(findMaxI2CSpeed@cmdReadbackPkt+2)& (0+255),b
 14418  002494  0E5A               	movlw	90
 14419  002496  6F0B               	movwf	(findMaxI2CSpeed@cmdReadbackPkt+1)& (0+255),b
 14420                           
 14421                           ; BSR set to: 2
 14422                           ;HX_ASL_BORON.c: 1045: cmdReadbackPkt.numOfBytes = 3;
 14423  002498  0E03               	movlw	3
 14424  00249A  6F4D               	movwf	(findMaxI2CSpeed@cmdReadbackPkt+67)& (0+255),b
 14425                           
 14426                           ; BSR set to: 2
 14427                           ;HX_ASL_BORON.c: 1047: txRxPkt* stream[2];
 14428                           ;HX_ASL_BORON.c: 1048: stream[0] = &ramWrPkt;
 14429  00249C  0E52               	movlw	low findMaxI2CSpeed@ramWrPkt
 14430  00249E  6F02               	movwf	findMaxI2CSpeed@stream& (0+255),b
 14431  0024A0  0E02               	movlw	high findMaxI2CSpeed@ramWrPkt
 14432  0024A2  6F03               	movwf	(findMaxI2CSpeed@stream+1)& (0+255),b
 14433                           
 14434                           ; BSR set to: 2
 14435                           ;HX_ASL_BORON.c: 1049: stream[1] = &cmdReadbackPkt;
 14436  0024A4  0E0A               	movlw	low findMaxI2CSpeed@cmdReadbackPkt
 14437  0024A6  6F04               	movwf	(findMaxI2CSpeed@stream+2)& (0+255),b
 14438  0024A8  0E02               	movlw	high findMaxI2CSpeed@cmdReadbackPkt
 14439  0024AA  6F05               	movwf	(findMaxI2CSpeed@stream+3)& (0+255),b
 14440                           
 14441                           ; BSR set to: 2
 14442                           ;HX_ASL_BORON.c: 1052: for (uint8_t i = 0xFF; i >= 0x03; i--)
 14443  0024AC  6909               	setf	findMaxI2CSpeed@i& (0+255),b
 14444  0024AE                     l10761:
 14445                           
 14446                           ; BSR set to: 2
 14447  0024AE  0E03               	movlw	3
 14448  0024B0  6109               	cpfslt	findMaxI2CSpeed@i& (0+255),b
 14449  0024B2  D001               	goto	l1227
 14450  0024B4  D074               	goto	u7600
 14451  0024B6                     l1227:
 14452                           
 14453                           ; BSR set to: 2
 14454                           ;HX_ASL_BORON.c: 1053: {
 14455                           ;HX_ASL_BORON.c: 1054: if (!adjustI2CBaudRate(i))
 14456                           
 14457                           ; BSR set to: 2
 14458  0024B6  5109               	movf	findMaxI2CSpeed@i& (0+255),w,b
 14459  0024B8  EC57  F01F         	call	_adjustI2CBaudRate
 14460  0024BC  0900               	iorlw	0
 14461  0024BE  B4D8               	btfsc	status,2,c
 14462  0024C0  D06E               	goto	u7600
 14463                           
 14464                           ;HX_ASL_BORON.c: 1057: }
 14465                           ;HX_ASL_BORON.c: 1060: if (streamI2C(stream, 2) == I2C1_MESSAGE_FAIL)
 14466                           
 14467                           ;HX_ASL_BORON.c: 1055: {
 14468                           ;HX_ASL_BORON.c: 1056: break;
 14469  0024C2  0E02               	movlw	low findMaxI2CSpeed@stream
 14470  0024C4  0100               	movlb	0	; () banked
 14471  0024C6  6F69               	movwf	streamI2C@pktArr& (0+255),b
 14472  0024C8  0E02               	movlw	high findMaxI2CSpeed@stream
 14473  0024CA  6F6A               	movwf	(streamI2C@pktArr+1)& (0+255),b
 14474  0024CC  0E02               	movlw	2
 14475  0024CE  6F6B               	movwf	streamI2C@pktSize& (0+255),b
 14476  0024D0  EC0C  F00F         	call	_streamI2C	;wreg free
 14477  0024D4  06E8               	decf	wreg,f,c
 14478  0024D6  A4D8               	btfss	status,2,c
 14479  0024D8  D041               	goto	l1230
 14480                           
 14481                           ;HX_ASL_BORON.c: 1061: {
 14482                           ;HX_ASL_BORON.c: 1063: bRate = calcBaudRate(i);
 14483  0024DA  0102               	movlb	2	; () banked
 14484  0024DC  5109               	movf	findMaxI2CSpeed@i& (0+255),w,b
 14485  0024DE  EC0A  F01B         	call	_calcBaudRate
 14486  0024E2  C06E  F207         	movff	?_calcBaudRate,findMaxI2CSpeed@bRate
 14487  0024E6  C06F  F208         	movff	?_calcBaudRate+1,findMaxI2CSpeed@bRate+1
 14488                           
 14489                           ;HX_ASL_BORON.c: 1064: rxBuffer[rx_index++] = 0x41;
 14490  0024EA  0102               	movlb	2	; () banked
 14491  0024EC  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14492  0024EE  0D01               	mullw	1
 14493  0024F0  50F3               	movf	prodl,w,c
 14494  0024F2  0100               	movlb	0	; () banked
 14495  0024F4  2575               	addwf	findMaxI2CSpeed@rxBuffer& (0+255),w,b
 14496  0024F6  6ED9               	movwf	fsr2l,c
 14497  0024F8  50F4               	movf	prodh,w,c
 14498  0024FA  2176               	addwfc	(findMaxI2CSpeed@rxBuffer+1)& (0+255),w,b
 14499  0024FC  6EDA               	movwf	fsr2h,c
 14500  0024FE  0E41               	movlw	65
 14501  002500  6EDF               	movwf	indf2,c
 14502                           
 14503                           ; BSR set to: 0
 14504  002502  0102               	movlb	2	; () banked
 14505  002504  2B51               	incf	findMaxI2CSpeed@rx_index& (0+255),f,b
 14506                           
 14507                           ; BSR set to: 2
 14508                           ;HX_ASL_BORON.c: 1065: rxBuffer[rx_index++] = i;
 14509  002506  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14510  002508  0D01               	mullw	1
 14511  00250A  50F3               	movf	prodl,w,c
 14512  00250C  0100               	movlb	0	; () banked
 14513  00250E  2575               	addwf	findMaxI2CSpeed@rxBuffer& (0+255),w,b
 14514  002510  6ED9               	movwf	fsr2l,c
 14515  002512  50F4               	movf	prodh,w,c
 14516  002514  2176               	addwfc	(findMaxI2CSpeed@rxBuffer+1)& (0+255),w,b
 14517  002516  6EDA               	movwf	fsr2h,c
 14518  002518  C209  FFDF         	movff	findMaxI2CSpeed@i,indf2
 14519                           
 14520                           ; BSR set to: 0
 14521  00251C  0102               	movlb	2	; () banked
 14522  00251E  2B51               	incf	findMaxI2CSpeed@rx_index& (0+255),f,b
 14523                           
 14524                           ; BSR set to: 2
 14525                           ;HX_ASL_BORON.c: 1066: rxBuffer[rx_index++] = (bRate >> 8) & 0xFF;
 14526  002520  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14527  002522  0D01               	mullw	1
 14528  002524  50F3               	movf	prodl,w,c
 14529  002526  0100               	movlb	0	; () banked
 14530  002528  2575               	addwf	findMaxI2CSpeed@rxBuffer& (0+255),w,b
 14531  00252A  6ED9               	movwf	fsr2l,c
 14532  00252C  50F4               	movf	prodh,w,c
 14533  00252E  2176               	addwfc	(findMaxI2CSpeed@rxBuffer+1)& (0+255),w,b
 14534  002530  6EDA               	movwf	fsr2h,c
 14535  002532  0102               	movlb	2	; () banked
 14536  002534  5108               	movf	(findMaxI2CSpeed@bRate+1)& (0+255),w,b
 14537  002536  6EDF               	movwf	indf2,c
 14538                           
 14539                           ; BSR set to: 2
 14540  002538  2B51               	incf	findMaxI2CSpeed@rx_index& (0+255),f,b
 14541                           
 14542                           ; BSR set to: 2
 14543                           ;HX_ASL_BORON.c: 1067: rxBuffer[rx_index++] = bRate & 0xFF;
 14544  00253A  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14545  00253C  0D01               	mullw	1
 14546  00253E  50F3               	movf	prodl,w,c
 14547  002540  0100               	movlb	0	; () banked
 14548  002542  2575               	addwf	findMaxI2CSpeed@rxBuffer& (0+255),w,b
 14549  002544  6ED9               	movwf	fsr2l,c
 14550  002546  50F4               	movf	prodh,w,c
 14551  002548  2176               	addwfc	(findMaxI2CSpeed@rxBuffer+1)& (0+255),w,b
 14552  00254A  6EDA               	movwf	fsr2h,c
 14553  00254C  C207  FFDF         	movff	findMaxI2CSpeed@bRate,indf2
 14554                           
 14555                           ; BSR set to: 0
 14556  002550  0102               	movlb	2	; () banked
 14557  002552  2B51               	incf	findMaxI2CSpeed@rx_index& (0+255),f,b
 14558                           
 14559                           ;HX_ASL_BORON.c: 1068: adjustI2CBaudRate(0x9F);
 14560  002554  0E9F               	movlw	159
 14561  002556  EC57  F01F         	call	_adjustI2CBaudRate
 14562                           
 14563                           ;HX_ASL_BORON.c: 1069: break;
 14564  00255A  D021               	goto	u7600
 14565  00255C                     l1230:
 14566                           
 14567                           ;HX_ASL_BORON.c: 1070: }
 14568                           ;HX_ASL_BORON.c: 1072: if (ramData == cmdReadbackPkt.data[1])
 14569  00255C  0102               	movlb	2	; () banked
 14570  00255E  5106               	movf	findMaxI2CSpeed@ramData& (0+255),w,b
 14571  002560  190E               	xorwf	(findMaxI2CSpeed@cmdReadbackPkt+4)& (0+255),w,b
 14572  002562  B4D8               	btfsc	status,2,c
 14573  002564  D01A               	goto	l1233
 14574                           
 14575                           ; BSR set to: 2
 14576                           ;HX_ASL_BORON.c: 1077: else
 14577                           ;HX_ASL_BORON.c: 1078: {
 14578                           ;HX_ASL_BORON.c: 1080: rxBuffer[rx_index++] = 0x01;
 14579                           
 14580                           ; BSR set to: 2
 14581                           
 14582                           ; BSR set to: 2
 14583                           ;HX_ASL_BORON.c: 1076: }
 14584                           
 14585                           ; BSR set to: 2
 14586                           ;HX_ASL_BORON.c: 1073: {
 14587                           ;HX_ASL_BORON.c: 1075: continue;
 14588  002566  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14589  002568  0D01               	mullw	1
 14590  00256A  50F3               	movf	prodl,w,c
 14591  00256C  0100               	movlb	0	; () banked
 14592  00256E  2575               	addwf	findMaxI2CSpeed@rxBuffer& (0+255),w,b
 14593  002570  6ED9               	movwf	fsr2l,c
 14594  002572  50F4               	movf	prodh,w,c
 14595  002574  2176               	addwfc	(findMaxI2CSpeed@rxBuffer+1)& (0+255),w,b
 14596  002576  6EDA               	movwf	fsr2h,c
 14597  002578  0E01               	movlw	1
 14598  00257A  6EDF               	movwf	indf2,c
 14599                           
 14600                           ; BSR set to: 0
 14601  00257C  0102               	movlb	2	; () banked
 14602  00257E  2B51               	incf	findMaxI2CSpeed@rx_index& (0+255),f,b
 14603                           
 14604                           ; BSR set to: 2
 14605                           ;HX_ASL_BORON.c: 1081: rxBuffer[rx_index++] = i;
 14606  002580  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14607  002582  0D01               	mullw	1
 14608  002584  50F3               	movf	prodl,w,c
 14609  002586  0100               	movlb	0	; () banked
 14610  002588  2575               	addwf	findMaxI2CSpeed@rxBuffer& (0+255),w,b
 14611  00258A  6ED9               	movwf	fsr2l,c
 14612  00258C  50F4               	movf	prodh,w,c
 14613  00258E  2176               	addwfc	(findMaxI2CSpeed@rxBuffer+1)& (0+255),w,b
 14614  002590  6EDA               	movwf	fsr2h,c
 14615  002592  C209  FFDF         	movff	findMaxI2CSpeed@i,indf2
 14616  002596  0102               	movlb	2	; () banked
 14617  002598  2B51               	incf	findMaxI2CSpeed@rx_index& (0+255),f,b
 14618  00259A                     l1233:
 14619                           
 14620                           ; BSR set to: 2
 14621                           
 14622                           ; BSR set to: 2
 14623  00259A  0709               	decf	findMaxI2CSpeed@i& (0+255),f,b
 14624  00259C  D788               	goto	l10761
 14625  00259E                     u7600:
 14626                           
 14627                           ;HX_ASL_BORON.c: 1082: }
 14628                           ;HX_ASL_BORON.c: 1083: }
 14629                           ;HX_ASL_BORON.c: 1085: hx_mainDataIndex += rx_index;
 14630                           
 14631                           ; BSR set to: 2
 14632  00259E  0102               	movlb	2	; () banked
 14633  0025A0  5151               	movf	findMaxI2CSpeed@rx_index& (0+255),w,b
 14634  0025A2  263F               	addwf	_hx_mainDataIndex,f,c
 14635                           
 14636                           ; BSR set to: 2
 14637  0025A4  0012               	return		;funcret
 14638  0025A6                     __end_of_findMaxI2CSpeed:
 14639                           	opt stack 0
 14640                           tblptru	equ	0xFF8
 14641                           tblptrh	equ	0xFF7
 14642                           tblptrl	equ	0xFF6
 14643                           tablat	equ	0xFF5
 14644                           prodh	equ	0xFF4
 14645                           prodl	equ	0xFF3
 14646                           intcon	equ	0xFF2
 14647                           postinc0	equ	0xFEE
 14648                           wreg	equ	0xFE8
 14649                           indf1	equ	0xFE7
 14650                           postinc1	equ	0xFE6
 14651                           postdec1	equ	0xFE5
 14652                           fsr1h	equ	0xFE2
 14653                           fsr1l	equ	0xFE1
 14654                           indf2	equ	0xFDF
 14655                           postinc2	equ	0xFDE
 14656                           postdec2	equ	0xFDD
 14657                           fsr2h	equ	0xFDA
 14658                           fsr2l	equ	0xFD9
 14659                           status	equ	0xFD8
 14660                           
 14661 ;; *************** function _calcBaudRate *****************
 14662 ;; Defined at:
 14663 ;;		line 1088 in file "HX_ASL_BORON.c"
 14664 ;; Parameters:    Size  Location     Type
 14665 ;;  bd              1    wreg     unsigned char 
 14666 ;; Auto vars:     Size  Location     Type
 14667 ;;  bd              1   18[BANK0 ] unsigned char 
 14668 ;;  bRate           2   19[BANK0 ] unsigned int 
 14669 ;; Return value:  Size  Location     Type
 14670 ;;                  2   14[BANK0 ] unsigned int 
 14671 ;; Registers used:
 14672 ;;		wreg, status,2, status,0, cstack
 14673 ;; Tracked objects:
 14674 ;;		On entry : 0/0
 14675 ;;		On exit  : 0/0
 14676 ;;		Unchanged: 0/0
 14677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14678 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14679 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14680 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14681 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14682 ;;Total ram usage:        7 bytes
 14683 ;; Hardware stack levels used:    1
 14684 ;; Hardware stack levels required when called:    8
 14685 ;; This function calls:
 14686 ;;		___aldiv
 14687 ;; This function is called by:
 14688 ;;		_findMaxI2CSpeed
 14689 ;; This function uses a non-reentrant model
 14690 ;;
 14691                           
 14692                           	psect	text52
 14693  003614                     __ptext52:
 14694                           	opt stack 0
 14695  003614                     _calcBaudRate:
 14696                           	opt stack 19
 14697                           
 14698                           ; BSR set to: 2
 14699                           ;incstack = 0
 14700                           ;calcBaudRate@bd stored from wreg
 14701  003614  0100               	movlb	0	; () banked
 14702  003616  6F72               	movwf	calcBaudRate@bd& (0+255),b
 14703                           
 14704                           ;HX_ASL_BORON.c: 1090: uint16_t bRate = 64000000 / (4 * (bd + 1));
 14705  003618  0E00               	movlw	0
 14706  00361A  0100               	movlb	0	; () banked
 14707  00361C  6F60               	movwf	___aldiv@dividend& (0+255),b
 14708  00361E  0E90               	movlw	144
 14709  003620  6F61               	movwf	(___aldiv@dividend+1)& (0+255),b
 14710  003622  0ED0               	movlw	208
 14711  003624  6F62               	movwf	(___aldiv@dividend+2)& (0+255),b
 14712  003626  0E03               	movlw	3
 14713  003628  6F63               	movwf	(___aldiv@dividend+3)& (0+255),b
 14714  00362A  5172               	movf	calcBaudRate@bd& (0+255),w,b
 14715  00362C  6F70               	movwf	??_calcBaudRate& (0+255),b
 14716  00362E  6B71               	clrf	(??_calcBaudRate+1)& (0+255),b
 14717  003630  90D8               	bcf	status,0,c
 14718  003632  3770               	rlcf	??_calcBaudRate& (0+255),f,b
 14719  003634  3771               	rlcf	(??_calcBaudRate+1)& (0+255),f,b
 14720  003636  90D8               	bcf	status,0,c
 14721  003638  3770               	rlcf	??_calcBaudRate& (0+255),f,b
 14722  00363A  3771               	rlcf	(??_calcBaudRate+1)& (0+255),f,b
 14723  00363C  0E04               	movlw	4
 14724  00363E  2770               	addwf	??_calcBaudRate& (0+255),f,b
 14725  003640  0E00               	movlw	0
 14726  003642  2371               	addwfc	(??_calcBaudRate+1)& (0+255),f,b
 14727  003644  C070  F064         	movff	??_calcBaudRate,___aldiv@divisor
 14728  003648  C071  F065         	movff	??_calcBaudRate+1,___aldiv@divisor+1
 14729  00364C  0E00               	movlw	0
 14730  00364E  BF65               	btfsc	(___aldiv@divisor+1)& (0+255),7,b
 14731  003650  0EFF               	movlw	-1
 14732  003652  6F66               	movwf	(___aldiv@divisor+2)& (0+255),b
 14733  003654  6F67               	movwf	(___aldiv@divisor+3)& (0+255),b
 14734  003656  ECB5  F015         	call	___aldiv	;wreg free
 14735  00365A  C060  F073         	movff	?___aldiv,calcBaudRate@bRate
 14736  00365E  C061  F074         	movff	?___aldiv+1,calcBaudRate@bRate+1
 14737                           
 14738                           ;HX_ASL_BORON.c: 1091: return bRate;
 14739  003662  C073  F06E         	movff	calcBaudRate@bRate,?_calcBaudRate
 14740  003666  C074  F06F         	movff	calcBaudRate@bRate+1,?_calcBaudRate+1
 14741  00366A  0012               	return	
 14742  00366C                     __end_of_calcBaudRate:
 14743                           	opt stack 0
 14744                           tblptru	equ	0xFF8
 14745                           tblptrh	equ	0xFF7
 14746                           tblptrl	equ	0xFF6
 14747                           tablat	equ	0xFF5
 14748                           prodh	equ	0xFF4
 14749                           prodl	equ	0xFF3
 14750                           intcon	equ	0xFF2
 14751                           postinc0	equ	0xFEE
 14752                           wreg	equ	0xFE8
 14753                           indf1	equ	0xFE7
 14754                           postinc1	equ	0xFE6
 14755                           postdec1	equ	0xFE5
 14756                           fsr1h	equ	0xFE2
 14757                           fsr1l	equ	0xFE1
 14758                           indf2	equ	0xFDF
 14759                           postinc2	equ	0xFDE
 14760                           postdec2	equ	0xFDD
 14761                           fsr2h	equ	0xFDA
 14762                           fsr2l	equ	0xFD9
 14763                           status	equ	0xFD8
 14764                           
 14765 ;; *************** function ___aldiv *****************
 14766 ;; Defined at:
 14767 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\aldiv.c"
 14768 ;; Parameters:    Size  Location     Type
 14769 ;;  dividend        4    0[BANK0 ] long 
 14770 ;;  divisor         4    4[BANK0 ] long 
 14771 ;; Auto vars:     Size  Location     Type
 14772 ;;  quotient        4   10[BANK0 ] long 
 14773 ;;  sign            1    9[BANK0 ] unsigned char 
 14774 ;;  counter         1    8[BANK0 ] unsigned char 
 14775 ;; Return value:  Size  Location     Type
 14776 ;;                  4    0[BANK0 ] long 
 14777 ;; Registers used:
 14778 ;;		wreg, status,2, status,0
 14779 ;; Tracked objects:
 14780 ;;		On entry : 0/0
 14781 ;;		On exit  : 0/0
 14782 ;;		Unchanged: 0/0
 14783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14784 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14785 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14787 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14788 ;;Total ram usage:       14 bytes
 14789 ;; Hardware stack levels used:    1
 14790 ;; Hardware stack levels required when called:    7
 14791 ;; This function calls:
 14792 ;;		Nothing
 14793 ;; This function is called by:
 14794 ;;		_calcBaudRate
 14795 ;; This function uses a non-reentrant model
 14796 ;;
 14797                           
 14798                           	psect	text53
 14799  002B6A                     __ptext53:
 14800                           	opt stack 0
 14801  002B6A                     ___aldiv:
 14802                           	opt stack 19
 14803                           
 14804                           ;incstack = 0
 14805  002B6A  0E00               	movlw	0
 14806  002B6C  0100               	movlb	0	; () banked
 14807  002B6E  6F69               	movwf	___aldiv@sign& (0+255),b
 14808                           
 14809                           ; BSR set to: 0
 14810  002B70  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 14811  002B72  D00A               	goto	l2153
 14812                           
 14813                           ; BSR set to: 0
 14814  002B74  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
 14815  002B76  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
 14816  002B78  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
 14817  002B7A  6D64               	negf	___aldiv@divisor& (0+255),b
 14818  002B7C  0E00               	movlw	0
 14819  002B7E  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 14820  002B80  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 14821  002B82  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 14822                           
 14823                           ; BSR set to: 0
 14824  002B84  0E01               	movlw	1
 14825  002B86  6F69               	movwf	___aldiv@sign& (0+255),b
 14826  002B88                     l2153:
 14827                           
 14828                           ; BSR set to: 0
 14829                           
 14830                           ; BSR set to: 0
 14831  002B88  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 14832  002B8A  D00A               	goto	l2154
 14833                           
 14834                           ; BSR set to: 0
 14835  002B8C  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
 14836  002B8E  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
 14837  002B90  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
 14838  002B92  6D60               	negf	___aldiv@dividend& (0+255),b
 14839  002B94  0E00               	movlw	0
 14840  002B96  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 14841  002B98  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 14842  002B9A  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 14843                           
 14844                           ; BSR set to: 0
 14845  002B9C  0E01               	movlw	1
 14846  002B9E  1B69               	xorwf	___aldiv@sign& (0+255),f,b
 14847  002BA0                     l2154:
 14848                           
 14849                           ; BSR set to: 0
 14850                           
 14851                           ; BSR set to: 0
 14852  002BA0  0E00               	movlw	0
 14853  002BA2  6F6A               	movwf	___aldiv@quotient& (0+255),b
 14854  002BA4  0E00               	movlw	0
 14855  002BA6  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
 14856  002BA8  0E00               	movlw	0
 14857  002BAA  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
 14858  002BAC  0E00               	movlw	0
 14859  002BAE  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
 14860                           
 14861                           ; BSR set to: 0
 14862  002BB0  5164               	movf	___aldiv@divisor& (0+255),w,b
 14863  002BB2  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 14864  002BB4  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 14865  002BB6  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 14866  002BB8  B4D8               	btfsc	status,2,c
 14867  002BBA  D02A               	goto	l2161
 14868                           
 14869                           ; BSR set to: 0
 14870  002BBC  0E01               	movlw	1
 14871  002BBE  6F68               	movwf	___aldiv@counter& (0+255),b
 14872  002BC0  D006               	goto	l2156
 14873  002BC2                     
 14874                           ; BSR set to: 0
 14875                           
 14876                           ; BSR set to: 0
 14877  002BC2  90D8               	bcf	status,0,c
 14878  002BC4  3764               	rlcf	___aldiv@divisor& (0+255),f,b
 14879  002BC6  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 14880  002BC8  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 14881  002BCA  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 14882  002BCC  2B68               	incf	___aldiv@counter& (0+255),f,b
 14883  002BCE                     l2156:
 14884                           
 14885                           ; BSR set to: 0
 14886                           
 14887                           ; BSR set to: 0
 14888  002BCE  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 14889  002BD0  D7F8               	goto	l2157
 14890  002BD2                     u6770:
 14891                           
 14892                           ; BSR set to: 0
 14893                           
 14894                           ; BSR set to: 0
 14895                           
 14896                           ; BSR set to: 0
 14897  002BD2  90D8               	bcf	status,0,c
 14898  002BD4  376A               	rlcf	___aldiv@quotient& (0+255),f,b
 14899  002BD6  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 14900  002BD8  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 14901  002BDA  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 14902                           
 14903                           ; BSR set to: 0
 14904  002BDC  5164               	movf	___aldiv@divisor& (0+255),w,b
 14905  002BDE  5D60               	subwf	___aldiv@dividend& (0+255),w,b
 14906  002BE0  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 14907  002BE2  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 14908  002BE4  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 14909  002BE6  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 14910  002BE8  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 14911  002BEA  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 14912  002BEC  A0D8               	btfss	status,0,c
 14913  002BEE  D009               	goto	l2160
 14914                           
 14915                           ; BSR set to: 0
 14916  002BF0  5164               	movf	___aldiv@divisor& (0+255),w,b
 14917  002BF2  5F60               	subwf	___aldiv@dividend& (0+255),f,b
 14918  002BF4  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 14919  002BF6  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 14920  002BF8  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 14921  002BFA  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 14922  002BFC  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 14923  002BFE  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 14924                           
 14925                           ; BSR set to: 0
 14926  002C00  816A               	bsf	___aldiv@quotient& (0+255),0,b
 14927  002C02                     l2160:
 14928                           
 14929                           ; BSR set to: 0
 14930                           
 14931                           ; BSR set to: 0
 14932  002C02  90D8               	bcf	status,0,c
 14933  002C04  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 14934  002C06  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 14935  002C08  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 14936  002C0A  3364               	rrcf	___aldiv@divisor& (0+255),f,b
 14937                           
 14938                           ; BSR set to: 0
 14939  002C0C  2F68               	decfsz	___aldiv@counter& (0+255),f,b
 14940  002C0E  D7E1               	goto	u6770
 14941  002C10                     l2161:
 14942                           
 14943                           ; BSR set to: 0
 14944                           
 14945                           ; BSR set to: 0
 14946                           
 14947                           ; BSR set to: 0
 14948  002C10  5169               	movf	___aldiv@sign& (0+255),w,b
 14949  002C12  B4D8               	btfsc	status,2,c
 14950  002C14  D008               	goto	l2162
 14951                           
 14952                           ; BSR set to: 0
 14953  002C16  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 14954  002C18  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 14955  002C1A  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 14956  002C1C  6D6A               	negf	___aldiv@quotient& (0+255),b
 14957  002C1E  0E00               	movlw	0
 14958  002C20  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 14959  002C22  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 14960  002C24  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 14961  002C26                     l2162:
 14962                           
 14963                           ; BSR set to: 0
 14964                           
 14965                           ; BSR set to: 0
 14966  002C26  C06A  F060         	movff	___aldiv@quotient,?___aldiv
 14967  002C2A  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
 14968  002C2E  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
 14969  002C32  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
 14970  002C36  0012               	return	
 14971  002C38                     __end_of___aldiv:
 14972                           	opt stack 0
 14973                           tblptru	equ	0xFF8
 14974                           tblptrh	equ	0xFF7
 14975                           tblptrl	equ	0xFF6
 14976                           tablat	equ	0xFF5
 14977                           prodh	equ	0xFF4
 14978                           prodl	equ	0xFF3
 14979                           intcon	equ	0xFF2
 14980                           postinc0	equ	0xFEE
 14981                           wreg	equ	0xFE8
 14982                           indf1	equ	0xFE7
 14983                           postinc1	equ	0xFE6
 14984                           postdec1	equ	0xFE5
 14985                           fsr1h	equ	0xFE2
 14986                           fsr1l	equ	0xFE1
 14987                           indf2	equ	0xFDF
 14988                           postinc2	equ	0xFDE
 14989                           postdec2	equ	0xFDD
 14990                           fsr2h	equ	0xFDA
 14991                           fsr2l	equ	0xFD9
 14992                           status	equ	0xFD8
 14993                           
 14994 ;; *************** function _cycleBoronPower *****************
 14995 ;; Defined at:
 14996 ;;		line 1120 in file "HX_ASL_BORON.c"
 14997 ;; Parameters:    Size  Location     Type
 14998 ;;		None
 14999 ;; Auto vars:     Size  Location     Type
 15000 ;;		None
 15001 ;; Return value:  Size  Location     Type
 15002 ;;                  1    wreg      void 
 15003 ;; Registers used:
 15004 ;;		wreg
 15005 ;; Tracked objects:
 15006 ;;		On entry : 0/0
 15007 ;;		On exit  : 0/0
 15008 ;;		Unchanged: 0/0
 15009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15013 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15014 ;;Total ram usage:        1 bytes
 15015 ;; Hardware stack levels used:    1
 15016 ;; Hardware stack levels required when called:    7
 15017 ;; This function calls:
 15018 ;;		Nothing
 15019 ;; This function is called by:
 15020 ;;		_write_ASLBoron_debug
 15021 ;; This function uses a non-reentrant model
 15022 ;;
 15023                           
 15024                           	psect	text54
 15025  003F4E                     __ptext54:
 15026                           	opt stack 0
 15027  003F4E                     _cycleBoronPower:
 15028                           	opt stack 21
 15029                           
 15030                           ;HX_ASL_BORON.c: 1122: PORTBbits.RB2 = 1;
 15031                           
 15032                           ; BSR set to: 0
 15033                           ;incstack = 0
 15034  003F4E  848E               	bsf	3982,2,c	;volatile
 15035                           
 15036                           ;HX_ASL_BORON.c: 1123: _delay((unsigned long)((1)*(64000000/4000.0)));
 15037  003F50  0E15               	movlw	21
 15038  003F52  0100               	movlb	0	; () banked
 15039  003F54  6F60               	movwf	??_cycleBoronPower& (0+255),b
 15040  003F56  0EC6               	movlw	198
 15041  003F58                     u9717:
 15042  003F58  2EE8               	decfsz	wreg,f,c
 15043  003F5A  D7FE               	bra	u9717
 15044  003F5C  2F60               	decfsz	??_cycleBoronPower& (0+255),f,b
 15045  003F5E  D7FC               	bra	u9717
 15046  003F60  F000               	nop	
 15047                           
 15048                           ;HX_ASL_BORON.c: 1124: PORTBbits.RB2 = 0;
 15049  003F62  948E               	bcf	3982,2,c	;volatile
 15050  003F64  0012               	return		;funcret
 15051  003F66                     __end_of_cycleBoronPower:
 15052                           	opt stack 0
 15053                           tblptru	equ	0xFF8
 15054                           tblptrh	equ	0xFF7
 15055                           tblptrl	equ	0xFF6
 15056                           tablat	equ	0xFF5
 15057                           prodh	equ	0xFF4
 15058                           prodl	equ	0xFF3
 15059                           intcon	equ	0xFF2
 15060                           postinc0	equ	0xFEE
 15061                           wreg	equ	0xFE8
 15062                           indf1	equ	0xFE7
 15063                           postinc1	equ	0xFE6
 15064                           postdec1	equ	0xFE5
 15065                           fsr1h	equ	0xFE2
 15066                           fsr1l	equ	0xFE1
 15067                           indf2	equ	0xFDF
 15068                           postinc2	equ	0xFDE
 15069                           postdec2	equ	0xFDD
 15070                           fsr2h	equ	0xFDA
 15071                           fsr2l	equ	0xFD9
 15072                           status	equ	0xFD8
 15073                           
 15074 ;; *************** function _ASLB_debug3 *****************
 15075 ;; Defined at:
 15076 ;;		line 989 in file "HX_ASL_BORON.c"
 15077 ;; Parameters:    Size  Location     Type
 15078 ;;  dataByte        1    wreg     unsigned char 
 15079 ;;  rxBuffer        2    1[BANK0 ] PTR unsigned char 
 15080 ;;		 -> hx_mainData(61), 
 15081 ;; Auto vars:     Size  Location     Type
 15082 ;;  dataByte        1    3[BANK0 ] unsigned char 
 15083 ;;  rx_index        1    4[BANK0 ] unsigned char 
 15084 ;; Return value:  Size  Location     Type
 15085 ;;                  1    wreg      void 
 15086 ;; Registers used:
 15087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15088 ;; Tracked objects:
 15089 ;;		On entry : 0/0
 15090 ;;		On exit  : 0/0
 15091 ;;		Unchanged: 0/0
 15092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15093 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15094 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15096 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15097 ;;Total ram usage:        4 bytes
 15098 ;; Hardware stack levels used:    1
 15099 ;; Hardware stack levels required when called:    8
 15100 ;; This function calls:
 15101 ;;		_adjustI2CBaudRate
 15102 ;; This function is called by:
 15103 ;;		_write_ASLBoron_debug
 15104 ;; This function uses a non-reentrant model
 15105 ;;
 15106                           
 15107                           	psect	text55
 15108  0034F8                     __ptext55:
 15109                           	opt stack 0
 15110  0034F8                     _ASLB_debug3:
 15111                           	opt stack 20
 15112                           
 15113                           ;incstack = 0
 15114                           ;ASLB_debug3@dataByte stored from wreg
 15115  0034F8  0100               	movlb	0	; () banked
 15116  0034FA  6F63               	movwf	ASLB_debug3@dataByte& (0+255),b
 15117                           
 15118                           ;HX_ASL_BORON.c: 995: uint8_t rx_index = 0;
 15119  0034FC  0E00               	movlw	0
 15120  0034FE  0100               	movlb	0	; () banked
 15121  003500  6F64               	movwf	ASLB_debug3@rx_index& (0+255),b
 15122                           
 15123                           ; BSR set to: 0
 15124                           ;HX_ASL_BORON.c: 996: if (!adjustI2CBaudRate(dataByte))
 15125  003502  5163               	movf	ASLB_debug3@dataByte& (0+255),w,b
 15126  003504  EC57  F01F         	call	_adjustI2CBaudRate
 15127  003508  0900               	iorlw	0
 15128  00350A  A4D8               	btfss	status,2,c
 15129  00350C  D00B               	goto	l1216
 15130                           
 15131                           ;HX_ASL_BORON.c: 997: {
 15132                           ;HX_ASL_BORON.c: 998: rxBuffer[rx_index++] = 0x00;
 15133  00350E  0100               	movlb	0	; () banked
 15134  003510  5164               	movf	ASLB_debug3@rx_index& (0+255),w,b
 15135  003512  0D01               	mullw	1
 15136  003514  50F3               	movf	prodl,w,c
 15137  003516  2561               	addwf	ASLB_debug3@rxBuffer& (0+255),w,b
 15138  003518  6ED9               	movwf	fsr2l,c
 15139  00351A  50F4               	movf	prodh,w,c
 15140  00351C  2162               	addwfc	(ASLB_debug3@rxBuffer+1)& (0+255),w,b
 15141  00351E  6EDA               	movwf	fsr2h,c
 15142  003520  0E00               	movlw	0
 15143  003522  D00A               	goto	L27
 15144  003524                     l1216:
 15145                           
 15146                           ;HX_ASL_BORON.c: 1001: else
 15147                           ;HX_ASL_BORON.c: 1002: {
 15148                           ;HX_ASL_BORON.c: 1003: rxBuffer[rx_index++] = 0x01;
 15149                           
 15150                           ; BSR set to: 0
 15151  003524  0100               	movlb	0	; () banked
 15152  003526  5164               	movf	ASLB_debug3@rx_index& (0+255),w,b
 15153  003528  0D01               	mullw	1
 15154  00352A  50F3               	movf	prodl,w,c
 15155  00352C  2561               	addwf	ASLB_debug3@rxBuffer& (0+255),w,b
 15156  00352E  6ED9               	movwf	fsr2l,c
 15157  003530  50F4               	movf	prodh,w,c
 15158  003532  2162               	addwfc	(ASLB_debug3@rxBuffer+1)& (0+255),w,b
 15159  003534  6EDA               	movwf	fsr2h,c
 15160  003536  0E01               	movlw	1
 15161  003538                     L27:
 15162  003538  6EDF               	movwf	indf2,c
 15163                           
 15164                           ; BSR set to: 0
 15165  00353A  2B64               	incf	ASLB_debug3@rx_index& (0+255),f,b
 15166                           
 15167                           ; BSR set to: 0
 15168                           ;HX_ASL_BORON.c: 1004: rxBuffer[rx_index++] = dataByte;
 15169  00353C  5164               	movf	ASLB_debug3@rx_index& (0+255),w,b
 15170  00353E  0D01               	mullw	1
 15171  003540  50F3               	movf	prodl,w,c
 15172  003542  2561               	addwf	ASLB_debug3@rxBuffer& (0+255),w,b
 15173  003544  6ED9               	movwf	fsr2l,c
 15174  003546  50F4               	movf	prodh,w,c
 15175  003548  2162               	addwfc	(ASLB_debug3@rxBuffer+1)& (0+255),w,b
 15176  00354A  6EDA               	movwf	fsr2h,c
 15177  00354C  C063  FFDF         	movff	ASLB_debug3@dataByte,indf2
 15178  003550  2B64               	incf	ASLB_debug3@rx_index& (0+255),f,b
 15179                           
 15180                           ; BSR set to: 0
 15181                           ;HX_ASL_BORON.c: 1005: }
 15182                           ;HX_ASL_BORON.c: 1006: hx_mainDataIndex += rx_index;
 15183                           
 15184                           ; BSR set to: 0
 15185  003552  5164               	movf	ASLB_debug3@rx_index& (0+255),w,b
 15186  003554  263F               	addwf	_hx_mainDataIndex,f,c
 15187                           
 15188                           ; BSR set to: 0
 15189  003556  0012               	return		;funcret
 15190  003558                     __end_of_ASLB_debug3:
 15191                           	opt stack 0
 15192                           tblptru	equ	0xFF8
 15193                           tblptrh	equ	0xFF7
 15194                           tblptrl	equ	0xFF6
 15195                           tablat	equ	0xFF5
 15196                           prodh	equ	0xFF4
 15197                           prodl	equ	0xFF3
 15198                           intcon	equ	0xFF2
 15199                           postinc0	equ	0xFEE
 15200                           wreg	equ	0xFE8
 15201                           indf1	equ	0xFE7
 15202                           postinc1	equ	0xFE6
 15203                           postdec1	equ	0xFE5
 15204                           fsr1h	equ	0xFE2
 15205                           fsr1l	equ	0xFE1
 15206                           indf2	equ	0xFDF
 15207                           postinc2	equ	0xFDE
 15208                           postdec2	equ	0xFDD
 15209                           fsr2h	equ	0xFDA
 15210                           fsr2l	equ	0xFD9
 15211                           status	equ	0xFD8
 15212                           
 15213 ;; *************** function _adjustI2CBaudRate *****************
 15214 ;; Defined at:
 15215 ;;		line 1127 in file "HX_ASL_BORON.c"
 15216 ;; Parameters:    Size  Location     Type
 15217 ;;  bd              1    wreg     unsigned char 
 15218 ;; Auto vars:     Size  Location     Type
 15219 ;;  bd              1    0[BANK0 ] unsigned char 
 15220 ;; Return value:  Size  Location     Type
 15221 ;;                  1    wreg      unsigned char 
 15222 ;; Registers used:
 15223 ;;		wreg, status,2, status,0
 15224 ;; Tracked objects:
 15225 ;;		On entry : 0/0
 15226 ;;		On exit  : 0/0
 15227 ;;		Unchanged: 0/0
 15228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15232 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15233 ;;Total ram usage:        1 bytes
 15234 ;; Hardware stack levels used:    1
 15235 ;; Hardware stack levels required when called:    7
 15236 ;; This function calls:
 15237 ;;		Nothing
 15238 ;; This function is called by:
 15239 ;;		_ASLB_debug3
 15240 ;;		_findMaxI2CSpeed
 15241 ;; This function uses a non-reentrant model
 15242 ;;
 15243                           
 15244                           	psect	text56
 15245  003EAE                     __ptext56:
 15246                           	opt stack 0
 15247  003EAE                     _adjustI2CBaudRate:
 15248                           	opt stack 20
 15249                           
 15250                           ; BSR set to: 0
 15251                           ;incstack = 0
 15252                           ;adjustI2CBaudRate@bd stored from wreg
 15253  003EAE  0100               	movlb	0	; () banked
 15254  003EB0  6F60               	movwf	adjustI2CBaudRate@bd& (0+255),b
 15255                           
 15256                           ;HX_ASL_BORON.c: 1134: if (bd < 0x03)
 15257  003EB2  0E03               	movlw	3
 15258  003EB4  0100               	movlb	0	; () banked
 15259  003EB6  6160               	cpfslt	adjustI2CBaudRate@bd& (0+255),b
 15260  003EB8  D004               	goto	l1243
 15261                           
 15262                           ; BSR set to: 0
 15263                           ;HX_ASL_BORON.c: 1135: {
 15264                           ;HX_ASL_BORON.c: 1136: SSP1ADD = 0x9F;
 15265  003EBA  0E9F               	movlw	159
 15266  003EBC  6E93               	movwf	3987,c	;volatile
 15267                           
 15268                           ; BSR set to: 0
 15269                           ;HX_ASL_BORON.c: 1137: return 0;
 15270  003EBE  0E00               	movlw	0
 15271                           
 15272                           ; BSR set to: 0
 15273  003EC0  0012               	return	
 15274  003EC2                     l1243:
 15275                           
 15276                           ; BSR set to: 0
 15277                           ;HX_ASL_BORON.c: 1138: }
 15278                           ;HX_ASL_BORON.c: 1140: SSP1ADD = bd;
 15279  003EC2  C060  FF93         	movff	adjustI2CBaudRate@bd,3987	;volatile
 15280                           
 15281                           ; BSR set to: 0
 15282                           ;HX_ASL_BORON.c: 1141: return 1;
 15283  003EC6  0E01               	movlw	1
 15284  003EC8  0012               	return	
 15285  003ECA                     __end_of_adjustI2CBaudRate:
 15286                           	opt stack 0
 15287                           tblptru	equ	0xFF8
 15288                           tblptrh	equ	0xFF7
 15289                           tblptrl	equ	0xFF6
 15290                           tablat	equ	0xFF5
 15291                           prodh	equ	0xFF4
 15292                           prodl	equ	0xFF3
 15293                           intcon	equ	0xFF2
 15294                           postinc0	equ	0xFEE
 15295                           wreg	equ	0xFE8
 15296                           indf1	equ	0xFE7
 15297                           postinc1	equ	0xFE6
 15298                           postdec1	equ	0xFE5
 15299                           fsr1h	equ	0xFE2
 15300                           fsr1l	equ	0xFE1
 15301                           indf2	equ	0xFDF
 15302                           postinc2	equ	0xFDE
 15303                           postdec2	equ	0xFDD
 15304                           fsr2h	equ	0xFDA
 15305                           fsr2l	equ	0xFD9
 15306                           status	equ	0xFD8
 15307                           
 15308 ;; *************** function _ASLB_debug2 *****************
 15309 ;; Defined at:
 15310 ;;		line 976 in file "HX_ASL_BORON.c"
 15311 ;; Parameters:    Size  Location     Type
 15312 ;;  rxBuffer        2   24[BANK0 ] PTR unsigned char 
 15313 ;;		 -> hx_mainData(61), 
 15314 ;; Auto vars:     Size  Location     Type
 15315 ;;  zeros          10   26[BANK0 ] unsigned char [10]
 15316 ;;  wr_status       1   37[BANK0 ] unsigned char 
 15317 ;;  rx_index        1   36[BANK0 ] unsigned char 
 15318 ;;  rd_status       1    0        unsigned char 
 15319 ;; Return value:  Size  Location     Type
 15320 ;;                  1    wreg      void 
 15321 ;; Registers used:
 15322 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15323 ;; Tracked objects:
 15324 ;;		On entry : 0/0
 15325 ;;		On exit  : 0/0
 15326 ;;		Unchanged: 0/0
 15327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15328 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15329 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15331 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15332 ;;Total ram usage:       14 bytes
 15333 ;; Hardware stack levels used:    1
 15334 ;; Hardware stack levels required when called:   10
 15335 ;; This function calls:
 15336 ;;		_writeI2C
 15337 ;; This function is called by:
 15338 ;;		_write_ASLBoron_debug
 15339 ;; This function uses a non-reentrant model
 15340 ;;
 15341                           
 15342                           	psect	text57
 15343  003AD6                     __ptext57:
 15344                           	opt stack 0
 15345  003AD6                     _ASLB_debug2:
 15346                           	opt stack 18
 15347                           
 15348                           ;HX_ASL_BORON.c: 982: uint8_t rx_index = 0;
 15349                           
 15350                           ; BSR set to: 0
 15351                           ;incstack = 0
 15352  003AD6  0E00               	movlw	0
 15353  003AD8  0100               	movlb	0	; () banked
 15354  003ADA  6F84               	movwf	ASLB_debug2@rx_index& (0+255),b
 15355                           
 15356                           ; BSR set to: 0
 15357                           ;HX_ASL_BORON.c: 983: uint8_t wr_status;
 15358                           ;HX_ASL_BORON.c: 984: uint8_t rd_status;
 15359                           ;HX_ASL_BORON.c: 985: uint8_t zeros[10] = {0};
 15360  003ADC  EE24  F0F5         	lfsr	2,ASLB_debug2@F12373
 15361  003AE0  EE10  F07A         	lfsr	1,ASLB_debug2@zeros
 15362  003AE4  0E09               	movlw	9
 15363  003AE6                     u7541:
 15364  003AE6  CFDB FFE3          	movff	plusw2,plusw1
 15365  003AEA  06E8               	decf	wreg,f,c
 15366  003AEC  E2FC               	bc	u7541
 15367                           
 15368                           ; BSR set to: 0
 15369                           ;HX_ASL_BORON.c: 986: wr_status = writeI2C(zeros, 10, 0x00);
 15370  003AEE  0E7A               	movlw	low ASLB_debug2@zeros
 15371  003AF0  6F70               	movwf	writeI2C@txData& (0+255),b
 15372  003AF2  0E00               	movlw	high ASLB_debug2@zeros
 15373  003AF4  6F71               	movwf	(writeI2C@txData+1)& (0+255),b
 15374  003AF6  0E0A               	movlw	10
 15375  003AF8  6F72               	movwf	writeI2C@size& (0+255),b
 15376  003AFA  0E00               	movlw	0
 15377  003AFC  6F74               	movwf	(writeI2C@slaveAddr+1)& (0+255),b
 15378  003AFE  0E00               	movlw	0
 15379  003B00  6F73               	movwf	writeI2C@slaveAddr& (0+255),b
 15380  003B02  ECAC  F01A         	call	_writeI2C	;wreg free
 15381  003B06  0100               	movlb	0	; () banked
 15382  003B08  6F85               	movwf	ASLB_debug2@wr_status& (0+255),b
 15383                           
 15384                           ; BSR set to: 0
 15385  003B0A  0012               	return		;funcret
 15386  003B0C                     __end_of_ASLB_debug2:
 15387                           	opt stack 0
 15388                           tblptru	equ	0xFF8
 15389                           tblptrh	equ	0xFF7
 15390                           tblptrl	equ	0xFF6
 15391                           tablat	equ	0xFF5
 15392                           prodh	equ	0xFF4
 15393                           prodl	equ	0xFF3
 15394                           intcon	equ	0xFF2
 15395                           postinc0	equ	0xFEE
 15396                           wreg	equ	0xFE8
 15397                           indf1	equ	0xFE7
 15398                           postinc1	equ	0xFE6
 15399                           postdec1	equ	0xFE5
 15400                           plusw1	equ	0xFE3
 15401                           fsr1h	equ	0xFE2
 15402                           fsr1l	equ	0xFE1
 15403                           indf2	equ	0xFDF
 15404                           postinc2	equ	0xFDE
 15405                           postdec2	equ	0xFDD
 15406                           plusw2	equ	0xFDB
 15407                           fsr2h	equ	0xFDA
 15408                           fsr2l	equ	0xFD9
 15409                           status	equ	0xFD8
 15410                           
 15411 ;; *************** function _writeI2C *****************
 15412 ;; Defined at:
 15413 ;;		line 5 in file "Utils.c"
 15414 ;; Parameters:    Size  Location     Type
 15415 ;;  txData          2   16[BANK0 ] PTR unsigned char 
 15416 ;;		 -> ASLB_debug2@zeros(10), 
 15417 ;;  size            1   18[BANK0 ] unsigned char 
 15418 ;;  slaveAddr       2   19[BANK0 ] unsigned int 
 15419 ;; Auto vars:     Size  Location     Type
 15420 ;;  timeOut         2   21[BANK0 ] unsigned int 
 15421 ;;  status          1   23[BANK0 ] enum E11632
 15422 ;; Return value:  Size  Location     Type
 15423 ;;                  1    wreg      unsigned char 
 15424 ;; Registers used:
 15425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15426 ;; Tracked objects:
 15427 ;;		On entry : 0/0
 15428 ;;		On exit  : 0/0
 15429 ;;		Unchanged: 0/0
 15430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15431 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15432 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15434 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15435 ;;Total ram usage:        8 bytes
 15436 ;; Hardware stack levels used:    1
 15437 ;; Hardware stack levels required when called:    9
 15438 ;; This function calls:
 15439 ;;		_I2C1_MasterWrite
 15440 ;; This function is called by:
 15441 ;;		_ASLB_debug2
 15442 ;;		_run_I2C
 15443 ;; This function uses a non-reentrant model
 15444 ;;
 15445                           
 15446                           	psect	text58
 15447  003558                     __ptext58:
 15448                           	opt stack 0
 15449  003558                     _writeI2C:
 15450                           	opt stack 20
 15451                           
 15452                           ;Utils.c: 7: I2C1_MESSAGE_STATUS status = I2C1_MESSAGE_PENDING;
 15453                           
 15454                           ; BSR set to: 0
 15455                           ;incstack = 0
 15456  003558  0E02               	movlw	2
 15457  00355A  0100               	movlb	0	; () banked
 15458  00355C  6F77               	movwf	writeI2C@status& (0+255),b
 15459                           
 15460                           ;Utils.c: 8: uint16_t timeOut;
 15461                           ;Utils.c: 10: timeOut = 0;
 15462  00355E  0E00               	movlw	0
 15463  003560  6F76               	movwf	(writeI2C@timeOut+1)& (0+255),b
 15464  003562  0E00               	movlw	0
 15465  003564  6F75               	movwf	writeI2C@timeOut& (0+255),b
 15466                           
 15467                           ;Utils.c: 12: while(status != I2C1_MESSAGE_FAIL)
 15468  003566  D023               	goto	l253
 15469  003568                     
 15470                           ; BSR set to: 0
 15471                           ;Utils.c: 13: {
 15472                           ;Utils.c: 14: I2C1_MasterWrite( txData,
 15473                           ;Utils.c: 15: size,
 15474                           ;Utils.c: 16: slaveAddr,
 15475                           ;Utils.c: 17: &status);
 15476                           
 15477                           ; BSR set to: 0
 15478  003568  C070  F069         	movff	writeI2C@txData,I2C1_MasterWrite@pdata
 15479  00356C  C071  F06A         	movff	writeI2C@txData+1,I2C1_MasterWrite@pdata+1
 15480  003570  C072  F06B         	movff	writeI2C@size,I2C1_MasterWrite@length
 15481  003574  C073  F06C         	movff	writeI2C@slaveAddr,I2C1_MasterWrite@address
 15482  003578  C074  F06D         	movff	writeI2C@slaveAddr+1,I2C1_MasterWrite@address+1
 15483  00357C  0E77               	movlw	low writeI2C@status
 15484  00357E  6F6E               	movwf	I2C1_MasterWrite@pflag& (0+255),b
 15485  003580  0E00               	movlw	high writeI2C@status
 15486  003582  6F6F               	movwf	(I2C1_MasterWrite@pflag+1)& (0+255),b
 15487  003584  ECB0  F01B         	call	_I2C1_MasterWrite	;wreg free
 15488  003588  0E02               	movlw	2
 15489  00358A  0100               	movlb	0	; () banked
 15490  00358C  1977               	xorwf	writeI2C@status& (0+255),w,b
 15491  00358E  B4D8               	btfsc	status,2,c
 15492  003590  D7FB               	goto	l248
 15493                           
 15494                           ; BSR set to: 0
 15495                           ;Utils.c: 22: if (status == I2C1_MESSAGE_COMPLETE)
 15496                           
 15497                           ; BSR set to: 0
 15498  003592  5177               	movf	writeI2C@status& (0+255),w,b
 15499  003594  A4D8               	btfss	status,2,c
 15500  003596  D002               	goto	l250
 15501                           
 15502                           ; BSR set to: 0
 15503                           ;Utils.c: 23: {
 15504                           ;Utils.c: 24: return 0;
 15505  003598  0E00               	movlw	0
 15506                           
 15507                           ; BSR set to: 0
 15508  00359A  0012               	return	
 15509  00359C                     l250:
 15510                           
 15511                           ; BSR set to: 0
 15512                           ;Utils.c: 25: }
 15513                           ;Utils.c: 33: if (timeOut == 100)
 15514                           
 15515                           ; BSR set to: 0
 15516  00359C  0E64               	movlw	100
 15517  00359E  1975               	xorwf	writeI2C@timeOut& (0+255),w,b
 15518  0035A0  1176               	iorwf	(writeI2C@timeOut+1)& (0+255),w,b
 15519  0035A2  A4D8               	btfss	status,2,c
 15520  0035A4  D002               	goto	l252
 15521                           
 15522                           ; BSR set to: 0
 15523                           ;Utils.c: 34: return 0;
 15524  0035A6  0E00               	movlw	0
 15525                           
 15526                           ; BSR set to: 0
 15527  0035A8  0012               	return	
 15528  0035AA                     l252:
 15529                           
 15530                           ; BSR set to: 0
 15531                           ;Utils.c: 35: else
 15532                           ;Utils.c: 36: timeOut++;
 15533                           
 15534                           ; BSR set to: 0
 15535  0035AA  4B75               	infsnz	writeI2C@timeOut& (0+255),f,b
 15536  0035AC  2B76               	incf	(writeI2C@timeOut+1)& (0+255),f,b
 15537  0035AE                     l253:
 15538                           
 15539                           ; BSR set to: 0
 15540                           
 15541                           ; BSR set to: 0
 15542                           
 15543                           ; BSR set to: 0
 15544  0035AE  0577               	decf	writeI2C@status& (0+255),w,b
 15545  0035B0  A4D8               	btfss	status,2,c
 15546  0035B2  D7DA               	goto	l246
 15547                           
 15548                           ; BSR set to: 0
 15549                           ;Utils.c: 37: }
 15550                           ;Utils.c: 38: return 0;
 15551                           
 15552                           ; BSR set to: 0
 15553  0035B4  0E00               	movlw	0
 15554  0035B6  0012               	return	
 15555  0035B8                     __end_of_writeI2C:
 15556                           	opt stack 0
 15557                           tblptru	equ	0xFF8
 15558                           tblptrh	equ	0xFF7
 15559                           tblptrl	equ	0xFF6
 15560                           tablat	equ	0xFF5
 15561                           prodh	equ	0xFF4
 15562                           prodl	equ	0xFF3
 15563                           intcon	equ	0xFF2
 15564                           postinc0	equ	0xFEE
 15565                           wreg	equ	0xFE8
 15566                           indf1	equ	0xFE7
 15567                           postinc1	equ	0xFE6
 15568                           postdec1	equ	0xFE5
 15569                           plusw1	equ	0xFE3
 15570                           fsr1h	equ	0xFE2
 15571                           fsr1l	equ	0xFE1
 15572                           indf2	equ	0xFDF
 15573                           postinc2	equ	0xFDE
 15574                           postdec2	equ	0xFDD
 15575                           plusw2	equ	0xFDB
 15576                           fsr2h	equ	0xFDA
 15577                           fsr2l	equ	0xFD9
 15578                           status	equ	0xFD8
 15579                           
 15580 ;; *************** function _I2C1_MasterWrite *****************
 15581 ;; Defined at:
 15582 ;;		line 600 in file "mcc_generated_files/i2c1.c"
 15583 ;; Parameters:    Size  Location     Type
 15584 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
 15585 ;;		 -> ASLB_debug2@zeros(10), 
 15586 ;;  length          1   11[BANK0 ] unsigned char 
 15587 ;;  address         2   12[BANK0 ] unsigned int 
 15588 ;;  pflag           2   14[BANK0 ] PTR enum E11632
 15589 ;;		 -> writeI2C@status(1), 
 15590 ;; Auto vars:     Size  Location     Type
 15591 ;;		None
 15592 ;; Return value:  Size  Location     Type
 15593 ;;                  1    wreg      void 
 15594 ;; Registers used:
 15595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15596 ;; Tracked objects:
 15597 ;;		On entry : 0/0
 15598 ;;		On exit  : 0/0
 15599 ;;		Unchanged: 0/0
 15600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15601 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15604 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15605 ;;Total ram usage:        7 bytes
 15606 ;; Hardware stack levels used:    1
 15607 ;; Hardware stack levels required when called:    8
 15608 ;; This function calls:
 15609 ;;		_I2C1_MasterTRBInsert
 15610 ;;		_I2C1_MasterWriteTRBBuild
 15611 ;; This function is called by:
 15612 ;;		_writeI2C
 15613 ;; This function uses a non-reentrant model
 15614 ;;
 15615                           
 15616                           	psect	text59
 15617  003760                     __ptext59:
 15618                           	opt stack 0
 15619  003760                     _I2C1_MasterWrite:
 15620                           	opt stack 20
 15621                           
 15622                           ;i2c1.c: 606: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
 15623                           ;i2c1.c: 609: if (i2c1_object.trStatus.s.full != 1)
 15624                           
 15625                           ; BSR set to: 0
 15626                           ;incstack = 0
 15627  003760  0102               	movlb	2	; () banked
 15628  003762  B1DF               	btfsc	(_i2c1_object+4)& (0+255),0,b
 15629  003764  D01E               	goto	l1489
 15630                           
 15631                           ; BSR set to: 2
 15632                           ;i2c1.c: 610: {
 15633                           ;i2c1.c: 611: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
 15634  003766  0EF1               	movlw	low I2C1_MasterWrite@trBlock
 15635  003768  0100               	movlb	0	; () banked
 15636  00376A  6F60               	movwf	I2C1_MasterWriteTRBBuild@ptrb& (0+255),b
 15637  00376C  0E03               	movlw	high I2C1_MasterWrite@trBlock
 15638  00376E  6F61               	movwf	(I2C1_MasterWriteTRBBuild@ptrb+1)& (0+255),b
 15639  003770  C069  F062         	movff	I2C1_MasterWrite@pdata,I2C1_MasterWriteTRBBuild@pdata
 15640  003774  C06A  F063         	movff	I2C1_MasterWrite@pdata+1,I2C1_MasterWriteTRBBuild@pdata+1
 15641  003778  C06B  F064         	movff	I2C1_MasterWrite@length,I2C1_MasterWriteTRBBuild@length
 15642  00377C  C06C  F065         	movff	I2C1_MasterWrite@address,I2C1_MasterWriteTRBBuild@address
 15643  003780  C06D  F066         	movff	I2C1_MasterWrite@address+1,I2C1_MasterWriteTRBBuild@address+1
 15644  003784  EC91  F01C         	call	_I2C1_MasterWriteTRBBuild	;wreg free
 15645                           
 15646                           ;i2c1.c: 612: I2C1_MasterTRBInsert(1, &trBlock, pflag);
 15647  003788  0EF1               	movlw	low I2C1_MasterWrite@trBlock
 15648  00378A  0100               	movlb	0	; () banked
 15649  00378C  6F60               	movwf	I2C1_MasterTRBInsert@ptrb_list& (0+255),b
 15650  00378E  0E03               	movlw	high I2C1_MasterWrite@trBlock
 15651  003790  6F61               	movwf	(I2C1_MasterTRBInsert@ptrb_list+1)& (0+255),b
 15652  003792  C06E  F062         	movff	I2C1_MasterWrite@pflag,I2C1_MasterTRBInsert@pflag
 15653  003796  C06F  F063         	movff	I2C1_MasterWrite@pflag+1,I2C1_MasterTRBInsert@pflag+1
 15654  00379A  0E01               	movlw	1
 15655  00379C  ECEF  F017         	call	_I2C1_MasterTRBInsert
 15656                           
 15657                           ;i2c1.c: 613: }
 15658  0037A0  0012               	return	
 15659  0037A2                     l1489:
 15660                           
 15661                           ;i2c1.c: 614: else
 15662                           ;i2c1.c: 615: {
 15663                           ;i2c1.c: 616: *pflag = I2C1_MESSAGE_FAIL;
 15664  0037A2  C06E  FFD9         	movff	I2C1_MasterWrite@pflag,fsr2l
 15665  0037A6  C06F  FFDA         	movff	I2C1_MasterWrite@pflag+1,fsr2h
 15666  0037AA  0E01               	movlw	1
 15667  0037AC  6EDF               	movwf	indf2,c
 15668  0037AE  0012               	return	
 15669  0037B0                     __end_of_I2C1_MasterWrite:
 15670                           	opt stack 0
 15671                           tblptru	equ	0xFF8
 15672                           tblptrh	equ	0xFF7
 15673                           tblptrl	equ	0xFF6
 15674                           tablat	equ	0xFF5
 15675                           prodh	equ	0xFF4
 15676                           prodl	equ	0xFF3
 15677                           intcon	equ	0xFF2
 15678                           postinc0	equ	0xFEE
 15679                           wreg	equ	0xFE8
 15680                           indf1	equ	0xFE7
 15681                           postinc1	equ	0xFE6
 15682                           postdec1	equ	0xFE5
 15683                           plusw1	equ	0xFE3
 15684                           fsr1h	equ	0xFE2
 15685                           fsr1l	equ	0xFE1
 15686                           indf2	equ	0xFDF
 15687                           postinc2	equ	0xFDE
 15688                           postdec2	equ	0xFDD
 15689                           plusw2	equ	0xFDB
 15690                           fsr2h	equ	0xFDA
 15691                           fsr2l	equ	0xFD9
 15692                           status	equ	0xFD8
 15693                           
 15694 ;; *************** function _ASLB_debug1 *****************
 15695 ;; Defined at:
 15696 ;;		line 896 in file "HX_ASL_BORON.c"
 15697 ;; Parameters:    Size  Location     Type
 15698 ;;  rxBuffer        2   18[BANK0 ] PTR unsigned char 
 15699 ;;		 -> hx_mainData(61), 
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;  ramWrPkt       71   71[BANK2 ] struct TxRxPacket
 15702 ;;  ramRdPkt       71    0[BANK2 ] struct TxRxPacket
 15703 ;;  ramReadbackP   71  162[BANK1 ] struct TxRxPacket
 15704 ;;  cmdReadbackP   71   33[BANK0 ] struct TxRxPacket
 15705 ;;  stream          8   22[BANK0 ] PTR struct TxRxPacket[4]
 15706 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
 15707 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
 15708 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
 15709 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
 15710 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
 15711 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
 15712 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
 15713 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
 15714 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
 15715 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), 
 15716 ;;  rx_index        1   32[BANK0 ] unsigned char 
 15717 ;;  ramAddrLo       1   31[BANK0 ] unsigned char 
 15718 ;;  ramAddrHi       1   30[BANK0 ] unsigned char 
 15719 ;;  stream_statu    1   21[BANK0 ] unsigned char 
 15720 ;;  ramData         1   20[BANK0 ] unsigned char 
 15721 ;; Return value:  Size  Location     Type
 15722 ;;                  1    wreg      void 
 15723 ;; Registers used:
 15724 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15725 ;; Tracked objects:
 15726 ;;		On entry : 0/0
 15727 ;;		On exit  : 0/0
 15728 ;;		Unchanged: 0/0
 15729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15730 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15731 ;;      Locals:         0      84      71     142       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15733 ;;      Totals:         0      86      71     142       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15734 ;;Total ram usage:      299 bytes
 15735 ;; Hardware stack levels used:    1
 15736 ;; Hardware stack levels required when called:   10
 15737 ;; This function calls:
 15738 ;;		_calcChecksum
 15739 ;;		_memcpy
 15740 ;;		_streamBoronComm
 15741 ;; This function is called by:
 15742 ;;		_write_ASLBoron_debug
 15743 ;; This function uses a non-reentrant model
 15744 ;;
 15745                           
 15746                           	psect	text60
 15747  002136                     __ptext60:
 15748                           	opt stack 0
 15749  002136                     _ASLB_debug1:
 15750                           	opt stack 18
 15751                           
 15752                           ;HX_ASL_BORON.c: 902: uint8_t rx_index = 0;
 15753                           
 15754                           ;incstack = 0
 15755  002136  0E00               	movlw	0
 15756  002138  0100               	movlb	0	; () banked
 15757  00213A  6F80               	movwf	ASLB_debug1@rx_index& (0+255),b
 15758                           
 15759                           ;HX_ASL_BORON.c: 903: uint8_t stream_status = 0;
 15760  00213C  0E00               	movlw	0
 15761  00213E  6F75               	movwf	ASLB_debug1@stream_status& (0+255),b
 15762                           
 15763                           ;HX_ASL_BORON.c: 904: uint8_t ramAddrHi = 0x00;
 15764  002140  0E00               	movlw	0
 15765  002142  6F7E               	movwf	ASLB_debug1@ramAddrHi& (0+255),b
 15766                           
 15767                           ;HX_ASL_BORON.c: 905: uint8_t ramAddrLo = 0x31;
 15768  002144  0E31               	movlw	49
 15769  002146  6F7F               	movwf	ASLB_debug1@ramAddrLo& (0+255),b
 15770                           
 15771                           ;HX_ASL_BORON.c: 906: uint8_t ramData = 0xBB;
 15772  002148  0EBB               	movlw	187
 15773  00214A  6F74               	movwf	ASLB_debug1@ramData& (0+255),b
 15774                           
 15775                           ;HX_ASL_BORON.c: 908: txRxPkt ramRdPkt;
 15776                           ;HX_ASL_BORON.c: 909: txRxPkt cmdReadbackPkt;
 15777                           ;HX_ASL_BORON.c: 910: txRxPkt ramReadbackPkt;
 15778                           ;HX_ASL_BORON.c: 913: txRxPkt ramWrPkt;
 15779                           ;HX_ASL_BORON.c: 914: ramWrPkt.txOrRx = 0;
 15780  00214C  0E00               	movlw	0
 15781  00214E  0102               	movlb	2	; () banked
 15782  002150  6F47               	movwf	ASLB_debug1@ramWrPkt& (0+255),b
 15783                           
 15784                           ;HX_ASL_BORON.c: 915: ramWrPkt.slaveAddr = 0x5A;
 15785  002152  0E00               	movlw	0
 15786  002154  6F49               	movwf	(ASLB_debug1@ramWrPkt+2)& (0+255),b
 15787  002156  0E5A               	movlw	90
 15788  002158  6F48               	movwf	(ASLB_debug1@ramWrPkt+1)& (0+255),b
 15789                           
 15790                           ;HX_ASL_BORON.c: 916: ramWrPkt.numOfBytes = 6;
 15791  00215A  0E06               	movlw	6
 15792  00215C  6F8A               	movwf	(ASLB_debug1@ramWrPkt+67)& (0+255),b
 15793                           
 15794                           ;HX_ASL_BORON.c: 917: ramWrPkt.data[0] = 0x32;
 15795  00215E  0E32               	movlw	50
 15796  002160  6F4A               	movwf	(ASLB_debug1@ramWrPkt+3)& (0+255),b
 15797                           
 15798                           ; BSR set to: 2
 15799                           ;HX_ASL_BORON.c: 918: ramWrPkt.data[1] = ramAddrLo;
 15800  002162  C07F  F24B         	movff	ASLB_debug1@ramAddrLo,ASLB_debug1@ramWrPkt+4
 15801                           
 15802                           ; BSR set to: 2
 15803                           ;HX_ASL_BORON.c: 919: ramWrPkt.data[2] = ramAddrHi;
 15804  002166  C07E  F24C         	movff	ASLB_debug1@ramAddrHi,ASLB_debug1@ramWrPkt+5
 15805                           
 15806                           ;HX_ASL_BORON.c: 920: ramWrPkt.data[3] = 1;
 15807  00216A  0E01               	movlw	1
 15808  00216C  6F4D               	movwf	(ASLB_debug1@ramWrPkt+6)& (0+255),b
 15809                           
 15810                           ; BSR set to: 2
 15811                           ;HX_ASL_BORON.c: 921: ramWrPkt.data[4] = ramData;
 15812  00216E  C074  F24E         	movff	ASLB_debug1@ramData,ASLB_debug1@ramWrPkt+7
 15813                           
 15814                           ; BSR set to: 2
 15815                           ;HX_ASL_BORON.c: 922: ramWrPkt.data[5] = calcChecksum(ramWrPkt.data, ramWrPkt.numOfBytes
      +                          -1);
 15816  002172  0E4A               	movlw	low (ASLB_debug1@ramWrPkt+3)
 15817  002174  0100               	movlb	0	; () banked
 15818  002176  6F60               	movwf	calcChecksum@data& (0+255),b
 15819  002178  0E02               	movlw	high (ASLB_debug1@ramWrPkt+3)
 15820  00217A  6F61               	movwf	(calcChecksum@data+1)& (0+255),b
 15821  00217C  0102               	movlb	2	; () banked
 15822  00217E  058A               	decf	(ASLB_debug1@ramWrPkt+67)& (0+255),w,b
 15823  002180  0100               	movlb	0	; () banked
 15824  002182  6F62               	movwf	calcChecksum@size& (0+255),b
 15825  002184  EC86  F01E         	call	_calcChecksum	;wreg free
 15826  002188  0102               	movlb	2	; () banked
 15827  00218A  6F4F               	movwf	(ASLB_debug1@ramWrPkt+8)& (0+255),b
 15828                           
 15829                           ; BSR set to: 2
 15830                           ;HX_ASL_BORON.c: 925: cmdReadbackPkt.txOrRx = 1;
 15831  00218C  0E01               	movlw	1
 15832  00218E  0100               	movlb	0	; () banked
 15833  002190  6F81               	movwf	ASLB_debug1@cmdReadbackPkt& (0+255),b
 15834                           
 15835                           ; BSR set to: 0
 15836                           ;HX_ASL_BORON.c: 926: cmdReadbackPkt.slaveAddr = 0x5A;
 15837  002192  0E00               	movlw	0
 15838  002194  6F83               	movwf	(ASLB_debug1@cmdReadbackPkt+2)& (0+255),b
 15839  002196  0E5A               	movlw	90
 15840  002198  6F82               	movwf	(ASLB_debug1@cmdReadbackPkt+1)& (0+255),b
 15841                           
 15842                           ; BSR set to: 0
 15843                           ;HX_ASL_BORON.c: 927: cmdReadbackPkt.numOfBytes = 3;
 15844  00219A  0E03               	movlw	3
 15845  00219C  6FC4               	movwf	(ASLB_debug1@cmdReadbackPkt+67)& (0+255),b
 15846                           
 15847                           ; BSR set to: 0
 15848                           ;HX_ASL_BORON.c: 930: ramRdPkt.txOrRx = 0;
 15849  00219E  0E00               	movlw	0
 15850  0021A0  0102               	movlb	2	; () banked
 15851  0021A2  6F00               	movwf	ASLB_debug1@ramRdPkt& (0+255),b
 15852                           
 15853                           ; BSR set to: 2
 15854                           ;HX_ASL_BORON.c: 931: ramRdPkt.slaveAddr = 0x5A;
 15855  0021A4  0E00               	movlw	0
 15856  0021A6  6F02               	movwf	(ASLB_debug1@ramRdPkt+2)& (0+255),b
 15857  0021A8  0E5A               	movlw	90
 15858  0021AA  6F01               	movwf	(ASLB_debug1@ramRdPkt+1)& (0+255),b
 15859                           
 15860                           ; BSR set to: 2
 15861                           ;HX_ASL_BORON.c: 932: ramRdPkt.numOfBytes = 5;
 15862  0021AC  0E05               	movlw	5
 15863  0021AE  6F43               	movwf	(ASLB_debug1@ramRdPkt+67)& (0+255),b
 15864                           
 15865                           ; BSR set to: 2
 15866                           ;HX_ASL_BORON.c: 933: ramRdPkt.data[0] = 0x22;
 15867  0021B0  0E22               	movlw	34
 15868  0021B2  6F03               	movwf	(ASLB_debug1@ramRdPkt+3)& (0+255),b
 15869                           
 15870                           ; BSR set to: 2
 15871                           ;HX_ASL_BORON.c: 934: ramRdPkt.data[1] = ramAddrLo;
 15872  0021B4  C07F  F204         	movff	ASLB_debug1@ramAddrLo,ASLB_debug1@ramRdPkt+4
 15873                           
 15874                           ; BSR set to: 2
 15875                           ;HX_ASL_BORON.c: 935: ramRdPkt.data[2] = ramAddrHi;
 15876  0021B8  C07E  F205         	movff	ASLB_debug1@ramAddrHi,ASLB_debug1@ramRdPkt+5
 15877                           
 15878                           ; BSR set to: 2
 15879                           ;HX_ASL_BORON.c: 936: ramRdPkt.data[3] = 1;
 15880  0021BC  0E01               	movlw	1
 15881  0021BE  6F06               	movwf	(ASLB_debug1@ramRdPkt+6)& (0+255),b
 15882                           
 15883                           ; BSR set to: 2
 15884                           ;HX_ASL_BORON.c: 937: ramRdPkt.data[4] = calcChecksum(ramRdPkt.data, ramRdPkt.numOfBytes
      +                          -1);
 15885  0021C0  0E03               	movlw	low (ASLB_debug1@ramRdPkt+3)
 15886  0021C2  0100               	movlb	0	; () banked
 15887  0021C4  6F60               	movwf	calcChecksum@data& (0+255),b
 15888  0021C6  0E02               	movlw	high (ASLB_debug1@ramRdPkt+3)
 15889  0021C8  6F61               	movwf	(calcChecksum@data+1)& (0+255),b
 15890  0021CA  0102               	movlb	2	; () banked
 15891  0021CC  0543               	decf	(ASLB_debug1@ramRdPkt+67)& (0+255),w,b
 15892  0021CE  0100               	movlb	0	; () banked
 15893  0021D0  6F62               	movwf	calcChecksum@size& (0+255),b
 15894  0021D2  EC86  F01E         	call	_calcChecksum	;wreg free
 15895  0021D6  0102               	movlb	2	; () banked
 15896  0021D8  6F07               	movwf	(ASLB_debug1@ramRdPkt+7)& (0+255),b
 15897                           
 15898                           ;HX_ASL_BORON.c: 940: ramReadbackPkt.txOrRx = 1;
 15899  0021DA  0E01               	movlw	1
 15900  0021DC  0101               	movlb	1	; () banked
 15901  0021DE  6FA2               	movwf	ASLB_debug1@ramReadbackPkt& (0+255),b
 15902                           
 15903                           ;HX_ASL_BORON.c: 941: ramReadbackPkt.slaveAddr = 0x5A;
 15904  0021E0  0E00               	movlw	0
 15905  0021E2  6FA4               	movwf	(ASLB_debug1@ramReadbackPkt+2)& (0+255),b
 15906  0021E4  0E5A               	movlw	90
 15907  0021E6  6FA3               	movwf	(ASLB_debug1@ramReadbackPkt+1)& (0+255),b
 15908                           
 15909                           ;HX_ASL_BORON.c: 942: ramReadbackPkt.numOfBytes = 3;
 15910  0021E8  0E03               	movlw	3
 15911  0021EA  6FE5               	movwf	(ASLB_debug1@ramReadbackPkt+67)& (0+255),b
 15912                           
 15913                           ; BSR set to: 1
 15914                           ;HX_ASL_BORON.c: 945: txRxPkt* stream[4];
 15915                           ;HX_ASL_BORON.c: 946: stream[0] = &ramWrPkt;
 15916  0021EC  0E47               	movlw	low ASLB_debug1@ramWrPkt
 15917  0021EE  0100               	movlb	0	; () banked
 15918  0021F0  6F76               	movwf	ASLB_debug1@stream& (0+255),b
 15919  0021F2  0E02               	movlw	high ASLB_debug1@ramWrPkt
 15920  0021F4  6F77               	movwf	(ASLB_debug1@stream+1)& (0+255),b
 15921                           
 15922                           ; BSR set to: 0
 15923                           ;HX_ASL_BORON.c: 947: stream[1] = &cmdReadbackPkt;
 15924  0021F6  0E81               	movlw	low ASLB_debug1@cmdReadbackPkt
 15925  0021F8  6F78               	movwf	(ASLB_debug1@stream+2)& (0+255),b
 15926  0021FA  0E00               	movlw	high ASLB_debug1@cmdReadbackPkt
 15927  0021FC  6F79               	movwf	(ASLB_debug1@stream+3)& (0+255),b
 15928                           
 15929                           ; BSR set to: 0
 15930                           ;HX_ASL_BORON.c: 948: stream[2] = &ramRdPkt;
 15931  0021FE  0E00               	movlw	low ASLB_debug1@ramRdPkt
 15932  002200  6F7A               	movwf	(ASLB_debug1@stream+4)& (0+255),b
 15933  002202  0E02               	movlw	high ASLB_debug1@ramRdPkt
 15934  002204  6F7B               	movwf	(ASLB_debug1@stream+5)& (0+255),b
 15935                           
 15936                           ; BSR set to: 0
 15937                           ;HX_ASL_BORON.c: 949: stream[3] = &ramReadbackPkt;
 15938  002206  0EA2               	movlw	low ASLB_debug1@ramReadbackPkt
 15939  002208  6F7C               	movwf	(ASLB_debug1@stream+6)& (0+255),b
 15940  00220A  0E01               	movlw	high ASLB_debug1@ramReadbackPkt
 15941  00220C  6F7D               	movwf	(ASLB_debug1@stream+7)& (0+255),b
 15942                           
 15943                           ; BSR set to: 0
 15944                           ;HX_ASL_BORON.c: 951: stream_status = streamBoronComm(BORON_COMM_TYPE ,stream, 4);
 15945  00220E  0E76               	movlw	low ASLB_debug1@stream
 15946  002210  6F6E               	movwf	streamBoronComm@pktArr& (0+255),b
 15947  002212  0E00               	movlw	high ASLB_debug1@stream
 15948  002214  6F6F               	movwf	(streamBoronComm@pktArr+1)& (0+255),b
 15949  002216  0E04               	movlw	4
 15950  002218  6F70               	movwf	streamBoronComm@pktSize& (0+255),b
 15951  00221A  5030               	movf	_BORON_COMM_TYPE,w,c
 15952  00221C  EC6E  F01E         	call	_streamBoronComm
 15953  002220  0100               	movlb	0	; () banked
 15954  002222  6F75               	movwf	ASLB_debug1@stream_status& (0+255),b
 15955                           
 15956                           ; BSR set to: 0
 15957                           ;HX_ASL_BORON.c: 953: if (stream_status != 0)
 15958  002224  5175               	movf	ASLB_debug1@stream_status& (0+255),w,b
 15959  002226  B4D8               	btfsc	status,2,c
 15960  002228  D02D               	goto	l1206
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;HX_ASL_BORON.c: 954: {
 15964                           ;HX_ASL_BORON.c: 955: memcpy(&rxBuffer[rx_index], cmdReadbackPkt.data, 3);
 15965  00222A  5180               	movf	ASLB_debug1@rx_index& (0+255),w,b
 15966  00222C  0D01               	mullw	1
 15967  00222E  50F3               	movf	prodl,w,c
 15968  002230  2572               	addwf	ASLB_debug1@rxBuffer& (0+255),w,b
 15969  002232  6F60               	movwf	memcpy@d1& (0+255),b
 15970  002234  50F4               	movf	prodh,w,c
 15971  002236  2173               	addwfc	(ASLB_debug1@rxBuffer+1)& (0+255),w,b
 15972  002238  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 15973  00223A  0E84               	movlw	low (ASLB_debug1@cmdReadbackPkt+3)
 15974  00223C  6F62               	movwf	memcpy@s1& (0+255),b
 15975  00223E  0E00               	movlw	high (ASLB_debug1@cmdReadbackPkt+3)
 15976  002240  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 15977  002242  0E00               	movlw	0
 15978  002244  6F65               	movwf	(memcpy@n+1)& (0+255),b
 15979  002246  0E03               	movlw	3
 15980  002248  6F64               	movwf	memcpy@n& (0+255),b
 15981  00224A  EC4A  F01C         	call	_memcpy	;wreg free
 15982                           
 15983                           ;HX_ASL_BORON.c: 956: rx_index += 3;
 15984  00224E  0E03               	movlw	3
 15985  002250  0100               	movlb	0	; () banked
 15986  002252  2780               	addwf	ASLB_debug1@rx_index& (0+255),f,b
 15987                           
 15988                           ; BSR set to: 0
 15989                           ;HX_ASL_BORON.c: 957: memcpy(&rxBuffer[rx_index], ramReadbackPkt.data, 3);
 15990  002254  5180               	movf	ASLB_debug1@rx_index& (0+255),w,b
 15991  002256  0D01               	mullw	1
 15992  002258  50F3               	movf	prodl,w,c
 15993  00225A  2572               	addwf	ASLB_debug1@rxBuffer& (0+255),w,b
 15994  00225C  6F60               	movwf	memcpy@d1& (0+255),b
 15995  00225E  50F4               	movf	prodh,w,c
 15996  002260  2173               	addwfc	(ASLB_debug1@rxBuffer+1)& (0+255),w,b
 15997  002262  6F61               	movwf	(memcpy@d1+1)& (0+255),b
 15998  002264  0EA5               	movlw	low (ASLB_debug1@ramReadbackPkt+3)
 15999  002266  6F62               	movwf	memcpy@s1& (0+255),b
 16000  002268  0E01               	movlw	high (ASLB_debug1@ramReadbackPkt+3)
 16001  00226A  6F63               	movwf	(memcpy@s1+1)& (0+255),b
 16002  00226C  0E00               	movlw	0
 16003  00226E  6F65               	movwf	(memcpy@n+1)& (0+255),b
 16004  002270  0E03               	movlw	3
 16005  002272  6F64               	movwf	memcpy@n& (0+255),b
 16006  002274  EC4A  F01C         	call	_memcpy	;wreg free
 16007                           
 16008                           ;HX_ASL_BORON.c: 958: rx_index += 3;
 16009  002278  0E03               	movlw	3
 16010  00227A  0100               	movlb	0	; () banked
 16011  00227C  2780               	addwf	ASLB_debug1@rx_index& (0+255),f,b
 16012                           
 16013                           ;HX_ASL_BORON.c: 959: hx_mainDataIndex += rx_index;
 16014  00227E  5180               	movf	ASLB_debug1@rx_index& (0+255),w,b
 16015  002280  263F               	addwf	_hx_mainDataIndex,f,c
 16016                           
 16017                           ;HX_ASL_BORON.c: 967: }
 16018  002282  0012               	return	
 16019  002284                     l1206:
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;HX_ASL_BORON.c: 968: else
 16023                           ;HX_ASL_BORON.c: 969: {
 16024                           ;HX_ASL_BORON.c: 970: rxBuffer[rx_index++] = 0x41;
 16025                           
 16026                           ; BSR set to: 0
 16027  002284  5180               	movf	ASLB_debug1@rx_index& (0+255),w,b
 16028  002286  0D01               	mullw	1
 16029  002288  50F3               	movf	prodl,w,c
 16030  00228A  2572               	addwf	ASLB_debug1@rxBuffer& (0+255),w,b
 16031  00228C  6ED9               	movwf	fsr2l,c
 16032  00228E  50F4               	movf	prodh,w,c
 16033  002290  2173               	addwfc	(ASLB_debug1@rxBuffer+1)& (0+255),w,b
 16034  002292  6EDA               	movwf	fsr2h,c
 16035  002294  0E41               	movlw	65
 16036  002296  6EDF               	movwf	indf2,c
 16037                           
 16038                           ; BSR set to: 0
 16039  002298  2B80               	incf	ASLB_debug1@rx_index& (0+255),f,b
 16040                           
 16041                           ; BSR set to: 0
 16042                           ;HX_ASL_BORON.c: 971: rxBuffer[rx_index++] = 0xEE;
 16043  00229A  5180               	movf	ASLB_debug1@rx_index& (0+255),w,b
 16044  00229C  0D01               	mullw	1
 16045  00229E  50F3               	movf	prodl,w,c
 16046  0022A0  2572               	addwf	ASLB_debug1@rxBuffer& (0+255),w,b
 16047  0022A2  6ED9               	movwf	fsr2l,c
 16048  0022A4  50F4               	movf	prodh,w,c
 16049  0022A6  2173               	addwfc	(ASLB_debug1@rxBuffer+1)& (0+255),w,b
 16050  0022A8  6EDA               	movwf	fsr2h,c
 16051  0022AA  0EEE               	movlw	238
 16052  0022AC  6EDF               	movwf	indf2,c
 16053  0022AE  2B80               	incf	ASLB_debug1@rx_index& (0+255),f,b
 16054                           
 16055                           ; BSR set to: 0
 16056                           ;HX_ASL_BORON.c: 972: hx_mainDataIndex += rx_index;
 16057  0022B0  5180               	movf	ASLB_debug1@rx_index& (0+255),w,b
 16058  0022B2  263F               	addwf	_hx_mainDataIndex,f,c
 16059  0022B4  0012               	return	
 16060  0022B6                     __end_of_ASLB_debug1:
 16061                           	opt stack 0
 16062                           tblptru	equ	0xFF8
 16063                           tblptrh	equ	0xFF7
 16064                           tblptrl	equ	0xFF6
 16065                           tablat	equ	0xFF5
 16066                           prodh	equ	0xFF4
 16067                           prodl	equ	0xFF3
 16068                           intcon	equ	0xFF2
 16069                           postinc0	equ	0xFEE
 16070                           wreg	equ	0xFE8
 16071                           indf1	equ	0xFE7
 16072                           postinc1	equ	0xFE6
 16073                           postdec1	equ	0xFE5
 16074                           plusw1	equ	0xFE3
 16075                           fsr1h	equ	0xFE2
 16076                           fsr1l	equ	0xFE1
 16077                           indf2	equ	0xFDF
 16078                           postinc2	equ	0xFDE
 16079                           postdec2	equ	0xFDD
 16080                           plusw2	equ	0xFDB
 16081                           fsr2h	equ	0xFDA
 16082                           fsr2l	equ	0xFD9
 16083                           status	equ	0xFD8
 16084                           
 16085 ;; *************** function _streamBoronComm *****************
 16086 ;; Defined at:
 16087 ;;		line 77 in file "Utils.c"
 16088 ;; Parameters:    Size  Location     Type
 16089 ;;  boron_comm_t    1    wreg     unsigned char 
 16090 ;;  pktArr          2   14[BANK0 ] PTR PTR struct TxRxPacke
 16091 ;;		 -> checkAndSendLatchData@stream(48), ASLB_debug1@stream(8), ASLB_AnalogMuxReadingSetup@stream(4), ASLB_HeaterFuncti
      +onality@stream(4), 
 16092 ;;  pktSize         1   16[BANK0 ] unsigned char 
 16093 ;; Auto vars:     Size  Location     Type
 16094 ;;  boron_comm_t    1   17[BANK0 ] unsigned char 
 16095 ;; Return value:  Size  Location     Type
 16096 ;;                  1    wreg      unsigned char 
 16097 ;; Registers used:
 16098 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16099 ;; Tracked objects:
 16100 ;;		On entry : 0/0
 16101 ;;		On exit  : 0/0
 16102 ;;		Unchanged: 0/0
 16103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16104 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16105 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16107 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16108 ;;Total ram usage:        4 bytes
 16109 ;; Hardware stack levels used:    1
 16110 ;; Hardware stack levels required when called:    9
 16111 ;; This function calls:
 16112 ;;		_streamI2C
 16113 ;;		_streamSW
 16114 ;; This function is called by:
 16115 ;;		_ASLB_HeaterFunctionality
 16116 ;;		_ASLB_AnalogMuxReadingSetup
 16117 ;;		_ASLB_debug1
 16118 ;;		_checkAndSendLatchData
 16119 ;; This function uses a non-reentrant model
 16120 ;;
 16121                           
 16122                           	psect	text61
 16123  003CDC                     __ptext61:
 16124                           	opt stack 0
 16125  003CDC                     _streamBoronComm:
 16126                           	opt stack 17
 16127                           
 16128                           ; BSR set to: 0
 16129                           ;incstack = 0
 16130                           ;streamBoronComm@boron_comm_type stored from wreg
 16131  003CDC  0100               	movlb	0	; () banked
 16132  003CDE  6F71               	movwf	streamBoronComm@boron_comm_type& (0+255),b
 16133                           
 16134                           ;Utils.c: 79: if (boron_comm_type == 0)
 16135  003CE0  0100               	movlb	0	; () banked
 16136  003CE2  5171               	movf	streamBoronComm@boron_comm_type& (0+255),w,b
 16137  003CE4  A4D8               	btfss	status,2,c
 16138  003CE6  D009               	goto	l269
 16139                           
 16140                           ; BSR set to: 0
 16141                           ;Utils.c: 80: {
 16142                           ;Utils.c: 81: return streamI2C(pktArr, pktSize);
 16143  003CE8  C06E  F069         	movff	streamBoronComm@pktArr,streamI2C@pktArr
 16144  003CEC  C06F  F06A         	movff	streamBoronComm@pktArr+1,streamI2C@pktArr+1
 16145  003CF0  C070  F06B         	movff	streamBoronComm@pktSize,streamI2C@pktSize
 16146  003CF4  EC0C  F00F         	call	_streamI2C	;wreg free
 16147                           
 16148                           ;Utils.c: 82: }
 16149  003CF8  0012               	return	
 16150  003CFA                     l269:
 16151                           
 16152                           ;Utils.c: 83: else
 16153                           ;Utils.c: 84: {
 16154                           ;Utils.c: 85: return streamSW(pktArr, pktSize);
 16155  003CFA  C06E  F060         	movff	streamBoronComm@pktArr,streamSW@pktArr
 16156  003CFE  C06F  F061         	movff	streamBoronComm@pktArr+1,streamSW@pktArr+1
 16157  003D02  C070  F062         	movff	streamBoronComm@pktSize,streamSW@pktSize
 16158  003D06  EC67  F020         	call	_streamSW	;wreg free
 16159  003D0A  0012               	return	
 16160  003D0C                     __end_of_streamBoronComm:
 16161                           	opt stack 0
 16162                           tblptru	equ	0xFF8
 16163                           tblptrh	equ	0xFF7
 16164                           tblptrl	equ	0xFF6
 16165                           tablat	equ	0xFF5
 16166                           prodh	equ	0xFF4
 16167                           prodl	equ	0xFF3
 16168                           intcon	equ	0xFF2
 16169                           postinc0	equ	0xFEE
 16170                           wreg	equ	0xFE8
 16171                           indf1	equ	0xFE7
 16172                           postinc1	equ	0xFE6
 16173                           postdec1	equ	0xFE5
 16174                           plusw1	equ	0xFE3
 16175                           fsr1h	equ	0xFE2
 16176                           fsr1l	equ	0xFE1
 16177                           indf2	equ	0xFDF
 16178                           postinc2	equ	0xFDE
 16179                           postdec2	equ	0xFDD
 16180                           plusw2	equ	0xFDB
 16181                           fsr2h	equ	0xFDA
 16182                           fsr2l	equ	0xFD9
 16183                           status	equ	0xFD8
 16184                           
 16185 ;; *************** function _streamSW *****************
 16186 ;; Defined at:
 16187 ;;		line 89 in file "Utils.c"
 16188 ;; Parameters:    Size  Location     Type
 16189 ;;  pktArr          2    0[BANK0 ] PTR PTR struct TxRxPacke
 16190 ;;		 -> checkAndSendLatchData@stream(48), ASLB_debug1@stream(8), ASLB_AnalogMuxReadingSetup@stream(4), ASLB_HeaterFuncti
      +onality@stream(4), 
 16191 ;;  pktSize         1    2[BANK0 ] unsigned char 
 16192 ;; Auto vars:     Size  Location     Type
 16193 ;;		None
 16194 ;; Return value:  Size  Location     Type
 16195 ;;                  1    wreg      unsigned char 
 16196 ;; Registers used:
 16197 ;;		wreg
 16198 ;; Tracked objects:
 16199 ;;		On entry : 0/0
 16200 ;;		On exit  : 0/0
 16201 ;;		Unchanged: 0/0
 16202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16203 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16206 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16207 ;;Total ram usage:        3 bytes
 16208 ;; Hardware stack levels used:    1
 16209 ;; Hardware stack levels required when called:    7
 16210 ;; This function calls:
 16211 ;;		Nothing
 16212 ;; This function is called by:
 16213 ;;		_streamBoronComm
 16214 ;; This function uses a non-reentrant model
 16215 ;;
 16216                           
 16217                           	psect	text62
 16218  0040CE                     __ptext62:
 16219                           	opt stack 0
 16220  0040CE                     _streamSW:
 16221                           	opt stack 18
 16222                           
 16223                           ;Utils.c: 93: return 0;
 16224                           
 16225                           ;incstack = 0
 16226  0040CE  0E00               	movlw	0
 16227  0040D0  0012               	return	
 16228  0040D2                     __end_of_streamSW:
 16229                           	opt stack 0
 16230                           tblptru	equ	0xFF8
 16231                           tblptrh	equ	0xFF7
 16232                           tblptrl	equ	0xFF6
 16233                           tablat	equ	0xFF5
 16234                           prodh	equ	0xFF4
 16235                           prodl	equ	0xFF3
 16236                           intcon	equ	0xFF2
 16237                           postinc0	equ	0xFEE
 16238                           wreg	equ	0xFE8
 16239                           indf1	equ	0xFE7
 16240                           postinc1	equ	0xFE6
 16241                           postdec1	equ	0xFE5
 16242                           plusw1	equ	0xFE3
 16243                           fsr1h	equ	0xFE2
 16244                           fsr1l	equ	0xFE1
 16245                           indf2	equ	0xFDF
 16246                           postinc2	equ	0xFDE
 16247                           postdec2	equ	0xFDD
 16248                           plusw2	equ	0xFDB
 16249                           fsr2h	equ	0xFDA
 16250                           fsr2l	equ	0xFD9
 16251                           status	equ	0xFD8
 16252                           
 16253 ;; *************** function _streamI2C *****************
 16254 ;; Defined at:
 16255 ;;		line 96 in file "Utils.c"
 16256 ;; Parameters:    Size  Location     Type
 16257 ;;  pktArr          2    9[BANK0 ] PTR PTR struct TxRxPacke
 16258 ;;		 -> run_I2C@stream(4), checkAndSendLatchData@stream(48), findMaxI2CSpeed@stream(4), ASLB_debug1@stream(8), 
 16259 ;;		 -> ASLB_AnalogMuxReadingSetup@stream(4), ASLB_HeaterFunctionality@stream(4), 
 16260 ;;  pktSize         1   11[BANK0 ] unsigned char 
 16261 ;; Auto vars:     Size  Location     Type
 16262 ;;  trBlock       160    0[BANK1 ] struct .[32]
 16263 ;;  i               1  161[BANK1 ] unsigned char 
 16264 ;;  status          1  160[BANK1 ] enum E11632
 16265 ;; Return value:  Size  Location     Type
 16266 ;;                  1    wreg      unsigned char 
 16267 ;; Registers used:
 16268 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16269 ;; Tracked objects:
 16270 ;;		On entry : 0/0
 16271 ;;		On exit  : 0/0
 16272 ;;		Unchanged: 0/0
 16273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16274 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16275 ;;      Locals:         0       0     162       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16276 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16277 ;;      Totals:         0       5     162       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16278 ;;Total ram usage:      167 bytes
 16279 ;; Hardware stack levels used:    1
 16280 ;; Hardware stack levels required when called:    8
 16281 ;; This function calls:
 16282 ;;		_I2C1_MasterReadTRBBuild
 16283 ;;		_I2C1_MasterTRBInsert
 16284 ;;		_I2C1_MasterWriteTRBBuild
 16285 ;; This function is called by:
 16286 ;;		_streamBoronComm
 16287 ;;		_findMaxI2CSpeed
 16288 ;;		_run_I2C
 16289 ;; This function uses a non-reentrant model
 16290 ;;
 16291                           
 16292                           	psect	text63
 16293  001E18                     __ptext63:
 16294                           	opt stack 0
 16295  001E18                     _streamI2C:
 16296                           	opt stack 21
 16297                           
 16298                           ;Utils.c: 98: I2C1_TRANSACTION_REQUEST_BLOCK trBlock[32];
 16299                           ;Utils.c: 99: I2C1_MESSAGE_STATUS status = I2C1_MESSAGE_PENDING;
 16300                           
 16301                           ;incstack = 0
 16302  001E18  0E02               	movlw	2
 16303  001E1A  0101               	movlb	1	; () banked
 16304  001E1C  6FA0               	movwf	streamI2C@status& (0+255),b
 16305                           
 16306                           ;Utils.c: 100: uint8_t i = 0;
 16307  001E1E  0E00               	movlw	0
 16308  001E20  6FA1               	movwf	streamI2C@i& (0+255),b
 16309                           
 16310                           ;Utils.c: 102: for (i = 0; i < pktSize; i++)
 16311  001E22  0E00               	movlw	0
 16312  001E24  6FA1               	movwf	streamI2C@i& (0+255),b
 16313  001E26  D0A3               	goto	l277
 16314  001E28                     
 16315                           ; BSR set to: 1
 16316                           ;Utils.c: 103: {
 16317                           ;Utils.c: 104: if (pktArr[i]->txOrRx == 0)
 16318                           
 16319                           ; BSR set to: 1
 16320  001E28  51A1               	movf	streamI2C@i& (0+255),w,b
 16321  001E2A  0D02               	mullw	2
 16322  001E2C  50F3               	movf	prodl,w,c
 16323  001E2E  0100               	movlb	0	; () banked
 16324  001E30  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16325  001E32  6ED9               	movwf	fsr2l,c
 16326  001E34  50F4               	movf	prodh,w,c
 16327  001E36  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16328  001E38  6EDA               	movwf	fsr2h,c
 16329  001E3A  CFDE F06C          	movff	postinc2,??_streamI2C
 16330  001E3E  CFDD F06D          	movff	postdec2,??_streamI2C+1
 16331  001E42  C06C  FFD9         	movff	??_streamI2C,fsr2l
 16332  001E46  C06D  FFDA         	movff	??_streamI2C+1,fsr2h
 16333  001E4A  50DF               	movf	indf2,w,c
 16334  001E4C  A4D8               	btfss	status,2,c
 16335  001E4E  D047               	goto	l279
 16336                           
 16337                           ; BSR set to: 0
 16338                           ;Utils.c: 105: {
 16339                           ;Utils.c: 106: I2C1_MasterWriteTRBBuild(&trBlock[i], pktArr[i]->data, pktArr[i]->numOfBy
      +                          tes, pktArr[i]->slaveAddr);
 16340  001E50  0101               	movlb	1	; () banked
 16341  001E52  51A1               	movf	streamI2C@i& (0+255),w,b
 16342  001E54  0D05               	mullw	5
 16343  001E56  0E00               	movlw	low streamI2C@trBlock
 16344  001E58  24F3               	addwf	prodl,w,c
 16345  001E5A  0100               	movlb	0	; () banked
 16346  001E5C  6F60               	movwf	I2C1_MasterWriteTRBBuild@ptrb& (0+255),b
 16347  001E5E  0E01               	movlw	high streamI2C@trBlock
 16348  001E60  20F4               	addwfc	prodh,w,c
 16349  001E62  6F61               	movwf	(I2C1_MasterWriteTRBBuild@ptrb+1)& (0+255),b
 16350  001E64  0101               	movlb	1	; () banked
 16351  001E66  51A1               	movf	streamI2C@i& (0+255),w,b
 16352  001E68  0D02               	mullw	2
 16353  001E6A  50F3               	movf	prodl,w,c
 16354  001E6C  0100               	movlb	0	; () banked
 16355  001E6E  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16356  001E70  6ED9               	movwf	fsr2l,c
 16357  001E72  50F4               	movf	prodh,w,c
 16358  001E74  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16359  001E76  6EDA               	movwf	fsr2h,c
 16360  001E78  CFDE F06C          	movff	postinc2,??_streamI2C
 16361  001E7C  CFDD F06D          	movff	postdec2,??_streamI2C+1
 16362  001E80  0E03               	movlw	3
 16363  001E82  256C               	addwf	??_streamI2C& (0+255),w,b
 16364  001E84  6F62               	movwf	I2C1_MasterWriteTRBBuild@pdata& (0+255),b
 16365  001E86  0E00               	movlw	0
 16366  001E88  216D               	addwfc	(??_streamI2C+1)& (0+255),w,b
 16367  001E8A  6F63               	movwf	(I2C1_MasterWriteTRBBuild@pdata+1)& (0+255),b
 16368  001E8C  0101               	movlb	1	; () banked
 16369  001E8E  51A1               	movf	streamI2C@i& (0+255),w,b
 16370  001E90  0D02               	mullw	2
 16371  001E92  50F3               	movf	prodl,w,c
 16372  001E94  0100               	movlb	0	; () banked
 16373  001E96  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16374  001E98  6ED9               	movwf	fsr2l,c
 16375  001E9A  50F4               	movf	prodh,w,c
 16376  001E9C  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16377  001E9E  6EDA               	movwf	fsr2h,c
 16378  001EA0  EE10 F043          	lfsr	1,67
 16379  001EA4  50DE               	movf	postinc2,w,c
 16380  001EA6  26E1               	addwf	fsr1l,f,c
 16381  001EA8  50DD               	movf	postdec2,w,c
 16382  001EAA  22E2               	addwfc	fsr1h,f,c
 16383  001EAC  50E7               	movf	indf1,w,c
 16384  001EAE  6F64               	movwf	I2C1_MasterWriteTRBBuild@length& (0+255),b
 16385  001EB0  0101               	movlb	1	; () banked
 16386  001EB2  51A1               	movf	streamI2C@i& (0+255),w,b
 16387  001EB4  0D02               	mullw	2
 16388  001EB6  50F3               	movf	prodl,w,c
 16389  001EB8  0100               	movlb	0	; () banked
 16390  001EBA  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16391  001EBC  6ED9               	movwf	fsr2l,c
 16392  001EBE  50F4               	movf	prodh,w,c
 16393  001EC0  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16394  001EC2  6EDA               	movwf	fsr2h,c
 16395  001EC4  EE10 F001          	lfsr	1,1
 16396  001EC8  50DE               	movf	postinc2,w,c
 16397  001ECA  26E1               	addwf	fsr1l,f,c
 16398  001ECC  50DD               	movf	postdec2,w,c
 16399  001ECE  22E2               	addwfc	fsr1h,f,c
 16400  001ED0  CFE6 F065          	movff	postinc1,I2C1_MasterWriteTRBBuild@address
 16401  001ED4  CFE5 F066          	movff	postdec1,I2C1_MasterWriteTRBBuild@address+1
 16402  001ED8  EC91  F01C         	call	_I2C1_MasterWriteTRBBuild	;wreg free
 16403                           
 16404                           ;Utils.c: 107: }
 16405  001EDC  D046               	goto	l280
 16406  001EDE                     l279:
 16407                           
 16408                           ;Utils.c: 108: else
 16409                           ;Utils.c: 109: {
 16410                           ;Utils.c: 110: I2C1_MasterReadTRBBuild(&trBlock[i], pktArr[i]->data, pktArr[i]->numOfByt
      +                          es, pktArr[i]->slaveAddr);
 16411  001EDE  0101               	movlb	1	; () banked
 16412  001EE0  51A1               	movf	streamI2C@i& (0+255),w,b
 16413  001EE2  0D05               	mullw	5
 16414  001EE4  0E00               	movlw	low streamI2C@trBlock
 16415  001EE6  24F3               	addwf	prodl,w,c
 16416  001EE8  0100               	movlb	0	; () banked
 16417  001EEA  6F60               	movwf	I2C1_MasterReadTRBBuild@ptrb& (0+255),b
 16418  001EEC  0E01               	movlw	high streamI2C@trBlock
 16419  001EEE  20F4               	addwfc	prodh,w,c
 16420  001EF0  6F61               	movwf	(I2C1_MasterReadTRBBuild@ptrb+1)& (0+255),b
 16421  001EF2  0101               	movlb	1	; () banked
 16422  001EF4  51A1               	movf	streamI2C@i& (0+255),w,b
 16423  001EF6  0D02               	mullw	2
 16424  001EF8  50F3               	movf	prodl,w,c
 16425  001EFA  0100               	movlb	0	; () banked
 16426  001EFC  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16427  001EFE  6ED9               	movwf	fsr2l,c
 16428  001F00  50F4               	movf	prodh,w,c
 16429  001F02  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16430  001F04  6EDA               	movwf	fsr2h,c
 16431  001F06  CFDE F06C          	movff	postinc2,??_streamI2C
 16432  001F0A  CFDD F06D          	movff	postdec2,??_streamI2C+1
 16433  001F0E  0E03               	movlw	3
 16434  001F10  256C               	addwf	??_streamI2C& (0+255),w,b
 16435  001F12  6F62               	movwf	I2C1_MasterReadTRBBuild@pdata& (0+255),b
 16436  001F14  0E00               	movlw	0
 16437  001F16  216D               	addwfc	(??_streamI2C+1)& (0+255),w,b
 16438  001F18  6F63               	movwf	(I2C1_MasterReadTRBBuild@pdata+1)& (0+255),b
 16439  001F1A  0101               	movlb	1	; () banked
 16440  001F1C  51A1               	movf	streamI2C@i& (0+255),w,b
 16441  001F1E  0D02               	mullw	2
 16442  001F20  50F3               	movf	prodl,w,c
 16443  001F22  0100               	movlb	0	; () banked
 16444  001F24  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16445  001F26  6ED9               	movwf	fsr2l,c
 16446  001F28  50F4               	movf	prodh,w,c
 16447  001F2A  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16448  001F2C  6EDA               	movwf	fsr2h,c
 16449  001F2E  EE10 F043          	lfsr	1,67
 16450  001F32  50DE               	movf	postinc2,w,c
 16451  001F34  26E1               	addwf	fsr1l,f,c
 16452  001F36  50DD               	movf	postdec2,w,c
 16453  001F38  22E2               	addwfc	fsr1h,f,c
 16454  001F3A  50E7               	movf	indf1,w,c
 16455  001F3C  6F64               	movwf	I2C1_MasterReadTRBBuild@length& (0+255),b
 16456  001F3E  0101               	movlb	1	; () banked
 16457  001F40  51A1               	movf	streamI2C@i& (0+255),w,b
 16458  001F42  0D02               	mullw	2
 16459  001F44  50F3               	movf	prodl,w,c
 16460  001F46  0100               	movlb	0	; () banked
 16461  001F48  2569               	addwf	streamI2C@pktArr& (0+255),w,b
 16462  001F4A  6ED9               	movwf	fsr2l,c
 16463  001F4C  50F4               	movf	prodh,w,c
 16464  001F4E  216A               	addwfc	(streamI2C@pktArr+1)& (0+255),w,b
 16465  001F50  6EDA               	movwf	fsr2h,c
 16466  001F52  EE10 F001          	lfsr	1,1
 16467  001F56  50DE               	movf	postinc2,w,c
 16468  001F58  26E1               	addwf	fsr1l,f,c
 16469  001F5A  50DD               	movf	postdec2,w,c
 16470  001F5C  22E2               	addwfc	fsr1h,f,c
 16471  001F5E  CFE6 F065          	movff	postinc1,I2C1_MasterReadTRBBuild@address
 16472  001F62  CFE5 F066          	movff	postdec1,I2C1_MasterReadTRBBuild@address+1
 16473  001F66  EC5F  F01B         	call	_I2C1_MasterReadTRBBuild	;wreg free
 16474  001F6A                     l280:
 16475  001F6A  0101               	movlb	1	; () banked
 16476  001F6C  2BA1               	incf	streamI2C@i& (0+255),f,b
 16477  001F6E                     l277:
 16478                           
 16479                           ; BSR set to: 1
 16480                           
 16481                           ; BSR set to: 1
 16482  001F6E  0100               	movlb	0	; () banked
 16483  001F70  516B               	movf	streamI2C@pktSize& (0+255),w,b
 16484  001F72  0101               	movlb	1	; () banked
 16485  001F74  5DA1               	subwf	streamI2C@i& (0+255),w,b
 16486  001F76  B0D8               	btfsc	status,0,c
 16487  001F78  D013               	goto	l289
 16488  001F7A  D756               	goto	l278
 16489  001F7C                     
 16490                           ; BSR set to: 1
 16491                           ;Utils.c: 115: {
 16492                           ;Utils.c: 117: I2C1_MasterTRBInsert(pktSize, trBlock, &status);
 16493                           
 16494                           ; BSR set to: 1
 16495  001F7C  0E00               	movlw	low streamI2C@trBlock
 16496  001F7E  0100               	movlb	0	; () banked
 16497  001F80  6F60               	movwf	I2C1_MasterTRBInsert@ptrb_list& (0+255),b
 16498  001F82  0E01               	movlw	high streamI2C@trBlock
 16499  001F84  6F61               	movwf	(I2C1_MasterTRBInsert@ptrb_list+1)& (0+255),b
 16500  001F86  0EA0               	movlw	low streamI2C@status
 16501  001F88  6F62               	movwf	I2C1_MasterTRBInsert@pflag& (0+255),b
 16502  001F8A  0E01               	movlw	high streamI2C@status
 16503  001F8C  6F63               	movwf	(I2C1_MasterTRBInsert@pflag+1)& (0+255),b
 16504  001F8E  516B               	movf	streamI2C@pktSize& (0+255),w,b
 16505  001F90  ECEF  F017         	call	_I2C1_MasterTRBInsert
 16506  001F94  0E02               	movlw	2
 16507  001F96  0101               	movlb	1	; () banked
 16508  001F98  19A0               	xorwf	streamI2C@status& (0+255),w,b
 16509  001F9A  A4D8               	btfss	status,2,c
 16510  001F9C  D004               	goto	u6610
 16511  001F9E  D7FA               	goto	l285
 16512  001FA0                     l289:
 16513                           
 16514                           ; BSR set to: 1
 16515                           
 16516                           ; BSR set to: 1
 16517                           
 16518                           ; BSR set to: 1
 16519  001FA0  05A0               	decf	streamI2C@status& (0+255),w,b
 16520  001FA2  A4D8               	btfss	status,2,c
 16521  001FA4  D7EB               	goto	l283
 16522  001FA6                     u6610:
 16523                           
 16524                           ; BSR set to: 1
 16525                           ;Utils.c: 129: }
 16526                           ;Utils.c: 130: }
 16527                           ;Utils.c: 131: return status;
 16528                           
 16529                           ; BSR set to: 1
 16530  001FA6  51A0               	movf	streamI2C@status& (0+255),w,b
 16531  001FA8  0012               	return	
 16532  001FAA                     __end_of_streamI2C:
 16533                           	opt stack 0
 16534                           tblptru	equ	0xFF8
 16535                           tblptrh	equ	0xFF7
 16536                           tblptrl	equ	0xFF6
 16537                           tablat	equ	0xFF5
 16538                           prodh	equ	0xFF4
 16539                           prodl	equ	0xFF3
 16540                           intcon	equ	0xFF2
 16541                           postinc0	equ	0xFEE
 16542                           wreg	equ	0xFE8
 16543                           indf1	equ	0xFE7
 16544                           postinc1	equ	0xFE6
 16545                           postdec1	equ	0xFE5
 16546                           plusw1	equ	0xFE3
 16547                           fsr1h	equ	0xFE2
 16548                           fsr1l	equ	0xFE1
 16549                           indf2	equ	0xFDF
 16550                           postinc2	equ	0xFDE
 16551                           postdec2	equ	0xFDD
 16552                           plusw2	equ	0xFDB
 16553                           fsr2h	equ	0xFDA
 16554                           fsr2l	equ	0xFD9
 16555                           status	equ	0xFD8
 16556                           
 16557 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
 16558 ;; Defined at:
 16559 ;;		line 708 in file "mcc_generated_files/i2c1.c"
 16560 ;; Parameters:    Size  Location     Type
 16561 ;;  ptrb            2    0[BANK0 ] PTR struct .
 16562 ;;		 -> I2C1_MasterWrite@trBlock(5), streamI2C@trBlock(160), 
 16563 ;;  pdata           2    2[BANK0 ] PTR unsigned char 
 16564 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
 16565 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
 16566 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
 16567 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
 16568 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
 16569 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
 16570 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
 16571 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug2@zeros(10), ASLB_debug1@ramReadback
      +Pkt(71), 
 16572 ;;		 -> ASLB_debug1@ramRdPkt(71), ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@o
      +venWrPkt(71), 
 16573 ;;		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(71), ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@
      +cmdReadbackPkt(71), 
 16574 ;;  length          1    4[BANK0 ] unsigned char 
 16575 ;;  address         2    5[BANK0 ] unsigned int 
 16576 ;; Auto vars:     Size  Location     Type
 16577 ;;		None
 16578 ;; Return value:  Size  Location     Type
 16579 ;;                  1    wreg      void 
 16580 ;; Registers used:
 16581 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16582 ;; Tracked objects:
 16583 ;;		On entry : 0/0
 16584 ;;		On exit  : 0/0
 16585 ;;		Unchanged: 0/0
 16586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16587 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16589 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16590 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16591 ;;Total ram usage:        9 bytes
 16592 ;; Hardware stack levels used:    1
 16593 ;; Hardware stack levels required when called:    7
 16594 ;; This function calls:
 16595 ;;		Nothing
 16596 ;; This function is called by:
 16597 ;;		_streamI2C
 16598 ;;		_I2C1_MasterWrite
 16599 ;; This function uses a non-reentrant model
 16600 ;;
 16601                           
 16602                           	psect	text64
 16603  003922                     __ptext64:
 16604                           	opt stack 0
 16605  003922                     _I2C1_MasterWriteTRBBuild:
 16606                           	opt stack 20
 16607                           
 16608                           ;i2c1.c: 714: ptrb->address = address << 1;
 16609                           
 16610                           ; BSR set to: 1
 16611                           ;incstack = 0
 16612  003922  C065  F067         	movff	I2C1_MasterWriteTRBBuild@address,??_I2C1_MasterWriteTRBBuild
 16613  003926  C066  F068         	movff	I2C1_MasterWriteTRBBuild@address+1,??_I2C1_MasterWriteTRBBuild+1
 16614  00392A  90D8               	bcf	status,0,c
 16615  00392C  0100               	movlb	0	; () banked
 16616  00392E  3767               	rlcf	??_I2C1_MasterWriteTRBBuild& (0+255),f,b
 16617  003930  3768               	rlcf	(??_I2C1_MasterWriteTRBBuild+1)& (0+255),f,b
 16618  003932  C060  FFD9         	movff	I2C1_MasterWriteTRBBuild@ptrb,fsr2l
 16619  003936  C061  FFDA         	movff	I2C1_MasterWriteTRBBuild@ptrb+1,fsr2h
 16620  00393A  C067  FFDE         	movff	??_I2C1_MasterWriteTRBBuild,postinc2
 16621  00393E  C068  FFDD         	movff	??_I2C1_MasterWriteTRBBuild+1,postdec2
 16622                           
 16623                           ; BSR set to: 0
 16624                           ;i2c1.c: 715: ptrb->length = length;
 16625  003942  EE20 F002          	lfsr	2,2
 16626  003946  5160               	movf	I2C1_MasterWriteTRBBuild@ptrb& (0+255),w,b
 16627  003948  26D9               	addwf	fsr2l,f,c
 16628  00394A  5161               	movf	(I2C1_MasterWriteTRBBuild@ptrb+1)& (0+255),w,b
 16629  00394C  22DA               	addwfc	fsr2h,f,c
 16630  00394E  C064  FFDF         	movff	I2C1_MasterWriteTRBBuild@length,indf2
 16631                           
 16632                           ; BSR set to: 0
 16633                           ;i2c1.c: 716: ptrb->pbuffer = pdata;
 16634  003952  EE20 F003          	lfsr	2,3
 16635  003956  5160               	movf	I2C1_MasterWriteTRBBuild@ptrb& (0+255),w,b
 16636  003958  26D9               	addwf	fsr2l,f,c
 16637  00395A  5161               	movf	(I2C1_MasterWriteTRBBuild@ptrb+1)& (0+255),w,b
 16638  00395C  22DA               	addwfc	fsr2h,f,c
 16639  00395E  C062  FFDE         	movff	I2C1_MasterWriteTRBBuild@pdata,postinc2
 16640  003962  C063  FFDD         	movff	I2C1_MasterWriteTRBBuild@pdata+1,postdec2
 16641                           
 16642                           ; BSR set to: 0
 16643  003966  0012               	return		;funcret
 16644  003968                     __end_of_I2C1_MasterWriteTRBBuild:
 16645                           	opt stack 0
 16646                           tblptru	equ	0xFF8
 16647                           tblptrh	equ	0xFF7
 16648                           tblptrl	equ	0xFF6
 16649                           tablat	equ	0xFF5
 16650                           prodh	equ	0xFF4
 16651                           prodl	equ	0xFF3
 16652                           intcon	equ	0xFF2
 16653                           postinc0	equ	0xFEE
 16654                           wreg	equ	0xFE8
 16655                           indf1	equ	0xFE7
 16656                           postinc1	equ	0xFE6
 16657                           postdec1	equ	0xFE5
 16658                           plusw1	equ	0xFE3
 16659                           fsr1h	equ	0xFE2
 16660                           fsr1l	equ	0xFE1
 16661                           indf2	equ	0xFDF
 16662                           postinc2	equ	0xFDE
 16663                           postdec2	equ	0xFDD
 16664                           plusw2	equ	0xFDB
 16665                           fsr2h	equ	0xFDA
 16666                           fsr2l	equ	0xFD9
 16667                           status	equ	0xFD8
 16668                           
 16669 ;; *************** function _I2C1_MasterTRBInsert *****************
 16670 ;; Defined at:
 16671 ;;		line 642 in file "mcc_generated_files/i2c1.c"
 16672 ;; Parameters:    Size  Location     Type
 16673 ;;  count           1    wreg     unsigned char 
 16674 ;;  ptrb_list       2    0[BANK0 ] PTR struct .
 16675 ;;		 -> I2C1_MasterRead@trBlock(5), I2C1_MasterWrite@trBlock(5), streamI2C@trBlock(160), 
 16676 ;;  pflag           2    2[BANK0 ] PTR enum E11632
 16677 ;;		 -> streamI2C@status(1), readI2C@status(1), writeI2C@status(1), 
 16678 ;; Auto vars:     Size  Location     Type
 16679 ;;  count           1    5[BANK0 ] unsigned char 
 16680 ;; Return value:  Size  Location     Type
 16681 ;;                  1    wreg      void 
 16682 ;; Registers used:
 16683 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16684 ;; Tracked objects:
 16685 ;;		On entry : 0/0
 16686 ;;		On exit  : 0/0
 16687 ;;		Unchanged: 0/0
 16688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16689 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16690 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16692 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16693 ;;Total ram usage:        6 bytes
 16694 ;; Hardware stack levels used:    1
 16695 ;; Hardware stack levels required when called:    7
 16696 ;; This function calls:
 16697 ;;		Nothing
 16698 ;; This function is called by:
 16699 ;;		_streamI2C
 16700 ;;		_I2C1_MasterWrite
 16701 ;;		_I2C1_MasterRead
 16702 ;; This function uses a non-reentrant model
 16703 ;;
 16704                           
 16705                           	psect	text65
 16706  002FDE                     __ptext65:
 16707                           	opt stack 0
 16708  002FDE                     _I2C1_MasterTRBInsert:
 16709                           	opt stack 20
 16710                           
 16711                           ; BSR set to: 0
 16712                           ;incstack = 0
 16713                           ;I2C1_MasterTRBInsert@count stored from wreg
 16714  002FDE  0100               	movlb	0	; () banked
 16715  002FE0  6F65               	movwf	I2C1_MasterTRBInsert@count& (0+255),b
 16716                           
 16717                           ;i2c1.c: 649: if (i2c1_object.trStatus.s.full != 1)
 16718  002FE2  0102               	movlb	2	; () banked
 16719  002FE4  B1DF               	btfsc	(_i2c1_object+4)& (0+255),0,b
 16720  002FE6  D039               	goto	l1501
 16721                           
 16722                           ; BSR set to: 2
 16723                           ;i2c1.c: 650: {
 16724                           ;i2c1.c: 651: *pflag = I2C1_MESSAGE_PENDING;
 16725  002FE8  C062  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
 16726  002FEC  C063  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
 16727  002FF0  0E02               	movlw	2
 16728  002FF2  6EDF               	movwf	indf2,c
 16729                           
 16730                           ; BSR set to: 2
 16731                           ;i2c1.c: 653: i2c1_object.pTrTail->ptrb_list = ptrb_list;
 16732  002FF4  EE20 F001          	lfsr	2,1
 16733  002FF8  51DB               	movf	_i2c1_object& (0+255),w,b
 16734  002FFA  26D9               	addwf	fsr2l,f,c
 16735  002FFC  51DC               	movf	(_i2c1_object+1)& (0+255),w,b
 16736  002FFE  22DA               	addwfc	fsr2h,f,c
 16737  003000  C060  FFDE         	movff	I2C1_MasterTRBInsert@ptrb_list,postinc2
 16738  003004  C061  FFDD         	movff	I2C1_MasterTRBInsert@ptrb_list+1,postdec2
 16739                           
 16740                           ; BSR set to: 2
 16741                           ;i2c1.c: 654: i2c1_object.pTrTail->count = count;
 16742  003008  C2DB  FFD9         	movff	_i2c1_object,fsr2l
 16743  00300C  C2DC  FFDA         	movff	_i2c1_object+1,fsr2h
 16744  003010  C065  FFDF         	movff	I2C1_MasterTRBInsert@count,indf2
 16745                           
 16746                           ; BSR set to: 2
 16747                           ;i2c1.c: 655: i2c1_object.pTrTail->pTrFlag = pflag;
 16748  003014  EE20 F003          	lfsr	2,3
 16749  003018  51DB               	movf	_i2c1_object& (0+255),w,b
 16750  00301A  26D9               	addwf	fsr2l,f,c
 16751  00301C  51DC               	movf	(_i2c1_object+1)& (0+255),w,b
 16752  00301E  22DA               	addwfc	fsr2h,f,c
 16753  003020  C062  FFDE         	movff	I2C1_MasterTRBInsert@pflag,postinc2
 16754  003024  C063  FFDD         	movff	I2C1_MasterTRBInsert@pflag+1,postdec2
 16755                           
 16756                           ; BSR set to: 2
 16757                           ;i2c1.c: 656: i2c1_object.pTrTail++;
 16758  003028  0E05               	movlw	5
 16759  00302A  27DB               	addwf	_i2c1_object& (0+255),f,b
 16760  00302C  0E00               	movlw	0
 16761  00302E  23DC               	addwfc	(_i2c1_object+1)& (0+255),f,b
 16762                           
 16763                           ; BSR set to: 2
 16764                           ;i2c1.c: 659: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
 16765  003030  0EFB               	movlw	low (_i2c1_tr_queue+5)
 16766  003032  19DB               	xorwf	_i2c1_object& (0+255),w,b
 16767  003034  E108               	bnz	l9523
 16768  003036  0E03               	movlw	high (_i2c1_tr_queue+5)
 16769  003038  19DC               	xorwf	(_i2c1_object+1)& (0+255),w,b
 16770  00303A  A4D8               	btfss	status,2,c
 16771  00303C  D004               	goto	l1502
 16772                           
 16773                           ; BSR set to: 2
 16774                           ;i2c1.c: 660: {
 16775                           ;i2c1.c: 662: i2c1_object.pTrTail = i2c1_tr_queue;
 16776  00303E  0EF6               	movlw	low _i2c1_tr_queue
 16777  003040  6FDB               	movwf	_i2c1_object& (0+255),b
 16778  003042  0E03               	movlw	high _i2c1_tr_queue
 16779  003044  6FDC               	movwf	(_i2c1_object+1)& (0+255),b
 16780  003046                     l1502:
 16781  003046                     l9523:
 16782                           
 16783                           ; BSR set to: 2
 16784                           ;i2c1.c: 663: }
 16785                           ;i2c1.c: 667: i2c1_object.trStatus.s.empty = 0;
 16786  003046  93DF               	bcf	(_i2c1_object+4)& (0+255),1,b
 16787                           
 16788                           ;i2c1.c: 670: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
 16789  003048  51DB               	movf	_i2c1_object& (0+255),w,b
 16790  00304A  19DD               	xorwf	(_i2c1_object+2)& (0+255),w,b
 16791  00304C  E10C               	bnz	l9529
 16792  00304E  51DC               	movf	(_i2c1_object+1)& (0+255),w,b
 16793  003050  19DE               	xorwf	(_i2c1_object+3)& (0+255),w,b
 16794  003052  A4D8               	btfss	status,2,c
 16795  003054  D008               	goto	l1504
 16796                           
 16797                           ; BSR set to: 2
 16798                           ;i2c1.c: 671: {
 16799                           ;i2c1.c: 673: i2c1_object.trStatus.s.full = 1;
 16800  003056  81DF               	bsf	(_i2c1_object+4)& (0+255),0,b
 16801                           
 16802                           ; BSR set to: 2
 16803                           ;i2c1.c: 674: }
 16804                           ;i2c1.c: 676: }
 16805  003058  D006               	goto	l1504
 16806  00305A                     l1501:
 16807                           
 16808                           ; BSR set to: 2
 16809                           ;i2c1.c: 677: else
 16810                           ;i2c1.c: 678: {
 16811                           ;i2c1.c: 679: *pflag = I2C1_MESSAGE_FAIL;
 16812                           
 16813                           ; BSR set to: 2
 16814  00305A  C062  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
 16815  00305E  C063  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
 16816  003062  0E01               	movlw	1
 16817  003064  6EDF               	movwf	indf2,c
 16818  003066                     l1504:
 16819  003066                     l9529:
 16820                           
 16821                           ; BSR set to: 2
 16822                           ;i2c1.c: 680: }
 16823                           ;i2c1.c: 683: if (*pflag == I2C1_MESSAGE_PENDING)
 16824  003066  C062  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
 16825  00306A  C063  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
 16826  00306E  0E02               	movlw	2
 16827  003070  18DE               	xorwf	postinc2,w,c
 16828  003072  A4D8               	btfss	status,2,c
 16829  003074  0012               	return	
 16830  003076                     u6560:
 16831                           
 16832                           ; BSR set to: 2
 16833                           
 16834                           ; BSR set to: 2
 16835                           
 16836                           ; BSR set to: 2
 16837                           ;i2c1.c: 684: {
 16838                           ;i2c1.c: 685: while(i2c1_state != S_MASTER_IDLE);
 16839  003076  502F               	movf	_i2c1_state,w,c
 16840  003078  A4D8               	btfss	status,2,c
 16841  00307A  D7FD               	goto	u6560
 16842                           
 16843                           ;i2c1.c: 686: {
 16844                           ;i2c1.c: 689: PIR3bits.SSP1IF = 1;
 16845  00307C  010E               	movlb	14	; () banked
 16846  00307E  81CD               	bsf	205,0,b	;volatile
 16847  003080  0012               	return	
 16848  003082                     __end_of_I2C1_MasterTRBInsert:
 16849                           	opt stack 0
 16850                           tblptru	equ	0xFF8
 16851                           tblptrh	equ	0xFF7
 16852                           tblptrl	equ	0xFF6
 16853                           tablat	equ	0xFF5
 16854                           prodh	equ	0xFF4
 16855                           prodl	equ	0xFF3
 16856                           intcon	equ	0xFF2
 16857                           postinc0	equ	0xFEE
 16858                           wreg	equ	0xFE8
 16859                           indf1	equ	0xFE7
 16860                           postinc1	equ	0xFE6
 16861                           postdec1	equ	0xFE5
 16862                           plusw1	equ	0xFE3
 16863                           fsr1h	equ	0xFE2
 16864                           fsr1l	equ	0xFE1
 16865                           indf2	equ	0xFDF
 16866                           postinc2	equ	0xFDE
 16867                           postdec2	equ	0xFDD
 16868                           plusw2	equ	0xFDB
 16869                           fsr2h	equ	0xFDA
 16870                           fsr2l	equ	0xFD9
 16871                           status	equ	0xFD8
 16872                           
 16873 ;; *************** function _I2C1_MasterReadTRBBuild *****************
 16874 ;; Defined at:
 16875 ;;		line 695 in file "mcc_generated_files/i2c1.c"
 16876 ;; Parameters:    Size  Location     Type
 16877 ;;  ptrb            2    0[BANK0 ] PTR struct .
 16878 ;;		 -> I2C1_MasterRead@trBlock(5), streamI2C@trBlock(160), 
 16879 ;;  pdata           2    2[BANK0 ] PTR unsigned char 
 16880 ;;		 -> run_I2C@rxPkt(71), run_I2C@txPkt(71), checkAndSendLatchData@readback_clock_select_pkt(71), checkAndSendLatchData
      +@clock_select_pkt(71), 
 16881 ;;		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), checkAndSendLat
      +chData@readback_adc_mux_pkt(71), checkAndSendLatchData@adc_mux_pkt(71), 
 16882 ;;		 -> checkAndSendLatchData@readback_adc_pkt(71), checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@readback_cm
      +os_pkt(71), checkAndSendLatchData@cmos_pkt(71), 
 16883 ;;		 -> checkAndSendLatchData@readback_bias_pkt(71), checkAndSendLatchData@bias_pkt(71), checkAndSendLatchData@readback_
      +varactor_dac_pkt(71), checkAndSendLatchData@varactor_dac_pkt(71), 
 16884 ;;		 -> checkAndSendLatchData@readback_heat_dac_pkt(71), checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@r
      +eadback_oven_pkt(71), checkAndSendLatchData@oven_pkt(71), 
 16885 ;;		 -> checkAndSendLatchData@readback_analog_pkt(71), checkAndSendLatchData@analog_pkt(71), checkAndSendLatchData@readb
      +ack_osc2_pkt(71), checkAndSendLatchData@osc2_pkt(71), 
 16886 ;;		 -> checkAndSendLatchData@readback_osc1_pkt(71), checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@readback_
      +osc0_pkt(71), checkAndSendLatchData@osc0_pkt(71), 
 16887 ;;		 -> findMaxI2CSpeed@cmdReadbackPkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@ra
      +mRdPkt(71), 
 16888 ;;		 -> ASLB_debug1@cmdReadbackPkt(71), ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_AnalogM
      +uxReadingSetup@cmdReadbackPkt(71), 
 16889 ;;		 -> ASLB_HeaterFunctionality@ovenWrPkt(71), ASLB_HeaterFunctionality@cmdReadbackPkt(71), hx_mainData(61), 
 16890 ;;  length          1    4[BANK0 ] unsigned char 
 16891 ;;  address         2    5[BANK0 ] unsigned int 
 16892 ;; Auto vars:     Size  Location     Type
 16893 ;;		None
 16894 ;; Return value:  Size  Location     Type
 16895 ;;                  1    wreg      void 
 16896 ;; Registers used:
 16897 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16898 ;; Tracked objects:
 16899 ;;		On entry : 0/0
 16900 ;;		On exit  : 0/0
 16901 ;;		Unchanged: 0/0
 16902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16903 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16905 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16906 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16907 ;;Total ram usage:        9 bytes
 16908 ;; Hardware stack levels used:    1
 16909 ;; Hardware stack levels required when called:    7
 16910 ;; This function calls:
 16911 ;;		Nothing
 16912 ;; This function is called by:
 16913 ;;		_streamI2C
 16914 ;;		_I2C1_MasterRead
 16915 ;; This function uses a non-reentrant model
 16916 ;;
 16917                           
 16918                           	psect	text66
 16919  0036BE                     __ptext66:
 16920                           	opt stack 0
 16921  0036BE                     _I2C1_MasterReadTRBBuild:
 16922                           	opt stack 21
 16923                           
 16924                           ;i2c1.c: 701: ptrb->address = address << 1;
 16925                           
 16926                           ;incstack = 0
 16927  0036BE  C065  F067         	movff	I2C1_MasterReadTRBBuild@address,??_I2C1_MasterReadTRBBuild
 16928  0036C2  C066  F068         	movff	I2C1_MasterReadTRBBuild@address+1,??_I2C1_MasterReadTRBBuild+1
 16929  0036C6  90D8               	bcf	status,0,c
 16930  0036C8  0100               	movlb	0	; () banked
 16931  0036CA  3767               	rlcf	??_I2C1_MasterReadTRBBuild& (0+255),f,b
 16932  0036CC  3768               	rlcf	(??_I2C1_MasterReadTRBBuild+1)& (0+255),f,b
 16933  0036CE  C060  FFD9         	movff	I2C1_MasterReadTRBBuild@ptrb,fsr2l
 16934  0036D2  C061  FFDA         	movff	I2C1_MasterReadTRBBuild@ptrb+1,fsr2h
 16935  0036D6  C067  FFDE         	movff	??_I2C1_MasterReadTRBBuild,postinc2
 16936  0036DA  C068  FFDD         	movff	??_I2C1_MasterReadTRBBuild+1,postdec2
 16937                           
 16938                           ; BSR set to: 0
 16939                           ;i2c1.c: 703: ptrb->address |= 0x01;
 16940  0036DE  C060  FFD9         	movff	I2C1_MasterReadTRBBuild@ptrb,fsr2l
 16941  0036E2  C061  FFDA         	movff	I2C1_MasterReadTRBBuild@ptrb+1,fsr2h
 16942  0036E6  0E00               	movlw	0
 16943  0036E8  80DB               	bsf	plusw2,0,c
 16944                           
 16945                           ; BSR set to: 0
 16946                           ;i2c1.c: 704: ptrb->length = length;
 16947  0036EA  EE20 F002          	lfsr	2,2
 16948  0036EE  5160               	movf	I2C1_MasterReadTRBBuild@ptrb& (0+255),w,b
 16949  0036F0  26D9               	addwf	fsr2l,f,c
 16950  0036F2  5161               	movf	(I2C1_MasterReadTRBBuild@ptrb+1)& (0+255),w,b
 16951  0036F4  22DA               	addwfc	fsr2h,f,c
 16952  0036F6  C064  FFDF         	movff	I2C1_MasterReadTRBBuild@length,indf2
 16953                           
 16954                           ; BSR set to: 0
 16955                           ;i2c1.c: 705: ptrb->pbuffer = pdata;
 16956  0036FA  EE20 F003          	lfsr	2,3
 16957  0036FE  5160               	movf	I2C1_MasterReadTRBBuild@ptrb& (0+255),w,b
 16958  003700  26D9               	addwf	fsr2l,f,c
 16959  003702  5161               	movf	(I2C1_MasterReadTRBBuild@ptrb+1)& (0+255),w,b
 16960  003704  22DA               	addwfc	fsr2h,f,c
 16961  003706  C062  FFDE         	movff	I2C1_MasterReadTRBBuild@pdata,postinc2
 16962  00370A  C063  FFDD         	movff	I2C1_MasterReadTRBBuild@pdata+1,postdec2
 16963                           
 16964                           ; BSR set to: 0
 16965  00370E  0012               	return		;funcret
 16966  003710                     __end_of_I2C1_MasterReadTRBBuild:
 16967                           	opt stack 0
 16968                           tblptru	equ	0xFF8
 16969                           tblptrh	equ	0xFF7
 16970                           tblptrl	equ	0xFF6
 16971                           tablat	equ	0xFF5
 16972                           prodh	equ	0xFF4
 16973                           prodl	equ	0xFF3
 16974                           intcon	equ	0xFF2
 16975                           postinc0	equ	0xFEE
 16976                           wreg	equ	0xFE8
 16977                           indf1	equ	0xFE7
 16978                           postinc1	equ	0xFE6
 16979                           postdec1	equ	0xFE5
 16980                           plusw1	equ	0xFE3
 16981                           fsr1h	equ	0xFE2
 16982                           fsr1l	equ	0xFE1
 16983                           indf2	equ	0xFDF
 16984                           postinc2	equ	0xFDE
 16985                           postdec2	equ	0xFDD
 16986                           plusw2	equ	0xFDB
 16987                           fsr2h	equ	0xFDA
 16988                           fsr2l	equ	0xFD9
 16989                           status	equ	0xFD8
 16990                           
 16991 ;; *************** function _memcpy *****************
 16992 ;; Defined at:
 16993 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\memcpy.c"
 16994 ;; Parameters:    Size  Location     Type
 16995 ;;  d1              2    0[BANK0 ] PTR void 
 16996 ;;		 -> hx_mainData(61), 
 16997 ;;  s1              2    2[BANK0 ] PTR const void 
 16998 ;;		 -> ramReadbackPkt.data(64), cmdReadbackPkt.data(64), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@cmdReadbackPkt(71)
      +, 
 16999 ;;  n               2    4[BANK0 ] unsigned int 
 17000 ;; Auto vars:     Size  Location     Type
 17001 ;;  s               2    9[BANK0 ] PTR const unsigned char 
 17002 ;;		 -> ramReadbackPkt.data(64), cmdReadbackPkt.data(64), ASLB_debug1@ramReadbackPkt(71), ASLB_debug1@cmdReadbackPkt(71)
      +, 
 17003 ;;  d               2    7[BANK0 ] PTR unsigned char 
 17004 ;;		 -> hx_mainData(61), 
 17005 ;;  tmp             1    6[BANK0 ] unsigned char 
 17006 ;; Return value:  Size  Location     Type
 17007 ;;                  2    0[BANK0 ] PTR void 
 17008 ;; Registers used:
 17009 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17010 ;; Tracked objects:
 17011 ;;		On entry : 0/0
 17012 ;;		On exit  : 0/0
 17013 ;;		Unchanged: 0/0
 17014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17015 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17016 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17018 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17019 ;;Total ram usage:       11 bytes
 17020 ;; Hardware stack levels used:    1
 17021 ;; Hardware stack levels required when called:    7
 17022 ;; This function calls:
 17023 ;;		Nothing
 17024 ;; This function is called by:
 17025 ;;		_ASLB_debug1
 17026 ;; This function uses a non-reentrant model
 17027 ;;
 17028                           
 17029                           	psect	text67
 17030  003894                     __ptext67:
 17031                           	opt stack 0
 17032  003894                     _memcpy:
 17033                           	opt stack 20
 17034                           
 17035                           ; BSR set to: 0
 17036                           ;incstack = 0
 17037  003894  C062  F069         	movff	memcpy@s1,memcpy@s
 17038  003898  C063  F06A         	movff	memcpy@s1+1,memcpy@s+1
 17039  00389C  C060  F067         	movff	memcpy@d1,memcpy@d
 17040  0038A0  C061  F068         	movff	memcpy@d1+1,memcpy@d+1
 17041  0038A4  D011               	goto	l2525
 17042  0038A6                     l10075:
 17043  0038A6  C069  FFD9         	movff	memcpy@s,fsr2l
 17044  0038AA  C06A  FFDA         	movff	memcpy@s+1,fsr2h
 17045  0038AE  50DF               	movf	indf2,w,c
 17046  0038B0  0100               	movlb	0	; () banked
 17047  0038B2  6F66               	movwf	memcpy@tmp& (0+255),b
 17048                           
 17049                           ; BSR set to: 0
 17050  0038B4  4B69               	infsnz	memcpy@s& (0+255),f,b
 17051  0038B6  2B6A               	incf	(memcpy@s+1)& (0+255),f,b
 17052                           
 17053                           ; BSR set to: 0
 17054  0038B8  C067  FFD9         	movff	memcpy@d,fsr2l
 17055  0038BC  C068  FFDA         	movff	memcpy@d+1,fsr2h
 17056  0038C0  C066  FFDF         	movff	memcpy@tmp,indf2
 17057                           
 17058                           ; BSR set to: 0
 17059  0038C4  4B67               	infsnz	memcpy@d& (0+255),f,b
 17060  0038C6  2B68               	incf	(memcpy@d+1)& (0+255),f,b
 17061  0038C8                     l2525:
 17062                           
 17063                           ; BSR set to: 0
 17064  0038C8  0100               	movlb	0	; () banked
 17065  0038CA  0764               	decf	memcpy@n& (0+255),f,b
 17066  0038CC  A0D8               	btfss	status,0,c
 17067  0038CE  0765               	decf	(memcpy@n+1)& (0+255),f,b
 17068  0038D0  2964               	incf	memcpy@n& (0+255),w,b
 17069  0038D2  E1E9               	bnz	l10075
 17070  0038D4  2965               	incf	(memcpy@n+1)& (0+255),w,b
 17071  0038D6  B4D8               	btfsc	status,2,c
 17072  0038D8  0012               	return	
 17073  0038DA  D7E5               	goto	l2526
 17074  0038DC                     __end_of_memcpy:
 17075                           	opt stack 0
 17076                           tblptru	equ	0xFF8
 17077                           tblptrh	equ	0xFF7
 17078                           tblptrl	equ	0xFF6
 17079                           tablat	equ	0xFF5
 17080                           prodh	equ	0xFF4
 17081                           prodl	equ	0xFF3
 17082                           intcon	equ	0xFF2
 17083                           postinc0	equ	0xFEE
 17084                           wreg	equ	0xFE8
 17085                           indf1	equ	0xFE7
 17086                           postinc1	equ	0xFE6
 17087                           postdec1	equ	0xFE5
 17088                           plusw1	equ	0xFE3
 17089                           fsr1h	equ	0xFE2
 17090                           fsr1l	equ	0xFE1
 17091                           indf2	equ	0xFDF
 17092                           postinc2	equ	0xFDE
 17093                           postdec2	equ	0xFDD
 17094                           plusw2	equ	0xFDB
 17095                           fsr2h	equ	0xFDA
 17096                           fsr2l	equ	0xFD9
 17097                           status	equ	0xFD8
 17098                           
 17099 ;; *************** function _calcChecksum *****************
 17100 ;; Defined at:
 17101 ;;		line 180 in file "Utils.c"
 17102 ;; Parameters:    Size  Location     Type
 17103 ;;  data            2    0[BANK0 ] PTR unsigned char 
 17104 ;;		 -> run_I2C@txPkt(71), checkAndSendLatchData@clock_select_pkt(71), checkAndSendLatchData@ocxo_divisor_pkt(71), check
      +AndSendLatchData@adc_mux_pkt(71), 
 17105 ;;		 -> checkAndSendLatchData@adc_pkt(71), checkAndSendLatchData@cmos_pkt(71), checkAndSendLatchData@bias_pkt(71), check
      +AndSendLatchData@varactor_dac_pkt(71), 
 17106 ;;		 -> checkAndSendLatchData@heat_dac_pkt(71), checkAndSendLatchData@oven_pkt(71), checkAndSendLatchData@analog_pkt(71)
      +, checkAndSendLatchData@osc2_pkt(71), 
 17107 ;;		 -> checkAndSendLatchData@osc1_pkt(71), checkAndSendLatchData@osc0_pkt(71), findMaxI2CSpeed@ramWrPkt(71), ASLB_debug
      +1@ramRdPkt(71), 
 17108 ;;		 -> ASLB_debug1@ramWrPkt(71), ASLB_AnalogMuxReadingSetup@ovenWrPkt(71), ASLB_HeaterFunctionality@heatDacWrPkt(71), A
      +SLB_HeaterFunctionality@ovenWrPkt(71), 
 17109 ;;		 -> hx_inData(64), 
 17110 ;;  size            1    2[BANK0 ] unsigned char 
 17111 ;; Auto vars:     Size  Location     Type
 17112 ;;  i               1    3[BANK0 ] unsigned char 
 17113 ;;  temp_checksu    1    4[BANK0 ] unsigned char 
 17114 ;; Return value:  Size  Location     Type
 17115 ;;                  1    wreg      unsigned char 
 17116 ;; Registers used:
 17117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17118 ;; Tracked objects:
 17119 ;;		On entry : 0/0
 17120 ;;		On exit  : 0/0
 17121 ;;		Unchanged: 0/0
 17122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17123 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17124 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17126 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17127 ;;Total ram usage:        5 bytes
 17128 ;; Hardware stack levels used:    1
 17129 ;; Hardware stack levels required when called:    7
 17130 ;; This function calls:
 17131 ;;		Nothing
 17132 ;; This function is called by:
 17133 ;;		_run_ASLBoron
 17134 ;;		_ASLB_debug1
 17135 ;;		_findMaxI2CSpeed
 17136 ;;		_setupLatchPkt
 17137 ;;		_run_I2C
 17138 ;;		_setupLrgWrPkt
 17139 ;; This function uses a non-reentrant model
 17140 ;;
 17141                           
 17142                           	psect	text68
 17143  003D0C                     __ptext68:
 17144                           	opt stack 0
 17145  003D0C                     _calcChecksum:
 17146                           	opt stack 22
 17147                           
 17148                           ;Utils.c: 182: uint8_t temp_checksum = 0;
 17149                           
 17150                           ; BSR set to: 0
 17151                           ;incstack = 0
 17152  003D0C  0E00               	movlw	0
 17153  003D0E  0100               	movlb	0	; () banked
 17154  003D10  6F64               	movwf	calcChecksum@temp_checksum& (0+255),b
 17155                           
 17156                           ;Utils.c: 183: for(uint8_t i = 0; i < size; i++)
 17157  003D12  0E00               	movlw	0
 17158  003D14  6F63               	movwf	calcChecksum@i& (0+255),b
 17159  003D16  D00B               	goto	l293
 17160  003D18                     
 17161                           ; BSR set to: 0
 17162                           ;Utils.c: 184: {
 17163                           ;Utils.c: 185: temp_checksum += data[i];
 17164                           
 17165                           ; BSR set to: 0
 17166  003D18  5163               	movf	calcChecksum@i& (0+255),w,b
 17167  003D1A  0D01               	mullw	1
 17168  003D1C  50F3               	movf	prodl,w,c
 17169  003D1E  2560               	addwf	calcChecksum@data& (0+255),w,b
 17170  003D20  6ED9               	movwf	fsr2l,c
 17171  003D22  50F4               	movf	prodh,w,c
 17172  003D24  2161               	addwfc	(calcChecksum@data+1)& (0+255),w,b
 17173  003D26  6EDA               	movwf	fsr2h,c
 17174  003D28  50DF               	movf	indf2,w,c
 17175  003D2A  2764               	addwf	calcChecksum@temp_checksum& (0+255),f,b
 17176                           
 17177                           ; BSR set to: 0
 17178  003D2C  2B63               	incf	calcChecksum@i& (0+255),f,b
 17179  003D2E                     l293:
 17180                           
 17181                           ; BSR set to: 0
 17182                           
 17183                           ; BSR set to: 0
 17184  003D2E  5162               	movf	calcChecksum@size& (0+255),w,b
 17185  003D30  5D63               	subwf	calcChecksum@i& (0+255),w,b
 17186  003D32  A0D8               	btfss	status,0,c
 17187  003D34  D7F1               	goto	l294
 17188                           
 17189                           ; BSR set to: 0
 17190                           ;Utils.c: 186: }
 17191                           ;Utils.c: 187: temp_checksum = (temp_checksum ^ 0xFF) + 1;
 17192                           
 17193                           ; BSR set to: 0
 17194  003D36  6D64               	negf	calcChecksum@temp_checksum& (0+255),b
 17195                           
 17196                           ; BSR set to: 0
 17197                           ;Utils.c: 188: return temp_checksum;
 17198  003D38  5164               	movf	calcChecksum@temp_checksum& (0+255),w,b
 17199  003D3A  0012               	return	
 17200  003D3C                     __end_of_calcChecksum:
 17201                           	opt stack 0
 17202                           tblptru	equ	0xFF8
 17203                           tblptrh	equ	0xFF7
 17204                           tblptrl	equ	0xFF6
 17205                           tablat	equ	0xFF5
 17206                           prodh	equ	0xFF4
 17207                           prodl	equ	0xFF3
 17208                           intcon	equ	0xFF2
 17209                           postinc0	equ	0xFEE
 17210                           wreg	equ	0xFE8
 17211                           indf1	equ	0xFE7
 17212                           postinc1	equ	0xFE6
 17213                           postdec1	equ	0xFE5
 17214                           plusw1	equ	0xFE3
 17215                           fsr1h	equ	0xFE2
 17216                           fsr1l	equ	0xFE1
 17217                           indf2	equ	0xFDF
 17218                           postinc2	equ	0xFDE
 17219                           postdec2	equ	0xFDD
 17220                           plusw2	equ	0xFDB
 17221                           fsr2h	equ	0xFDA
 17222                           fsr2l	equ	0xFD9
 17223                           status	equ	0xFD8
 17224                           
 17225 ;; *************** function _ASLB_debug0 *****************
 17226 ;; Defined at:
 17227 ;;		line 884 in file "HX_ASL_BORON.c"
 17228 ;; Parameters:    Size  Location     Type
 17229 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 17230 ;;		 -> hx_mainData(61), 
 17231 ;; Auto vars:     Size  Location     Type
 17232 ;;  rx_index        1    2[BANK0 ] unsigned char 
 17233 ;; Return value:  Size  Location     Type
 17234 ;;                  1    wreg      void 
 17235 ;; Registers used:
 17236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17237 ;; Tracked objects:
 17238 ;;		On entry : 0/0
 17239 ;;		On exit  : 0/0
 17240 ;;		Unchanged: 0/0
 17241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17242 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17245 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17246 ;;Total ram usage:        3 bytes
 17247 ;; Hardware stack levels used:    1
 17248 ;; Hardware stack levels required when called:    7
 17249 ;; This function calls:
 17250 ;;		Nothing
 17251 ;; This function is called by:
 17252 ;;		_write_ASLBoron_debug
 17253 ;; This function uses a non-reentrant model
 17254 ;;
 17255                           
 17256                           	psect	text69
 17257  003E8C                     __ptext69:
 17258                           	opt stack 0
 17259  003E8C                     _ASLB_debug0:
 17260                           	opt stack 21
 17261                           
 17262                           ;HX_ASL_BORON.c: 891: uint8_t rx_index = 0;
 17263                           
 17264                           ; BSR set to: 0
 17265                           ;incstack = 0
 17266  003E8C  0E00               	movlw	0
 17267  003E8E  0100               	movlb	0	; () banked
 17268  003E90  6F62               	movwf	ASLB_debug0@rx_index& (0+255),b
 17269                           
 17270                           ; BSR set to: 0
 17271                           ;HX_ASL_BORON.c: 892: rxBuffer[rx_index++] = 0xAA;
 17272  003E92  5162               	movf	ASLB_debug0@rx_index& (0+255),w,b
 17273  003E94  0D01               	mullw	1
 17274  003E96  50F3               	movf	prodl,w,c
 17275  003E98  2560               	addwf	ASLB_debug0@rxBuffer& (0+255),w,b
 17276  003E9A  6ED9               	movwf	fsr2l,c
 17277  003E9C  50F4               	movf	prodh,w,c
 17278  003E9E  2161               	addwfc	(ASLB_debug0@rxBuffer+1)& (0+255),w,b
 17279  003EA0  6EDA               	movwf	fsr2h,c
 17280  003EA2  0EAA               	movlw	170
 17281  003EA4  6EDF               	movwf	indf2,c
 17282                           
 17283                           ; BSR set to: 0
 17284  003EA6  2B62               	incf	ASLB_debug0@rx_index& (0+255),f,b
 17285                           
 17286                           ; BSR set to: 0
 17287                           ;HX_ASL_BORON.c: 893: hx_mainDataIndex += rx_index;
 17288  003EA8  5162               	movf	ASLB_debug0@rx_index& (0+255),w,b
 17289  003EAA  263F               	addwf	_hx_mainDataIndex,f,c
 17290                           
 17291                           ; BSR set to: 0
 17292  003EAC  0012               	return		;funcret
 17293  003EAE                     __end_of_ASLB_debug0:
 17294                           	opt stack 0
 17295                           tblptru	equ	0xFF8
 17296                           tblptrh	equ	0xFF7
 17297                           tblptrl	equ	0xFF6
 17298                           tablat	equ	0xFF5
 17299                           prodh	equ	0xFF4
 17300                           prodl	equ	0xFF3
 17301                           intcon	equ	0xFF2
 17302                           postinc0	equ	0xFEE
 17303                           wreg	equ	0xFE8
 17304                           indf1	equ	0xFE7
 17305                           postinc1	equ	0xFE6
 17306                           postdec1	equ	0xFE5
 17307                           plusw1	equ	0xFE3
 17308                           fsr1h	equ	0xFE2
 17309                           fsr1l	equ	0xFE1
 17310                           indf2	equ	0xFDF
 17311                           postinc2	equ	0xFDE
 17312                           postdec2	equ	0xFDD
 17313                           plusw2	equ	0xFDB
 17314                           fsr2h	equ	0xFDA
 17315                           fsr2l	equ	0xFD9
 17316                           status	equ	0xFD8
 17317                           
 17318 ;; *************** function _write_ASLBoron_cstm_cnfg *****************
 17319 ;; Defined at:
 17320 ;;		line 272 in file "HX_ASL_BORON.c"
 17321 ;; Parameters:    Size  Location     Type
 17322 ;;  cnfg_arr        2    0[BANK0 ] PTR unsigned char 
 17323 ;;		 -> run_ASLBoron@cnfg_arr(256), 
 17324 ;;  cnfg_arr_siz    2    2[BANK0 ] unsigned int 
 17325 ;;  rxBuffer        2    4[BANK0 ] PTR unsigned char 
 17326 ;;		 -> hx_mainData(61), 
 17327 ;; Auto vars:     Size  Location     Type
 17328 ;;		None
 17329 ;; Return value:  Size  Location     Type
 17330 ;;                  1    wreg      void 
 17331 ;; Registers used:
 17332 ;;		None
 17333 ;; Tracked objects:
 17334 ;;		On entry : 0/0
 17335 ;;		On exit  : 0/0
 17336 ;;		Unchanged: 0/0
 17337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17338 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17341 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17342 ;;Total ram usage:        6 bytes
 17343 ;; Hardware stack levels used:    1
 17344 ;; Hardware stack levels required when called:    7
 17345 ;; This function calls:
 17346 ;;		Nothing
 17347 ;; This function is called by:
 17348 ;;		_run_ASLBoron
 17349 ;; This function uses a non-reentrant model
 17350 ;;
 17351                           
 17352                           	psect	text70
 17353  0040E4                     __ptext70:
 17354                           	opt stack 0
 17355  0040E4                     _write_ASLBoron_cstm_cnfg:
 17356                           	opt stack 22
 17357                           
 17358                           ; BSR set to: 0
 17359                           ;incstack = 0
 17360  0040E4  0012               	return		;funcret
 17361  0040E6                     __end_of_write_ASLBoron_cstm_cnfg:
 17362                           	opt stack 0
 17363                           tblptru	equ	0xFF8
 17364                           tblptrh	equ	0xFF7
 17365                           tblptrl	equ	0xFF6
 17366                           tablat	equ	0xFF5
 17367                           prodh	equ	0xFF4
 17368                           prodl	equ	0xFF3
 17369                           intcon	equ	0xFF2
 17370                           postinc0	equ	0xFEE
 17371                           wreg	equ	0xFE8
 17372                           indf1	equ	0xFE7
 17373                           postinc1	equ	0xFE6
 17374                           postdec1	equ	0xFE5
 17375                           plusw1	equ	0xFE3
 17376                           fsr1h	equ	0xFE2
 17377                           fsr1l	equ	0xFE1
 17378                           indf2	equ	0xFDF
 17379                           postinc2	equ	0xFDE
 17380                           postdec2	equ	0xFDD
 17381                           plusw2	equ	0xFDB
 17382                           fsr2h	equ	0xFDA
 17383                           fsr2l	equ	0xFD9
 17384                           status	equ	0xFD8
 17385                           
 17386 ;; *************** function _write_ASLBoron_cnfg *****************
 17387 ;; Defined at:
 17388 ;;		line 251 in file "HX_ASL_BORON.c"
 17389 ;; Parameters:    Size  Location     Type
 17390 ;;  run_cnfg        1    wreg     unsigned char 
 17391 ;;  rxBuffer        2    2[BANK0 ] PTR unsigned char 
 17392 ;;		 -> hx_mainData(61), 
 17393 ;; Auto vars:     Size  Location     Type
 17394 ;;  run_cnfg        1    4[BANK0 ] unsigned char 
 17395 ;; Return value:  Size  Location     Type
 17396 ;;                  1    wreg      void 
 17397 ;; Registers used:
 17398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17399 ;; Tracked objects:
 17400 ;;		On entry : 0/0
 17401 ;;		On exit  : 0/0
 17402 ;;		Unchanged: 0/0
 17403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17404 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17407 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17408 ;;Total ram usage:        3 bytes
 17409 ;; Hardware stack levels used:    1
 17410 ;; Hardware stack levels required when called:    8
 17411 ;; This function calls:
 17412 ;;		_ASLB_cnfg0
 17413 ;;		_ASLB_cnfg1
 17414 ;; This function is called by:
 17415 ;;		_run_ASLBoron
 17416 ;; This function uses a non-reentrant model
 17417 ;;
 17418                           
 17419                           	psect	text71
 17420  00342A                     __ptext71:
 17421                           	opt stack 0
 17422  00342A                     _write_ASLBoron_cnfg:
 17423                           	opt stack 21
 17424                           
 17425                           ;incstack = 0
 17426                           ;write_ASLBoron_cnfg@run_cnfg stored from wreg
 17427  00342A  0100               	movlb	0	; () banked
 17428  00342C  6F64               	movwf	write_ASLBoron_cnfg@run_cnfg& (0+255),b
 17429                           
 17430                           ;HX_ASL_BORON.c: 253: switch (run_cnfg)
 17431  00342E  D029               	goto	l1088
 17432  003430                     
 17433                           ;HX_ASL_BORON.c: 256: ASLB_cnfg0(&rxBuffer[1]);
 17434  003430  0E01               	movlw	1
 17435  003432  0100               	movlb	0	; () banked
 17436  003434  2562               	addwf	write_ASLBoron_cnfg@rxBuffer& (0+255),w,b
 17437  003436  6F60               	movwf	ASLB_cnfg0@rxBuffer& (0+255),b
 17438  003438  0E00               	movlw	0
 17439  00343A  2163               	addwfc	(write_ASLBoron_cnfg@rxBuffer+1)& (0+255),w,b
 17440  00343C  6F61               	movwf	(ASLB_cnfg0@rxBuffer+1)& (0+255),b
 17441  00343E  EC74  F020         	call	_ASLB_cnfg0	;wreg free
 17442                           
 17443                           ;HX_ASL_BORON.c: 257: rxBuffer[0] = 0x10;
 17444  003442  C062  FFD9         	movff	write_ASLBoron_cnfg@rxBuffer,fsr2l
 17445  003446  C063  FFDA         	movff	write_ASLBoron_cnfg@rxBuffer+1,fsr2h
 17446  00344A  0E10               	movlw	16
 17447  00344C  6EDF               	movwf	indf2,c
 17448                           
 17449                           ;HX_ASL_BORON.c: 258: break;
 17450  00344E  0012               	return	
 17451  003450                     
 17452                           ;HX_ASL_BORON.c: 261: ASLB_cnfg1(&rxBuffer[1]);
 17453  003450  0E01               	movlw	1
 17454  003452  0100               	movlb	0	; () banked
 17455  003454  2562               	addwf	write_ASLBoron_cnfg@rxBuffer& (0+255),w,b
 17456  003456  6F60               	movwf	ASLB_cnfg1@rxBuffer& (0+255),b
 17457  003458  0E00               	movlw	0
 17458  00345A  2163               	addwfc	(write_ASLBoron_cnfg@rxBuffer+1)& (0+255),w,b
 17459  00345C  6F61               	movwf	(ASLB_cnfg1@rxBuffer+1)& (0+255),b
 17460  00345E  EC73  F020         	call	_ASLB_cnfg1	;wreg free
 17461                           
 17462                           ;HX_ASL_BORON.c: 262: rxBuffer[0] = 0x10;
 17463  003462  C062  FFD9         	movff	write_ASLBoron_cnfg@rxBuffer,fsr2l
 17464  003466  C063  FFDA         	movff	write_ASLBoron_cnfg@rxBuffer+1,fsr2h
 17465  00346A  0E10               	movlw	16
 17466  00346C  6EDF               	movwf	indf2,c
 17467                           
 17468                           ;HX_ASL_BORON.c: 263: break;
 17469  00346E  0012               	return	
 17470  003470                     
 17471                           ;HX_ASL_BORON.c: 266: hx_state = 0x40;
 17472  003470  0E40               	movlw	64
 17473  003472  6E45               	movwf	_hx_state,c
 17474                           
 17475                           ;HX_ASL_BORON.c: 267: rxBuffer[0] = 0x00;
 17476  003474  C062  FFD9         	movff	write_ASLBoron_cnfg@rxBuffer,fsr2l
 17477  003478  C063  FFDA         	movff	write_ASLBoron_cnfg@rxBuffer+1,fsr2h
 17478  00347C  0E00               	movlw	0
 17479  00347E  6EDF               	movwf	indf2,c
 17480                           
 17481                           ;HX_ASL_BORON.c: 269: }
 17482                           
 17483                           ;HX_ASL_BORON.c: 268: break;
 17484  003480  0012               	return	
 17485  003482                     l1088:
 17486  003482  0100               	movlb	0	; () banked
 17487  003484  5164               	movf	write_ASLBoron_cnfg@run_cnfg& (0+255),w,b
 17488                           
 17489                           ; Switch size 1, requested type "space"
 17490                           ; Number of cases is 2, Range of values is 0 to 1
 17491                           ; switch strategies available:
 17492                           ; Name         Instructions Cycles
 17493                           ; simple_byte            7     4 (average)
 17494                           ;	Chosen strategy is simple_byte
 17495  003486  0A00               	xorlw	0	; case 0
 17496  003488  B4D8               	btfsc	status,2,c
 17497  00348A  D7D2               	goto	l1089
 17498  00348C  0A01               	xorlw	1	; case 1
 17499  00348E  B4D8               	btfsc	status,2,c
 17500  003490  D7DF               	goto	l1091
 17501  003492  D7EE               	goto	l1092
 17502  003494                     __end_of_write_ASLBoron_cnfg:
 17503                           	opt stack 0
 17504                           tblptru	equ	0xFF8
 17505                           tblptrh	equ	0xFF7
 17506                           tblptrl	equ	0xFF6
 17507                           tablat	equ	0xFF5
 17508                           prodh	equ	0xFF4
 17509                           prodl	equ	0xFF3
 17510                           intcon	equ	0xFF2
 17511                           postinc0	equ	0xFEE
 17512                           wreg	equ	0xFE8
 17513                           indf1	equ	0xFE7
 17514                           postinc1	equ	0xFE6
 17515                           postdec1	equ	0xFE5
 17516                           plusw1	equ	0xFE3
 17517                           fsr1h	equ	0xFE2
 17518                           fsr1l	equ	0xFE1
 17519                           indf2	equ	0xFDF
 17520                           postinc2	equ	0xFDE
 17521                           postdec2	equ	0xFDD
 17522                           plusw2	equ	0xFDB
 17523                           fsr2h	equ	0xFDA
 17524                           fsr2l	equ	0xFD9
 17525                           status	equ	0xFD8
 17526                           
 17527 ;; *************** function _ASLB_cnfg1 *****************
 17528 ;; Defined at:
 17529 ;;		line 879 in file "HX_ASL_BORON.c"
 17530 ;; Parameters:    Size  Location     Type
 17531 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 17532 ;;		 -> hx_mainData(61), 
 17533 ;; Auto vars:     Size  Location     Type
 17534 ;;		None
 17535 ;; Return value:  Size  Location     Type
 17536 ;;                  1    wreg      void 
 17537 ;; Registers used:
 17538 ;;		None
 17539 ;; Tracked objects:
 17540 ;;		On entry : 0/0
 17541 ;;		On exit  : 0/0
 17542 ;;		Unchanged: 0/0
 17543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17544 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17547 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17548 ;;Total ram usage:        2 bytes
 17549 ;; Hardware stack levels used:    1
 17550 ;; Hardware stack levels required when called:    7
 17551 ;; This function calls:
 17552 ;;		Nothing
 17553 ;; This function is called by:
 17554 ;;		_write_ASLBoron_cnfg
 17555 ;; This function uses a non-reentrant model
 17556 ;;
 17557                           
 17558                           	psect	text72
 17559  0040E6                     __ptext72:
 17560                           	opt stack 0
 17561  0040E6                     _ASLB_cnfg1:
 17562                           	opt stack 21
 17563                           
 17564                           ;incstack = 0
 17565  0040E6  0012               	return		;funcret
 17566  0040E8                     __end_of_ASLB_cnfg1:
 17567                           	opt stack 0
 17568                           tblptru	equ	0xFF8
 17569                           tblptrh	equ	0xFF7
 17570                           tblptrl	equ	0xFF6
 17571                           tablat	equ	0xFF5
 17572                           prodh	equ	0xFF4
 17573                           prodl	equ	0xFF3
 17574                           intcon	equ	0xFF2
 17575                           postinc0	equ	0xFEE
 17576                           wreg	equ	0xFE8
 17577                           indf1	equ	0xFE7
 17578                           postinc1	equ	0xFE6
 17579                           postdec1	equ	0xFE5
 17580                           plusw1	equ	0xFE3
 17581                           fsr1h	equ	0xFE2
 17582                           fsr1l	equ	0xFE1
 17583                           indf2	equ	0xFDF
 17584                           postinc2	equ	0xFDE
 17585                           postdec2	equ	0xFDD
 17586                           plusw2	equ	0xFDB
 17587                           fsr2h	equ	0xFDA
 17588                           fsr2l	equ	0xFD9
 17589                           status	equ	0xFD8
 17590                           
 17591 ;; *************** function _ASLB_cnfg0 *****************
 17592 ;; Defined at:
 17593 ;;		line 874 in file "HX_ASL_BORON.c"
 17594 ;; Parameters:    Size  Location     Type
 17595 ;;  rxBuffer        2    0[BANK0 ] PTR unsigned char 
 17596 ;;		 -> hx_mainData(61), 
 17597 ;; Auto vars:     Size  Location     Type
 17598 ;;		None
 17599 ;; Return value:  Size  Location     Type
 17600 ;;                  1    wreg      void 
 17601 ;; Registers used:
 17602 ;;		None
 17603 ;; Tracked objects:
 17604 ;;		On entry : 0/0
 17605 ;;		On exit  : 0/0
 17606 ;;		Unchanged: 0/0
 17607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17608 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17611 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17612 ;;Total ram usage:        2 bytes
 17613 ;; Hardware stack levels used:    1
 17614 ;; Hardware stack levels required when called:    7
 17615 ;; This function calls:
 17616 ;;		Nothing
 17617 ;; This function is called by:
 17618 ;;		_write_ASLBoron_cnfg
 17619 ;; This function uses a non-reentrant model
 17620 ;;
 17621                           
 17622                           	psect	text73
 17623  0040E8                     __ptext73:
 17624                           	opt stack 0
 17625  0040E8                     _ASLB_cnfg0:
 17626                           	opt stack 21
 17627                           
 17628                           ;incstack = 0
 17629  0040E8  0012               	return		;funcret
 17630  0040EA                     __end_of_ASLB_cnfg0:
 17631                           	opt stack 0
 17632                           tblptru	equ	0xFF8
 17633                           tblptrh	equ	0xFF7
 17634                           tblptrl	equ	0xFF6
 17635                           tablat	equ	0xFF5
 17636                           prodh	equ	0xFF4
 17637                           prodl	equ	0xFF3
 17638                           intcon	equ	0xFF2
 17639                           postinc0	equ	0xFEE
 17640                           wreg	equ	0xFE8
 17641                           indf1	equ	0xFE7
 17642                           postinc1	equ	0xFE6
 17643                           postdec1	equ	0xFE5
 17644                           plusw1	equ	0xFE3
 17645                           fsr1h	equ	0xFE2
 17646                           fsr1l	equ	0xFE1
 17647                           indf2	equ	0xFDF
 17648                           postinc2	equ	0xFDE
 17649                           postdec2	equ	0xFDD
 17650                           plusw2	equ	0xFDB
 17651                           fsr2h	equ	0xFDA
 17652                           fsr2l	equ	0xFD9
 17653                           status	equ	0xFD8
 17654                           
 17655 ;; *************** function _hxHandleTxUART *****************
 17656 ;; Defined at:
 17657 ;;		line 229 in file "HX_CommInterface.c"
 17658 ;; Parameters:    Size  Location     Type
 17659 ;;		None
 17660 ;; Auto vars:     Size  Location     Type
 17661 ;;  i               2    7[BANK0 ] int 
 17662 ;; Return value:  Size  Location     Type
 17663 ;;                  1    wreg      void 
 17664 ;; Registers used:
 17665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17666 ;; Tracked objects:
 17667 ;;		On entry : 0/0
 17668 ;;		On exit  : 0/0
 17669 ;;		Unchanged: 0/0
 17670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17672 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17673 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17674 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17675 ;;Total ram usage:        5 bytes
 17676 ;; Hardware stack levels used:    1
 17677 ;; Hardware stack levels required when called:    9
 17678 ;; This function calls:
 17679 ;;		_EUSART1_Write
 17680 ;;		_hxFlushOutputBuffer
 17681 ;;		_hxStopTimer
 17682 ;; This function is called by:
 17683 ;;		_main
 17684 ;; This function uses a non-reentrant model
 17685 ;;
 17686                           
 17687                           	psect	text74
 17688  0035B8                     __ptext74:
 17689                           	opt stack 0
 17690  0035B8                     _hxHandleTxUART:
 17691                           	opt stack 21
 17692                           
 17693                           ;HX_CommInterface.c: 231: if (hx_txPacketFlag)
 17694                           
 17695                           ;incstack = 0
 17696  0035B8  5046               	movf	_hx_txPacketFlag,w,c
 17697  0035BA  B4D8               	btfsc	status,2,c
 17698  0035BC  0012               	return	
 17699                           
 17700                           ;HX_CommInterface.c: 232: {
 17701                           ;HX_CommInterface.c: 233: LATBbits.LB5 = 1;
 17702  0035BE  8A84               	bsf	3972,5,c	;volatile
 17703                           
 17704                           ;HX_CommInterface.c: 234: for (int i = 0; i < hx_outDataIndex; i++)
 17705  0035C0  0E00               	movlw	0
 17706  0035C2  0100               	movlb	0	; () banked
 17707  0035C4  6F68               	movwf	(hxHandleTxUART@i+1)& (0+255),b
 17708  0035C6  0E00               	movlw	0
 17709  0035C8  6F67               	movwf	hxHandleTxUART@i& (0+255),b
 17710  0035CA  D00C               	goto	l188
 17711  0035CC                     
 17712                           ; BSR set to: 0
 17713                           ;HX_CommInterface.c: 235: {
 17714                           ;HX_CommInterface.c: 236: EUSART1_Write(hx_outData[i]);
 17715                           
 17716                           ; BSR set to: 0
 17717  0035CC  0E80               	movlw	low _hx_outData
 17718  0035CE  2567               	addwf	hxHandleTxUART@i& (0+255),w,b
 17719  0035D0  6ED9               	movwf	fsr2l,c
 17720  0035D2  0E0B               	movlw	high _hx_outData
 17721  0035D4  2168               	addwfc	(hxHandleTxUART@i+1)& (0+255),w,b
 17722  0035D6  6EDA               	movwf	fsr2h,c
 17723  0035D8  50DF               	movf	indf2,w,c
 17724  0035DA  ECB4  F01C         	call	_EUSART1_Write
 17725  0035DE  0100               	movlb	0	; () banked
 17726  0035E0  4B67               	infsnz	hxHandleTxUART@i& (0+255),f,b
 17727  0035E2  2B68               	incf	(hxHandleTxUART@i+1)& (0+255),f,b
 17728  0035E4                     l188:
 17729                           
 17730                           ; BSR set to: 0
 17731                           
 17732                           ; BSR set to: 0
 17733  0035E4  5040               	movf	_hx_outDataIndex,w,c
 17734  0035E6  6F64               	movwf	??_hxHandleTxUART& (0+255),b
 17735  0035E8  6B65               	clrf	(??_hxHandleTxUART+1)& (0+255),b
 17736  0035EA  5164               	movf	??_hxHandleTxUART& (0+255),w,b
 17737  0035EC  5D67               	subwf	hxHandleTxUART@i& (0+255),w,b
 17738  0035EE  5168               	movf	(hxHandleTxUART@i+1)& (0+255),w,b
 17739  0035F0  0A80               	xorlw	128
 17740  0035F2  6F66               	movwf	(??_hxHandleTxUART+2)& (0+255),b
 17741  0035F4  5165               	movf	(??_hxHandleTxUART+1)& (0+255),w,b
 17742  0035F6  0A80               	xorlw	128
 17743  0035F8  5966               	subwfb	(??_hxHandleTxUART+2)& (0+255),w,b
 17744  0035FA  A0D8               	btfss	status,0,c
 17745  0035FC  D7E7               	goto	l189
 17746  0035FE                     u8240:
 17747                           
 17748                           ; BSR set to: 0
 17749                           
 17750                           ; BSR set to: 0
 17751                           ;HX_CommInterface.c: 237: }
 17752                           ;HX_CommInterface.c: 238: while (PIE3bits.TX1IE == 1);
 17753  0035FE  010E               	movlb	14	; () banked
 17754  003600  B9C5               	btfsc	197,4,b	;volatile
 17755  003602  D7FD               	goto	u8240
 17756                           
 17757                           ; BSR set to: 14
 17758                           ;HX_CommInterface.c: 239: LATBbits.LB5 = 0;
 17759  003604  9A84               	bcf	3972,5,c	;volatile
 17760                           
 17761                           ; BSR set to: 14
 17762                           ;HX_CommInterface.c: 241: hxStopTimer();
 17763  003606  EC0E  F020         	call	_hxStopTimer	;wreg free
 17764                           
 17765                           ;HX_CommInterface.c: 242: hx_txPacketFlag = 0;
 17766  00360A  0E00               	movlw	0
 17767  00360C  6E46               	movwf	_hx_txPacketFlag,c
 17768                           
 17769                           ;HX_CommInterface.c: 243: hxFlushOutputBuffer();
 17770  00360E  ECBF  F01F         	call	_hxFlushOutputBuffer	;wreg free
 17771  003612  0012               	return	
 17772  003614                     __end_of_hxHandleTxUART:
 17773                           	opt stack 0
 17774                           tblptru	equ	0xFF8
 17775                           tblptrh	equ	0xFF7
 17776                           tblptrl	equ	0xFF6
 17777                           tablat	equ	0xFF5
 17778                           prodh	equ	0xFF4
 17779                           prodl	equ	0xFF3
 17780                           intcon	equ	0xFF2
 17781                           postinc0	equ	0xFEE
 17782                           wreg	equ	0xFE8
 17783                           indf1	equ	0xFE7
 17784                           postinc1	equ	0xFE6
 17785                           postdec1	equ	0xFE5
 17786                           plusw1	equ	0xFE3
 17787                           fsr1h	equ	0xFE2
 17788                           fsr1l	equ	0xFE1
 17789                           indf2	equ	0xFDF
 17790                           postinc2	equ	0xFDE
 17791                           postdec2	equ	0xFDD
 17792                           plusw2	equ	0xFDB
 17793                           fsr2h	equ	0xFDA
 17794                           fsr2l	equ	0xFD9
 17795                           status	equ	0xFD8
 17796                           
 17797 ;; *************** function _hxStopTimer *****************
 17798 ;; Defined at:
 17799 ;;		line 270 in file "HX_CommInterface.c"
 17800 ;; Parameters:    Size  Location     Type
 17801 ;;		None
 17802 ;; Auto vars:     Size  Location     Type
 17803 ;;		None
 17804 ;; Return value:  Size  Location     Type
 17805 ;;                  1    wreg      void 
 17806 ;; Registers used:
 17807 ;;		wreg, status,2, cstack
 17808 ;; Tracked objects:
 17809 ;;		On entry : 0/0
 17810 ;;		On exit  : 0/0
 17811 ;;		Unchanged: 0/0
 17812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17817 ;;Total ram usage:        0 bytes
 17818 ;; Hardware stack levels used:    1
 17819 ;; Hardware stack levels required when called:    8
 17820 ;; This function calls:
 17821 ;;		_TMR0_StopTimer
 17822 ;;		_TMR0_Write16bitTimer
 17823 ;; This function is called by:
 17824 ;;		_hxHandleTxUART
 17825 ;; This function uses a non-reentrant model
 17826 ;;
 17827                           
 17828                           	psect	text75
 17829  00401C                     __ptext75:
 17830                           	opt stack 0
 17831  00401C                     _hxStopTimer:
 17832                           	opt stack 21
 17833                           
 17834                           ;HX_CommInterface.c: 272: TMR0_StopTimer();
 17835                           
 17836                           ;incstack = 0
 17837  00401C  EC69  F020         	call	_TMR0_StopTimer	;wreg free
 17838                           
 17839                           ;HX_CommInterface.c: 273: TMR0_Write16bitTimer(0xF63C);
 17840  004020  0EF6               	movlw	246
 17841  004022  0100               	movlb	0	; () banked
 17842  004024  6F61               	movwf	(TMR0_Write16bitTimer@timerVal+1)& (0+255),b
 17843  004026  0E3C               	movlw	60
 17844  004028  6F60               	movwf	TMR0_Write16bitTimer@timerVal& (0+255),b
 17845  00402A  EC39  F020         	call	_TMR0_Write16bitTimer	;wreg free
 17846  00402E  0012               	return		;funcret
 17847  004030                     __end_of_hxStopTimer:
 17848                           	opt stack 0
 17849                           tblptru	equ	0xFF8
 17850                           tblptrh	equ	0xFF7
 17851                           tblptrl	equ	0xFF6
 17852                           tablat	equ	0xFF5
 17853                           prodh	equ	0xFF4
 17854                           prodl	equ	0xFF3
 17855                           intcon	equ	0xFF2
 17856                           postinc0	equ	0xFEE
 17857                           wreg	equ	0xFE8
 17858                           indf1	equ	0xFE7
 17859                           postinc1	equ	0xFE6
 17860                           postdec1	equ	0xFE5
 17861                           plusw1	equ	0xFE3
 17862                           fsr1h	equ	0xFE2
 17863                           fsr1l	equ	0xFE1
 17864                           indf2	equ	0xFDF
 17865                           postinc2	equ	0xFDE
 17866                           postdec2	equ	0xFDD
 17867                           plusw2	equ	0xFDB
 17868                           fsr2h	equ	0xFDA
 17869                           fsr2l	equ	0xFD9
 17870                           status	equ	0xFD8
 17871                           
 17872 ;; *************** function _TMR0_Write16bitTimer *****************
 17873 ;; Defined at:
 17874 ;;		line 119 in file "mcc_generated_files/tmr0.c"
 17875 ;; Parameters:    Size  Location     Type
 17876 ;;  timerVal        2    0[BANK0 ] unsigned int 
 17877 ;; Auto vars:     Size  Location     Type
 17878 ;;		None
 17879 ;; Return value:  Size  Location     Type
 17880 ;;                  1    wreg      void 
 17881 ;; Registers used:
 17882 ;;		wreg, status,2
 17883 ;; Tracked objects:
 17884 ;;		On entry : 0/0
 17885 ;;		On exit  : 0/0
 17886 ;;		Unchanged: 0/0
 17887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17888 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17891 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17892 ;;Total ram usage:        2 bytes
 17893 ;; Hardware stack levels used:    1
 17894 ;; Hardware stack levels required when called:    7
 17895 ;; This function calls:
 17896 ;;		Nothing
 17897 ;; This function is called by:
 17898 ;;		_hxStopTimer
 17899 ;; This function uses a non-reentrant model
 17900 ;;
 17901                           
 17902                           	psect	text76
 17903  004072                     __ptext76:
 17904                           	opt stack 0
 17905  004072                     _TMR0_Write16bitTimer:
 17906                           	opt stack 21
 17907                           
 17908                           ;tmr0.c: 122: TMR0H = timerVal >> 8;
 17909                           
 17910                           ;incstack = 0
 17911  004072  0100               	movlb	0	; () banked
 17912  004074  5161               	movf	(TMR0_Write16bitTimer@timerVal+1)& (0+255),w,b
 17913  004076  6ED4               	movwf	4052,c	;volatile
 17914                           
 17915                           ; BSR set to: 0
 17916                           ;tmr0.c: 123: TMR0L = (uint8_t) timerVal;
 17917  004078  C060  FFD3         	movff	TMR0_Write16bitTimer@timerVal,4051	;volatile
 17918                           
 17919                           ; BSR set to: 0
 17920  00407C  0012               	return		;funcret
 17921  00407E                     __end_of_TMR0_Write16bitTimer:
 17922                           	opt stack 0
 17923                           tblptru	equ	0xFF8
 17924                           tblptrh	equ	0xFF7
 17925                           tblptrl	equ	0xFF6
 17926                           tablat	equ	0xFF5
 17927                           prodh	equ	0xFF4
 17928                           prodl	equ	0xFF3
 17929                           intcon	equ	0xFF2
 17930                           postinc0	equ	0xFEE
 17931                           wreg	equ	0xFE8
 17932                           indf1	equ	0xFE7
 17933                           postinc1	equ	0xFE6
 17934                           postdec1	equ	0xFE5
 17935                           plusw1	equ	0xFE3
 17936                           fsr1h	equ	0xFE2
 17937                           fsr1l	equ	0xFE1
 17938                           indf2	equ	0xFDF
 17939                           postinc2	equ	0xFDE
 17940                           postdec2	equ	0xFDD
 17941                           plusw2	equ	0xFDB
 17942                           fsr2h	equ	0xFDA
 17943                           fsr2l	equ	0xFD9
 17944                           status	equ	0xFD8
 17945                           
 17946 ;; *************** function _TMR0_StopTimer *****************
 17947 ;; Defined at:
 17948 ;;		line 100 in file "mcc_generated_files/tmr0.c"
 17949 ;; Parameters:    Size  Location     Type
 17950 ;;		None
 17951 ;; Auto vars:     Size  Location     Type
 17952 ;;		None
 17953 ;; Return value:  Size  Location     Type
 17954 ;;                  1    wreg      void 
 17955 ;; Registers used:
 17956 ;;		None
 17957 ;; Tracked objects:
 17958 ;;		On entry : 0/0
 17959 ;;		On exit  : 0/0
 17960 ;;		Unchanged: 0/0
 17961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17966 ;;Total ram usage:        0 bytes
 17967 ;; Hardware stack levels used:    1
 17968 ;; Hardware stack levels required when called:    7
 17969 ;; This function calls:
 17970 ;;		Nothing
 17971 ;; This function is called by:
 17972 ;;		_hxStopTimer
 17973 ;; This function uses a non-reentrant model
 17974 ;;
 17975                           
 17976                           	psect	text77
 17977  0040D2                     __ptext77:
 17978                           	opt stack 0
 17979  0040D2                     _TMR0_StopTimer:
 17980                           	opt stack 21
 17981                           
 17982                           ;tmr0.c: 103: T0CON0bits.T0EN = 0;
 17983                           
 17984                           ; BSR set to: 0
 17985                           ;incstack = 0
 17986  0040D2  9ED5               	bcf	4053,7,c	;volatile
 17987  0040D4  0012               	return		;funcret
 17988  0040D6                     __end_of_TMR0_StopTimer:
 17989                           	opt stack 0
 17990                           tblptru	equ	0xFF8
 17991                           tblptrh	equ	0xFF7
 17992                           tblptrl	equ	0xFF6
 17993                           tablat	equ	0xFF5
 17994                           prodh	equ	0xFF4
 17995                           prodl	equ	0xFF3
 17996                           intcon	equ	0xFF2
 17997                           postinc0	equ	0xFEE
 17998                           wreg	equ	0xFE8
 17999                           indf1	equ	0xFE7
 18000                           postinc1	equ	0xFE6
 18001                           postdec1	equ	0xFE5
 18002                           plusw1	equ	0xFE3
 18003                           fsr1h	equ	0xFE2
 18004                           fsr1l	equ	0xFE1
 18005                           indf2	equ	0xFDF
 18006                           postinc2	equ	0xFDE
 18007                           postdec2	equ	0xFDD
 18008                           plusw2	equ	0xFDB
 18009                           fsr2h	equ	0xFDA
 18010                           fsr2l	equ	0xFD9
 18011                           status	equ	0xFD8
 18012                           
 18013 ;; *************** function _EUSART1_Write *****************
 18014 ;; Defined at:
 18015 ;;		line 144 in file "mcc_generated_files/eusart1.c"
 18016 ;; Parameters:    Size  Location     Type
 18017 ;;  txData          1    wreg     unsigned char 
 18018 ;; Auto vars:     Size  Location     Type
 18019 ;;  txData          1    0[BANK0 ] unsigned char 
 18020 ;; Return value:  Size  Location     Type
 18021 ;;                  1    wreg      void 
 18022 ;; Registers used:
 18023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18024 ;; Tracked objects:
 18025 ;;		On entry : 0/0
 18026 ;;		On exit  : 0/0
 18027 ;;		Unchanged: 0/0
 18028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18032 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18033 ;;Total ram usage:        1 bytes
 18034 ;; Hardware stack levels used:    1
 18035 ;; Hardware stack levels required when called:    7
 18036 ;; This function calls:
 18037 ;;		Nothing
 18038 ;; This function is called by:
 18039 ;;		_hxHandleTxUART
 18040 ;; This function uses a non-reentrant model
 18041 ;;
 18042                           
 18043                           	psect	text78
 18044  003968                     __ptext78:
 18045                           	opt stack 0
 18046  003968                     _EUSART1_Write:
 18047                           	opt stack 22
 18048                           
 18049                           ;incstack = 0
 18050                           ;EUSART1_Write@txData stored from wreg
 18051  003968  0100               	movlb	0	; () banked
 18052  00396A  6F60               	movwf	EUSART1_Write@txData& (0+255),b
 18053  00396C                     
 18054                           ;eusart1.c: 147: {
 18055                           
 18056                           ;eusart1.c: 146: while(0 == eusart1TxBufferRemaining)
 18057  00396C  0103               	movlb	3	; () banked
 18058  00396E  51FE               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 18059  003970  B4D8               	btfsc	status,2,c
 18060  003972  D7FC               	goto	l10825
 18061                           
 18062                           ; BSR set to: 3
 18063                           ;eusart1.c: 148: }
 18064                           ;eusart1.c: 150: if(0 == PIE3bits.TX1IE)
 18065  003974  010E               	movlb	14	; () banked
 18066  003976  B9C5               	btfsc	197,4,b	;volatile
 18067  003978  D003               	goto	l1738
 18068                           
 18069                           ; BSR set to: 14
 18070                           ;eusart1.c: 151: {
 18071                           ;eusart1.c: 152: TX1REG = txData;
 18072  00397A  C060  FF9A         	movff	EUSART1_Write@txData,3994	;volatile
 18073                           
 18074                           ;eusart1.c: 153: }
 18075  00397E  D013               	goto	l1739
 18076  003980                     l1738:
 18077                           
 18078                           ; BSR set to: 14
 18079                           ;eusart1.c: 154: else
 18080                           ;eusart1.c: 155: {
 18081                           ;eusart1.c: 156: PIE3bits.TX1IE = 0;
 18082  003980  99C5               	bcf	197,4,b	;volatile
 18083                           
 18084                           ; BSR set to: 14
 18085                           ;eusart1.c: 157: eusart1TxBuffer[eusart1TxHead++] = txData;
 18086  003982  502B               	movf	_eusart1TxHead,w,c
 18087  003984  0D01               	mullw	1
 18088  003986  0E00               	movlw	low _eusart1TxBuffer
 18089  003988  24F3               	addwf	prodl,w,c
 18090  00398A  6ED9               	movwf	fsr2l,c
 18091  00398C  0E0B               	movlw	high _eusart1TxBuffer
 18092  00398E  20F4               	addwfc	prodh,w,c
 18093  003990  6EDA               	movwf	fsr2h,c
 18094  003992  C060  FFDF         	movff	EUSART1_Write@txData,indf2
 18095                           
 18096                           ; BSR set to: 14
 18097  003996  2A2B               	incf	_eusart1TxHead,f,c
 18098                           
 18099                           ; BSR set to: 14
 18100                           ;eusart1.c: 158: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 18101  003998  0E3F               	movlw	63
 18102  00399A  642B               	cpfsgt	_eusart1TxHead,c
 18103  00399C  D002               	goto	l1740
 18104                           
 18105                           ; BSR set to: 14
 18106                           ;eusart1.c: 159: {
 18107                           ;eusart1.c: 160: eusart1TxHead = 0;
 18108  00399E  0E00               	movlw	0
 18109  0039A0  6E2B               	movwf	_eusart1TxHead,c
 18110  0039A2                     l1740:
 18111                           
 18112                           ; BSR set to: 14
 18113                           ;eusart1.c: 162: }
 18114                           ;eusart1.c: 163: eusart1TxBufferRemaining--;
 18115                           
 18116                           ; BSR set to: 14
 18117  0039A2  0103               	movlb	3	; () banked
 18118  0039A4  07FE               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 18119  0039A6                     l1739:
 18120                           
 18121                           ;eusart1.c: 164: }
 18122                           ;eusart1.c: 166: PIE3bits.TX1IE = 1;
 18123                           
 18124                           ; BSR set to: 3
 18125  0039A6  010E               	movlb	14	; () banked
 18126  0039A8  89C5               	bsf	197,4,b	;volatile
 18127                           
 18128                           ; BSR set to: 14
 18129  0039AA  0012               	return		;funcret
 18130  0039AC                     __end_of_EUSART1_Write:
 18131                           	opt stack 0
 18132                           tblptru	equ	0xFF8
 18133                           tblptrh	equ	0xFF7
 18134                           tblptrl	equ	0xFF6
 18135                           tablat	equ	0xFF5
 18136                           prodh	equ	0xFF4
 18137                           prodl	equ	0xFF3
 18138                           intcon	equ	0xFF2
 18139                           postinc0	equ	0xFEE
 18140                           wreg	equ	0xFE8
 18141                           indf1	equ	0xFE7
 18142                           postinc1	equ	0xFE6
 18143                           postdec1	equ	0xFE5
 18144                           plusw1	equ	0xFE3
 18145                           fsr1h	equ	0xFE2
 18146                           fsr1l	equ	0xFE1
 18147                           indf2	equ	0xFDF
 18148                           postinc2	equ	0xFDE
 18149                           postdec2	equ	0xFDD
 18150                           plusw2	equ	0xFDB
 18151                           fsr2h	equ	0xFDA
 18152                           fsr2l	equ	0xFD9
 18153                           status	equ	0xFD8
 18154                           
 18155 ;; *************** function _SYSTEM_Initialize *****************
 18156 ;; Defined at:
 18157 ;;		line 115 in file "mcc_generated_files/mcc.c"
 18158 ;; Parameters:    Size  Location     Type
 18159 ;;		None
 18160 ;; Auto vars:     Size  Location     Type
 18161 ;;		None
 18162 ;; Return value:  Size  Location     Type
 18163 ;;                  1    wreg      void 
 18164 ;; Registers used:
 18165 ;;		wreg, status,2, status,0, cstack
 18166 ;; Tracked objects:
 18167 ;;		On entry : 0/0
 18168 ;;		On exit  : 0/0
 18169 ;;		Unchanged: 0/0
 18170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18175 ;;Total ram usage:        0 bytes
 18176 ;; Hardware stack levels used:    1
 18177 ;; Hardware stack levels required when called:    9
 18178 ;; This function calls:
 18179 ;;		_EUSART1_Initialize
 18180 ;;		_I2C1_Initialize
 18181 ;;		_INTERRUPT_Initialize
 18182 ;;		_OSCILLATOR_Initialize
 18183 ;;		_PIN_MANAGER_Initialize
 18184 ;;		_TMR0_Initialize
 18185 ;; This function is called by:
 18186 ;;		_main
 18187 ;; This function uses a non-reentrant model
 18188 ;;
 18189                           
 18190                           	psect	text79
 18191  003F1A                     __ptext79:
 18192                           	opt stack 0
 18193  003F1A                     _SYSTEM_Initialize:
 18194                           	opt stack 21
 18195                           
 18196                           ;mcc.c: 118: INTERRUPT_Initialize();
 18197                           
 18198                           ; BSR set to: 14
 18199                           ;incstack = 0
 18200  003F1A  EC6B  F020         	call	_INTERRUPT_Initialize	;wreg free
 18201                           
 18202                           ;mcc.c: 119: PIN_MANAGER_Initialize();
 18203  003F1E  ECE6  F016         	call	_PIN_MANAGER_Initialize	;wreg free
 18204                           
 18205                           ;mcc.c: 120: OSCILLATOR_Initialize();
 18206  003F22  ECB3  F01F         	call	_OSCILLATOR_Initialize	;wreg free
 18207                           
 18208                           ;mcc.c: 121: I2C1_Initialize();
 18209  003F26  EC3C  F01E         	call	_I2C1_Initialize	;wreg free
 18210                           
 18211                           ;mcc.c: 122: TMR0_Initialize();
 18212  003F2A  ECD6  F01C         	call	_TMR0_Initialize	;wreg free
 18213                           
 18214                           ;mcc.c: 123: EUSART1_Initialize();
 18215  003F2E  EC32  F01D         	call	_EUSART1_Initialize	;wreg free
 18216  003F32  0012               	return		;funcret
 18217  003F34                     __end_of_SYSTEM_Initialize:
 18218                           	opt stack 0
 18219                           tblptru	equ	0xFF8
 18220                           tblptrh	equ	0xFF7
 18221                           tblptrl	equ	0xFF6
 18222                           tablat	equ	0xFF5
 18223                           prodh	equ	0xFF4
 18224                           prodl	equ	0xFF3
 18225                           intcon	equ	0xFF2
 18226                           postinc0	equ	0xFEE
 18227                           wreg	equ	0xFE8
 18228                           indf1	equ	0xFE7
 18229                           postinc1	equ	0xFE6
 18230                           postdec1	equ	0xFE5
 18231                           plusw1	equ	0xFE3
 18232                           fsr1h	equ	0xFE2
 18233                           fsr1l	equ	0xFE1
 18234                           indf2	equ	0xFDF
 18235                           postinc2	equ	0xFDE
 18236                           postdec2	equ	0xFDD
 18237                           plusw2	equ	0xFDB
 18238                           fsr2h	equ	0xFDA
 18239                           fsr2l	equ	0xFD9
 18240                           status	equ	0xFD8
 18241                           
 18242 ;; *************** function _TMR0_Initialize *****************
 18243 ;; Defined at:
 18244 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 18245 ;; Parameters:    Size  Location     Type
 18246 ;;		None
 18247 ;; Auto vars:     Size  Location     Type
 18248 ;;		None
 18249 ;; Return value:  Size  Location     Type
 18250 ;;                  1    wreg      void 
 18251 ;; Registers used:
 18252 ;;		wreg, status,2, status,0, cstack
 18253 ;; Tracked objects:
 18254 ;;		On entry : 0/0
 18255 ;;		On exit  : 0/0
 18256 ;;		Unchanged: 0/0
 18257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18260 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18261 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18262 ;;Total ram usage:        2 bytes
 18263 ;; Hardware stack levels used:    1
 18264 ;; Hardware stack levels required when called:    8
 18265 ;; This function calls:
 18266 ;;		_TMR0_SetInterruptHandler
 18267 ;; This function is called by:
 18268 ;;		_SYSTEM_Initialize
 18269 ;; This function uses a non-reentrant model
 18270 ;;
 18271                           
 18272                           	psect	text80
 18273  0039AC                     __ptext80:
 18274                           	opt stack 0
 18275  0039AC                     _TMR0_Initialize:
 18276                           	opt stack 21
 18277                           
 18278                           ;tmr0.c: 70: T0CON0 = 0x10;
 18279                           
 18280                           ;incstack = 0
 18281  0039AC  0E10               	movlw	16
 18282  0039AE  6ED5               	movwf	4053,c	;volatile
 18283                           
 18284                           ;tmr0.c: 73: T0CON1 = 0x68;
 18285  0039B0  0E68               	movlw	104
 18286  0039B2  6ED6               	movwf	4054,c	;volatile
 18287                           
 18288                           ;tmr0.c: 76: TMR0H = 0xF6;
 18289  0039B4  0EF6               	movlw	246
 18290  0039B6  6ED4               	movwf	4052,c	;volatile
 18291                           
 18292                           ;tmr0.c: 79: TMR0L = 0x3C;
 18293  0039B8  0E3C               	movlw	60
 18294  0039BA  6ED3               	movwf	4051,c	;volatile
 18295                           
 18296                           ;tmr0.c: 82: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 18297  0039BC  50D3               	movf	4051,w,c	;volatile
 18298  0039BE  CFD4 F063          	movff	4052,??_TMR0_Initialize	;volatile
 18299  0039C2  0100               	movlb	0	; () banked
 18300  0039C4  6B64               	clrf	(??_TMR0_Initialize+1)& (0+255),b
 18301  0039C6  C063  F064         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 18302  0039CA  6B63               	clrf	??_TMR0_Initialize& (0+255),b
 18303  0039CC  1163               	iorwf	??_TMR0_Initialize& (0+255),w,b
 18304  0039CE  6E43               	movwf	_timer0ReloadVal16bit,c	;volatile
 18305  0039D0  5164               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
 18306  0039D2  6E44               	movwf	_timer0ReloadVal16bit+1,c	;volatile
 18307                           
 18308                           ; BSR set to: 0
 18309                           ;tmr0.c: 85: PIR0bits.TMR0IF = 0;
 18310  0039D4  010E               	movlb	14	; () banked
 18311  0039D6  9BCA               	bcf	202,5,b	;volatile
 18312                           
 18313                           ; BSR set to: 14
 18314                           ;tmr0.c: 88: PIE0bits.TMR0IE = 1;
 18315  0039D8  8BC2               	bsf	194,5,b	;volatile
 18316                           
 18317                           ; BSR set to: 14
 18318                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 18319  0039DA  0EC4               	movlw	low _TMR0_DefaultInterruptHandler
 18320  0039DC  0100               	movlb	0	; () banked
 18321  0039DE  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
 18322  0039E0  0E40               	movlw	high _TMR0_DefaultInterruptHandler
 18323  0039E2  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
 18324  0039E4  EC32  F020         	call	_TMR0_SetInterruptHandler	;wreg free
 18325  0039E8  0012               	return		;funcret
 18326  0039EA                     __end_of_TMR0_Initialize:
 18327                           	opt stack 0
 18328                           tblptru	equ	0xFF8
 18329                           tblptrh	equ	0xFF7
 18330                           tblptrl	equ	0xFF6
 18331                           tablat	equ	0xFF5
 18332                           prodh	equ	0xFF4
 18333                           prodl	equ	0xFF3
 18334                           intcon	equ	0xFF2
 18335                           postinc0	equ	0xFEE
 18336                           wreg	equ	0xFE8
 18337                           indf1	equ	0xFE7
 18338                           postinc1	equ	0xFE6
 18339                           postdec1	equ	0xFE5
 18340                           plusw1	equ	0xFE3
 18341                           fsr1h	equ	0xFE2
 18342                           fsr1l	equ	0xFE1
 18343                           indf2	equ	0xFDF
 18344                           postinc2	equ	0xFDE
 18345                           postdec2	equ	0xFDD
 18346                           plusw2	equ	0xFDB
 18347                           fsr2h	equ	0xFDA
 18348                           fsr2l	equ	0xFD9
 18349                           status	equ	0xFD8
 18350                           
 18351 ;; *************** function _TMR0_SetInterruptHandler *****************
 18352 ;; Defined at:
 18353 ;;		line 150 in file "mcc_generated_files/tmr0.c"
 18354 ;; Parameters:    Size  Location     Type
 18355 ;;  InterruptHan    3    0[BANK0 ] PTR void 
 18356 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 18357 ;; Auto vars:     Size  Location     Type
 18358 ;;		None
 18359 ;; Return value:  Size  Location     Type
 18360 ;;                  1    wreg      void 
 18361 ;; Registers used:
 18362 ;;		wreg, status,2, status,0
 18363 ;; Tracked objects:
 18364 ;;		On entry : 0/0
 18365 ;;		On exit  : 0/0
 18366 ;;		Unchanged: 0/0
 18367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18368 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18371 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18372 ;;Total ram usage:        3 bytes
 18373 ;; Hardware stack levels used:    1
 18374 ;; Hardware stack levels required when called:    7
 18375 ;; This function calls:
 18376 ;;		Nothing
 18377 ;; This function is called by:
 18378 ;;		_TMR0_Initialize
 18379 ;; This function uses a non-reentrant model
 18380 ;;
 18381                           
 18382                           	psect	text81
 18383  004064                     __ptext81:
 18384                           	opt stack 0
 18385  004064                     _TMR0_SetInterruptHandler:
 18386                           	opt stack 21
 18387                           
 18388                           ;tmr0.c: 151: TMR0_InterruptHandler = InterruptHandler;
 18389                           
 18390                           ;incstack = 0
 18391  004064  C060  F3FB         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
 18392  004068  C061  F3FC         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
 18393  00406C  C062  F3FD         	movff	TMR0_SetInterruptHandler@InterruptHandler+2,_TMR0_InterruptHandler+2
 18394  004070  0012               	return		;funcret
 18395  004072                     __end_of_TMR0_SetInterruptHandler:
 18396                           	opt stack 0
 18397                           tblptru	equ	0xFF8
 18398                           tblptrh	equ	0xFF7
 18399                           tblptrl	equ	0xFF6
 18400                           tablat	equ	0xFF5
 18401                           prodh	equ	0xFF4
 18402                           prodl	equ	0xFF3
 18403                           intcon	equ	0xFF2
 18404                           postinc0	equ	0xFEE
 18405                           wreg	equ	0xFE8
 18406                           indf1	equ	0xFE7
 18407                           postinc1	equ	0xFE6
 18408                           postdec1	equ	0xFE5
 18409                           plusw1	equ	0xFE3
 18410                           fsr1h	equ	0xFE2
 18411                           fsr1l	equ	0xFE1
 18412                           indf2	equ	0xFDF
 18413                           postinc2	equ	0xFDE
 18414                           postdec2	equ	0xFDD
 18415                           plusw2	equ	0xFDB
 18416                           fsr2h	equ	0xFDA
 18417                           fsr2l	equ	0xFD9
 18418                           status	equ	0xFD8
 18419                           
 18420 ;; *************** function _PIN_MANAGER_Initialize *****************
 18421 ;; Defined at:
 18422 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 18423 ;; Parameters:    Size  Location     Type
 18424 ;;		None
 18425 ;; Auto vars:     Size  Location     Type
 18426 ;;  state           1    0[BANK0 ] unsigned char 
 18427 ;; Return value:  Size  Location     Type
 18428 ;;                  1    wreg      void 
 18429 ;; Registers used:
 18430 ;;		wreg, status,2
 18431 ;; Tracked objects:
 18432 ;;		On entry : 0/0
 18433 ;;		On exit  : 0/0
 18434 ;;		Unchanged: 0/0
 18435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18437 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18439 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18440 ;;Total ram usage:        1 bytes
 18441 ;; Hardware stack levels used:    1
 18442 ;; Hardware stack levels required when called:    7
 18443 ;; This function calls:
 18444 ;;		Nothing
 18445 ;; This function is called by:
 18446 ;;		_SYSTEM_Initialize
 18447 ;; This function uses a non-reentrant model
 18448 ;;
 18449                           
 18450                           	psect	text82
 18451  002DCC                     __ptext82:
 18452                           	opt stack 0
 18453  002DCC                     _PIN_MANAGER_Initialize:
 18454                           	opt stack 22
 18455                           
 18456                           ;pin_manager.c: 56: LATE = 0x00;
 18457                           
 18458                           ;incstack = 0
 18459  002DCC  0E00               	movlw	0
 18460  002DCE  6E87               	movwf	3975,c	;volatile
 18461                           
 18462                           ;pin_manager.c: 57: LATD = 0x00;
 18463  002DD0  0E00               	movlw	0
 18464  002DD2  6E86               	movwf	3974,c	;volatile
 18465                           
 18466                           ;pin_manager.c: 58: LATA = 0x00;
 18467  002DD4  0E00               	movlw	0
 18468  002DD6  6E83               	movwf	3971,c	;volatile
 18469                           
 18470                           ;pin_manager.c: 59: LATB = 0x00;
 18471  002DD8  0E00               	movlw	0
 18472  002DDA  6E84               	movwf	3972,c	;volatile
 18473                           
 18474                           ;pin_manager.c: 60: LATC = 0x00;
 18475  002DDC  0E00               	movlw	0
 18476  002DDE  6E85               	movwf	3973,c	;volatile
 18477                           
 18478                           ;pin_manager.c: 67: TRISE = 0x03;
 18479  002DE0  0E03               	movlw	3
 18480  002DE2  6E8C               	movwf	3980,c	;volatile
 18481                           
 18482                           ;pin_manager.c: 68: TRISA = 0xF0;
 18483  002DE4  0EF0               	movlw	240
 18484  002DE6  6E88               	movwf	3976,c	;volatile
 18485                           
 18486                           ;pin_manager.c: 69: TRISB = 0xD9;
 18487  002DE8  0ED9               	movlw	217
 18488  002DEA  6E89               	movwf	3977,c	;volatile
 18489                           
 18490                           ;pin_manager.c: 70: TRISC = 0xDF;
 18491  002DEC  0EDF               	movlw	223
 18492  002DEE  6E8A               	movwf	3978,c	;volatile
 18493                           
 18494                           ;pin_manager.c: 71: TRISD = 0xFF;
 18495  002DF0  688B               	setf	3979,c	;volatile
 18496                           
 18497                           ;pin_manager.c: 76: ANSELC = 0xF9;
 18498  002DF2  0EF9               	movlw	249
 18499  002DF4  010F               	movlb	15	; () banked
 18500  002DF6  6F21               	movwf	33,b	;volatile
 18501                           
 18502                           ;pin_manager.c: 77: ANSELB = 0xFE;
 18503  002DF8  0EFE               	movlw	254
 18504  002DFA  6F19               	movwf	25,b	;volatile
 18505                           
 18506                           ; BSR set to: 15
 18507                           ;pin_manager.c: 78: ANSELD = 0xFF;
 18508  002DFC  6926               	setf	38,b	;volatile
 18509                           
 18510                           ;pin_manager.c: 79: ANSELE = 0x07;
 18511  002DFE  0E07               	movlw	7
 18512  002E00  6F2E               	movwf	46,b	;volatile
 18513                           
 18514                           ;pin_manager.c: 80: ANSELA = 0x00;
 18515  002E02  0E00               	movlw	0
 18516  002E04  6F11               	movwf	17,b	;volatile
 18517                           
 18518                           ;pin_manager.c: 85: WPUD = 0x00;
 18519  002E06  0E00               	movlw	0
 18520  002E08  6F25               	movwf	37,b	;volatile
 18521                           
 18522                           ;pin_manager.c: 86: WPUE = 0x00;
 18523  002E0A  0E00               	movlw	0
 18524  002E0C  6F2D               	movwf	45,b	;volatile
 18525                           
 18526                           ;pin_manager.c: 87: WPUB = 0x00;
 18527  002E0E  0E00               	movlw	0
 18528  002E10  6F18               	movwf	24,b	;volatile
 18529                           
 18530                           ;pin_manager.c: 88: WPUA = 0x00;
 18531  002E12  0E00               	movlw	0
 18532  002E14  6F10               	movwf	16,b	;volatile
 18533                           
 18534                           ;pin_manager.c: 89: WPUC = 0x00;
 18535  002E16  0E00               	movlw	0
 18536  002E18  6F20               	movwf	32,b	;volatile
 18537                           
 18538                           ;pin_manager.c: 94: ODCONE = 0x00;
 18539  002E1A  0E00               	movlw	0
 18540  002E1C  6F2C               	movwf	44,b	;volatile
 18541                           
 18542                           ;pin_manager.c: 95: ODCONA = 0x00;
 18543  002E1E  0E00               	movlw	0
 18544  002E20  6F0F               	movwf	15,b	;volatile
 18545                           
 18546                           ;pin_manager.c: 96: ODCONB = 0x00;
 18547  002E22  0E00               	movlw	0
 18548  002E24  6F17               	movwf	23,b	;volatile
 18549                           
 18550                           ;pin_manager.c: 97: ODCONC = 0x00;
 18551  002E26  0E00               	movlw	0
 18552  002E28  6F1F               	movwf	31,b	;volatile
 18553                           
 18554                           ;pin_manager.c: 98: ODCOND = 0x00;
 18555  002E2A  0E00               	movlw	0
 18556  002E2C  6F24               	movwf	36,b	;volatile
 18557                           
 18558                           ;pin_manager.c: 105: bool state = GIE;
 18559  002E2E  0E00               	movlw	0
 18560  002E30  BEF2               	btfsc	intcon,7,c	;volatile
 18561  002E32  0E01               	movlw	1
 18562  002E34  0100               	movlb	0	; () banked
 18563  002E36  6F60               	movwf	PIN_MANAGER_Initialize@state& (0+255),b
 18564                           
 18565                           ; BSR set to: 0
 18566                           ;pin_manager.c: 106: GIE = 0;
 18567  002E38  9EF2               	bcf	intcon,7,c	;volatile
 18568                           
 18569                           ;pin_manager.c: 107: PPSLOCK = 0x55;
 18570  002E3A  0E55               	movlw	85
 18571  002E3C  010E               	movlb	14	; () banked
 18572  002E3E  6FA0               	movwf	160,b	;volsfr
 18573                           
 18574                           ;pin_manager.c: 108: PPSLOCK = 0xAA;
 18575  002E40  0EAA               	movlw	170
 18576  002E42  6FA0               	movwf	160,b	;volsfr
 18577                           
 18578                           ; BSR set to: 14
 18579                           ;pin_manager.c: 109: PPSLOCKbits.PPSLOCKED = 0x00;
 18580  002E44  91A0               	bcf	160,0,b	;volsfr
 18581                           
 18582                           ;pin_manager.c: 111: RB1PPS = 0x09;
 18583  002E46  0E09               	movlw	9
 18584  002E48  6FF0               	movwf	240,b	;volatile
 18585                           
 18586                           ;pin_manager.c: 112: RC1PPS = 0x0F;
 18587  002E4A  0E0F               	movlw	15
 18588  002E4C  6FF8               	movwf	248,b	;volatile
 18589                           
 18590                           ;pin_manager.c: 113: RC2PPS = 0x10;
 18591  002E4E  0E10               	movlw	16
 18592  002E50  6FF9               	movwf	249,b	;volatile
 18593                           
 18594                           ; BSR set to: 14
 18595                           ;pin_manager.c: 114: RX1PPSbits.RXPPS = 0x08;
 18596  002E52  91B5               	bcf	181,0,b	;volatile
 18597  002E54  93B5               	bcf	181,1,b	;volatile
 18598  002E56  95B5               	bcf	181,2,b	;volatile
 18599  002E58  87B5               	bsf	181,3,b	;volatile
 18600  002E5A  99B5               	bcf	181,4,b	;volatile
 18601                           
 18602                           ; BSR set to: 14
 18603                           ;pin_manager.c: 115: SSP1CLKPPSbits.SSPCLKPPS = 0x11;
 18604  002E5C  81B7               	bsf	183,0,b	;volatile
 18605  002E5E  93B7               	bcf	183,1,b	;volatile
 18606  002E60  95B7               	bcf	183,2,b	;volatile
 18607  002E62  97B7               	bcf	183,3,b	;volatile
 18608  002E64  89B7               	bsf	183,4,b	;volatile
 18609                           
 18610                           ; BSR set to: 14
 18611                           ;pin_manager.c: 116: SSP1DATPPSbits.SSPDATPPS = 0x12;
 18612  002E66  91B8               	bcf	184,0,b	;volatile
 18613  002E68  83B8               	bsf	184,1,b	;volatile
 18614  002E6A  95B8               	bcf	184,2,b	;volatile
 18615  002E6C  97B8               	bcf	184,3,b	;volatile
 18616  002E6E  89B8               	bsf	184,4,b	;volatile
 18617                           
 18618                           ;pin_manager.c: 118: PPSLOCK = 0x55;
 18619  002E70  0E55               	movlw	85
 18620  002E72  6FA0               	movwf	160,b	;volsfr
 18621                           
 18622                           ;pin_manager.c: 119: PPSLOCK = 0xAA;
 18623  002E74  0EAA               	movlw	170
 18624  002E76  6FA0               	movwf	160,b	;volsfr
 18625                           
 18626                           ; BSR set to: 14
 18627                           ;pin_manager.c: 120: PPSLOCKbits.PPSLOCKED = 0x01;
 18628  002E78  81A0               	bsf	160,0,b	;volsfr
 18629                           
 18630                           ; BSR set to: 14
 18631                           ;pin_manager.c: 122: GIE = state;
 18632  002E7A  0100               	movlb	0	; () banked
 18633  002E7C  A160               	btfss	PIN_MANAGER_Initialize@state& (0+255),0,b
 18634  002E7E  D002               	goto	u8210
 18635  002E80  8EF2               	bsf	intcon,7,c	;volatile
 18636  002E82  0012               	return	
 18637  002E84                     u8210:
 18638  002E84  9EF2               	bcf	intcon,7,c	;volatile
 18639  002E86  0012               	return		;funcret
 18640  002E88                     __end_of_PIN_MANAGER_Initialize:
 18641                           	opt stack 0
 18642                           tblptru	equ	0xFF8
 18643                           tblptrh	equ	0xFF7
 18644                           tblptrl	equ	0xFF6
 18645                           tablat	equ	0xFF5
 18646                           prodh	equ	0xFF4
 18647                           prodl	equ	0xFF3
 18648                           intcon	equ	0xFF2
 18649                           postinc0	equ	0xFEE
 18650                           wreg	equ	0xFE8
 18651                           indf1	equ	0xFE7
 18652                           postinc1	equ	0xFE6
 18653                           postdec1	equ	0xFE5
 18654                           plusw1	equ	0xFE3
 18655                           fsr1h	equ	0xFE2
 18656                           fsr1l	equ	0xFE1
 18657                           indf2	equ	0xFDF
 18658                           postinc2	equ	0xFDE
 18659                           postdec2	equ	0xFDD
 18660                           plusw2	equ	0xFDB
 18661                           fsr2h	equ	0xFDA
 18662                           fsr2l	equ	0xFD9
 18663                           status	equ	0xFD8
 18664                           
 18665 ;; *************** function _OSCILLATOR_Initialize *****************
 18666 ;; Defined at:
 18667 ;;		line 126 in file "mcc_generated_files/mcc.c"
 18668 ;; Parameters:    Size  Location     Type
 18669 ;;		None
 18670 ;; Auto vars:     Size  Location     Type
 18671 ;;		None
 18672 ;; Return value:  Size  Location     Type
 18673 ;;                  1    wreg      void 
 18674 ;; Registers used:
 18675 ;;		wreg, status,2
 18676 ;; Tracked objects:
 18677 ;;		On entry : 0/0
 18678 ;;		On exit  : 0/0
 18679 ;;		Unchanged: 0/0
 18680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18685 ;;Total ram usage:        0 bytes
 18686 ;; Hardware stack levels used:    1
 18687 ;; Hardware stack levels required when called:    7
 18688 ;; This function calls:
 18689 ;;		Nothing
 18690 ;; This function is called by:
 18691 ;;		_SYSTEM_Initialize
 18692 ;; This function uses a non-reentrant model
 18693 ;;
 18694                           
 18695                           	psect	text83
 18696  003F66                     __ptext83:
 18697                           	opt stack 0
 18698  003F66                     _OSCILLATOR_Initialize:
 18699                           	opt stack 22
 18700                           
 18701                           ;mcc.c: 129: OSCCON1 = 0x60;
 18702                           
 18703                           ;incstack = 0
 18704  003F66  0E60               	movlw	96
 18705  003F68  010E               	movlb	14	; () banked
 18706  003F6A  6FD8               	movwf	216,b	;volatile
 18707                           
 18708                           ;mcc.c: 131: OSCCON3 = 0x00;
 18709  003F6C  0E00               	movlw	0
 18710  003F6E  6FDA               	movwf	218,b	;volatile
 18711                           
 18712                           ;mcc.c: 133: OSCEN = 0x00;
 18713  003F70  0E00               	movlw	0
 18714  003F72  6FDC               	movwf	220,b	;volatile
 18715                           
 18716                           ;mcc.c: 135: OSCFRQ = 0x08;
 18717  003F74  0E08               	movlw	8
 18718  003F76  6FDE               	movwf	222,b	;volatile
 18719                           
 18720                           ;mcc.c: 137: OSCTUNE = 0x00;
 18721  003F78  0E00               	movlw	0
 18722  003F7A  6FDD               	movwf	221,b	;volatile
 18723                           
 18724                           ; BSR set to: 14
 18725  003F7C  0012               	return		;funcret
 18726  003F7E                     __end_of_OSCILLATOR_Initialize:
 18727                           	opt stack 0
 18728                           tblptru	equ	0xFF8
 18729                           tblptrh	equ	0xFF7
 18730                           tblptrl	equ	0xFF6
 18731                           tablat	equ	0xFF5
 18732                           prodh	equ	0xFF4
 18733                           prodl	equ	0xFF3
 18734                           intcon	equ	0xFF2
 18735                           postinc0	equ	0xFEE
 18736                           wreg	equ	0xFE8
 18737                           indf1	equ	0xFE7
 18738                           postinc1	equ	0xFE6
 18739                           postdec1	equ	0xFE5
 18740                           plusw1	equ	0xFE3
 18741                           fsr1h	equ	0xFE2
 18742                           fsr1l	equ	0xFE1
 18743                           indf2	equ	0xFDF
 18744                           postinc2	equ	0xFDE
 18745                           postdec2	equ	0xFDD
 18746                           plusw2	equ	0xFDB
 18747                           fsr2h	equ	0xFDA
 18748                           fsr2l	equ	0xFD9
 18749                           status	equ	0xFD8
 18750                           
 18751 ;; *************** function _INTERRUPT_Initialize *****************
 18752 ;; Defined at:
 18753 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 18754 ;; Parameters:    Size  Location     Type
 18755 ;;		None
 18756 ;; Auto vars:     Size  Location     Type
 18757 ;;		None
 18758 ;; Return value:  Size  Location     Type
 18759 ;;                  1    wreg      void 
 18760 ;; Registers used:
 18761 ;;		None
 18762 ;; Tracked objects:
 18763 ;;		On entry : 0/0
 18764 ;;		On exit  : 0/0
 18765 ;;		Unchanged: 0/0
 18766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18771 ;;Total ram usage:        0 bytes
 18772 ;; Hardware stack levels used:    1
 18773 ;; Hardware stack levels required when called:    7
 18774 ;; This function calls:
 18775 ;;		Nothing
 18776 ;; This function is called by:
 18777 ;;		_SYSTEM_Initialize
 18778 ;; This function uses a non-reentrant model
 18779 ;;
 18780                           
 18781                           	psect	text84
 18782  0040D6                     __ptext84:
 18783                           	opt stack 0
 18784  0040D6                     _INTERRUPT_Initialize:
 18785                           	opt stack 22
 18786                           
 18787                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 0;
 18788                           
 18789                           ; BSR set to: 14
 18790                           ;incstack = 0
 18791  0040D6  9AF2               	bcf	intcon,5,c	;volatile
 18792  0040D8  0012               	return		;funcret
 18793  0040DA                     __end_of_INTERRUPT_Initialize:
 18794                           	opt stack 0
 18795                           tblptru	equ	0xFF8
 18796                           tblptrh	equ	0xFF7
 18797                           tblptrl	equ	0xFF6
 18798                           tablat	equ	0xFF5
 18799                           prodh	equ	0xFF4
 18800                           prodl	equ	0xFF3
 18801                           intcon	equ	0xFF2
 18802                           postinc0	equ	0xFEE
 18803                           wreg	equ	0xFE8
 18804                           indf1	equ	0xFE7
 18805                           postinc1	equ	0xFE6
 18806                           postdec1	equ	0xFE5
 18807                           plusw1	equ	0xFE3
 18808                           fsr1h	equ	0xFE2
 18809                           fsr1l	equ	0xFE1
 18810                           indf2	equ	0xFDF
 18811                           postinc2	equ	0xFDE
 18812                           postdec2	equ	0xFDD
 18813                           plusw2	equ	0xFDB
 18814                           fsr2h	equ	0xFDA
 18815                           fsr2l	equ	0xFD9
 18816                           status	equ	0xFD8
 18817                           
 18818 ;; *************** function _I2C1_Initialize *****************
 18819 ;; Defined at:
 18820 ;;		line 198 in file "mcc_generated_files/i2c1.c"
 18821 ;; Parameters:    Size  Location     Type
 18822 ;;		None
 18823 ;; Auto vars:     Size  Location     Type
 18824 ;;		None
 18825 ;; Return value:  Size  Location     Type
 18826 ;;                  1    wreg      void 
 18827 ;; Registers used:
 18828 ;;		wreg, status,2, status,0
 18829 ;; Tracked objects:
 18830 ;;		On entry : 0/0
 18831 ;;		On exit  : 0/0
 18832 ;;		Unchanged: 0/0
 18833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18838 ;;Total ram usage:        0 bytes
 18839 ;; Hardware stack levels used:    1
 18840 ;; Hardware stack levels required when called:    7
 18841 ;; This function calls:
 18842 ;;		Nothing
 18843 ;; This function is called by:
 18844 ;;		_SYSTEM_Initialize
 18845 ;; This function uses a non-reentrant model
 18846 ;;
 18847                           
 18848                           	psect	text85
 18849  003C78                     __ptext85:
 18850                           	opt stack 0
 18851  003C78                     _I2C1_Initialize:
 18852                           	opt stack 22
 18853                           
 18854                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
 18855                           
 18856                           ;incstack = 0
 18857  003C78  0EF6               	movlw	low _i2c1_tr_queue
 18858  003C7A  0102               	movlb	2	; () banked
 18859  003C7C  6FDD               	movwf	(_i2c1_object+2)& (0+255),b
 18860  003C7E  0E03               	movlw	high _i2c1_tr_queue
 18861  003C80  6FDE               	movwf	(_i2c1_object+3)& (0+255),b
 18862                           
 18863                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
 18864  003C82  0EF6               	movlw	low _i2c1_tr_queue
 18865  003C84  6FDB               	movwf	_i2c1_object& (0+255),b
 18866  003C86  0E03               	movlw	high _i2c1_tr_queue
 18867  003C88  6FDC               	movwf	(_i2c1_object+1)& (0+255),b
 18868                           
 18869                           ; BSR set to: 2
 18870                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
 18871  003C8A  83DF               	bsf	(_i2c1_object+4)& (0+255),1,b
 18872                           
 18873                           ; BSR set to: 2
 18874                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
 18875  003C8C  91DF               	bcf	(_i2c1_object+4)& (0+255),0,b
 18876                           
 18877                           ; BSR set to: 2
 18878                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
 18879  003C8E  0E00               	movlw	0
 18880  003C90  6FE1               	movwf	(_i2c1_object+6)& (0+255),b
 18881                           
 18882                           ; BSR set to: 2
 18883                           ;i2c1.c: 208: SSP1STAT = 0x00;
 18884  003C92  0E00               	movlw	0
 18885  003C94  6E95               	movwf	3989,c	;volatile
 18886                           
 18887                           ; BSR set to: 2
 18888                           ;i2c1.c: 210: SSP1CON1 = 0x28;
 18889  003C96  0E28               	movlw	40
 18890  003C98  6E96               	movwf	3990,c	;volatile
 18891                           
 18892                           ; BSR set to: 2
 18893                           ;i2c1.c: 212: SSP1CON3 = 0x00;
 18894  003C9A  0E00               	movlw	0
 18895  003C9C  6E98               	movwf	3992,c	;volatile
 18896                           
 18897                           ; BSR set to: 2
 18898                           ;i2c1.c: 214: SSP1ADD = 0x9F;
 18899  003C9E  0E9F               	movlw	159
 18900  003CA0  6E93               	movwf	3987,c	;volatile
 18901                           
 18902                           ; BSR set to: 2
 18903                           ;i2c1.c: 220: PIR3bits.SSP1IF = 0;
 18904  003CA2  010E               	movlb	14	; () banked
 18905  003CA4  91CD               	bcf	205,0,b	;volatile
 18906                           
 18907                           ; BSR set to: 14
 18908                           ;i2c1.c: 222: PIE3bits.SSP1IE = 1;
 18909  003CA6  81C5               	bsf	197,0,b	;volatile
 18910                           
 18911                           ; BSR set to: 14
 18912  003CA8  0012               	return		;funcret
 18913  003CAA                     __end_of_I2C1_Initialize:
 18914                           	opt stack 0
 18915                           tblptru	equ	0xFF8
 18916                           tblptrh	equ	0xFF7
 18917                           tblptrl	equ	0xFF6
 18918                           tablat	equ	0xFF5
 18919                           prodh	equ	0xFF4
 18920                           prodl	equ	0xFF3
 18921                           intcon	equ	0xFF2
 18922                           postinc0	equ	0xFEE
 18923                           wreg	equ	0xFE8
 18924                           indf1	equ	0xFE7
 18925                           postinc1	equ	0xFE6
 18926                           postdec1	equ	0xFE5
 18927                           plusw1	equ	0xFE3
 18928                           fsr1h	equ	0xFE2
 18929                           fsr1l	equ	0xFE1
 18930                           indf2	equ	0xFDF
 18931                           postinc2	equ	0xFDE
 18932                           postdec2	equ	0xFDD
 18933                           plusw2	equ	0xFDB
 18934                           fsr2h	equ	0xFDA
 18935                           fsr2l	equ	0xFD9
 18936                           status	equ	0xFD8
 18937                           
 18938 ;; *************** function _EUSART1_Initialize *****************
 18939 ;; Defined at:
 18940 ;;		line 76 in file "mcc_generated_files/eusart1.c"
 18941 ;; Parameters:    Size  Location     Type
 18942 ;;		None
 18943 ;; Auto vars:     Size  Location     Type
 18944 ;;		None
 18945 ;; Return value:  Size  Location     Type
 18946 ;;                  1    wreg      void 
 18947 ;; Registers used:
 18948 ;;		wreg, status,2
 18949 ;; Tracked objects:
 18950 ;;		On entry : 0/0
 18951 ;;		On exit  : 0/0
 18952 ;;		Unchanged: 0/0
 18953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18958 ;;Total ram usage:        0 bytes
 18959 ;; Hardware stack levels used:    1
 18960 ;; Hardware stack levels required when called:    7
 18961 ;; This function calls:
 18962 ;;		Nothing
 18963 ;; This function is called by:
 18964 ;;		_SYSTEM_Initialize
 18965 ;; This function uses a non-reentrant model
 18966 ;;
 18967                           
 18968                           	psect	text86
 18969  003A64                     __ptext86:
 18970                           	opt stack 0
 18971  003A64                     _EUSART1_Initialize:
 18972                           	opt stack 22
 18973                           
 18974                           ;eusart1.c: 79: PIE3bits.RC1IE = 0;
 18975                           
 18976                           ; BSR set to: 14
 18977                           ;incstack = 0
 18978  003A64  010E               	movlb	14	; () banked
 18979  003A66  9BC5               	bcf	197,5,b	;volatile
 18980                           
 18981                           ;eusart1.c: 80: PIE3bits.TX1IE = 0;
 18982  003A68  99C5               	bcf	197,4,b	;volatile
 18983                           
 18984                           ; BSR set to: 14
 18985                           ;eusart1.c: 85: BAUD1CON = 0x08;
 18986  003A6A  0E08               	movlw	8
 18987  003A6C  6E9F               	movwf	3999,c	;volatile
 18988                           
 18989                           ;eusart1.c: 88: RC1STA = 0x90;
 18990  003A6E  0E90               	movlw	144
 18991  003A70  6E9D               	movwf	3997,c	;volatile
 18992                           
 18993                           ;eusart1.c: 91: TX1STA = 0x24;
 18994  003A72  0E24               	movlw	36
 18995  003A74  6E9E               	movwf	3998,c	;volatile
 18996                           
 18997                           ;eusart1.c: 95: SP1BRGL = 0x82;
 18998  003A76  0E82               	movlw	130
 18999  003A78  6E9B               	movwf	3995,c	;volatile
 19000                           
 19001                           ;eusart1.c: 97: SP1BRGH = 0x06;
 19002  003A7A  0E06               	movlw	6
 19003  003A7C  6E9C               	movwf	3996,c	;volatile
 19004                           
 19005                           ;eusart1.c: 112: eusart1TxHead = 0;
 19006  003A7E  0E00               	movlw	0
 19007  003A80  6E2B               	movwf	_eusart1TxHead,c
 19008                           
 19009                           ;eusart1.c: 113: eusart1TxTail = 0;
 19010  003A82  0E00               	movlw	0
 19011  003A84  6E2A               	movwf	_eusart1TxTail,c
 19012                           
 19013                           ;eusart1.c: 114: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
 19014  003A86  0E40               	movlw	64
 19015  003A88  0103               	movlb	3	; () banked
 19016  003A8A  6FFE               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
 19017                           
 19018                           ;eusart1.c: 116: eusart1RxHead = 0;
 19019  003A8C  0E00               	movlw	0
 19020  003A8E  6FD9               	movwf	_eusart1RxHead& (0+255),b
 19021                           
 19022                           ;eusart1.c: 117: eusart1RxTail = 0;
 19023  003A90  0E00               	movlw	0
 19024  003A92  6FD8               	movwf	_eusart1RxTail& (0+255),b
 19025                           
 19026                           ;eusart1.c: 118: eusart1RxCount = 0;
 19027  003A94  0E00               	movlw	0
 19028  003A96  6FD7               	movwf	_eusart1RxCount& (0+255),b	;volatile
 19029                           
 19030                           ; BSR set to: 3
 19031                           ;eusart1.c: 121: PIE3bits.RC1IE = 1;
 19032  003A98  010E               	movlb	14	; () banked
 19033  003A9A  8BC5               	bsf	197,5,b	;volatile
 19034                           
 19035                           ; BSR set to: 14
 19036  003A9C  0012               	return		;funcret
 19037  003A9E                     __end_of_EUSART1_Initialize:
 19038                           	opt stack 0
 19039                           tblptru	equ	0xFF8
 19040                           tblptrh	equ	0xFF7
 19041                           tblptrl	equ	0xFF6
 19042                           tablat	equ	0xFF5
 19043                           prodh	equ	0xFF4
 19044                           prodl	equ	0xFF3
 19045                           intcon	equ	0xFF2
 19046                           postinc0	equ	0xFEE
 19047                           wreg	equ	0xFE8
 19048                           indf1	equ	0xFE7
 19049                           postinc1	equ	0xFE6
 19050                           postdec1	equ	0xFE5
 19051                           plusw1	equ	0xFE3
 19052                           fsr1h	equ	0xFE2
 19053                           fsr1l	equ	0xFE1
 19054                           indf2	equ	0xFDF
 19055                           postinc2	equ	0xFDE
 19056                           postdec2	equ	0xFDD
 19057                           plusw2	equ	0xFDB
 19058                           fsr2h	equ	0xFDA
 19059                           fsr2l	equ	0xFD9
 19060                           status	equ	0xFD8
 19061                           
 19062 ;; *************** function _HX_Initialize *****************
 19063 ;; Defined at:
 19064 ;;		line 18 in file "HX_CommInterface.c"
 19065 ;; Parameters:    Size  Location     Type
 19066 ;;		None
 19067 ;; Auto vars:     Size  Location     Type
 19068 ;;		None
 19069 ;; Return value:  Size  Location     Type
 19070 ;;                  1    wreg      void 
 19071 ;; Registers used:
 19072 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19073 ;; Tracked objects:
 19074 ;;		On entry : 0/0
 19075 ;;		On exit  : 0/0
 19076 ;;		Unchanged: 0/0
 19077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19082 ;;Total ram usage:        0 bytes
 19083 ;; Hardware stack levels used:    1
 19084 ;; Hardware stack levels required when called:    9
 19085 ;; This function calls:
 19086 ;;		_hxFlushInputBuffer
 19087 ;;		_hxFlushMainDataBuffer
 19088 ;;		_hxFlushOutputBuffer
 19089 ;; This function is called by:
 19090 ;;		_main
 19091 ;; This function uses a non-reentrant model
 19092 ;;
 19093                           
 19094                           	psect	text87
 19095  003FC6                     __ptext87:
 19096                           	opt stack 0
 19097  003FC6                     _HX_Initialize:
 19098                           	opt stack 21
 19099                           
 19100                           ;HX_CommInterface.c: 20: hx_state = 0x10;
 19101                           
 19102                           ; BSR set to: 14
 19103                           ;incstack = 0
 19104  003FC6  0E10               	movlw	16
 19105  003FC8  6E45               	movwf	_hx_state,c
 19106                           
 19107                           ;HX_CommInterface.c: 22: LATA = 0x03;
 19108  003FCA  0E03               	movlw	3
 19109  003FCC  6E83               	movwf	3971,c	;volatile
 19110                           
 19111                           ;HX_CommInterface.c: 23: hxFlushInputBuffer();
 19112  003FCE  EC65  F01F         	call	_hxFlushInputBuffer	;wreg free
 19113                           
 19114                           ;HX_CommInterface.c: 24: hxFlushOutputBuffer();
 19115  003FD2  ECBF  F01F         	call	_hxFlushOutputBuffer	;wreg free
 19116                           
 19117                           ;HX_CommInterface.c: 25: hxFlushMainDataBuffer();
 19118  003FD6  ECCB  F01F         	call	_hxFlushMainDataBuffer	;wreg free
 19119  003FDA  0012               	return		;funcret
 19120  003FDC                     __end_of_HX_Initialize:
 19121                           	opt stack 0
 19122                           tblptru	equ	0xFF8
 19123                           tblptrh	equ	0xFF7
 19124                           tblptrl	equ	0xFF6
 19125                           tablat	equ	0xFF5
 19126                           prodh	equ	0xFF4
 19127                           prodl	equ	0xFF3
 19128                           intcon	equ	0xFF2
 19129                           postinc0	equ	0xFEE
 19130                           wreg	equ	0xFE8
 19131                           indf1	equ	0xFE7
 19132                           postinc1	equ	0xFE6
 19133                           postdec1	equ	0xFE5
 19134                           plusw1	equ	0xFE3
 19135                           fsr1h	equ	0xFE2
 19136                           fsr1l	equ	0xFE1
 19137                           indf2	equ	0xFDF
 19138                           postinc2	equ	0xFDE
 19139                           postdec2	equ	0xFDD
 19140                           plusw2	equ	0xFDB
 19141                           fsr2h	equ	0xFDA
 19142                           fsr2l	equ	0xFD9
 19143                           status	equ	0xFD8
 19144                           
 19145 ;; *************** function _hxFlushOutputBuffer *****************
 19146 ;; Defined at:
 19147 ;;		line 283 in file "HX_CommInterface.c"
 19148 ;; Parameters:    Size  Location     Type
 19149 ;;		None
 19150 ;; Auto vars:     Size  Location     Type
 19151 ;;		None
 19152 ;; Return value:  Size  Location     Type
 19153 ;;                  1    wreg      void 
 19154 ;; Registers used:
 19155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19156 ;; Tracked objects:
 19157 ;;		On entry : 0/0
 19158 ;;		On exit  : 0/0
 19159 ;;		Unchanged: 0/0
 19160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19165 ;;Total ram usage:        0 bytes
 19166 ;; Hardware stack levels used:    1
 19167 ;; Hardware stack levels required when called:    8
 19168 ;; This function calls:
 19169 ;;		_hxClearArray
 19170 ;; This function is called by:
 19171 ;;		_HX_Initialize
 19172 ;;		_hxHandleTxUART
 19173 ;; This function uses a non-reentrant model
 19174 ;;
 19175                           
 19176                           	psect	text88
 19177  003F7E                     __ptext88:
 19178                           	opt stack 0
 19179  003F7E                     _hxFlushOutputBuffer:
 19180                           	opt stack 21
 19181                           
 19182                           ;HX_CommInterface.c: 285: hxClearArray(hx_outData, 64);
 19183                           
 19184                           ;incstack = 0
 19185  003F7E  0E80               	movlw	low _hx_outData
 19186  003F80  0100               	movlb	0	; () banked
 19187  003F82  6F60               	movwf	hxClearArray@arr& (0+255),b
 19188  003F84  0E0B               	movlw	high _hx_outData
 19189  003F86  6F61               	movwf	(hxClearArray@arr+1)& (0+255),b
 19190  003F88  0E40               	movlw	64
 19191  003F8A  6F62               	movwf	hxClearArray@size& (0+255),b
 19192  003F8C  EC1F  F01F         	call	_hxClearArray	;wreg free
 19193                           
 19194                           ;HX_CommInterface.c: 286: hx_outDataIndex = 2;
 19195  003F90  0E02               	movlw	2
 19196  003F92  6E40               	movwf	_hx_outDataIndex,c
 19197  003F94  0012               	return		;funcret
 19198  003F96                     __end_of_hxFlushOutputBuffer:
 19199                           	opt stack 0
 19200                           tblptru	equ	0xFF8
 19201                           tblptrh	equ	0xFF7
 19202                           tblptrl	equ	0xFF6
 19203                           tablat	equ	0xFF5
 19204                           prodh	equ	0xFF4
 19205                           prodl	equ	0xFF3
 19206                           intcon	equ	0xFF2
 19207                           postinc0	equ	0xFEE
 19208                           wreg	equ	0xFE8
 19209                           indf1	equ	0xFE7
 19210                           postinc1	equ	0xFE6
 19211                           postdec1	equ	0xFE5
 19212                           plusw1	equ	0xFE3
 19213                           fsr1h	equ	0xFE2
 19214                           fsr1l	equ	0xFE1
 19215                           indf2	equ	0xFDF
 19216                           postinc2	equ	0xFDE
 19217                           postdec2	equ	0xFDD
 19218                           plusw2	equ	0xFDB
 19219                           fsr2h	equ	0xFDA
 19220                           fsr2l	equ	0xFD9
 19221                           status	equ	0xFD8
 19222                           
 19223 ;; *************** function _hxFlushMainDataBuffer *****************
 19224 ;; Defined at:
 19225 ;;		line 289 in file "HX_CommInterface.c"
 19226 ;; Parameters:    Size  Location     Type
 19227 ;;		None
 19228 ;; Auto vars:     Size  Location     Type
 19229 ;;		None
 19230 ;; Return value:  Size  Location     Type
 19231 ;;                  1    wreg      void 
 19232 ;; Registers used:
 19233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19234 ;; Tracked objects:
 19235 ;;		On entry : 0/0
 19236 ;;		On exit  : 0/0
 19237 ;;		Unchanged: 0/0
 19238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19243 ;;Total ram usage:        0 bytes
 19244 ;; Hardware stack levels used:    1
 19245 ;; Hardware stack levels required when called:    8
 19246 ;; This function calls:
 19247 ;;		_hxClearArray
 19248 ;; This function is called by:
 19249 ;;		_HX_Initialize
 19250 ;; This function uses a non-reentrant model
 19251 ;;
 19252                           
 19253                           	psect	text89
 19254  003F96                     __ptext89:
 19255                           	opt stack 0
 19256  003F96                     _hxFlushMainDataBuffer:
 19257                           	opt stack 21
 19258                           
 19259                           ;HX_CommInterface.c: 291: hxClearArray(hx_mainData, 61);
 19260                           
 19261                           ;incstack = 0
 19262  003F96  0EC0               	movlw	low _hx_mainData
 19263  003F98  0100               	movlb	0	; () banked
 19264  003F9A  6F60               	movwf	hxClearArray@arr& (0+255),b
 19265  003F9C  0E0B               	movlw	high _hx_mainData
 19266  003F9E  6F61               	movwf	(hxClearArray@arr+1)& (0+255),b
 19267  003FA0  0E3D               	movlw	61
 19268  003FA2  6F62               	movwf	hxClearArray@size& (0+255),b
 19269  003FA4  EC1F  F01F         	call	_hxClearArray	;wreg free
 19270                           
 19271                           ;HX_CommInterface.c: 292: hx_mainDataIndex = 0;
 19272  003FA8  0E00               	movlw	0
 19273  003FAA  6E3F               	movwf	_hx_mainDataIndex,c
 19274  003FAC  0012               	return		;funcret
 19275  003FAE                     __end_of_hxFlushMainDataBuffer:
 19276                           	opt stack 0
 19277                           tblptru	equ	0xFF8
 19278                           tblptrh	equ	0xFF7
 19279                           tblptrl	equ	0xFF6
 19280                           tablat	equ	0xFF5
 19281                           prodh	equ	0xFF4
 19282                           prodl	equ	0xFF3
 19283                           intcon	equ	0xFF2
 19284                           postinc0	equ	0xFEE
 19285                           wreg	equ	0xFE8
 19286                           indf1	equ	0xFE7
 19287                           postinc1	equ	0xFE6
 19288                           postdec1	equ	0xFE5
 19289                           plusw1	equ	0xFE3
 19290                           fsr1h	equ	0xFE2
 19291                           fsr1l	equ	0xFE1
 19292                           indf2	equ	0xFDF
 19293                           postinc2	equ	0xFDE
 19294                           postdec2	equ	0xFDD
 19295                           plusw2	equ	0xFDB
 19296                           fsr2h	equ	0xFDA
 19297                           fsr2l	equ	0xFD9
 19298                           status	equ	0xFD8
 19299                           
 19300 ;; *************** function _hxFlushInputBuffer *****************
 19301 ;; Defined at:
 19302 ;;		line 276 in file "HX_CommInterface.c"
 19303 ;; Parameters:    Size  Location     Type
 19304 ;;		None
 19305 ;; Auto vars:     Size  Location     Type
 19306 ;;		None
 19307 ;; Return value:  Size  Location     Type
 19308 ;;                  1    wreg      void 
 19309 ;; Registers used:
 19310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19311 ;; Tracked objects:
 19312 ;;		On entry : 0/0
 19313 ;;		On exit  : 0/0
 19314 ;;		Unchanged: 0/0
 19315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19320 ;;Total ram usage:        0 bytes
 19321 ;; Hardware stack levels used:    1
 19322 ;; Hardware stack levels required when called:    8
 19323 ;; This function calls:
 19324 ;;		_hxClearArray
 19325 ;; This function is called by:
 19326 ;;		_HX_Initialize
 19327 ;; This function uses a non-reentrant model
 19328 ;;
 19329                           
 19330                           	psect	text90
 19331  003ECA                     __ptext90:
 19332                           	opt stack 0
 19333  003ECA                     _hxFlushInputBuffer:
 19334                           	opt stack 21
 19335                           
 19336                           ;HX_CommInterface.c: 278: hxClearArray(hx_inData, 64);
 19337                           
 19338                           ;incstack = 0
 19339  003ECA  0E40               	movlw	low _hx_inData
 19340  003ECC  0100               	movlb	0	; () banked
 19341  003ECE  6F60               	movwf	hxClearArray@arr& (0+255),b
 19342  003ED0  0E0B               	movlw	high _hx_inData
 19343  003ED2  6F61               	movwf	(hxClearArray@arr+1)& (0+255),b
 19344  003ED4  0E40               	movlw	64
 19345  003ED6  6F62               	movwf	hxClearArray@size& (0+255),b
 19346  003ED8  EC1F  F01F         	call	_hxClearArray	;wreg free
 19347                           
 19348                           ;HX_CommInterface.c: 279: hx_inDataIndex = 0;
 19349  003EDC  0E00               	movlw	0
 19350  003EDE  6E3E               	movwf	_hx_inDataIndex,c
 19351                           
 19352                           ;HX_CommInterface.c: 280: hx_pktCmd = 0;
 19353  003EE0  0E00               	movlw	0
 19354  003EE2  6E3B               	movwf	_hx_pktCmd,c
 19355  003EE4  0012               	return		;funcret
 19356  003EE6                     __end_of_hxFlushInputBuffer:
 19357                           	opt stack 0
 19358                           tblptru	equ	0xFF8
 19359                           tblptrh	equ	0xFF7
 19360                           tblptrl	equ	0xFF6
 19361                           tablat	equ	0xFF5
 19362                           prodh	equ	0xFF4
 19363                           prodl	equ	0xFF3
 19364                           intcon	equ	0xFF2
 19365                           postinc0	equ	0xFEE
 19366                           wreg	equ	0xFE8
 19367                           indf1	equ	0xFE7
 19368                           postinc1	equ	0xFE6
 19369                           postdec1	equ	0xFE5
 19370                           plusw1	equ	0xFE3
 19371                           fsr1h	equ	0xFE2
 19372                           fsr1l	equ	0xFE1
 19373                           indf2	equ	0xFDF
 19374                           postinc2	equ	0xFDE
 19375                           postdec2	equ	0xFDD
 19376                           plusw2	equ	0xFDB
 19377                           fsr2h	equ	0xFDA
 19378                           fsr2l	equ	0xFD9
 19379                           status	equ	0xFD8
 19380                           
 19381 ;; *************** function _hxClearArray *****************
 19382 ;; Defined at:
 19383 ;;		line 306 in file "HX_CommInterface.c"
 19384 ;; Parameters:    Size  Location     Type
 19385 ;;  arr             2    0[BANK0 ] PTR unsigned char 
 19386 ;;		 -> hx_outData(64), hx_mainData(61), hx_inData(64), 
 19387 ;;  size            1    2[BANK0 ] unsigned char 
 19388 ;; Auto vars:     Size  Location     Type
 19389 ;;  i               1    3[BANK0 ] unsigned char 
 19390 ;; Return value:  Size  Location     Type
 19391 ;;                  1    wreg      void 
 19392 ;; Registers used:
 19393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19394 ;; Tracked objects:
 19395 ;;		On entry : 0/0
 19396 ;;		On exit  : 0/0
 19397 ;;		Unchanged: 0/0
 19398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19399 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19402 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19403 ;;Total ram usage:        4 bytes
 19404 ;; Hardware stack levels used:    1
 19405 ;; Hardware stack levels required when called:    7
 19406 ;; This function calls:
 19407 ;;		Nothing
 19408 ;; This function is called by:
 19409 ;;		_hxFlushInputBuffer
 19410 ;;		_hxFlushOutputBuffer
 19411 ;;		_hxFlushMainDataBuffer
 19412 ;; This function uses a non-reentrant model
 19413 ;;
 19414                           
 19415                           	psect	text91
 19416  003E3E                     __ptext91:
 19417                           	opt stack 0
 19418  003E3E                     _hxClearArray:
 19419                           	opt stack 21
 19420                           
 19421                           ;HX_CommInterface.c: 308: for(uint8_t i = 0; i < size; i++)
 19422                           
 19423                           ;incstack = 0
 19424  003E3E  0E00               	movlw	0
 19425  003E40  0100               	movlb	0	; () banked
 19426  003E42  6F63               	movwf	hxClearArray@i& (0+255),b
 19427  003E44  D00B               	goto	l225
 19428  003E46                     
 19429                           ; BSR set to: 0
 19430                           ;HX_CommInterface.c: 309: {
 19431                           ;HX_CommInterface.c: 310: arr[i] = 0;
 19432                           
 19433                           ; BSR set to: 0
 19434  003E46  5163               	movf	hxClearArray@i& (0+255),w,b
 19435  003E48  0D01               	mullw	1
 19436  003E4A  50F3               	movf	prodl,w,c
 19437  003E4C  2560               	addwf	hxClearArray@arr& (0+255),w,b
 19438  003E4E  6ED9               	movwf	fsr2l,c
 19439  003E50  50F4               	movf	prodh,w,c
 19440  003E52  2161               	addwfc	(hxClearArray@arr+1)& (0+255),w,b
 19441  003E54  6EDA               	movwf	fsr2h,c
 19442  003E56  0E00               	movlw	0
 19443  003E58  6EDF               	movwf	indf2,c
 19444                           
 19445                           ; BSR set to: 0
 19446  003E5A  2B63               	incf	hxClearArray@i& (0+255),f,b
 19447  003E5C                     l225:
 19448                           
 19449                           ; BSR set to: 0
 19450                           
 19451                           ; BSR set to: 0
 19452  003E5C  5162               	movf	hxClearArray@size& (0+255),w,b
 19453  003E5E  5D63               	subwf	hxClearArray@i& (0+255),w,b
 19454  003E60  B0D8               	btfsc	status,0,c
 19455  003E62  0012               	return	
 19456  003E64  D7F0               	goto	l226
 19457  003E66                     __end_of_hxClearArray:
 19458                           	opt stack 0
 19459                           tblptru	equ	0xFF8
 19460                           tblptrh	equ	0xFF7
 19461                           tblptrl	equ	0xFF6
 19462                           tablat	equ	0xFF5
 19463                           prodh	equ	0xFF4
 19464                           prodl	equ	0xFF3
 19465                           intcon	equ	0xFF2
 19466                           postinc0	equ	0xFEE
 19467                           wreg	equ	0xFE8
 19468                           indf1	equ	0xFE7
 19469                           postinc1	equ	0xFE6
 19470                           postdec1	equ	0xFE5
 19471                           plusw1	equ	0xFE3
 19472                           fsr1h	equ	0xFE2
 19473                           fsr1l	equ	0xFE1
 19474                           indf2	equ	0xFDF
 19475                           postinc2	equ	0xFDE
 19476                           postdec2	equ	0xFDD
 19477                           plusw2	equ	0xFDB
 19478                           fsr2h	equ	0xFDA
 19479                           fsr2l	equ	0xFD9
 19480                           status	equ	0xFD8
 19481                           
 19482 ;; *************** function _INTERRUPT_InterruptManager *****************
 19483 ;; Defined at:
 19484 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 19485 ;; Parameters:    Size  Location     Type
 19486 ;;		None
 19487 ;; Auto vars:     Size  Location     Type
 19488 ;;		None
 19489 ;; Return value:  Size  Location     Type
 19490 ;;                  1    wreg      void 
 19491 ;; Registers used:
 19492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19493 ;; Tracked objects:
 19494 ;;		On entry : 0/0
 19495 ;;		On exit  : 0/0
 19496 ;;		Unchanged: 0/0
 19497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19500 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19501 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19502 ;;Total ram usage:       18 bytes
 19503 ;; Hardware stack levels used:    1
 19504 ;; Hardware stack levels required when called:    6
 19505 ;; This function calls:
 19506 ;;		_EUSART1_Receive_ISR
 19507 ;;		_EUSART1_Transmit_ISR
 19508 ;;		_I2C1_BusCollisionISR
 19509 ;;		_I2C1_ISR
 19510 ;;		_TMR0_ISR
 19511 ;; This function is called by:
 19512 ;;		Interrupt level 2
 19513 ;; This function uses a non-reentrant model
 19514 ;;
 19515                           
 19516                           	psect	intcode
 19517  000008                     __pintcode:
 19518                           	opt stack 0
 19519  000008                     _INTERRUPT_InterruptManager:
 19520                           	opt stack 17
 19521                           
 19522                           ; BSR set to: 0
 19523                           ;incstack = 0
 19524  000008  8247               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19525  00000A  CFFA F012          	movff	pclath,??_INTERRUPT_InterruptManager
 19526  00000E  CFFB F013          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 19527  000012  CFE9 F014          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 19528  000016  CFEA F015          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 19529  00001A  CFE1 F016          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 19530  00001E  CFE2 F017          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 19531  000022  CFD9 F018          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 19532  000026  CFDA F019          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 19533  00002A  CFF3 F01A          	movff	prodl,??_INTERRUPT_InterruptManager+8
 19534  00002E  CFF4 F01B          	movff	prodh,??_INTERRUPT_InterruptManager+9
 19535  000032  CFF6 F01C          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 19536  000036  CFF7 F01D          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 19537  00003A  CFF8 F01E          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 19538  00003E  CFF5 F01F          	movff	tablat,??_INTERRUPT_InterruptManager+13
 19539  000042  C047  F020         	movff	btemp,??_INTERRUPT_InterruptManager+14
 19540  000046  C048  F021         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 19541  00004A  C049  F022         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 19542  00004E  C04A  F023         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 19543                           
 19544                           ;interrupt_manager.c: 60: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 19545  000052  010E               	movlb	14	; () banked
 19546  000054  BBC2               	btfsc	194,5,b	;volatile
 19547                           
 19548                           ; BSR set to: 14
 19549  000056  ABCA               	btfss	202,5,b	;volatile
 19550  000058  D003               	goto	i2l1586
 19551                           
 19552                           ; BSR set to: 14
 19553                           ;interrupt_manager.c: 61: {
 19554                           ;interrupt_manager.c: 62: TMR0_ISR();
 19555  00005A  EC9E  F01E         	call	_TMR0_ISR	;wreg free
 19556                           
 19557                           ;interrupt_manager.c: 63: }
 19558  00005E  D01E               	goto	i2l1594
 19559  000060                     i2l1586:
 19560                           
 19561                           ; BSR set to: 14
 19562                           ;interrupt_manager.c: 64: else if(INTCONbits.PEIE == 1 && PIE3bits.BCL1IE == 1 && PIR3bi
      +                          ts.BCL1IF == 1)
 19563  000060  BCF2               	btfsc	intcon,6,c	;volatile
 19564                           
 19565                           ; BSR set to: 14
 19566  000062  A3C5               	btfss	197,1,b	;volatile
 19567  000064  D005               	goto	i2l1588
 19568                           
 19569                           ; BSR set to: 14
 19570  000066  A3CD               	btfss	205,1,b	;volatile
 19571  000068  D003               	goto	i2l1588
 19572                           
 19573                           ; BSR set to: 14
 19574                           ;interrupt_manager.c: 65: {
 19575                           ;interrupt_manager.c: 66: I2C1_BusCollisionISR();
 19576  00006A  EC75  F020         	call	_I2C1_BusCollisionISR	;wreg free
 19577                           
 19578                           ;interrupt_manager.c: 67: }
 19579  00006E  D016               	goto	i2l1594
 19580  000070                     i2l1588:
 19581                           
 19582                           ; BSR set to: 14
 19583                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1 && PIE3bits.SSP1IE == 1 && PIR3bi
      +                          ts.SSP1IF == 1)
 19584  000070  BCF2               	btfsc	intcon,6,c	;volatile
 19585                           
 19586                           ; BSR set to: 14
 19587  000072  A1C5               	btfss	197,0,b	;volatile
 19588  000074  D005               	goto	i2l1590
 19589                           
 19590                           ; BSR set to: 14
 19591  000076  A1CD               	btfss	205,0,b	;volatile
 19592  000078  D003               	goto	i2l1590
 19593                           
 19594                           ; BSR set to: 14
 19595                           ;interrupt_manager.c: 69: {
 19596                           ;interrupt_manager.c: 70: I2C1_ISR();
 19597  00007A  ECE4  F00D         	call	_I2C1_ISR	;wreg free
 19598                           
 19599                           ;interrupt_manager.c: 71: }
 19600  00007E  D00E               	goto	i2l1594
 19601  000080                     i2l1590:
 19602                           
 19603                           ; BSR set to: 14
 19604                           ;interrupt_manager.c: 72: else if(INTCONbits.PEIE == 1 && PIE3bits.TX1IE == 1 && PIR3bit
      +                          s.TX1IF == 1)
 19605  000080  BCF2               	btfsc	intcon,6,c	;volatile
 19606                           
 19607                           ; BSR set to: 14
 19608  000082  A9C5               	btfss	197,4,b	;volatile
 19609  000084  D005               	goto	i2l1592
 19610                           
 19611                           ; BSR set to: 14
 19612  000086  A9CD               	btfss	205,4,b	;volatile
 19613  000088  D003               	goto	i2l1592
 19614                           
 19615                           ; BSR set to: 14
 19616                           ;interrupt_manager.c: 73: {
 19617                           ;interrupt_manager.c: 74: EUSART1_Transmit_ISR();
 19618  00008A  EC55  F01E         	call	_EUSART1_Transmit_ISR	;wreg free
 19619                           
 19620                           ;interrupt_manager.c: 75: }
 19621  00008E  D006               	goto	i2l1594
 19622  000090                     i2l1592:
 19623                           
 19624                           ; BSR set to: 14
 19625                           ;interrupt_manager.c: 76: else if(INTCONbits.PEIE == 1 && PIE3bits.RC1IE == 1 && PIR3bit
      +                          s.RC1IF == 1)
 19626  000090  BCF2               	btfsc	intcon,6,c	;volatile
 19627                           
 19628                           ; BSR set to: 14
 19629  000092  ABC5               	btfss	197,5,b	;volatile
 19630  000094  D003               	goto	i2l1594
 19631                           
 19632                           ; BSR set to: 14
 19633  000096  BBCD               	btfsc	205,5,b	;volatile
 19634                           
 19635                           ; BSR set to: 14
 19636                           ;interrupt_manager.c: 77: {
 19637                           ;interrupt_manager.c: 78: EUSART1_Receive_ISR();
 19638  000098  EC2A  F020         	call	_EUSART1_Receive_ISR	;wreg free
 19639  00009C                     i2l1594:
 19640                           
 19641                           ;interrupt_manager.c: 80: else
 19642                           ;interrupt_manager.c: 81: {
 19643  00009C  C023  F04A         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 19644  0000A0  C022  F049         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 19645  0000A4  C021  F048         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 19646  0000A8  C020  F047         	movff	??_INTERRUPT_InterruptManager+14,btemp
 19647  0000AC  C01F  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 19648  0000B0  C01E  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 19649  0000B4  C01D  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 19650  0000B8  C01C  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 19651  0000BC  C01B  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 19652  0000C0  C01A  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 19653  0000C4  C019  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 19654  0000C8  C018  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 19655  0000CC  C017  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 19656  0000D0  C016  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 19657  0000D4  C015  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 19658  0000D8  C014  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 19659  0000DC  C013  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 19660  0000E0  C012  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 19661  0000E4  9247               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19662  0000E6  0011               	retfie		f
 19663  0000E8                     __end_of_INTERRUPT_InterruptManager:
 19664                           	opt stack 0
 19665                           pclatu	equ	0xFFB
 19666                           pclath	equ	0xFFA
 19667                           tblptru	equ	0xFF8
 19668                           tblptrh	equ	0xFF7
 19669                           tblptrl	equ	0xFF6
 19670                           tablat	equ	0xFF5
 19671                           prodh	equ	0xFF4
 19672                           prodl	equ	0xFF3
 19673                           intcon	equ	0xFF2
 19674                           postinc0	equ	0xFEE
 19675                           fsr0h	equ	0xFEA
 19676                           fsr0l	equ	0xFE9
 19677                           wreg	equ	0xFE8
 19678                           indf1	equ	0xFE7
 19679                           postinc1	equ	0xFE6
 19680                           postdec1	equ	0xFE5
 19681                           plusw1	equ	0xFE3
 19682                           fsr1h	equ	0xFE2
 19683                           fsr1l	equ	0xFE1
 19684                           indf2	equ	0xFDF
 19685                           postinc2	equ	0xFDE
 19686                           postdec2	equ	0xFDD
 19687                           plusw2	equ	0xFDB
 19688                           fsr2h	equ	0xFDA
 19689                           fsr2l	equ	0xFD9
 19690                           status	equ	0xFD8
 19691                           
 19692 ;; *************** function _TMR0_ISR *****************
 19693 ;; Defined at:
 19694 ;;		line 133 in file "mcc_generated_files/tmr0.c"
 19695 ;; Parameters:    Size  Location     Type
 19696 ;;		None
 19697 ;; Auto vars:     Size  Location     Type
 19698 ;;		None
 19699 ;; Return value:  Size  Location     Type
 19700 ;;                  1    wreg      void 
 19701 ;; Registers used:
 19702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19703 ;; Tracked objects:
 19704 ;;		On entry : 0/0
 19705 ;;		On exit  : 0/0
 19706 ;;		Unchanged: 0/0
 19707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19712 ;;Total ram usage:        0 bytes
 19713 ;; Hardware stack levels used:    1
 19714 ;; Hardware stack levels required when called:    5
 19715 ;; This function calls:
 19716 ;;		Absolute function
 19717 ;;		_TMR0_DefaultInterruptHandler
 19718 ;; This function is called by:
 19719 ;;		_INTERRUPT_InterruptManager
 19720 ;; This function uses a non-reentrant model
 19721 ;;
 19722                           
 19723                           	psect	text93
 19724  003D3C                     __ptext93:
 19725                           	opt stack 0
 19726  003D3C                     _TMR0_ISR:
 19727                           	opt stack 17
 19728                           
 19729                           ;tmr0.c: 136: PIR0bits.TMR0IF = 0;
 19730                           
 19731                           ;incstack = 0
 19732  003D3C  010E               	movlb	14	; () banked
 19733  003D3E  9BCA               	bcf	202,5,b	;volatile
 19734                           
 19735                           ; BSR set to: 14
 19736                           ;tmr0.c: 138: TMR0H = timer0ReloadVal16bit >> 8;
 19737  003D40  5044               	movf	_timer0ReloadVal16bit+1,w,c	;volatile
 19738  003D42  6ED4               	movwf	4052,c	;volatile
 19739                           
 19740                           ; BSR set to: 14
 19741                           ;tmr0.c: 139: TMR0L = (uint8_t) timer0ReloadVal16bit;
 19742  003D44  C043  FFD3         	movff	_timer0ReloadVal16bit,4051	;volatile
 19743                           
 19744                           ; BSR set to: 14
 19745                           ;tmr0.c: 141: if(TMR0_InterruptHandler)
 19746  003D48  0103               	movlb	3	; () banked
 19747  003D4A  51FB               	movf	_TMR0_InterruptHandler& (0+255),w,b
 19748  003D4C  11FC               	iorwf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 19749  003D4E  11FD               	iorwf	(_TMR0_InterruptHandler+2)& (0+255),w,b
 19750  003D50  B4D8               	btfsc	status,2,c
 19751  003D52  0012               	return	
 19752                           
 19753                           ; BSR set to: 3
 19754                           ;tmr0.c: 142: {
 19755                           ;tmr0.c: 143: TMR0_InterruptHandler();
 19756  003D54  D801               	call	i2u582_48
 19757  003D56  0012               	return	
 19758  003D58                     i2u582_48:
 19759  003D58  0005               	push	
 19760  003D5A  6EFA               	movwf	pclath,c
 19761  003D5C  51FB               	movf	_TMR0_InterruptHandler& (0+255),w,b
 19762  003D5E  6EFD               	movwf	tosl,c
 19763  003D60  51FC               	movf	(_TMR0_InterruptHandler+1)& (0+255),w,b
 19764  003D62  6EFE               	movwf	tosh,c
 19765  003D64  51FD               	movf	(_TMR0_InterruptHandler+2)& (0+255),w,b
 19766  003D66  6EFF               	movwf	tosu,c
 19767  003D68  50FA               	movf	pclath,w,c
 19768  003D6A  0012               	return		;indir
 19769  003D6C                     __end_of_TMR0_ISR:
 19770                           	opt stack 0
 19771                           tosu	equ	0xFFF
 19772                           tosh	equ	0xFFE
 19773                           tosl	equ	0xFFD
 19774                           pclatu	equ	0xFFB
 19775                           pclath	equ	0xFFA
 19776                           tblptru	equ	0xFF8
 19777                           tblptrh	equ	0xFF7
 19778                           tblptrl	equ	0xFF6
 19779                           tablat	equ	0xFF5
 19780                           prodh	equ	0xFF4
 19781                           prodl	equ	0xFF3
 19782                           intcon	equ	0xFF2
 19783                           postinc0	equ	0xFEE
 19784                           fsr0h	equ	0xFEA
 19785                           fsr0l	equ	0xFE9
 19786                           wreg	equ	0xFE8
 19787                           indf1	equ	0xFE7
 19788                           postinc1	equ	0xFE6
 19789                           postdec1	equ	0xFE5
 19790                           plusw1	equ	0xFE3
 19791                           fsr1h	equ	0xFE2
 19792                           fsr1l	equ	0xFE1
 19793                           indf2	equ	0xFDF
 19794                           postinc2	equ	0xFDE
 19795                           postdec2	equ	0xFDD
 19796                           plusw2	equ	0xFDB
 19797                           fsr2h	equ	0xFDA
 19798                           fsr2l	equ	0xFD9
 19799                           status	equ	0xFD8
 19800                           
 19801 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 19802 ;; Defined at:
 19803 ;;		line 154 in file "mcc_generated_files/tmr0.c"
 19804 ;; Parameters:    Size  Location     Type
 19805 ;;		None
 19806 ;; Auto vars:     Size  Location     Type
 19807 ;;		None
 19808 ;; Return value:  Size  Location     Type
 19809 ;;                  1    wreg      void 
 19810 ;; Registers used:
 19811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19812 ;; Tracked objects:
 19813 ;;		On entry : 0/0
 19814 ;;		On exit  : 0/0
 19815 ;;		Unchanged: 0/0
 19816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19821 ;;Total ram usage:        0 bytes
 19822 ;; Hardware stack levels used:    1
 19823 ;; Hardware stack levels required when called:    4
 19824 ;; This function calls:
 19825 ;;		_hxHandleTmr0
 19826 ;; This function is called by:
 19827 ;;		_TMR0_Initialize
 19828 ;;		_TMR0_ISR
 19829 ;; This function uses a non-reentrant model
 19830 ;;
 19831                           
 19832                           	psect	text94
 19833  0040C4                     __ptext94:
 19834                           	opt stack 0
 19835  0040C4                     _TMR0_DefaultInterruptHandler:
 19836                           	opt stack 17
 19837                           
 19838                           ;tmr0.c: 157: hxHandleTmr0();
 19839                           
 19840                           ;incstack = 0
 19841  0040C4  EC14  F01D         	call	_hxHandleTmr0	;wreg free
 19842  0040C8  0012               	return		;funcret
 19843  0040CA                     __end_of_TMR0_DefaultInterruptHandler:
 19844                           	opt stack 0
 19845                           tosu	equ	0xFFF
 19846                           tosh	equ	0xFFE
 19847                           tosl	equ	0xFFD
 19848                           pclatu	equ	0xFFB
 19849                           pclath	equ	0xFFA
 19850                           tblptru	equ	0xFF8
 19851                           tblptrh	equ	0xFF7
 19852                           tblptrl	equ	0xFF6
 19853                           tablat	equ	0xFF5
 19854                           prodh	equ	0xFF4
 19855                           prodl	equ	0xFF3
 19856                           intcon	equ	0xFF2
 19857                           postinc0	equ	0xFEE
 19858                           fsr0h	equ	0xFEA
 19859                           fsr0l	equ	0xFE9
 19860                           wreg	equ	0xFE8
 19861                           indf1	equ	0xFE7
 19862                           postinc1	equ	0xFE6
 19863                           postdec1	equ	0xFE5
 19864                           plusw1	equ	0xFE3
 19865                           fsr1h	equ	0xFE2
 19866                           fsr1l	equ	0xFE1
 19867                           indf2	equ	0xFDF
 19868                           postinc2	equ	0xFDE
 19869                           postdec2	equ	0xFDD
 19870                           plusw2	equ	0xFDB
 19871                           fsr2h	equ	0xFDA
 19872                           fsr2l	equ	0xFD9
 19873                           status	equ	0xFD8
 19874                           
 19875 ;; *************** function _hxHandleTmr0 *****************
 19876 ;; Defined at:
 19877 ;;		line 248 in file "HX_CommInterface.c"
 19878 ;; Parameters:    Size  Location     Type
 19879 ;;		None
 19880 ;; Auto vars:     Size  Location     Type
 19881 ;;		None
 19882 ;; Return value:  Size  Location     Type
 19883 ;;                  1    wreg      void 
 19884 ;; Registers used:
 19885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19886 ;; Tracked objects:
 19887 ;;		On entry : 0/0
 19888 ;;		On exit  : 0/0
 19889 ;;		Unchanged: 0/0
 19890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19892 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19894 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19895 ;;Total ram usage:        2 bytes
 19896 ;; Hardware stack levels used:    1
 19897 ;; Hardware stack levels required when called:    3
 19898 ;; This function calls:
 19899 ;;		_hxSetupPacket1
 19900 ;;		i2_hxFlushInputBuffer
 19901 ;;		i2_hxFlushOutputBuffer
 19902 ;; This function is called by:
 19903 ;;		_TMR0_DefaultInterruptHandler
 19904 ;; This function uses a non-reentrant model
 19905 ;;
 19906                           
 19907                           	psect	text95
 19908  003A28                     __ptext95:
 19909                           	opt stack 0
 19910  003A28                     _hxHandleTmr0:
 19911                           	opt stack 17
 19912                           
 19913                           ;HX_CommInterface.c: 250: hxFlushOutputBuffer();
 19914                           
 19915                           ;incstack = 0
 19916  003A28  ECF9  F01F         	call	i2_hxFlushOutputBuffer	;wreg free
 19917                           
 19918                           ;HX_CommInterface.c: 251: hxFlushInputBuffer();
 19919  003A2C  EC9A  F01F         	call	i2_hxFlushInputBuffer	;wreg free
 19920                           
 19921                           ;HX_CommInterface.c: 255: hx_state = hx_state == 0x11 ? 0x42:
 19922                           ;HX_CommInterface.c: 256: 0x22;
 19923  003A30  0E11               	movlw	17
 19924  003A32  1845               	xorwf	_hx_state,w,c
 19925  003A34  B4D8               	btfsc	status,2,c
 19926  003A36  D004               	goto	i2l198
 19927  003A38  0E00               	movlw	0
 19928  003A3A  6E0A               	movwf	_hxHandleTmr0$364+1,c
 19929  003A3C  0E22               	movlw	34
 19930  003A3E  D003               	goto	L28
 19931  003A40                     i2l198:
 19932  003A40  0E00               	movlw	0
 19933  003A42  6E0A               	movwf	_hxHandleTmr0$364+1,c
 19934  003A44  0E42               	movlw	66
 19935  003A46                     L28:
 19936  003A46  6E09               	movwf	_hxHandleTmr0$364,c
 19937  003A48  C009  F045         	movff	_hxHandleTmr0$364,_hx_state
 19938                           
 19939                           ;HX_CommInterface.c: 257: hxSetupPacket1(0x01, hx_state);
 19940  003A4C  C045  F006         	movff	_hx_state,hxSetupPacket1@data
 19941  003A50  0E01               	movlw	1
 19942  003A52  ECD8  F01B         	call	_hxSetupPacket1
 19943                           
 19944                           ;HX_CommInterface.c: 259: hx_startMain = 0;
 19945  003A56  0E00               	movlw	0
 19946  003A58  6E38               	movwf	_hx_startMain,c
 19947                           
 19948                           ;HX_CommInterface.c: 260: hx_txPacketFlag = 1;
 19949  003A5A  0E01               	movlw	1
 19950  003A5C  6E46               	movwf	_hx_txPacketFlag,c
 19951                           
 19952                           ;HX_CommInterface.c: 261: hx_abort = 1;
 19953  003A5E  0E01               	movlw	1
 19954  003A60  6E36               	movwf	_hx_abort,c
 19955  003A62  0012               	return		;funcret
 19956  003A64                     __end_of_hxHandleTmr0:
 19957                           	opt stack 0
 19958                           tosu	equ	0xFFF
 19959                           tosh	equ	0xFFE
 19960                           tosl	equ	0xFFD
 19961                           pclatu	equ	0xFFB
 19962                           pclath	equ	0xFFA
 19963                           tblptru	equ	0xFF8
 19964                           tblptrh	equ	0xFF7
 19965                           tblptrl	equ	0xFF6
 19966                           tablat	equ	0xFF5
 19967                           prodh	equ	0xFF4
 19968                           prodl	equ	0xFF3
 19969                           intcon	equ	0xFF2
 19970                           postinc0	equ	0xFEE
 19971                           fsr0h	equ	0xFEA
 19972                           fsr0l	equ	0xFE9
 19973                           wreg	equ	0xFE8
 19974                           indf1	equ	0xFE7
 19975                           postinc1	equ	0xFE6
 19976                           postdec1	equ	0xFE5
 19977                           plusw1	equ	0xFE3
 19978                           fsr1h	equ	0xFE2
 19979                           fsr1l	equ	0xFE1
 19980                           indf2	equ	0xFDF
 19981                           postinc2	equ	0xFDE
 19982                           postdec2	equ	0xFDD
 19983                           plusw2	equ	0xFDB
 19984                           fsr2h	equ	0xFDA
 19985                           fsr2l	equ	0xFD9
 19986                           status	equ	0xFD8
 19987                           
 19988 ;; *************** function _I2C1_ISR *****************
 19989 ;; Defined at:
 19990 ;;		line 235 in file "mcc_generated_files/i2c1.c"
 19991 ;; Parameters:    Size  Location     Type
 19992 ;;		None
 19993 ;; Auto vars:     Size  Location     Type
 19994 ;;		None
 19995 ;; Return value:  Size  Location     Type
 19996 ;;                  1    wreg      void 
 19997 ;; Registers used:
 19998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19999 ;; Tracked objects:
 20000 ;;		On entry : 0/0
 20001 ;;		On exit  : 0/0
 20002 ;;		Unchanged: 0/0
 20003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20006 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20007 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20008 ;;Total ram usage:        2 bytes
 20009 ;; Hardware stack levels used:    1
 20010 ;; Hardware stack levels required when called:    1
 20011 ;; This function calls:
 20012 ;;		_I2C1_FunctionComplete
 20013 ;;		_I2C1_Stop
 20014 ;; This function is called by:
 20015 ;;		_INTERRUPT_InterruptManager
 20016 ;; This function uses a non-reentrant model
 20017 ;;
 20018                           
 20019                           	psect	text96
 20020  001BC8                     __ptext96:
 20021                           	opt stack 0
 20022  001BC8                     _I2C1_ISR:
 20023                           	opt stack 21
 20024                           
 20025                           ;i2c1.c: 238: static uint8_t *pi2c_buf_ptr;
 20026                           ;i2c1.c: 239: static uint16_t i2c_address = 0;
 20027                           ;i2c1.c: 240: static uint8_t i2c_bytes_left = 0;
 20028                           ;i2c1.c: 241: static uint8_t i2c_10bit_address_restart = 0;
 20029                           ;i2c1.c: 243: PIR3bits.SSP1IF = 0;
 20030                           
 20031                           ;incstack = 0
 20032  001BC8  010E               	movlb	14	; () banked
 20033  001BCA  91CD               	bcf	205,0,b	;volatile
 20034                           
 20035                           ;i2c1.c: 247: if(SSP1CON1bits.WCOL)
 20036  001BCC  AE96               	btfss	3990,7,c	;volatile
 20037  001BCE  D101               	goto	i2l1436
 20038                           
 20039                           ; BSR set to: 14
 20040                           ;i2c1.c: 248: {
 20041                           ;i2c1.c: 250: SSP1CON1bits.WCOL = 0;
 20042  001BD0  9E96               	bcf	3990,7,c	;volatile
 20043                           
 20044                           ; BSR set to: 14
 20045                           ;i2c1.c: 251: i2c1_state = S_MASTER_IDLE;
 20046  001BD2  0E00               	movlw	0
 20047  001BD4  6E2F               	movwf	_i2c1_state,c
 20048                           
 20049                           ; BSR set to: 14
 20050                           ;i2c1.c: 252: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 20051  001BD6  EE20 F003          	lfsr	2,3
 20052  001BDA  5024               	movf	_p_i2c1_current,w,c
 20053  001BDC  26D9               	addwf	fsr2l,f,c
 20054  001BDE  5025               	movf	_p_i2c1_current+1,w,c
 20055  001BE0  22DA               	addwfc	fsr2h,f,c
 20056  001BE2  CFDE F004          	movff	postinc2,??_I2C1_ISR
 20057  001BE6  CFDD F005          	movff	postdec2,??_I2C1_ISR+1
 20058  001BEA  C004  FFD9         	movff	??_I2C1_ISR,fsr2l
 20059  001BEE  C005  FFDA         	movff	??_I2C1_ISR+1,fsr2h
 20060  001BF2  0E01               	movlw	1
 20061  001BF4  6EDF               	movwf	indf2,c
 20062                           
 20063                           ; BSR set to: 14
 20064                           ;i2c1.c: 255: p_i2c1_current = (0);
 20065  001BF6  0E00               	movlw	0
 20066  001BF8  6E24               	movwf	_p_i2c1_current,c
 20067  001BFA  0E00               	movlw	0
 20068  001BFC  6E25               	movwf	_p_i2c1_current+1,c
 20069                           
 20070                           ; BSR set to: 14
 20071                           ;i2c1.c: 257: return;
 20072  001BFE  0012               	return	
 20073  001C00                     i2l1437:
 20074                           
 20075                           ;i2c1.c: 265: if(i2c1_object.trStatus.s.empty != 1)
 20076  001C00  0102               	movlb	2	; () banked
 20077  001C02  B3DF               	btfsc	(_i2c1_object+4)& (0+255),1,b
 20078  001C04  0012               	return	
 20079                           
 20080                           ; BSR set to: 2
 20081                           ;i2c1.c: 266: {
 20082                           ;i2c1.c: 268: p_i2c1_current = i2c1_object.pTrHead;
 20083  001C06  C2DD  F024         	movff	_i2c1_object+2,_p_i2c1_current
 20084  001C0A  C2DE  F025         	movff	_i2c1_object+3,_p_i2c1_current+1
 20085                           
 20086                           ; BSR set to: 2
 20087                           ;i2c1.c: 269: i2c1_trb_count = i2c1_object.pTrHead->count;
 20088  001C0E  C2DD  FFD9         	movff	_i2c1_object+2,fsr2l
 20089  001C12  C2DE  FFDA         	movff	_i2c1_object+3,fsr2h
 20090  001C16  50DF               	movf	indf2,w,c
 20091  001C18  6E2E               	movwf	_i2c1_trb_count,c
 20092                           
 20093                           ; BSR set to: 2
 20094                           ;i2c1.c: 270: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 20095  001C1A  EE20 F001          	lfsr	2,1
 20096  001C1E  51DD               	movf	(_i2c1_object+2)& (0+255),w,b
 20097  001C20  26D9               	addwf	fsr2l,f,c
 20098  001C22  51DE               	movf	(_i2c1_object+3)& (0+255),w,b
 20099  001C24  22DA               	addwfc	fsr2h,f,c
 20100  001C26  CFDE F026          	movff	postinc2,_p_i2c1_trb_current
 20101  001C2A  CFDD F027          	movff	postdec2,_p_i2c1_trb_current+1
 20102                           
 20103                           ; BSR set to: 2
 20104                           ;i2c1.c: 272: i2c1_object.pTrHead++;
 20105  001C2E  0E05               	movlw	5
 20106  001C30  27DD               	addwf	(_i2c1_object+2)& (0+255),f,b
 20107  001C32  0E00               	movlw	0
 20108  001C34  23DE               	addwfc	(_i2c1_object+3)& (0+255),f,b
 20109                           
 20110                           ; BSR set to: 2
 20111                           ;i2c1.c: 275: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 20112  001C36  0EFB               	movlw	low (_i2c1_tr_queue+5)
 20113  001C38  19DD               	xorwf	(_i2c1_object+2)& (0+255),w,b
 20114  001C3A  E108               	bnz	i2l11971
 20115  001C3C  0E03               	movlw	high (_i2c1_tr_queue+5)
 20116  001C3E  19DE               	xorwf	(_i2c1_object+3)& (0+255),w,b
 20117  001C40  A4D8               	btfss	status,2,c
 20118  001C42  D004               	goto	i2l1439
 20119                           
 20120                           ; BSR set to: 2
 20121                           ;i2c1.c: 276: {
 20122                           ;i2c1.c: 278: i2c1_object.pTrHead = i2c1_tr_queue;
 20123  001C44  0EF6               	movlw	low _i2c1_tr_queue
 20124  001C46  6FDD               	movwf	(_i2c1_object+2)& (0+255),b
 20125  001C48  0E03               	movlw	high _i2c1_tr_queue
 20126  001C4A  6FDE               	movwf	(_i2c1_object+3)& (0+255),b
 20127  001C4C                     i2l1439:
 20128  001C4C                     i2l11971:
 20129                           
 20130                           ; BSR set to: 2
 20131                           ;i2c1.c: 279: }
 20132                           ;i2c1.c: 283: i2c1_object.trStatus.s.full = 0;
 20133  001C4C  91DF               	bcf	(_i2c1_object+4)& (0+255),0,b
 20134                           
 20135                           ;i2c1.c: 286: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 20136  001C4E  51DB               	movf	_i2c1_object& (0+255),w,b
 20137  001C50  19DD               	xorwf	(_i2c1_object+2)& (0+255),w,b
 20138  001C52  E104               	bnz	i2l1440
 20139  001C54  51DC               	movf	(_i2c1_object+1)& (0+255),w,b
 20140  001C56  19DE               	xorwf	(_i2c1_object+3)& (0+255),w,b
 20141  001C58  B4D8               	btfsc	status,2,c
 20142                           
 20143                           ; BSR set to: 2
 20144                           ;i2c1.c: 287: {
 20145                           ;i2c1.c: 289: i2c1_object.trStatus.s.empty = 1;
 20146  001C5A  83DF               	bsf	(_i2c1_object+4)& (0+255),1,b
 20147  001C5C                     i2l1440:
 20148                           
 20149                           ; BSR set to: 2
 20150                           ;i2c1.c: 290: }
 20151                           ;i2c1.c: 293: SSP1CON2bits.SEN = 1;
 20152  001C5C  8097               	bsf	3991,0,c	;volatile
 20153                           
 20154                           ; BSR set to: 2
 20155                           ;i2c1.c: 296: i2c1_state = S_MASTER_SEND_ADDR;
 20156  001C5E  0E02               	movlw	2
 20157  001C60  6E2F               	movwf	_i2c1_state,c
 20158                           
 20159                           ; BSR set to: 2
 20160                           ;i2c1.c: 297: }
 20161                           ;i2c1.c: 299: break;
 20162  001C62  0012               	return	
 20163  001C64                     i2l1442:
 20164                           
 20165                           ;i2c1.c: 306: SSP1CON2bits.RSEN = 1;
 20166  001C64  8297               	bsf	3991,1,c	;volatile
 20167                           
 20168                           ;i2c1.c: 309: i2c1_state = S_MASTER_SEND_ADDR;
 20169  001C66  0E02               	movlw	2
 20170  001C68  6E2F               	movwf	_i2c1_state,c
 20171                           
 20172                           ;i2c1.c: 311: break;
 20173  001C6A  0012               	return	
 20174  001C6C                     i2l1443:
 20175                           
 20176                           ;i2c1.c: 315: if(SSP1CON2bits.ACKSTAT)
 20177  001C6C  AC97               	btfss	3991,6,c	;volatile
 20178  001C6E  D006               	goto	i2l1444
 20179                           
 20180                           ;i2c1.c: 316: {
 20181                           ;i2c1.c: 317: i2c1_object.i2cErrors++;
 20182  001C70  0102               	movlb	2	; () banked
 20183  001C72  2BE1               	incf	(_i2c1_object+6)& (0+255),f,b
 20184                           
 20185                           ; BSR set to: 2
 20186                           ;i2c1.c: 318: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 20187  001C74  0E04               	movlw	4
 20188  001C76  ECF5  F01C         	call	_I2C1_Stop
 20189                           
 20190                           ;i2c1.c: 319: }
 20191  001C7A  0012               	return	
 20192  001C7C                     i2l1444:
 20193                           
 20194                           ;i2c1.c: 320: else
 20195                           ;i2c1.c: 321: {
 20196                           ;i2c1.c: 323: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 20197  001C7C  90D8               	bcf	status,0,c
 20198  001C7E  3042               	rrcf	I2C1_ISR@i2c_address+1,w,c
 20199  001C80  6E05               	movwf	(??_I2C1_ISR+1)& (0+255),c
 20200  001C82  3041               	rrcf	I2C1_ISR@i2c_address,w,c
 20201  001C84  6E04               	movwf	??_I2C1_ISR& (0+255),c
 20202  001C86  5004               	movf	??_I2C1_ISR,w,c
 20203  001C88  6E92               	movwf	3986,c	;volatile
 20204                           
 20205                           ;i2c1.c: 326: if(i2c_address & 0x01)
 20206  001C8A  A041               	btfss	I2C1_ISR@i2c_address,0,c
 20207  001C8C  D003               	goto	i2l1446
 20208                           
 20209                           ;i2c1.c: 327: {
 20210                           ;i2c1.c: 330: i2c1_state = S_MASTER_10BIT_RESTART;
 20211  001C8E  0E0B               	movlw	11
 20212  001C90  6E2F               	movwf	_i2c1_state,c
 20213                           
 20214                           ;i2c1.c: 331: }
 20215  001C92  0012               	return	
 20216  001C94                     i2l1446:
 20217                           
 20218                           ;i2c1.c: 332: else
 20219                           ;i2c1.c: 333: {
 20220                           ;i2c1.c: 335: i2c1_state = S_MASTER_SEND_DATA;
 20221  001C94  0E03               	movlw	3
 20222  001C96  6E2F               	movwf	_i2c1_state,c
 20223                           
 20224                           ;i2c1.c: 336: }
 20225                           ;i2c1.c: 337: }
 20226                           ;i2c1.c: 339: break;
 20227  001C98  0012               	return	
 20228  001C9A                     i2l1448:
 20229                           
 20230                           ;i2c1.c: 343: if(SSP1CON2bits.ACKSTAT)
 20231  001C9A  AC97               	btfss	3991,6,c	;volatile
 20232  001C9C  D006               	goto	i2l1449
 20233                           
 20234                           ;i2c1.c: 344: {
 20235                           ;i2c1.c: 345: i2c1_object.i2cErrors++;
 20236  001C9E  0102               	movlb	2	; () banked
 20237  001CA0  2BE1               	incf	(_i2c1_object+6)& (0+255),f,b
 20238                           
 20239                           ; BSR set to: 2
 20240                           ;i2c1.c: 346: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 20241  001CA2  0E04               	movlw	4
 20242  001CA4  ECF5  F01C         	call	_I2C1_Stop
 20243                           
 20244                           ;i2c1.c: 347: }
 20245  001CA8  0012               	return	
 20246  001CAA                     i2l1449:
 20247                           
 20248                           ;i2c1.c: 348: else
 20249                           ;i2c1.c: 349: {
 20250                           ;i2c1.c: 352: SSP1CON2bits.RSEN = 1;
 20251  001CAA  8297               	bsf	3991,1,c	;volatile
 20252                           
 20253                           ;i2c1.c: 356: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 20254  001CAC  C041  F004         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
 20255  001CB0  C042  F005         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
 20256  001CB4  C005  F004         	movff	??_I2C1_ISR+1,??_I2C1_ISR
 20257  001CB8  6A05               	clrf	??_I2C1_ISR+1,c
 20258  001CBA  0E06               	movlw	6
 20259  001CBC  1604               	andwf	??_I2C1_ISR,f,c
 20260  001CBE  0E00               	movlw	0
 20261  001CC0  1605               	andwf	??_I2C1_ISR+1,f,c
 20262  001CC2  0EF0               	movlw	240
 20263  001CC4  1004               	iorwf	??_I2C1_ISR,w,c
 20264  001CC6  6E41               	movwf	I2C1_ISR@i2c_address,c
 20265  001CC8  5005               	movf	??_I2C1_ISR+1,w,c
 20266  001CCA  6E42               	movwf	I2C1_ISR@i2c_address+1,c
 20267                           
 20268                           ;i2c1.c: 359: i2c_address |= 0x0001;
 20269  001CCC  8041               	bsf	I2C1_ISR@i2c_address,0,c
 20270                           
 20271                           ;i2c1.c: 362: i2c_10bit_address_restart = 1;
 20272  001CCE  0E01               	movlw	1
 20273  001CD0  6E2C               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
 20274                           
 20275                           ;i2c1.c: 365: i2c1_state = S_MASTER_SEND_ADDR;
 20276  001CD2  0E02               	movlw	2
 20277  001CD4  6E2F               	movwf	_i2c1_state,c
 20278                           
 20279                           ;i2c1.c: 366: }
 20280                           ;i2c1.c: 368: break;
 20281  001CD6  0012               	return	
 20282  001CD8                     
 20283                           ;i2c1.c: 383: if(i2c_10bit_address_restart != 1)
 20284  001CD8  042C               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
 20285  001CDA  B4D8               	btfsc	status,2,c
 20286  001CDC  D01A               	goto	i2l1453
 20287                           
 20288                           ;i2c1.c: 384: {
 20289                           ;i2c1.c: 386: i2c_address = p_i2c1_trb_current->address;
 20290  001CDE  C026  FFD9         	movff	_p_i2c1_trb_current,fsr2l
 20291  001CE2  C027  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
 20292  001CE6  CFDE F041          	movff	postinc2,I2C1_ISR@i2c_address
 20293  001CEA  CFDD F042          	movff	postdec2,I2C1_ISR@i2c_address+1
 20294                           
 20295                           ;i2c1.c: 387: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 20296  001CEE  EE20 F003          	lfsr	2,3
 20297  001CF2  5026               	movf	_p_i2c1_trb_current,w,c
 20298  001CF4  26D9               	addwf	fsr2l,f,c
 20299  001CF6  5027               	movf	_p_i2c1_trb_current+1,w,c
 20300  001CF8  22DA               	addwfc	fsr2h,f,c
 20301  001CFA  CFDE F3D5          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
 20302  001CFE  CFDD F3D6          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
 20303                           
 20304                           ;i2c1.c: 388: i2c_bytes_left = p_i2c1_trb_current->length;
 20305  001D02  EE20 F002          	lfsr	2,2
 20306  001D06  5026               	movf	_p_i2c1_trb_current,w,c
 20307  001D08  26D9               	addwf	fsr2l,f,c
 20308  001D0A  5027               	movf	_p_i2c1_trb_current+1,w,c
 20309  001D0C  22DA               	addwfc	fsr2h,f,c
 20310  001D0E  50DF               	movf	indf2,w,c
 20311  001D10  6E2D               	movwf	I2C1_ISR@i2c_bytes_left,c
 20312  001D12                     i2l1453:
 20313                           
 20314                           ;i2c1.c: 411: else
 20315                           ;i2c1.c: 412: {
 20316                           ;i2c1.c: 414: SSP1BUF = i2c_address;
 20317  001D12  C041  FF92         	movff	I2C1_ISR@i2c_address,3986	;volatile
 20318                           
 20319                           ;i2c1.c: 415: if(i2c_address & 0x01)
 20320  001D16  A041               	btfss	I2C1_ISR@i2c_address,0,c
 20321  001D18  D003               	goto	i2l1457
 20322                           
 20323                           ;i2c1.c: 416: {
 20324                           ;i2c1.c: 418: i2c1_state = S_MASTER_ACK_ADDR;
 20325  001D1A  0E05               	movlw	5
 20326  001D1C  6E2F               	movwf	_i2c1_state,c
 20327                           
 20328                           ;i2c1.c: 419: }
 20329  001D1E  0012               	return	
 20330  001D20                     i2l1457:
 20331                           
 20332                           ;i2c1.c: 420: else
 20333                           ;i2c1.c: 421: {
 20334                           ;i2c1.c: 423: i2c1_state = S_MASTER_SEND_DATA;
 20335  001D20  0E03               	movlw	3
 20336  001D22  6E2F               	movwf	_i2c1_state,c
 20337                           
 20338                           ;i2c1.c: 424: }
 20339                           ;i2c1.c: 425: }
 20340                           ;i2c1.c: 426: break;
 20341  001D24  0012               	return	
 20342  001D26                     i2l1459:
 20343                           
 20344                           ;i2c1.c: 431: if(SSP1CON2bits.ACKSTAT)
 20345  001D26  AC97               	btfss	3991,6,c	;volatile
 20346  001D28  D007               	goto	i2l1460
 20347                           
 20348                           ;i2c1.c: 432: {
 20349                           ;i2c1.c: 434: i2c1_object.i2cErrors++;
 20350  001D2A  0102               	movlb	2	; () banked
 20351  001D2C  2BE1               	incf	(_i2c1_object+6)& (0+255),f,b
 20352                           
 20353                           ; BSR set to: 2
 20354                           ;i2c1.c: 437: SSP1CON2bits.ACKSTAT = 0;
 20355  001D2E  9C97               	bcf	3991,6,c	;volatile
 20356                           
 20357                           ; BSR set to: 2
 20358                           ;i2c1.c: 440: I2C1_Stop(I2C1_DATA_NO_ACK);
 20359  001D30  0E05               	movlw	5
 20360  001D32  ECF5  F01C         	call	_I2C1_Stop
 20361                           
 20362                           ;i2c1.c: 442: }
 20363  001D36  0012               	return	
 20364  001D38                     i2l1460:
 20365                           
 20366                           ;i2c1.c: 443: else
 20367                           ;i2c1.c: 444: {
 20368                           ;i2c1.c: 446: if(i2c_bytes_left-- == 0U)
 20369  001D38  062D               	decf	I2C1_ISR@i2c_bytes_left,f,c
 20370  001D3A  282D               	incf	I2C1_ISR@i2c_bytes_left,w,c
 20371  001D3C  A4D8               	btfss	status,2,c
 20372  001D3E  D00E               	goto	i2l1462
 20373                           
 20374                           ;i2c1.c: 447: {
 20375                           ;i2c1.c: 451: p_i2c1_trb_current++;
 20376  001D40  0E05               	movlw	5
 20377  001D42  2626               	addwf	_p_i2c1_trb_current,f,c
 20378  001D44  0E00               	movlw	0
 20379  001D46  2227               	addwfc	_p_i2c1_trb_current+1,f,c
 20380                           
 20381                           ;i2c1.c: 454: if(--i2c1_trb_count == 0)
 20382  001D48  2E2E               	decfsz	_i2c1_trb_count,f,c
 20383  001D4A  D004               	goto	i2l1463
 20384                           
 20385                           ;i2c1.c: 455: {
 20386                           ;i2c1.c: 456: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 20387  001D4C  0E00               	movlw	0
 20388  001D4E  ECF5  F01C         	call	_I2C1_Stop
 20389                           
 20390                           ;i2c1.c: 457: }
 20391  001D52  0012               	return	
 20392  001D54                     i2l1463:
 20393                           
 20394                           ;i2c1.c: 458: else
 20395                           ;i2c1.c: 459: {
 20396                           ;i2c1.c: 466: SSP1CON2bits.RSEN = 1;
 20397  001D54  8297               	bsf	3991,1,c	;volatile
 20398                           
 20399                           ;i2c1.c: 469: i2c1_state = S_MASTER_SEND_ADDR;
 20400  001D56  0E02               	movlw	2
 20401  001D58  6E2F               	movwf	_i2c1_state,c
 20402                           
 20403                           ;i2c1.c: 471: }
 20404                           ;i2c1.c: 472: }
 20405  001D5A  0012               	return	
 20406  001D5C                     i2l1462:
 20407                           
 20408                           ;i2c1.c: 473: else
 20409                           ;i2c1.c: 474: {
 20410                           ;i2c1.c: 476: SSP1BUF = *pi2c_buf_ptr++;
 20411  001D5C  C3D5  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 20412  001D60  C3D6  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 20413  001D64  50DF               	movf	indf2,w,c
 20414  001D66  6E92               	movwf	3986,c	;volatile
 20415  001D68  0103               	movlb	3	; () banked
 20416  001D6A  4BD5               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 20417  001D6C  2BD6               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 20418                           
 20419                           ; BSR set to: 3
 20420                           ;i2c1.c: 477: }
 20421                           ;i2c1.c: 478: }
 20422                           ;i2c1.c: 479: break;
 20423                           
 20424                           ; BSR set to: 3
 20425  001D6E  0012               	return	
 20426  001D70                     i2l1466:
 20427                           
 20428                           ;i2c1.c: 484: if(SSP1CON2bits.ACKSTAT)
 20429  001D70  AC97               	btfss	3991,6,c	;volatile
 20430  001D72  D007               	goto	i2l1467
 20431                           
 20432                           ;i2c1.c: 485: {
 20433                           ;i2c1.c: 488: i2c1_object.i2cErrors++;
 20434  001D74  0102               	movlb	2	; () banked
 20435  001D76  2BE1               	incf	(_i2c1_object+6)& (0+255),f,b
 20436                           
 20437                           ; BSR set to: 2
 20438                           ;i2c1.c: 491: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 20439  001D78  0E04               	movlw	4
 20440  001D7A  ECF5  F01C         	call	_I2C1_Stop
 20441                           
 20442                           ;i2c1.c: 494: SSP1CON2bits.ACKSTAT = 0;
 20443  001D7E  9C97               	bcf	3991,6,c	;volatile
 20444                           
 20445                           ;i2c1.c: 495: }
 20446  001D80  0012               	return	
 20447  001D82                     i2l1467:
 20448                           
 20449                           ;i2c1.c: 496: else
 20450                           ;i2c1.c: 497: {
 20451                           ;i2c1.c: 498: SSP1CON2bits.RCEN = 1;
 20452  001D82  8697               	bsf	3991,3,c	;volatile
 20453                           
 20454                           ;i2c1.c: 499: i2c1_state = S_MASTER_ACK_RCV_DATA;
 20455  001D84  0E08               	movlw	8
 20456  001D86  6E2F               	movwf	_i2c1_state,c
 20457                           
 20458                           ;i2c1.c: 500: }
 20459                           ;i2c1.c: 501: break;
 20460  001D88  0012               	return	
 20461  001D8A                     
 20462                           ;i2c1.c: 508: i2c1_state = S_MASTER_ACK_RCV_DATA;
 20463  001D8A  0E08               	movlw	8
 20464  001D8C  6E2F               	movwf	_i2c1_state,c
 20465                           
 20466                           ;i2c1.c: 511: SSP1CON2bits.RCEN = 1;
 20467  001D8E  8697               	bsf	3991,3,c	;volatile
 20468                           
 20469                           ;i2c1.c: 513: break;
 20470  001D90  0012               	return	
 20471  001D92                     
 20472                           ;i2c1.c: 518: *pi2c_buf_ptr++ = SSP1BUF;
 20473  001D92  C3D5  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 20474  001D96  C3D6  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 20475  001D9A  CF92 FFDF          	movff	3986,indf2	;volatile
 20476  001D9E  0103               	movlb	3	; () banked
 20477  001DA0  4BD5               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 20478  001DA2  2BD6               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 20479                           
 20480                           ; BSR set to: 3
 20481                           ;i2c1.c: 521: if(--i2c_bytes_left)
 20482  001DA4  0E01               	movlw	1
 20483  001DA6  5E2D               	subwf	I2C1_ISR@i2c_bytes_left,f,c
 20484  001DA8  B4D8               	btfsc	status,2,c
 20485  001DAA  D004               	goto	i2l1471
 20486                           
 20487                           ; BSR set to: 3
 20488                           ;i2c1.c: 522: {
 20489                           ;i2c1.c: 528: SSP1CON2bits.ACKDT = 0;
 20490  001DAC  9A97               	bcf	3991,5,c	;volatile
 20491                           
 20492                           ; BSR set to: 3
 20493                           ;i2c1.c: 531: i2c1_state = S_MASTER_RCV_DATA;
 20494  001DAE  0E06               	movlw	6
 20495  001DB0  6E2F               	movwf	_i2c1_state,c
 20496                           
 20497                           ;i2c1.c: 532: }
 20498  001DB2  D003               	goto	i2l1472
 20499  001DB4                     i2l1471:
 20500                           
 20501                           ; BSR set to: 3
 20502                           ;i2c1.c: 533: else
 20503                           ;i2c1.c: 534: {
 20504                           ;i2c1.c: 538: SSP1CON2bits.ACKDT = 1;
 20505  001DB4  8A97               	bsf	3991,5,c	;volatile
 20506                           
 20507                           ; BSR set to: 3
 20508                           ;i2c1.c: 540: I2C1_FunctionComplete();
 20509  001DB6  ECD7  F01F         	call	_I2C1_FunctionComplete	;wreg free
 20510  001DBA                     i2l1472:
 20511                           
 20512                           ;i2c1.c: 541: }
 20513                           ;i2c1.c: 544: SSP1CON2bits.ACKEN = 1;
 20514  001DBA  8897               	bsf	3991,4,c	;volatile
 20515                           
 20516                           ;i2c1.c: 545: break;
 20517  001DBC  0012               	return	
 20518  001DBE                     
 20519                           ;i2c1.c: 548: case S_MASTER_SEND_STOP:
 20520                           ;i2c1.c: 551: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 20521  001DBE  0E00               	movlw	0
 20522  001DC0  ECF5  F01C         	call	_I2C1_Stop
 20523                           
 20524                           ;i2c1.c: 552: break;
 20525  001DC4  0012               	return	
 20526  001DC6                     
 20527                           ;i2c1.c: 558: i2c1_object.i2cErrors++;
 20528  001DC6  0102               	movlb	2	; () banked
 20529  001DC8  2BE1               	incf	(_i2c1_object+6)& (0+255),f,b
 20530                           
 20531                           ; BSR set to: 2
 20532                           ;i2c1.c: 559: I2C1_Stop(I2C1_LOST_STATE);
 20533  001DCA  0E06               	movlw	6
 20534  001DCC  ECF5  F01C         	call	_I2C1_Stop
 20535                           
 20536                           ;i2c1.c: 562: }
 20537                           
 20538                           ;i2c1.c: 560: break;
 20539  001DD0  0012               	return	
 20540  001DD2                     i2l1436:
 20541  001DD2  502F               	movf	_i2c1_state,w,c
 20542                           
 20543                           ; Switch size 1, requested type "space"
 20544                           ; Number of cases is 11, Range of values is 0 to 11
 20545                           ; switch strategies available:
 20546                           ; Name         Instructions Cycles
 20547                           ; simple_byte           34    18 (average)
 20548                           ;	Chosen strategy is simple_byte
 20549  001DD4  0A00               	xorlw	0	; case 0
 20550  001DD6  B4D8               	btfsc	status,2,c
 20551  001DD8  D713               	goto	i2l1437
 20552  001DDA  0A01               	xorlw	1	; case 1
 20553  001DDC  B4D8               	btfsc	status,2,c
 20554  001DDE  D742               	goto	i2l1442
 20555  001DE0  0A03               	xorlw	3	; case 2
 20556  001DE2  B4D8               	btfsc	status,2,c
 20557  001DE4  D779               	goto	i2l1451
 20558  001DE6  0A01               	xorlw	1	; case 3
 20559  001DE8  B4D8               	btfsc	status,2,c
 20560  001DEA  D79D               	goto	i2l1459
 20561  001DEC  0A07               	xorlw	7	; case 4
 20562  001DEE  B4D8               	btfsc	status,2,c
 20563  001DF0  D7E6               	goto	i2l1473
 20564  001DF2  0A01               	xorlw	1	; case 5
 20565  001DF4  B4D8               	btfsc	status,2,c
 20566  001DF6  D7BC               	goto	i2l1466
 20567  001DF8  0A03               	xorlw	3	; case 6
 20568  001DFA  B4D8               	btfsc	status,2,c
 20569  001DFC  D7C6               	goto	i2l1469
 20570  001DFE  0A01               	xorlw	1	; case 7
 20571  001E00  B4D8               	btfsc	status,2,c
 20572  001E02  D7DD               	goto	i2l1473
 20573  001E04  0A0F               	xorlw	15	; case 8
 20574  001E06  B4D8               	btfsc	status,2,c
 20575  001E08  D7C4               	goto	i2l1470
 20576  001E0A  0A02               	xorlw	2	; case 10
 20577  001E0C  B4D8               	btfsc	status,2,c
 20578  001E0E  D72E               	goto	i2l1443
 20579  001E10  0A01               	xorlw	1	; case 11
 20580  001E12  B4D8               	btfsc	status,2,c
 20581  001E14  D742               	goto	i2l1448
 20582  001E16  D7D7               	goto	i2l1475
 20583  001E18                     __end_of_I2C1_ISR:
 20584                           	opt stack 0
 20585                           tosu	equ	0xFFF
 20586                           tosh	equ	0xFFE
 20587                           tosl	equ	0xFFD
 20588                           pclatu	equ	0xFFB
 20589                           pclath	equ	0xFFA
 20590                           tblptru	equ	0xFF8
 20591                           tblptrh	equ	0xFF7
 20592                           tblptrl	equ	0xFF6
 20593                           tablat	equ	0xFF5
 20594                           prodh	equ	0xFF4
 20595                           prodl	equ	0xFF3
 20596                           intcon	equ	0xFF2
 20597                           postinc0	equ	0xFEE
 20598                           fsr0h	equ	0xFEA
 20599                           fsr0l	equ	0xFE9
 20600                           wreg	equ	0xFE8
 20601                           indf1	equ	0xFE7
 20602                           postinc1	equ	0xFE6
 20603                           postdec1	equ	0xFE5
 20604                           plusw1	equ	0xFE3
 20605                           fsr1h	equ	0xFE2
 20606                           fsr1l	equ	0xFE1
 20607                           indf2	equ	0xFDF
 20608                           postinc2	equ	0xFDE
 20609                           postdec2	equ	0xFDD
 20610                           plusw2	equ	0xFDB
 20611                           fsr2h	equ	0xFDA
 20612                           fsr2l	equ	0xFD9
 20613                           status	equ	0xFD8
 20614                           
 20615 ;; *************** function _I2C1_Stop *****************
 20616 ;; Defined at:
 20617 ;;		line 583 in file "mcc_generated_files/i2c1.c"
 20618 ;; Parameters:    Size  Location     Type
 20619 ;;  completion_c    1    wreg     enum E11632
 20620 ;; Auto vars:     Size  Location     Type
 20621 ;;  completion_c    1    2[COMRAM] enum E11632
 20622 ;; Return value:  Size  Location     Type
 20623 ;;                  1    wreg      void 
 20624 ;; Registers used:
 20625 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20626 ;; Tracked objects:
 20627 ;;		On entry : 0/0
 20628 ;;		On exit  : 0/0
 20629 ;;		Unchanged: 0/0
 20630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20633 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20634 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20635 ;;Total ram usage:        3 bytes
 20636 ;; Hardware stack levels used:    1
 20637 ;; This function calls:
 20638 ;;		Nothing
 20639 ;; This function is called by:
 20640 ;;		_I2C1_ISR
 20641 ;; This function uses a non-reentrant model
 20642 ;;
 20643                           
 20644                           	psect	text97
 20645  0039EA                     __ptext97:
 20646                           	opt stack 0
 20647  0039EA                     _I2C1_Stop:
 20648                           	opt stack 21
 20649                           
 20650                           ;incstack = 0
 20651                           ;I2C1_Stop@completion_code stored from wreg
 20652  0039EA  6E03               	movwf	I2C1_Stop@completion_code,c
 20653                           
 20654                           ;i2c1.c: 586: SSP1CON2bits.PEN = 1;
 20655  0039EC  8497               	bsf	3991,2,c	;volatile
 20656                           
 20657                           ;i2c1.c: 589: if (p_i2c1_current->pTrFlag != (0))
 20658  0039EE  EE20 F003          	lfsr	2,3
 20659  0039F2  5024               	movf	_p_i2c1_current,w,c
 20660  0039F4  26D9               	addwf	fsr2l,f,c
 20661  0039F6  5025               	movf	_p_i2c1_current+1,w,c
 20662  0039F8  22DA               	addwfc	fsr2h,f,c
 20663  0039FA  50DE               	movf	postinc2,w,c
 20664  0039FC  10DE               	iorwf	postinc2,w,c
 20665  0039FE  B4D8               	btfsc	status,2,c
 20666  003A00  D010               	goto	i2l1483
 20667                           
 20668                           ;i2c1.c: 590: {
 20669                           ;i2c1.c: 592: *(p_i2c1_current->pTrFlag) = completion_code;
 20670  003A02  EE20 F003          	lfsr	2,3
 20671  003A06  5024               	movf	_p_i2c1_current,w,c
 20672  003A08  26D9               	addwf	fsr2l,f,c
 20673  003A0A  5025               	movf	_p_i2c1_current+1,w,c
 20674  003A0C  22DA               	addwfc	fsr2h,f,c
 20675  003A0E  CFDE F001          	movff	postinc2,??_I2C1_Stop
 20676  003A12  CFDD F002          	movff	postdec2,??_I2C1_Stop+1
 20677  003A16  C001  FFD9         	movff	??_I2C1_Stop,fsr2l
 20678  003A1A  C002  FFDA         	movff	??_I2C1_Stop+1,fsr2h
 20679  003A1E  C003  FFDF         	movff	I2C1_Stop@completion_code,indf2
 20680  003A22                     i2l1483:
 20681                           
 20682                           ;i2c1.c: 593: }
 20683                           ;i2c1.c: 596: i2c1_state = S_MASTER_IDLE;
 20684  003A22  0E00               	movlw	0
 20685  003A24  6E2F               	movwf	_i2c1_state,c
 20686  003A26  0012               	return		;funcret
 20687  003A28                     __end_of_I2C1_Stop:
 20688                           	opt stack 0
 20689                           tosu	equ	0xFFF
 20690                           tosh	equ	0xFFE
 20691                           tosl	equ	0xFFD
 20692                           pclatu	equ	0xFFB
 20693                           pclath	equ	0xFFA
 20694                           tblptru	equ	0xFF8
 20695                           tblptrh	equ	0xFF7
 20696                           tblptrl	equ	0xFF6
 20697                           tablat	equ	0xFF5
 20698                           prodh	equ	0xFF4
 20699                           prodl	equ	0xFF3
 20700                           intcon	equ	0xFF2
 20701                           postinc0	equ	0xFEE
 20702                           fsr0h	equ	0xFEA
 20703                           fsr0l	equ	0xFE9
 20704                           wreg	equ	0xFE8
 20705                           indf1	equ	0xFE7
 20706                           postinc1	equ	0xFE6
 20707                           postdec1	equ	0xFE5
 20708                           plusw1	equ	0xFE3
 20709                           fsr1h	equ	0xFE2
 20710                           fsr1l	equ	0xFE1
 20711                           indf2	equ	0xFDF
 20712                           postinc2	equ	0xFDE
 20713                           postdec2	equ	0xFDD
 20714                           plusw2	equ	0xFDB
 20715                           fsr2h	equ	0xFDA
 20716                           fsr2l	equ	0xFD9
 20717                           status	equ	0xFD8
 20718                           
 20719 ;; *************** function _I2C1_FunctionComplete *****************
 20720 ;; Defined at:
 20721 ;;		line 565 in file "mcc_generated_files/i2c1.c"
 20722 ;; Parameters:    Size  Location     Type
 20723 ;;		None
 20724 ;; Auto vars:     Size  Location     Type
 20725 ;;		None
 20726 ;; Return value:  Size  Location     Type
 20727 ;;                  1    wreg      void 
 20728 ;; Registers used:
 20729 ;;		wreg, status,2, status,0
 20730 ;; Tracked objects:
 20731 ;;		On entry : 0/0
 20732 ;;		On exit  : 0/0
 20733 ;;		Unchanged: 0/0
 20734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20739 ;;Total ram usage:        0 bytes
 20740 ;; Hardware stack levels used:    1
 20741 ;; This function calls:
 20742 ;;		Nothing
 20743 ;; This function is called by:
 20744 ;;		_I2C1_ISR
 20745 ;; This function uses a non-reentrant model
 20746 ;;
 20747                           
 20748                           	psect	text98
 20749  003FAE                     __ptext98:
 20750                           	opt stack 0
 20751  003FAE                     _I2C1_FunctionComplete:
 20752                           	opt stack 21
 20753                           
 20754                           ;i2c1.c: 569: p_i2c1_trb_current++;
 20755                           
 20756                           ;incstack = 0
 20757  003FAE  0E05               	movlw	5
 20758  003FB0  2626               	addwf	_p_i2c1_trb_current,f,c
 20759  003FB2  0E00               	movlw	0
 20760  003FB4  2227               	addwfc	_p_i2c1_trb_current+1,f,c
 20761                           
 20762                           ;i2c1.c: 572: if(--i2c1_trb_count == 0)
 20763  003FB6  2E2E               	decfsz	_i2c1_trb_count,f,c
 20764  003FB8  D003               	goto	i2l1478
 20765                           
 20766                           ;i2c1.c: 573: {
 20767                           ;i2c1.c: 574: i2c1_state = S_MASTER_SEND_STOP;
 20768  003FBA  0E04               	movlw	4
 20769  003FBC  6E2F               	movwf	_i2c1_state,c
 20770                           
 20771                           ;i2c1.c: 575: }
 20772  003FBE  0012               	return	
 20773  003FC0                     i2l1478:
 20774                           
 20775                           ;i2c1.c: 576: else
 20776                           ;i2c1.c: 577: {
 20777                           ;i2c1.c: 578: i2c1_state = S_MASTER_RESTART;
 20778  003FC0  0E01               	movlw	1
 20779  003FC2  6E2F               	movwf	_i2c1_state,c
 20780  003FC4  0012               	return	
 20781  003FC6                     __end_of_I2C1_FunctionComplete:
 20782                           	opt stack 0
 20783                           tosu	equ	0xFFF
 20784                           tosh	equ	0xFFE
 20785                           tosl	equ	0xFFD
 20786                           pclatu	equ	0xFFB
 20787                           pclath	equ	0xFFA
 20788                           tblptru	equ	0xFF8
 20789                           tblptrh	equ	0xFF7
 20790                           tblptrl	equ	0xFF6
 20791                           tablat	equ	0xFF5
 20792                           prodh	equ	0xFF4
 20793                           prodl	equ	0xFF3
 20794                           intcon	equ	0xFF2
 20795                           postinc0	equ	0xFEE
 20796                           fsr0h	equ	0xFEA
 20797                           fsr0l	equ	0xFE9
 20798                           wreg	equ	0xFE8
 20799                           indf1	equ	0xFE7
 20800                           postinc1	equ	0xFE6
 20801                           postdec1	equ	0xFE5
 20802                           plusw1	equ	0xFE3
 20803                           fsr1h	equ	0xFE2
 20804                           fsr1l	equ	0xFE1
 20805                           indf2	equ	0xFDF
 20806                           postinc2	equ	0xFDE
 20807                           postdec2	equ	0xFDD
 20808                           plusw2	equ	0xFDB
 20809                           fsr2h	equ	0xFDA
 20810                           fsr2l	equ	0xFD9
 20811                           status	equ	0xFD8
 20812                           
 20813 ;; *************** function _I2C1_BusCollisionISR *****************
 20814 ;; Defined at:
 20815 ;;		line 729 in file "mcc_generated_files/i2c1.c"
 20816 ;; Parameters:    Size  Location     Type
 20817 ;;		None
 20818 ;; Auto vars:     Size  Location     Type
 20819 ;;		None
 20820 ;; Return value:  Size  Location     Type
 20821 ;;                  1    wreg      void 
 20822 ;; Registers used:
 20823 ;;		None
 20824 ;; Tracked objects:
 20825 ;;		On entry : 0/0
 20826 ;;		On exit  : 0/0
 20827 ;;		Unchanged: 0/0
 20828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20833 ;;Total ram usage:        0 bytes
 20834 ;; Hardware stack levels used:    1
 20835 ;; This function calls:
 20836 ;;		Nothing
 20837 ;; This function is called by:
 20838 ;;		_INTERRUPT_InterruptManager
 20839 ;; This function uses a non-reentrant model
 20840 ;;
 20841                           
 20842                           	psect	text99
 20843  0040EA                     __ptext99:
 20844                           	opt stack 0
 20845  0040EA                     _I2C1_BusCollisionISR:
 20846                           	opt stack 22
 20847                           
 20848                           ;incstack = 0
 20849  0040EA  0012               	return		;funcret
 20850  0040EC                     __end_of_I2C1_BusCollisionISR:
 20851                           	opt stack 0
 20852                           tosu	equ	0xFFF
 20853                           tosh	equ	0xFFE
 20854                           tosl	equ	0xFFD
 20855                           pclatu	equ	0xFFB
 20856                           pclath	equ	0xFFA
 20857                           tblptru	equ	0xFF8
 20858                           tblptrh	equ	0xFF7
 20859                           tblptrl	equ	0xFF6
 20860                           tablat	equ	0xFF5
 20861                           prodh	equ	0xFF4
 20862                           prodl	equ	0xFF3
 20863                           intcon	equ	0xFF2
 20864                           postinc0	equ	0xFEE
 20865                           fsr0h	equ	0xFEA
 20866                           fsr0l	equ	0xFE9
 20867                           wreg	equ	0xFE8
 20868                           indf1	equ	0xFE7
 20869                           postinc1	equ	0xFE6
 20870                           postdec1	equ	0xFE5
 20871                           plusw1	equ	0xFE3
 20872                           fsr1h	equ	0xFE2
 20873                           fsr1l	equ	0xFE1
 20874                           indf2	equ	0xFDF
 20875                           postinc2	equ	0xFDE
 20876                           postdec2	equ	0xFDD
 20877                           plusw2	equ	0xFDB
 20878                           fsr2h	equ	0xFDA
 20879                           fsr2l	equ	0xFD9
 20880                           status	equ	0xFD8
 20881                           
 20882 ;; *************** function _EUSART1_Transmit_ISR *****************
 20883 ;; Defined at:
 20884 ;;		line 170 in file "mcc_generated_files/eusart1.c"
 20885 ;; Parameters:    Size  Location     Type
 20886 ;;		None
 20887 ;; Auto vars:     Size  Location     Type
 20888 ;;		None
 20889 ;; Return value:  Size  Location     Type
 20890 ;;                  1    wreg      void 
 20891 ;; Registers used:
 20892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20893 ;; Tracked objects:
 20894 ;;		On entry : 0/0
 20895 ;;		On exit  : 0/0
 20896 ;;		Unchanged: 0/0
 20897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20902 ;;Total ram usage:        0 bytes
 20903 ;; Hardware stack levels used:    1
 20904 ;; This function calls:
 20905 ;;		Nothing
 20906 ;; This function is called by:
 20907 ;;		_INTERRUPT_InterruptManager
 20908 ;; This function uses a non-reentrant model
 20909 ;;
 20910                           
 20911                           	psect	text100
 20912  003CAA                     __ptext100:
 20913                           	opt stack 0
 20914  003CAA                     _EUSART1_Transmit_ISR:
 20915                           	opt stack 22
 20916                           
 20917                           ;eusart1.c: 174: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 20918                           
 20919                           ;incstack = 0
 20920  003CAA  0E40               	movlw	64
 20921  003CAC  0103               	movlb	3	; () banked
 20922  003CAE  61FE               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 20923  003CB0  D012               	goto	i2l1744
 20924                           
 20925                           ; BSR set to: 3
 20926                           ;eusart1.c: 175: {
 20927                           ;eusart1.c: 176: TX1REG = eusart1TxBuffer[eusart1TxTail++];
 20928  003CB2  502A               	movf	_eusart1TxTail,w,c
 20929  003CB4  0D01               	mullw	1
 20930  003CB6  0E00               	movlw	low _eusart1TxBuffer
 20931  003CB8  24F3               	addwf	prodl,w,c
 20932  003CBA  6ED9               	movwf	fsr2l,c
 20933  003CBC  0E0B               	movlw	high _eusart1TxBuffer
 20934  003CBE  20F4               	addwfc	prodh,w,c
 20935  003CC0  6EDA               	movwf	fsr2h,c
 20936  003CC2  50DF               	movf	indf2,w,c
 20937  003CC4  6E9A               	movwf	3994,c	;volatile
 20938                           
 20939                           ; BSR set to: 3
 20940  003CC6  2A2A               	incf	_eusart1TxTail,f,c
 20941                           
 20942                           ; BSR set to: 3
 20943                           ;eusart1.c: 177: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 20944  003CC8  0E3F               	movlw	63
 20945  003CCA  642A               	cpfsgt	_eusart1TxTail,c
 20946  003CCC  D002               	goto	i2l1745
 20947                           
 20948                           ; BSR set to: 3
 20949                           ;eusart1.c: 178: {
 20950                           ;eusart1.c: 179: eusart1TxTail = 0;
 20951  003CCE  0E00               	movlw	0
 20952  003CD0  6E2A               	movwf	_eusart1TxTail,c
 20953  003CD2                     i2l1745:
 20954                           
 20955                           ; BSR set to: 3
 20956                           ;eusart1.c: 180: }
 20957                           ;eusart1.c: 181: eusart1TxBufferRemaining++;
 20958                           
 20959                           ; BSR set to: 3
 20960  003CD2  2BFE               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 20961                           
 20962                           ;eusart1.c: 182: }
 20963  003CD4  0012               	return	
 20964  003CD6                     i2l1744:
 20965                           
 20966                           ; BSR set to: 3
 20967                           ;eusart1.c: 183: else
 20968                           ;eusart1.c: 184: {
 20969                           ;eusart1.c: 185: PIE3bits.TX1IE = 0;
 20970  003CD6  010E               	movlb	14	; () banked
 20971  003CD8  99C5               	bcf	197,4,b	;volatile
 20972  003CDA  0012               	return	
 20973  003CDC                     __end_of_EUSART1_Transmit_ISR:
 20974                           	opt stack 0
 20975                           tosu	equ	0xFFF
 20976                           tosh	equ	0xFFE
 20977                           tosl	equ	0xFFD
 20978                           pclatu	equ	0xFFB
 20979                           pclath	equ	0xFFA
 20980                           tblptru	equ	0xFF8
 20981                           tblptrh	equ	0xFF7
 20982                           tblptrl	equ	0xFF6
 20983                           tablat	equ	0xFF5
 20984                           prodh	equ	0xFF4
 20985                           prodl	equ	0xFF3
 20986                           intcon	equ	0xFF2
 20987                           postinc0	equ	0xFEE
 20988                           fsr0h	equ	0xFEA
 20989                           fsr0l	equ	0xFE9
 20990                           wreg	equ	0xFE8
 20991                           indf1	equ	0xFE7
 20992                           postinc1	equ	0xFE6
 20993                           postdec1	equ	0xFE5
 20994                           plusw1	equ	0xFE3
 20995                           fsr1h	equ	0xFE2
 20996                           fsr1l	equ	0xFE1
 20997                           indf2	equ	0xFDF
 20998                           postinc2	equ	0xFDE
 20999                           postdec2	equ	0xFDD
 21000                           plusw2	equ	0xFDB
 21001                           fsr2h	equ	0xFDA
 21002                           fsr2l	equ	0xFD9
 21003                           status	equ	0xFD8
 21004                           
 21005 ;; *************** function _EUSART1_Receive_ISR *****************
 21006 ;; Defined at:
 21007 ;;		line 190 in file "mcc_generated_files/eusart1.c"
 21008 ;; Parameters:    Size  Location     Type
 21009 ;;		None
 21010 ;; Auto vars:     Size  Location     Type
 21011 ;;		None
 21012 ;; Return value:  Size  Location     Type
 21013 ;;                  1    wreg      void 
 21014 ;; Registers used:
 21015 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21016 ;; Tracked objects:
 21017 ;;		On entry : 0/0
 21018 ;;		On exit  : 0/0
 21019 ;;		Unchanged: 0/0
 21020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21025 ;;Total ram usage:        0 bytes
 21026 ;; Hardware stack levels used:    1
 21027 ;; Hardware stack levels required when called:    5
 21028 ;; This function calls:
 21029 ;;		_hxISRHandle
 21030 ;; This function is called by:
 21031 ;;		_INTERRUPT_InterruptManager
 21032 ;; This function uses a non-reentrant model
 21033 ;;
 21034                           
 21035                           	psect	text101
 21036  004054                     __ptext101:
 21037                           	opt stack 0
 21038  004054                     _EUSART1_Receive_ISR:
 21039                           	opt stack 17
 21040                           
 21041                           ;eusart1.c: 193: if(1 == RC1STAbits.OERR)
 21042                           
 21043                           ;incstack = 0
 21044  004054  A29D               	btfss	3997,1,c	;volatile
 21045  004056  D002               	goto	i2l1750
 21046                           
 21047                           ;eusart1.c: 194: {
 21048                           ;eusart1.c: 197: RC1STAbits.CREN = 0;
 21049  004058  989D               	bcf	3997,4,c	;volatile
 21050                           
 21051                           ;eusart1.c: 198: RC1STAbits.CREN = 1;
 21052  00405A  889D               	bsf	3997,4,c	;volatile
 21053  00405C                     i2l1750:
 21054                           
 21055                           ;eusart1.c: 199: }
 21056                           ;eusart1.c: 201: hxISRHandle(RC1REG);
 21057  00405C  5099               	movf	3993,w,c	;volatile
 21058  00405E  EC4A  F015         	call	_hxISRHandle
 21059  004062  0012               	return		;funcret
 21060  004064                     __end_of_EUSART1_Receive_ISR:
 21061                           	opt stack 0
 21062                           tosu	equ	0xFFF
 21063                           tosh	equ	0xFFE
 21064                           tosl	equ	0xFFD
 21065                           pclatu	equ	0xFFB
 21066                           pclath	equ	0xFFA
 21067                           tblptru	equ	0xFF8
 21068                           tblptrh	equ	0xFF7
 21069                           tblptrl	equ	0xFF6
 21070                           tablat	equ	0xFF5
 21071                           prodh	equ	0xFF4
 21072                           prodl	equ	0xFF3
 21073                           intcon	equ	0xFF2
 21074                           postinc0	equ	0xFEE
 21075                           fsr0h	equ	0xFEA
 21076                           fsr0l	equ	0xFE9
 21077                           wreg	equ	0xFE8
 21078                           indf1	equ	0xFE7
 21079                           postinc1	equ	0xFE6
 21080                           postdec1	equ	0xFE5
 21081                           plusw1	equ	0xFE3
 21082                           fsr1h	equ	0xFE2
 21083                           fsr1l	equ	0xFE1
 21084                           indf2	equ	0xFDF
 21085                           postinc2	equ	0xFDE
 21086                           postdec2	equ	0xFDD
 21087                           plusw2	equ	0xFDB
 21088                           fsr2h	equ	0xFDA
 21089                           fsr2l	equ	0xFD9
 21090                           status	equ	0xFD8
 21091                           
 21092 ;; *************** function _hxISRHandle *****************
 21093 ;; Defined at:
 21094 ;;		line 28 in file "HX_CommInterface.c"
 21095 ;; Parameters:    Size  Location     Type
 21096 ;;  data            1    wreg     unsigned char 
 21097 ;; Auto vars:     Size  Location     Type
 21098 ;;  data            1   16[COMRAM] unsigned char 
 21099 ;; Return value:  Size  Location     Type
 21100 ;;                  1    wreg      void 
 21101 ;; Registers used:
 21102 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21103 ;; Tracked objects:
 21104 ;;		On entry : 0/0
 21105 ;;		On exit  : 0/0
 21106 ;;		Unchanged: 0/0
 21107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21109 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21110 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21111 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21112 ;;Total ram usage:        8 bytes
 21113 ;; Hardware stack levels used:    1
 21114 ;; Hardware stack levels required when called:    4
 21115 ;; This function calls:
 21116 ;;		_hxCmdFilter
 21117 ;;		_hxStartTimer
 21118 ;;		i2_hxFlushInputBuffer
 21119 ;;		i2_hxStopTimer
 21120 ;; This function is called by:
 21121 ;;		_EUSART1_Receive_ISR
 21122 ;; This function uses a non-reentrant model
 21123 ;;
 21124                           
 21125                           	psect	text102
 21126  002A94                     __ptext102:
 21127                           	opt stack 0
 21128  002A94                     _hxISRHandle:
 21129                           	opt stack 17
 21130                           
 21131                           ;incstack = 0
 21132                           ;hxISRHandle@data stored from wreg
 21133  002A94  6E11               	movwf	hxISRHandle@data,c
 21134                           
 21135                           ;HX_CommInterface.c: 30: static uint8_t currentByteCounter = 0;
 21136                           ;HX_CommInterface.c: 31: static uint8_t rxPktSizeFlag = 0;
 21137                           ;HX_CommInterface.c: 32: static uint8_t rxHxCmdFlag = 0;
 21138                           ;HX_CommInterface.c: 33: static uint8_t pktSize = 0;
 21139                           ;HX_CommInterface.c: 34: static uint8_t rxHxPktFlag = 0;
 21140                           ;HX_CommInterface.c: 36: hxStartTimer(0xF63C);
 21141  002A96  0EF6               	movlw	246
 21142  002A98  6E04               	movwf	hxStartTimer@timerVal+1,c
 21143  002A9A  0E3C               	movlw	60
 21144  002A9C  6E03               	movwf	hxStartTimer@timerVal,c
 21145  002A9E  EC21  F020         	call	_hxStartTimer	;wreg free
 21146                           
 21147                           ;HX_CommInterface.c: 38: if (0 == rxHxCmdFlag)
 21148  002AA2  5033               	movf	hxISRHandle@rxHxCmdFlag,w,c
 21149  002AA4  A4D8               	btfss	status,2,c
 21150  002AA6  D010               	goto	i2l140
 21151                           
 21152                           ;HX_CommInterface.c: 39: {
 21153                           ;HX_CommInterface.c: 40: hx_pcCmd = data;
 21154  002AA8  C011  F03C         	movff	hxISRHandle@data,_hx_pcCmd
 21155                           
 21156                           ;HX_CommInterface.c: 41: if (hx_pcCmd == 0x00)
 21157  002AAC  503C               	movf	_hx_pcCmd,w,c
 21158  002AAE  A4D8               	btfss	status,2,c
 21159  002AB0  D004               	goto	i2l141
 21160                           
 21161                           ;HX_CommInterface.c: 42: {
 21162                           ;HX_CommInterface.c: 43: hxFlushInputBuffer();
 21163  002AB2  EC9A  F01F         	call	i2_hxFlushInputBuffer	;wreg free
 21164                           
 21165                           ;HX_CommInterface.c: 44: rxHxPktFlag = 0;
 21166  002AB6  0E00               	movlw	0
 21167  002AB8  D001               	goto	L30
 21168  002ABA                     i2l141:
 21169                           
 21170                           ;HX_CommInterface.c: 46: else
 21171                           ;HX_CommInterface.c: 47: {
 21172                           ;HX_CommInterface.c: 48: rxHxPktFlag = 1;
 21173  002ABA  0E01               	movlw	1
 21174  002ABC                     L30:
 21175  002ABC  6E31               	movwf	hxISRHandle@rxHxPktFlag,c
 21176                           
 21177                           ;HX_CommInterface.c: 49: }
 21178                           ;HX_CommInterface.c: 50: hx_checksum = data;
 21179  002ABE  C011  F03D         	movff	hxISRHandle@data,_hx_checksum
 21180                           
 21181                           ;HX_CommInterface.c: 51: rxHxCmdFlag = 1;
 21182  002AC2  0E01               	movlw	1
 21183  002AC4  6E33               	movwf	hxISRHandle@rxHxCmdFlag,c
 21184                           
 21185                           ;HX_CommInterface.c: 52: }
 21186  002AC6  0012               	return	
 21187  002AC8                     i2l140:
 21188                           
 21189                           ;HX_CommInterface.c: 53: else if (0 == rxPktSizeFlag)
 21190  002AC8  5034               	movf	hxISRHandle@rxPktSizeFlag,w,c
 21191  002ACA  A4D8               	btfss	status,2,c
 21192  002ACC  D007               	goto	i2l144
 21193                           
 21194                           ;HX_CommInterface.c: 54: {
 21195                           ;HX_CommInterface.c: 55: pktSize = data;
 21196  002ACE  C011  F032         	movff	hxISRHandle@data,hxISRHandle@pktSize
 21197                           
 21198                           ;HX_CommInterface.c: 56: hx_checksum += data;
 21199  002AD2  5011               	movf	hxISRHandle@data,w,c
 21200  002AD4  263D               	addwf	_hx_checksum,f,c
 21201                           
 21202                           ;HX_CommInterface.c: 57: rxPktSizeFlag = 1;
 21203  002AD6  0E01               	movlw	1
 21204  002AD8  6E34               	movwf	hxISRHandle@rxPktSizeFlag,c
 21205                           
 21206                           ;HX_CommInterface.c: 58: }
 21207  002ADA  0012               	return	
 21208  002ADC                     i2l144:
 21209                           
 21210                           ;HX_CommInterface.c: 59: else if (currentByteCounter >= pktSize - 1)
 21211  002ADC  0EFF               	movlw	255
 21212  002ADE  6E0A               	movwf	??_hxISRHandle& (0+255),c
 21213  002AE0  0EFF               	movlw	255
 21214  002AE2  6E0B               	movwf	(??_hxISRHandle+1)& (0+255),c
 21215  002AE4  5032               	movf	hxISRHandle@pktSize,w,c
 21216  002AE6  6E0C               	movwf	(??_hxISRHandle+2)& (0+255),c
 21217  002AE8  6A0D               	clrf	(??_hxISRHandle+3)& (0+255),c
 21218  002AEA  500A               	movf	??_hxISRHandle,w,c
 21219  002AEC  260C               	addwf	??_hxISRHandle+2,f,c
 21220  002AEE  500B               	movf	??_hxISRHandle+1,w,c
 21221  002AF0  220D               	addwfc	??_hxISRHandle+3,f,c
 21222  002AF2  5035               	movf	hxISRHandle@currentByteCounter,w,c
 21223  002AF4  6E0E               	movwf	(??_hxISRHandle+4)& (0+255),c
 21224  002AF6  6A0F               	clrf	(??_hxISRHandle+5)& (0+255),c
 21225  002AF8  500C               	movf	??_hxISRHandle+2,w,c
 21226  002AFA  5C0E               	subwf	??_hxISRHandle+4,w,c
 21227  002AFC  500F               	movf	??_hxISRHandle+5,w,c
 21228  002AFE  0A80               	xorlw	128
 21229  002B00  6E10               	movwf	(??_hxISRHandle+6)& (0+255),c
 21230  002B02  500D               	movf	??_hxISRHandle+3,w,c
 21231  002B04  0A80               	xorlw	128
 21232  002B06  5810               	subwfb	(??_hxISRHandle+6)& (0+255),w,c
 21233  002B08  A0D8               	btfss	status,0,c
 21234  002B0A  D018               	goto	i2l146
 21235                           
 21236                           ;HX_CommInterface.c: 60: {
 21237                           ;HX_CommInterface.c: 62: hx_checksum += data;
 21238  002B0C  5011               	movf	hxISRHandle@data,w,c
 21239  002B0E  263D               	addwf	_hx_checksum,f,c
 21240                           
 21241                           ;HX_CommInterface.c: 63: if (hx_checksum == 0x00)
 21242  002B10  503D               	movf	_hx_checksum,w,c
 21243  002B12  A4D8               	btfss	status,2,c
 21244  002B14  D002               	goto	i2l147
 21245                           
 21246                           ;HX_CommInterface.c: 64: {
 21247                           ;HX_CommInterface.c: 65: hx_pktState = 0x01;
 21248  002B16  0E01               	movlw	1
 21249  002B18  D001               	goto	L29
 21250  002B1A                     i2l147:
 21251                           
 21252                           ;HX_CommInterface.c: 67: else
 21253                           ;HX_CommInterface.c: 68: {
 21254                           ;HX_CommInterface.c: 69: hx_pktState = 0x20;
 21255  002B1A  0E20               	movlw	32
 21256  002B1C                     L29:
 21257  002B1C  6E3A               	movwf	_hx_pktState,c
 21258                           
 21259                           ;HX_CommInterface.c: 70: }
 21260                           ;HX_CommInterface.c: 73: rxHxCmdFlag = 0;
 21261  002B1E  0E00               	movlw	0
 21262  002B20  6E33               	movwf	hxISRHandle@rxHxCmdFlag,c
 21263                           
 21264                           ;HX_CommInterface.c: 74: rxPktSizeFlag = 0;
 21265  002B22  0E00               	movlw	0
 21266  002B24  6E34               	movwf	hxISRHandle@rxPktSizeFlag,c
 21267                           
 21268                           ;HX_CommInterface.c: 75: currentByteCounter = 0;
 21269  002B26  0E00               	movlw	0
 21270  002B28  6E35               	movwf	hxISRHandle@currentByteCounter,c
 21271                           
 21272                           ;HX_CommInterface.c: 76: rxHxPktFlag = 0;
 21273  002B2A  0E00               	movlw	0
 21274  002B2C  6E31               	movwf	hxISRHandle@rxHxPktFlag,c
 21275                           
 21276                           ;HX_CommInterface.c: 79: hx_rxFullPktFlag = 1;
 21277  002B2E  0E01               	movlw	1
 21278  002B30  6E39               	movwf	_hx_rxFullPktFlag,c
 21279                           
 21280                           ;HX_CommInterface.c: 82: hxStopTimer();
 21281  002B32  EC18  F020         	call	i2_hxStopTimer	;wreg free
 21282                           
 21283                           ;HX_CommInterface.c: 85: hxCmdFilter();
 21284  002B36  ECD5  F00F         	call	_hxCmdFilter	;wreg free
 21285                           
 21286                           ;HX_CommInterface.c: 87: }
 21287  002B3A  0012               	return	
 21288  002B3C                     i2l146:
 21289                           
 21290                           ;HX_CommInterface.c: 88: else
 21291                           ;HX_CommInterface.c: 89: {
 21292                           ;HX_CommInterface.c: 90: if (0 == rxHxPktFlag)
 21293  002B3C  5031               	movf	hxISRHandle@rxHxPktFlag,w,c
 21294  002B3E  A4D8               	btfss	status,2,c
 21295  002B40  D005               	goto	i2l150
 21296                           
 21297                           ;HX_CommInterface.c: 91: {
 21298                           ;HX_CommInterface.c: 92: hx_pktCmd = data;
 21299  002B42  C011  F03B         	movff	hxISRHandle@data,_hx_pktCmd
 21300                           
 21301                           ;HX_CommInterface.c: 93: rxHxPktFlag = 1;
 21302  002B46  0E01               	movlw	1
 21303  002B48  6E31               	movwf	hxISRHandle@rxHxPktFlag,c
 21304                           
 21305                           ;HX_CommInterface.c: 94: }
 21306  002B4A  D00B               	goto	i2l151
 21307  002B4C                     i2l150:
 21308                           
 21309                           ;HX_CommInterface.c: 95: else
 21310                           ;HX_CommInterface.c: 96: {
 21311                           ;HX_CommInterface.c: 97: hx_inData[hx_inDataIndex++] = data;
 21312  002B4C  503E               	movf	_hx_inDataIndex,w,c
 21313  002B4E  0D01               	mullw	1
 21314  002B50  0E40               	movlw	low _hx_inData
 21315  002B52  24F3               	addwf	prodl,w,c
 21316  002B54  6ED9               	movwf	fsr2l,c
 21317  002B56  0E0B               	movlw	high _hx_inData
 21318  002B58  20F4               	addwfc	prodh,w,c
 21319  002B5A  6EDA               	movwf	fsr2h,c
 21320  002B5C  C011  FFDF         	movff	hxISRHandle@data,indf2
 21321  002B60  2A3E               	incf	_hx_inDataIndex,f,c
 21322  002B62                     i2l151:
 21323                           
 21324                           ;HX_CommInterface.c: 98: }
 21325                           ;HX_CommInterface.c: 100: hx_checksum += data;
 21326  002B62  5011               	movf	hxISRHandle@data,w,c
 21327  002B64  263D               	addwf	_hx_checksum,f,c
 21328                           
 21329                           ;HX_CommInterface.c: 101: currentByteCounter++;
 21330  002B66  2A35               	incf	hxISRHandle@currentByteCounter,f,c
 21331  002B68  0012               	return	
 21332  002B6A                     __end_of_hxISRHandle:
 21333                           	opt stack 0
 21334                           tosu	equ	0xFFF
 21335                           tosh	equ	0xFFE
 21336                           tosl	equ	0xFFD
 21337                           pclatu	equ	0xFFB
 21338                           pclath	equ	0xFFA
 21339                           tblptru	equ	0xFF8
 21340                           tblptrh	equ	0xFF7
 21341                           tblptrl	equ	0xFF6
 21342                           tablat	equ	0xFF5
 21343                           prodh	equ	0xFF4
 21344                           prodl	equ	0xFF3
 21345                           intcon	equ	0xFF2
 21346                           postinc0	equ	0xFEE
 21347                           fsr0h	equ	0xFEA
 21348                           fsr0l	equ	0xFE9
 21349                           wreg	equ	0xFE8
 21350                           indf1	equ	0xFE7
 21351                           postinc1	equ	0xFE6
 21352                           postdec1	equ	0xFE5
 21353                           plusw1	equ	0xFE3
 21354                           fsr1h	equ	0xFE2
 21355                           fsr1l	equ	0xFE1
 21356                           indf2	equ	0xFDF
 21357                           postinc2	equ	0xFDE
 21358                           postdec2	equ	0xFDD
 21359                           plusw2	equ	0xFDB
 21360                           fsr2h	equ	0xFDA
 21361                           fsr2l	equ	0xFD9
 21362                           status	equ	0xFD8
 21363                           
 21364 ;; *************** function i2_hxStopTimer *****************
 21365 ;; Defined at:
 21366 ;;		line 270 in file "HX_CommInterface.c"
 21367 ;; Parameters:    Size  Location     Type
 21368 ;;		None
 21369 ;; Auto vars:     Size  Location     Type
 21370 ;;		None
 21371 ;; Return value:  Size  Location     Type
 21372 ;;                  1    wreg      void 
 21373 ;; Registers used:
 21374 ;;		wreg, status,2, cstack
 21375 ;; Tracked objects:
 21376 ;;		On entry : 0/0
 21377 ;;		On exit  : 0/0
 21378 ;;		Unchanged: 0/0
 21379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21384 ;;Total ram usage:        0 bytes
 21385 ;; Hardware stack levels used:    1
 21386 ;; Hardware stack levels required when called:    1
 21387 ;; This function calls:
 21388 ;;		i2_TMR0_StopTimer
 21389 ;;		i2_TMR0_Write16bitTimer
 21390 ;; This function is called by:
 21391 ;;		_hxISRHandle
 21392 ;; This function uses a non-reentrant model
 21393 ;;
 21394                           
 21395                           	psect	text103
 21396  004030                     __ptext103:
 21397                           	opt stack 0
 21398  004030                     i2_hxStopTimer:
 21399                           	opt stack 19
 21400                           
 21401                           ;HX_CommInterface.c: 272: TMR0_StopTimer();
 21402                           
 21403                           ;incstack = 0
 21404  004030  EC6D  F020         	call	i2_TMR0_StopTimer	;wreg free
 21405                           
 21406                           ;HX_CommInterface.c: 273: TMR0_Write16bitTimer(0xF63C);
 21407  004034  0EF6               	movlw	246
 21408  004036  6E02               	movwf	i2TMR0_Write16bitTimer@timerVal+1,c
 21409  004038  0E3C               	movlw	60
 21410  00403A  6E01               	movwf	i2TMR0_Write16bitTimer@timerVal,c
 21411  00403C  EC3F  F020         	call	i2_TMR0_Write16bitTimer	;wreg free
 21412  004040  0012               	return		;funcret
 21413  004042                     __end_ofi2_hxStopTimer:
 21414                           	opt stack 0
 21415                           tosu	equ	0xFFF
 21416                           tosh	equ	0xFFE
 21417                           tosl	equ	0xFFD
 21418                           pclatu	equ	0xFFB
 21419                           pclath	equ	0xFFA
 21420                           tblptru	equ	0xFF8
 21421                           tblptrh	equ	0xFF7
 21422                           tblptrl	equ	0xFF6
 21423                           tablat	equ	0xFF5
 21424                           prodh	equ	0xFF4
 21425                           prodl	equ	0xFF3
 21426                           intcon	equ	0xFF2
 21427                           postinc0	equ	0xFEE
 21428                           fsr0h	equ	0xFEA
 21429                           fsr0l	equ	0xFE9
 21430                           wreg	equ	0xFE8
 21431                           indf1	equ	0xFE7
 21432                           postinc1	equ	0xFE6
 21433                           postdec1	equ	0xFE5
 21434                           plusw1	equ	0xFE3
 21435                           fsr1h	equ	0xFE2
 21436                           fsr1l	equ	0xFE1
 21437                           indf2	equ	0xFDF
 21438                           postinc2	equ	0xFDE
 21439                           postdec2	equ	0xFDD
 21440                           plusw2	equ	0xFDB
 21441                           fsr2h	equ	0xFDA
 21442                           fsr2l	equ	0xFD9
 21443                           status	equ	0xFD8
 21444                           
 21445 ;; *************** function i2_TMR0_StopTimer *****************
 21446 ;; Defined at:
 21447 ;;		line 100 in file "mcc_generated_files/tmr0.c"
 21448 ;; Parameters:    Size  Location     Type
 21449 ;;		None
 21450 ;; Auto vars:     Size  Location     Type
 21451 ;;		None
 21452 ;; Return value:  Size  Location     Type
 21453 ;;                  1    wreg      void 
 21454 ;; Registers used:
 21455 ;;		None
 21456 ;; Tracked objects:
 21457 ;;		On entry : 0/0
 21458 ;;		On exit  : 0/0
 21459 ;;		Unchanged: 0/0
 21460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21465 ;;Total ram usage:        0 bytes
 21466 ;; Hardware stack levels used:    1
 21467 ;; This function calls:
 21468 ;;		Nothing
 21469 ;; This function is called by:
 21470 ;;		i2_hxStopTimer
 21471 ;; This function uses a non-reentrant model
 21472 ;;
 21473                           
 21474                           	psect	text104
 21475  0040DA                     __ptext104:
 21476                           	opt stack 0
 21477  0040DA                     i2_TMR0_StopTimer:
 21478                           	opt stack 19
 21479                           
 21480                           ;tmr0.c: 103: T0CON0bits.T0EN = 0;
 21481                           
 21482                           ;incstack = 0
 21483  0040DA  9ED5               	bcf	4053,7,c	;volatile
 21484  0040DC  0012               	return		;funcret
 21485  0040DE                     __end_ofi2_TMR0_StopTimer:
 21486                           	opt stack 0
 21487                           tosu	equ	0xFFF
 21488                           tosh	equ	0xFFE
 21489                           tosl	equ	0xFFD
 21490                           pclatu	equ	0xFFB
 21491                           pclath	equ	0xFFA
 21492                           tblptru	equ	0xFF8
 21493                           tblptrh	equ	0xFF7
 21494                           tblptrl	equ	0xFF6
 21495                           tablat	equ	0xFF5
 21496                           prodh	equ	0xFF4
 21497                           prodl	equ	0xFF3
 21498                           intcon	equ	0xFF2
 21499                           postinc0	equ	0xFEE
 21500                           fsr0h	equ	0xFEA
 21501                           fsr0l	equ	0xFE9
 21502                           wreg	equ	0xFE8
 21503                           indf1	equ	0xFE7
 21504                           postinc1	equ	0xFE6
 21505                           postdec1	equ	0xFE5
 21506                           plusw1	equ	0xFE3
 21507                           fsr1h	equ	0xFE2
 21508                           fsr1l	equ	0xFE1
 21509                           indf2	equ	0xFDF
 21510                           postinc2	equ	0xFDE
 21511                           postdec2	equ	0xFDD
 21512                           plusw2	equ	0xFDB
 21513                           fsr2h	equ	0xFDA
 21514                           fsr2l	equ	0xFD9
 21515                           status	equ	0xFD8
 21516                           
 21517 ;; *************** function _hxCmdFilter *****************
 21518 ;; Defined at:
 21519 ;;		line 105 in file "HX_CommInterface.c"
 21520 ;; Parameters:    Size  Location     Type
 21521 ;;		None
 21522 ;; Auto vars:     Size  Location     Type
 21523 ;;  i               1    8[COMRAM] unsigned char 
 21524 ;; Return value:  Size  Location     Type
 21525 ;;                  1    wreg      void 
 21526 ;; Registers used:
 21527 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21528 ;; Tracked objects:
 21529 ;;		On entry : 0/0
 21530 ;;		On exit  : 0/0
 21531 ;;		Unchanged: 0/0
 21532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21534 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21536 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21537 ;;Total ram usage:        1 bytes
 21538 ;; Hardware stack levels used:    1
 21539 ;; Hardware stack levels required when called:    3
 21540 ;; This function calls:
 21541 ;;		_hxSetupPacket1
 21542 ;;		_hxSetupPacket2
 21543 ;;		_hxStartTimer
 21544 ;;		i2_hxFlushInputBuffer
 21545 ;;		i2_hxFlushMainDataBuffer
 21546 ;;		i2_hxFlushOutputBuffer
 21547 ;; This function is called by:
 21548 ;;		_hxISRHandle
 21549 ;; This function uses a non-reentrant model
 21550 ;;
 21551                           
 21552                           	psect	text105
 21553  001FAA                     __ptext105:
 21554                           	opt stack 0
 21555  001FAA                     _hxCmdFilter:
 21556                           	opt stack 17
 21557                           
 21558                           ;HX_CommInterface.c: 111: if (hx_pktState == 0x00)
 21559                           
 21560                           ;incstack = 0
 21561  001FAA  503A               	movf	_hx_pktState,w,c
 21562  001FAC  A4D8               	btfss	status,2,c
 21563  001FAE  D008               	goto	i2l155
 21564                           
 21565                           ;HX_CommInterface.c: 112: {
 21566                           ;HX_CommInterface.c: 113: hxSetupPacket1(hx_pcCmd, hx_pktState);
 21567  001FB0  C03A  F006         	movff	_hx_pktState,hxSetupPacket1@data
 21568  001FB4  503C               	movf	_hx_pcCmd,w,c
 21569  001FB6  ECD8  F01B         	call	_hxSetupPacket1
 21570                           
 21571                           ;HX_CommInterface.c: 114: hx_txPacketFlag = 1;
 21572  001FBA  0E01               	movlw	1
 21573  001FBC  6E46               	movwf	_hx_txPacketFlag,c
 21574                           
 21575                           ;HX_CommInterface.c: 115: return;
 21576  001FBE  0012               	return	
 21577  001FC0                     i2l155:
 21578                           
 21579                           ;HX_CommInterface.c: 116: }
 21580                           ;HX_CommInterface.c: 118: if (hx_pcCmd != 0x02)
 21581  001FC0  0E02               	movlw	2
 21582  001FC2  183C               	xorwf	_hx_pcCmd,w,c
 21583  001FC4  B4D8               	btfsc	status,2,c
 21584  001FC6  D095               	goto	i2l157
 21585                           
 21586                           ;HX_CommInterface.c: 119: {
 21587                           ;HX_CommInterface.c: 120: hxStartTimer(0xF63C);
 21588  001FC8  0EF6               	movlw	246
 21589  001FCA  6E04               	movwf	hxStartTimer@timerVal+1,c
 21590  001FCC  0E3C               	movlw	60
 21591  001FCE  6E03               	movwf	hxStartTimer@timerVal,c
 21592  001FD0  EC21  F020         	call	_hxStartTimer	;wreg free
 21593                           
 21594                           ;HX_CommInterface.c: 122: switch (hx_pcCmd)
 21595  001FD4  D071               	goto	i2l158
 21596  001FD6                     
 21597                           ;HX_CommInterface.c: 125: hxSetupPacket1(hx_pcCmd, hx_pktState);
 21598  001FD6  C03A  F006         	movff	_hx_pktState,hxSetupPacket1@data
 21599  001FDA  503C               	movf	_hx_pcCmd,w,c
 21600  001FDC  ECD8  F01B         	call	_hxSetupPacket1
 21601                           
 21602                           ;HX_CommInterface.c: 126: break;
 21603  001FE0  D0A7               	goto	i2l175
 21604  001FE2                     
 21605                           ;HX_CommInterface.c: 131: hxSetupPacket1(hx_pcCmd, hx_state);
 21606  001FE2  C045  F006         	movff	_hx_state,hxSetupPacket1@data
 21607  001FE6  503C               	movf	_hx_pcCmd,w,c
 21608  001FE8  ECD8  F01B         	call	_hxSetupPacket1
 21609                           
 21610                           ;HX_CommInterface.c: 132: break;
 21611  001FEC  D0A1               	goto	i2l175
 21612  001FEE                     
 21613                           ;HX_CommInterface.c: 135: hxSetupPacket2(0x03);
 21614  001FEE  0E03               	movlw	3
 21615  001FF0  ECAA  F019         	call	_hxSetupPacket2
 21616                           
 21617                           ;HX_CommInterface.c: 136: break;
 21618  001FF4  D09D               	goto	i2l175
 21619  001FF6                     
 21620                           ;HX_CommInterface.c: 139: hxFlushInputBuffer();
 21621  001FF6  EC9A  F01F         	call	i2_hxFlushInputBuffer	;wreg free
 21622                           
 21623                           ;HX_CommInterface.c: 140: hxSetupPacket1(hx_pcCmd, 0x01);
 21624  001FFA  0E01               	movlw	1
 21625  001FFC  6E06               	movwf	hxSetupPacket1@data,c
 21626  001FFE  503C               	movf	_hx_pcCmd,w,c
 21627  002000  ECD8  F01B         	call	_hxSetupPacket1
 21628                           
 21629                           ;HX_CommInterface.c: 141: break;
 21630  002004  D095               	goto	i2l175
 21631  002006                     
 21632                           ;HX_CommInterface.c: 145: hxSetupPacket1(hx_pcCmd, 0x01);
 21633  002006  0E01               	movlw	1
 21634  002008  6E06               	movwf	hxSetupPacket1@data,c
 21635  00200A  503C               	movf	_hx_pcCmd,w,c
 21636  00200C  ECD8  F01B         	call	_hxSetupPacket1
 21637                           
 21638                           ;HX_CommInterface.c: 146: hxFlushMainDataBuffer();
 21639  002010  ECEE  F01F         	call	i2_hxFlushMainDataBuffer	;wreg free
 21640                           
 21641                           ;HX_CommInterface.c: 147: break;
 21642  002014  D08D               	goto	i2l175
 21643  002016                     
 21644                           ;HX_CommInterface.c: 152: hxFlushMainDataBuffer();
 21645  002016  ECEE  F01F         	call	i2_hxFlushMainDataBuffer	;wreg free
 21646                           
 21647                           ;HX_CommInterface.c: 153: hxFlushOutputBuffer();
 21648  00201A  ECF9  F01F         	call	i2_hxFlushOutputBuffer	;wreg free
 21649                           
 21650                           ;HX_CommInterface.c: 154: hx_mainData[hx_mainDataIndex++] = 0x01;
 21651  00201E  503F               	movf	_hx_mainDataIndex,w,c
 21652  002020  0D01               	mullw	1
 21653  002022  0EC0               	movlw	low _hx_mainData
 21654  002024  24F3               	addwf	prodl,w,c
 21655  002026  6ED9               	movwf	fsr2l,c
 21656  002028  0E0B               	movlw	high _hx_mainData
 21657  00202A  20F4               	addwfc	prodh,w,c
 21658  00202C  6EDA               	movwf	fsr2h,c
 21659  00202E  0E01               	movlw	1
 21660  002030  6EDF               	movwf	indf2,c
 21661  002032  2A3F               	incf	_hx_mainDataIndex,f,c
 21662                           
 21663                           ;HX_CommInterface.c: 155: hx_mainData[hx_mainDataIndex++] = 0x01;
 21664  002034  503F               	movf	_hx_mainDataIndex,w,c
 21665  002036  0D01               	mullw	1
 21666  002038  0EC0               	movlw	low _hx_mainData
 21667  00203A  24F3               	addwf	prodl,w,c
 21668  00203C  6ED9               	movwf	fsr2l,c
 21669  00203E  0E0B               	movlw	high _hx_mainData
 21670  002040  20F4               	addwfc	prodh,w,c
 21671  002042  6EDA               	movwf	fsr2h,c
 21672  002044  0E01               	movlw	1
 21673  002046  6EDF               	movwf	indf2,c
 21674  002048  2A3F               	incf	_hx_mainDataIndex,f,c
 21675                           
 21676                           ;HX_CommInterface.c: 156: hxSetupPacket2(hx_pcCmd);
 21677  00204A  503C               	movf	_hx_pcCmd,w,c
 21678  00204C  ECAA  F019         	call	_hxSetupPacket2
 21679                           
 21680                           ;HX_CommInterface.c: 157: hxFlushMainDataBuffer();
 21681  002050  ECEE  F01F         	call	i2_hxFlushMainDataBuffer	;wreg free
 21682                           
 21683                           ;HX_CommInterface.c: 158: break;
 21684  002054  D06D               	goto	i2l175
 21685  002056                     
 21686                           ;HX_CommInterface.c: 161: hxFlushOutputBuffer();
 21687  002056  ECF9  F01F         	call	i2_hxFlushOutputBuffer	;wreg free
 21688                           
 21689                           ;HX_CommInterface.c: 162: hxFlushMainDataBuffer();
 21690  00205A  ECEE  F01F         	call	i2_hxFlushMainDataBuffer	;wreg free
 21691                           
 21692                           ;HX_CommInterface.c: 163: for (uint8_t i = 0; i < hx_inDataIndex; i++)
 21693  00205E  0E00               	movlw	0
 21694  002060  6E09               	movwf	hxCmdFilter@i,c
 21695  002062  D014               	goto	i2l167
 21696  002064                     
 21697                           ;HX_CommInterface.c: 164: {
 21698                           ;HX_CommInterface.c: 165: hx_mainData[hx_mainDataIndex++] = hx_inData[i];
 21699  002064  5009               	movf	hxCmdFilter@i,w,c
 21700  002066  0D01               	mullw	1
 21701  002068  0E40               	movlw	low _hx_inData
 21702  00206A  24F3               	addwf	prodl,w,c
 21703  00206C  6ED9               	movwf	fsr2l,c
 21704  00206E  0E0B               	movlw	high _hx_inData
 21705  002070  20F4               	addwfc	prodh,w,c
 21706  002072  6EDA               	movwf	fsr2h,c
 21707  002074  503F               	movf	_hx_mainDataIndex,w,c
 21708  002076  0D01               	mullw	1
 21709  002078  0EC0               	movlw	low _hx_mainData
 21710  00207A  24F3               	addwf	prodl,w,c
 21711  00207C  6EE1               	movwf	fsr1l,c
 21712  00207E  0E0B               	movlw	high _hx_mainData
 21713  002080  20F4               	addwfc	prodh,w,c
 21714  002082  6EE2               	movwf	fsr1h,c
 21715  002084  CFDF FFE7          	movff	indf2,indf1
 21716  002088  2A3F               	incf	_hx_mainDataIndex,f,c
 21717  00208A  2A09               	incf	hxCmdFilter@i,f,c
 21718  00208C                     i2l167:
 21719  00208C  503E               	movf	_hx_inDataIndex,w,c
 21720  00208E  5C09               	subwf	hxCmdFilter@i,w,c
 21721  002090  A0D8               	btfss	status,0,c
 21722  002092  D7E8               	goto	i2l168
 21723                           
 21724                           ;HX_CommInterface.c: 166: }
 21725                           ;HX_CommInterface.c: 167: hxSetupPacket2(hx_pcCmd);
 21726  002094  503C               	movf	_hx_pcCmd,w,c
 21727  002096  ECAA  F019         	call	_hxSetupPacket2
 21728                           
 21729                           ;HX_CommInterface.c: 168: hxFlushMainDataBuffer();
 21730  00209A  ECEE  F01F         	call	i2_hxFlushMainDataBuffer	;wreg free
 21731                           
 21732                           ;HX_CommInterface.c: 169: break;
 21733  00209E  D048               	goto	i2l175
 21734  0020A0                     
 21735                           ;HX_CommInterface.c: 172: hxSetupPacket1(hx_pcCmd, hx_debugVar);
 21736  0020A0  C037  F006         	movff	_hx_debugVar,hxSetupPacket1@data
 21737  0020A4  503C               	movf	_hx_pcCmd,w,c
 21738  0020A6  ECD8  F01B         	call	_hxSetupPacket1
 21739                           
 21740                           ;HX_CommInterface.c: 177: break;
 21741                           
 21742                           ;HX_CommInterface.c: 175: case 0x09:
 21743                           
 21744                           ;HX_CommInterface.c: 173: break;
 21745  0020AA  D042               	goto	i2l175
 21746  0020AC                     
 21747                           ;HX_CommInterface.c: 180: hxSetupPacket1(hx_pcCmd, 0xFF);
 21748  0020AC  0EFF               	movlw	255
 21749  0020AE  6E06               	movwf	hxSetupPacket1@data,c
 21750  0020B0  503C               	movf	_hx_pcCmd,w,c
 21751  0020B2  ECD8  F01B         	call	_hxSetupPacket1
 21752                           
 21753                           ;HX_CommInterface.c: 182: }
 21754                           
 21755                           ;HX_CommInterface.c: 181: break;
 21756  0020B6  D03C               	goto	i2l175
 21757  0020B8                     i2l158:
 21758  0020B8  503C               	movf	_hx_pcCmd,w,c
 21759                           
 21760                           ; Switch size 1, requested type "space"
 21761                           ; Number of cases is 9, Range of values is 0 to 9
 21762                           ; switch strategies available:
 21763                           ; Name         Instructions Cycles
 21764                           ; simple_byte           28    15 (average)
 21765                           ;	Chosen strategy is simple_byte
 21766  0020BA  0A00               	xorlw	0	; case 0
 21767  0020BC  B4D8               	btfsc	status,2,c
 21768  0020BE  D78B               	goto	i2l159
 21769  0020C0  0A01               	xorlw	1	; case 1
 21770  0020C2  B4D8               	btfsc	status,2,c
 21771  0020C4  D78E               	goto	i2l161
 21772  0020C6  0A02               	xorlw	2	; case 3
 21773  0020C8  B4D8               	btfsc	status,2,c
 21774  0020CA  D791               	goto	i2l162
 21775  0020CC  0A07               	xorlw	7	; case 4
 21776  0020CE  B4D8               	btfsc	status,2,c
 21777  0020D0  D792               	goto	i2l163
 21778  0020D2  0A01               	xorlw	1	; case 5
 21779  0020D4  B4D8               	btfsc	status,2,c
 21780  0020D6  D797               	goto	i2l164
 21781  0020D8  0A03               	xorlw	3	; case 6
 21782  0020DA  B4D8               	btfsc	status,2,c
 21783  0020DC  D79C               	goto	i2l165
 21784  0020DE  0A01               	xorlw	1	; case 7
 21785  0020E0  B4D8               	btfsc	status,2,c
 21786  0020E2  D7B9               	goto	i2l166
 21787  0020E4  0A0F               	xorlw	15	; case 8
 21788  0020E6  B4D8               	btfsc	status,2,c
 21789  0020E8  D7DB               	goto	i2l170
 21790  0020EA  0A01               	xorlw	1	; case 9
 21791  0020EC  B4D8               	btfsc	status,2,c
 21792  0020EE  D020               	goto	i2l175
 21793  0020F0  D7DD               	goto	i2l172
 21794  0020F2                     i2l157:
 21795                           
 21796                           ;HX_CommInterface.c: 184: else
 21797                           ;HX_CommInterface.c: 185: {
 21798                           ;HX_CommInterface.c: 186: hxFlushMainDataBuffer();
 21799  0020F2  ECEE  F01F         	call	i2_hxFlushMainDataBuffer	;wreg free
 21800                           
 21801                           ;HX_CommInterface.c: 188: hxStartTimer(0x3CB0);
 21802  0020F6  0E3C               	movlw	60
 21803  0020F8  6E04               	movwf	hxStartTimer@timerVal+1,c
 21804  0020FA  0EB0               	movlw	176
 21805  0020FC  6E03               	movwf	hxStartTimer@timerVal,c
 21806  0020FE  EC21  F020         	call	_hxStartTimer	;wreg free
 21807                           
 21808                           ;HX_CommInterface.c: 190: if (hx_rxFullPktFlag)
 21809  002102  5039               	movf	_hx_rxFullPktFlag,w,c
 21810  002104  B4D8               	btfsc	status,2,c
 21811  002106  D00B               	goto	i2l174
 21812                           
 21813                           ;HX_CommInterface.c: 191: {
 21814                           ;HX_CommInterface.c: 192: hxSetupPacket1(0x02, 0x01);
 21815  002108  0E01               	movlw	1
 21816  00210A  6E06               	movwf	hxSetupPacket1@data,c
 21817  00210C  0E02               	movlw	2
 21818  00210E  ECD8  F01B         	call	_hxSetupPacket1
 21819                           
 21820                           ;HX_CommInterface.c: 193: hx_txPacketFlag = 1;
 21821  002112  0E01               	movlw	1
 21822  002114  6E46               	movwf	_hx_txPacketFlag,c
 21823                           
 21824                           ;HX_CommInterface.c: 194: hx_startMain = 1;
 21825  002116  0E01               	movlw	1
 21826  002118  6E38               	movwf	_hx_startMain,c
 21827                           
 21828                           ;HX_CommInterface.c: 195: hx_state = 0x11;
 21829  00211A  0E11               	movlw	17
 21830  00211C  D008               	goto	L31
 21831  00211E                     i2l174:
 21832                           
 21833                           ;HX_CommInterface.c: 197: else
 21834                           ;HX_CommInterface.c: 198: {
 21835                           ;HX_CommInterface.c: 199: hx_startMain = 0;
 21836  00211E  0E00               	movlw	0
 21837  002120  6E38               	movwf	_hx_startMain,c
 21838                           
 21839                           ;HX_CommInterface.c: 200: hxSetupPacket1(0x02, 0x00);
 21840  002122  0E00               	movlw	0
 21841  002124  6E06               	movwf	hxSetupPacket1@data,c
 21842  002126  0E02               	movlw	2
 21843  002128  ECD8  F01B         	call	_hxSetupPacket1
 21844                           
 21845                           ;HX_CommInterface.c: 201: hx_state = 0x43;
 21846  00212C  0E43               	movlw	67
 21847  00212E                     L31:
 21848  00212E  6E45               	movwf	_hx_state,c
 21849  002130                     i2l175:
 21850                           
 21851                           ;HX_CommInterface.c: 202: }
 21852                           ;HX_CommInterface.c: 203: }
 21853                           ;HX_CommInterface.c: 204: hx_txPacketFlag = 1;
 21854  002130  0E01               	movlw	1
 21855  002132  6E46               	movwf	_hx_txPacketFlag,c
 21856  002134  0012               	return		;funcret
 21857  002136                     __end_of_hxCmdFilter:
 21858                           	opt stack 0
 21859                           tosu	equ	0xFFF
 21860                           tosh	equ	0xFFE
 21861                           tosl	equ	0xFFD
 21862                           pclatu	equ	0xFFB
 21863                           pclath	equ	0xFFA
 21864                           tblptru	equ	0xFF8
 21865                           tblptrh	equ	0xFF7
 21866                           tblptrl	equ	0xFF6
 21867                           tablat	equ	0xFF5
 21868                           prodh	equ	0xFF4
 21869                           prodl	equ	0xFF3
 21870                           intcon	equ	0xFF2
 21871                           postinc0	equ	0xFEE
 21872                           fsr0h	equ	0xFEA
 21873                           fsr0l	equ	0xFE9
 21874                           wreg	equ	0xFE8
 21875                           indf1	equ	0xFE7
 21876                           postinc1	equ	0xFE6
 21877                           postdec1	equ	0xFE5
 21878                           plusw1	equ	0xFE3
 21879                           fsr1h	equ	0xFE2
 21880                           fsr1l	equ	0xFE1
 21881                           indf2	equ	0xFDF
 21882                           postinc2	equ	0xFDE
 21883                           postdec2	equ	0xFDD
 21884                           plusw2	equ	0xFDB
 21885                           fsr2h	equ	0xFDA
 21886                           fsr2l	equ	0xFD9
 21887                           status	equ	0xFD8
 21888                           
 21889 ;; *************** function i2_hxFlushMainDataBuffer *****************
 21890 ;; Defined at:
 21891 ;;		line 289 in file "HX_CommInterface.c"
 21892 ;; Parameters:    Size  Location     Type
 21893 ;;		None
 21894 ;; Auto vars:     Size  Location     Type
 21895 ;;		None
 21896 ;; Return value:  Size  Location     Type
 21897 ;;                  1    wreg      void 
 21898 ;; Registers used:
 21899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21900 ;; Tracked objects:
 21901 ;;		On entry : 0/0
 21902 ;;		On exit  : 0/0
 21903 ;;		Unchanged: 0/0
 21904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21908 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21909 ;;Total ram usage:        0 bytes
 21910 ;; Hardware stack levels used:    1
 21911 ;; Hardware stack levels required when called:    1
 21912 ;; This function calls:
 21913 ;;		i2_hxClearArray
 21914 ;; This function is called by:
 21915 ;;		_hxCmdFilter
 21916 ;; This function uses a non-reentrant model
 21917 ;;
 21918                           
 21919                           	psect	text106
 21920  003FDC                     __ptext106:
 21921                           	opt stack 0
 21922  003FDC                     i2_hxFlushMainDataBuffer:
 21923                           	opt stack 18
 21924                           
 21925                           ;HX_CommInterface.c: 291: hxClearArray(hx_mainData, 61);
 21926                           
 21927                           ;incstack = 0
 21928  003FDC  0EC0               	movlw	low _hx_mainData
 21929  003FDE  6E01               	movwf	i2hxClearArray@arr,c
 21930  003FE0  0E0B               	movlw	high _hx_mainData
 21931  003FE2  6E02               	movwf	i2hxClearArray@arr+1,c
 21932  003FE4  0E3D               	movlw	61
 21933  003FE6  6E03               	movwf	i2hxClearArray@size,c
 21934  003FE8  EC33  F01F         	call	i2_hxClearArray	;wreg free
 21935                           
 21936                           ;HX_CommInterface.c: 292: hx_mainDataIndex = 0;
 21937  003FEC  0E00               	movlw	0
 21938  003FEE  6E3F               	movwf	_hx_mainDataIndex,c
 21939  003FF0  0012               	return		;funcret
 21940  003FF2                     __end_ofi2_hxFlushMainDataBuffer:
 21941                           	opt stack 0
 21942                           tosu	equ	0xFFF
 21943                           tosh	equ	0xFFE
 21944                           tosl	equ	0xFFD
 21945                           pclatu	equ	0xFFB
 21946                           pclath	equ	0xFFA
 21947                           tblptru	equ	0xFF8
 21948                           tblptrh	equ	0xFF7
 21949                           tblptrl	equ	0xFF6
 21950                           tablat	equ	0xFF5
 21951                           prodh	equ	0xFF4
 21952                           prodl	equ	0xFF3
 21953                           intcon	equ	0xFF2
 21954                           postinc0	equ	0xFEE
 21955                           fsr0h	equ	0xFEA
 21956                           fsr0l	equ	0xFE9
 21957                           wreg	equ	0xFE8
 21958                           indf1	equ	0xFE7
 21959                           postinc1	equ	0xFE6
 21960                           postdec1	equ	0xFE5
 21961                           plusw1	equ	0xFE3
 21962                           fsr1h	equ	0xFE2
 21963                           fsr1l	equ	0xFE1
 21964                           indf2	equ	0xFDF
 21965                           postinc2	equ	0xFDE
 21966                           postdec2	equ	0xFDD
 21967                           plusw2	equ	0xFDB
 21968                           fsr2h	equ	0xFDA
 21969                           fsr2l	equ	0xFD9
 21970                           status	equ	0xFD8
 21971                           
 21972 ;; *************** function i2_hxFlushInputBuffer *****************
 21973 ;; Defined at:
 21974 ;;		line 276 in file "HX_CommInterface.c"
 21975 ;; Parameters:    Size  Location     Type
 21976 ;;		None
 21977 ;; Auto vars:     Size  Location     Type
 21978 ;;		None
 21979 ;; Return value:  Size  Location     Type
 21980 ;;                  1    wreg      void 
 21981 ;; Registers used:
 21982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21983 ;; Tracked objects:
 21984 ;;		On entry : 0/0
 21985 ;;		On exit  : 0/0
 21986 ;;		Unchanged: 0/0
 21987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21992 ;;Total ram usage:        0 bytes
 21993 ;; Hardware stack levels used:    1
 21994 ;; Hardware stack levels required when called:    1
 21995 ;; This function calls:
 21996 ;;		i2_hxClearArray
 21997 ;; This function is called by:
 21998 ;;		_hxISRHandle
 21999 ;;		_hxCmdFilter
 22000 ;;		_hxHandleTmr0
 22001 ;; This function uses a non-reentrant model
 22002 ;;
 22003                           
 22004                           	psect	text107
 22005  003F34                     __ptext107:
 22006                           	opt stack 0
 22007  003F34                     i2_hxFlushInputBuffer:
 22008                           	opt stack 18
 22009                           
 22010                           ;HX_CommInterface.c: 278: hxClearArray(hx_inData, 64);
 22011                           
 22012                           ;incstack = 0
 22013  003F34  0E40               	movlw	low _hx_inData
 22014  003F36  6E01               	movwf	i2hxClearArray@arr,c
 22015  003F38  0E0B               	movlw	high _hx_inData
 22016  003F3A  6E02               	movwf	i2hxClearArray@arr+1,c
 22017  003F3C  0E40               	movlw	64
 22018  003F3E  6E03               	movwf	i2hxClearArray@size,c
 22019  003F40  EC33  F01F         	call	i2_hxClearArray	;wreg free
 22020                           
 22021                           ;HX_CommInterface.c: 279: hx_inDataIndex = 0;
 22022  003F44  0E00               	movlw	0
 22023  003F46  6E3E               	movwf	_hx_inDataIndex,c
 22024                           
 22025                           ;HX_CommInterface.c: 280: hx_pktCmd = 0;
 22026  003F48  0E00               	movlw	0
 22027  003F4A  6E3B               	movwf	_hx_pktCmd,c
 22028  003F4C  0012               	return		;funcret
 22029  003F4E                     __end_ofi2_hxFlushInputBuffer:
 22030                           	opt stack 0
 22031                           tosu	equ	0xFFF
 22032                           tosh	equ	0xFFE
 22033                           tosl	equ	0xFFD
 22034                           pclatu	equ	0xFFB
 22035                           pclath	equ	0xFFA
 22036                           tblptru	equ	0xFF8
 22037                           tblptrh	equ	0xFF7
 22038                           tblptrl	equ	0xFF6
 22039                           tablat	equ	0xFF5
 22040                           prodh	equ	0xFF4
 22041                           prodl	equ	0xFF3
 22042                           intcon	equ	0xFF2
 22043                           postinc0	equ	0xFEE
 22044                           fsr0h	equ	0xFEA
 22045                           fsr0l	equ	0xFE9
 22046                           wreg	equ	0xFE8
 22047                           indf1	equ	0xFE7
 22048                           postinc1	equ	0xFE6
 22049                           postdec1	equ	0xFE5
 22050                           plusw1	equ	0xFE3
 22051                           fsr1h	equ	0xFE2
 22052                           fsr1l	equ	0xFE1
 22053                           indf2	equ	0xFDF
 22054                           postinc2	equ	0xFDE
 22055                           postdec2	equ	0xFDD
 22056                           plusw2	equ	0xFDB
 22057                           fsr2h	equ	0xFDA
 22058                           fsr2l	equ	0xFD9
 22059                           status	equ	0xFD8
 22060                           
 22061 ;; *************** function _hxStartTimer *****************
 22062 ;; Defined at:
 22063 ;;		line 264 in file "HX_CommInterface.c"
 22064 ;; Parameters:    Size  Location     Type
 22065 ;;  timerVal        2    2[COMRAM] unsigned int 
 22066 ;; Auto vars:     Size  Location     Type
 22067 ;;		None
 22068 ;; Return value:  Size  Location     Type
 22069 ;;                  1    wreg      void 
 22070 ;; Registers used:
 22071 ;;		wreg, status,2, cstack
 22072 ;; Tracked objects:
 22073 ;;		On entry : 0/0
 22074 ;;		On exit  : 0/0
 22075 ;;		Unchanged: 0/0
 22076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22077 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22080 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22081 ;;Total ram usage:        2 bytes
 22082 ;; Hardware stack levels used:    1
 22083 ;; Hardware stack levels required when called:    1
 22084 ;; This function calls:
 22085 ;;		_TMR0_StartTimer
 22086 ;;		i2_TMR0_Write16bitTimer
 22087 ;; This function is called by:
 22088 ;;		_hxISRHandle
 22089 ;;		_hxCmdFilter
 22090 ;; This function uses a non-reentrant model
 22091 ;;
 22092                           
 22093                           	psect	text108
 22094  004042                     __ptext108:
 22095                           	opt stack 0
 22096  004042                     _hxStartTimer:
 22097                           	opt stack 19
 22098                           
 22099                           ;HX_CommInterface.c: 266: TMR0_Write16bitTimer(timerVal);
 22100                           
 22101                           ;incstack = 0
 22102  004042  C003  F001         	movff	hxStartTimer@timerVal,i2TMR0_Write16bitTimer@timerVal
 22103  004046  C004  F002         	movff	hxStartTimer@timerVal+1,i2TMR0_Write16bitTimer@timerVal+1
 22104  00404A  EC3F  F020         	call	i2_TMR0_Write16bitTimer	;wreg free
 22105                           
 22106                           ;HX_CommInterface.c: 267: TMR0_StartTimer();
 22107  00404E  EC6F  F020         	call	_TMR0_StartTimer	;wreg free
 22108  004052  0012               	return		;funcret
 22109  004054                     __end_of_hxStartTimer:
 22110                           	opt stack 0
 22111                           tosu	equ	0xFFF
 22112                           tosh	equ	0xFFE
 22113                           tosl	equ	0xFFD
 22114                           pclatu	equ	0xFFB
 22115                           pclath	equ	0xFFA
 22116                           tblptru	equ	0xFF8
 22117                           tblptrh	equ	0xFF7
 22118                           tblptrl	equ	0xFF6
 22119                           tablat	equ	0xFF5
 22120                           prodh	equ	0xFF4
 22121                           prodl	equ	0xFF3
 22122                           intcon	equ	0xFF2
 22123                           postinc0	equ	0xFEE
 22124                           fsr0h	equ	0xFEA
 22125                           fsr0l	equ	0xFE9
 22126                           wreg	equ	0xFE8
 22127                           indf1	equ	0xFE7
 22128                           postinc1	equ	0xFE6
 22129                           postdec1	equ	0xFE5
 22130                           plusw1	equ	0xFE3
 22131                           fsr1h	equ	0xFE2
 22132                           fsr1l	equ	0xFE1
 22133                           indf2	equ	0xFDF
 22134                           postinc2	equ	0xFDE
 22135                           postdec2	equ	0xFDD
 22136                           plusw2	equ	0xFDB
 22137                           fsr2h	equ	0xFDA
 22138                           fsr2l	equ	0xFD9
 22139                           status	equ	0xFD8
 22140                           
 22141 ;; *************** function i2_TMR0_Write16bitTimer *****************
 22142 ;; Defined at:
 22143 ;;		line 119 in file "mcc_generated_files/tmr0.c"
 22144 ;; Parameters:    Size  Location     Type
 22145 ;;  timerVal        2    0[COMRAM] unsigned int 
 22146 ;; Auto vars:     Size  Location     Type
 22147 ;;		None
 22148 ;; Return value:  Size  Location     Type
 22149 ;;                  1    wreg      void 
 22150 ;; Registers used:
 22151 ;;		wreg, status,2
 22152 ;; Tracked objects:
 22153 ;;		On entry : 0/0
 22154 ;;		On exit  : 0/0
 22155 ;;		Unchanged: 0/0
 22156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22157 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22160 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22161 ;;Total ram usage:        2 bytes
 22162 ;; Hardware stack levels used:    1
 22163 ;; This function calls:
 22164 ;;		Nothing
 22165 ;; This function is called by:
 22166 ;;		_hxStartTimer
 22167 ;;		i2_hxStopTimer
 22168 ;; This function uses a non-reentrant model
 22169 ;;
 22170                           
 22171                           	psect	text109
 22172  00407E                     __ptext109:
 22173                           	opt stack 0
 22174  00407E                     i2_TMR0_Write16bitTimer:
 22175                           	opt stack 19
 22176                           
 22177                           ;tmr0.c: 122: TMR0H = timerVal >> 8;
 22178                           
 22179                           ;incstack = 0
 22180  00407E  5002               	movf	i2TMR0_Write16bitTimer@timerVal+1,w,c
 22181  004080  6ED4               	movwf	4052,c	;volatile
 22182                           
 22183                           ;tmr0.c: 123: TMR0L = (uint8_t) timerVal;
 22184  004082  C001  FFD3         	movff	i2TMR0_Write16bitTimer@timerVal,4051	;volatile
 22185  004086  0012               	return		;funcret
 22186  004088                     __end_ofi2_TMR0_Write16bitTimer:
 22187                           	opt stack 0
 22188                           tosu	equ	0xFFF
 22189                           tosh	equ	0xFFE
 22190                           tosl	equ	0xFFD
 22191                           pclatu	equ	0xFFB
 22192                           pclath	equ	0xFFA
 22193                           tblptru	equ	0xFF8
 22194                           tblptrh	equ	0xFF7
 22195                           tblptrl	equ	0xFF6
 22196                           tablat	equ	0xFF5
 22197                           prodh	equ	0xFF4
 22198                           prodl	equ	0xFF3
 22199                           intcon	equ	0xFF2
 22200                           postinc0	equ	0xFEE
 22201                           fsr0h	equ	0xFEA
 22202                           fsr0l	equ	0xFE9
 22203                           wreg	equ	0xFE8
 22204                           indf1	equ	0xFE7
 22205                           postinc1	equ	0xFE6
 22206                           postdec1	equ	0xFE5
 22207                           plusw1	equ	0xFE3
 22208                           fsr1h	equ	0xFE2
 22209                           fsr1l	equ	0xFE1
 22210                           indf2	equ	0xFDF
 22211                           postinc2	equ	0xFDE
 22212                           postdec2	equ	0xFDD
 22213                           plusw2	equ	0xFDB
 22214                           fsr2h	equ	0xFDA
 22215                           fsr2l	equ	0xFD9
 22216                           status	equ	0xFD8
 22217                           
 22218 ;; *************** function _TMR0_StartTimer *****************
 22219 ;; Defined at:
 22220 ;;		line 94 in file "mcc_generated_files/tmr0.c"
 22221 ;; Parameters:    Size  Location     Type
 22222 ;;		None
 22223 ;; Auto vars:     Size  Location     Type
 22224 ;;		None
 22225 ;; Return value:  Size  Location     Type
 22226 ;;                  1    wreg      void 
 22227 ;; Registers used:
 22228 ;;		None
 22229 ;; Tracked objects:
 22230 ;;		On entry : 0/0
 22231 ;;		On exit  : 0/0
 22232 ;;		Unchanged: 0/0
 22233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22237 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22238 ;;Total ram usage:        0 bytes
 22239 ;; Hardware stack levels used:    1
 22240 ;; This function calls:
 22241 ;;		Nothing
 22242 ;; This function is called by:
 22243 ;;		_hxStartTimer
 22244 ;; This function uses a non-reentrant model
 22245 ;;
 22246                           
 22247                           	psect	text110
 22248  0040DE                     __ptext110:
 22249                           	opt stack 0
 22250  0040DE                     _TMR0_StartTimer:
 22251                           	opt stack 19
 22252                           
 22253                           ;tmr0.c: 97: T0CON0bits.T0EN = 1;
 22254                           
 22255                           ;incstack = 0
 22256  0040DE  8ED5               	bsf	4053,7,c	;volatile
 22257  0040E0  0012               	return		;funcret
 22258  0040E2                     __end_of_TMR0_StartTimer:
 22259                           	opt stack 0
 22260                           tosu	equ	0xFFF
 22261                           tosh	equ	0xFFE
 22262                           tosl	equ	0xFFD
 22263                           pclatu	equ	0xFFB
 22264                           pclath	equ	0xFFA
 22265                           tblptru	equ	0xFF8
 22266                           tblptrh	equ	0xFF7
 22267                           tblptrl	equ	0xFF6
 22268                           tablat	equ	0xFF5
 22269                           prodh	equ	0xFF4
 22270                           prodl	equ	0xFF3
 22271                           intcon	equ	0xFF2
 22272                           postinc0	equ	0xFEE
 22273                           fsr0h	equ	0xFEA
 22274                           fsr0l	equ	0xFE9
 22275                           wreg	equ	0xFE8
 22276                           indf1	equ	0xFE7
 22277                           postinc1	equ	0xFE6
 22278                           postdec1	equ	0xFE5
 22279                           plusw1	equ	0xFE3
 22280                           fsr1h	equ	0xFE2
 22281                           fsr1l	equ	0xFE1
 22282                           indf2	equ	0xFDF
 22283                           postinc2	equ	0xFDE
 22284                           postdec2	equ	0xFDD
 22285                           plusw2	equ	0xFDB
 22286                           fsr2h	equ	0xFDA
 22287                           fsr2l	equ	0xFD9
 22288                           status	equ	0xFD8
 22289                           
 22290 ;; *************** function _hxSetupPacket2 *****************
 22291 ;; Defined at:
 22292 ;;		line 216 in file "HX_CommInterface.c"
 22293 ;; Parameters:    Size  Location     Type
 22294 ;;  pc_cmd          1    wreg     unsigned char 
 22295 ;; Auto vars:     Size  Location     Type
 22296 ;;  pc_cmd          1    6[COMRAM] unsigned char 
 22297 ;;  i               1    7[COMRAM] unsigned char 
 22298 ;; Return value:  Size  Location     Type
 22299 ;;                  1    wreg      void 
 22300 ;; Registers used:
 22301 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22302 ;; Tracked objects:
 22303 ;;		On entry : 0/0
 22304 ;;		On exit  : 0/0
 22305 ;;		Unchanged: 0/0
 22306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22308 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22309 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22310 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22311 ;;Total ram usage:        3 bytes
 22312 ;; Hardware stack levels used:    1
 22313 ;; Hardware stack levels required when called:    1
 22314 ;; This function calls:
 22315 ;;		_hxCalcChecksum
 22316 ;; This function is called by:
 22317 ;;		_hxCmdFilter
 22318 ;; This function uses a non-reentrant model
 22319 ;;
 22320                           
 22321                           	psect	text111
 22322  003354                     __ptext111:
 22323                           	opt stack 0
 22324  003354                     _hxSetupPacket2:
 22325                           	opt stack 18
 22326                           
 22327                           ;incstack = 0
 22328                           ;hxSetupPacket2@pc_cmd stored from wreg
 22329  003354  6E07               	movwf	hxSetupPacket2@pc_cmd,c
 22330                           
 22331                           ;HX_CommInterface.c: 218: hx_outData[0] = pc_cmd;
 22332  003356  C007  FB80         	movff	hxSetupPacket2@pc_cmd,_hx_outData
 22333                           
 22334                           ;HX_CommInterface.c: 219: for (uint8_t i = 0; i < hx_mainDataIndex; i++)
 22335  00335A  0E00               	movlw	0
 22336  00335C  6E08               	movwf	hxSetupPacket2@i,c
 22337  00335E  D014               	goto	i2l181
 22338  003360                     
 22339                           ;HX_CommInterface.c: 220: {
 22340                           ;HX_CommInterface.c: 221: hx_outData[hx_outDataIndex++] = hx_mainData[i];
 22341  003360  5008               	movf	hxSetupPacket2@i,w,c
 22342  003362  0D01               	mullw	1
 22343  003364  0EC0               	movlw	low _hx_mainData
 22344  003366  24F3               	addwf	prodl,w,c
 22345  003368  6ED9               	movwf	fsr2l,c
 22346  00336A  0E0B               	movlw	high _hx_mainData
 22347  00336C  20F4               	addwfc	prodh,w,c
 22348  00336E  6EDA               	movwf	fsr2h,c
 22349  003370  5040               	movf	_hx_outDataIndex,w,c
 22350  003372  0D01               	mullw	1
 22351  003374  0E80               	movlw	low _hx_outData
 22352  003376  24F3               	addwf	prodl,w,c
 22353  003378  6EE1               	movwf	fsr1l,c
 22354  00337A  0E0B               	movlw	high _hx_outData
 22355  00337C  20F4               	addwfc	prodh,w,c
 22356  00337E  6EE2               	movwf	fsr1h,c
 22357  003380  CFDF FFE7          	movff	indf2,indf1
 22358  003384  2A40               	incf	_hx_outDataIndex,f,c
 22359  003386  2A08               	incf	hxSetupPacket2@i,f,c
 22360  003388                     i2l181:
 22361  003388  503F               	movf	_hx_mainDataIndex,w,c
 22362  00338A  5C08               	subwf	hxSetupPacket2@i,w,c
 22363  00338C  A0D8               	btfss	status,0,c
 22364  00338E  D7E8               	goto	i2l182
 22365                           
 22366                           ;HX_CommInterface.c: 222: }
 22367                           ;HX_CommInterface.c: 224: hx_outData[1] = hx_outDataIndex - 2 + 1;
 22368  003390  0440               	decf	_hx_outDataIndex,w,c
 22369  003392  010B               	movlb	11	; () banked
 22370  003394  6F81               	movwf	(_hx_outData+1)& (0+255),b
 22371                           
 22372                           ; BSR set to: 11
 22373                           ;HX_CommInterface.c: 225: hx_outData[hx_outDataIndex++] = hxCalcChecksum(hx_outData, hx_
      +                          outDataIndex);
 22374  003396  0E80               	movlw	low _hx_outData
 22375  003398  6E01               	movwf	hxCalcChecksum@data,c
 22376  00339A  0E0B               	movlw	high _hx_outData
 22377  00339C  6E02               	movwf	hxCalcChecksum@data+1,c
 22378  00339E  C040  F003         	movff	_hx_outDataIndex,hxCalcChecksum@size
 22379  0033A2  ECB6  F01E         	call	_hxCalcChecksum	;wreg free
 22380  0033A6  6E06               	movwf	??_hxSetupPacket2& (0+255),c
 22381  0033A8  5040               	movf	_hx_outDataIndex,w,c
 22382  0033AA  0D01               	mullw	1
 22383  0033AC  0E80               	movlw	low _hx_outData
 22384  0033AE  24F3               	addwf	prodl,w,c
 22385  0033B0  6ED9               	movwf	fsr2l,c
 22386  0033B2  0E0B               	movlw	high _hx_outData
 22387  0033B4  20F4               	addwfc	prodh,w,c
 22388  0033B6  6EDA               	movwf	fsr2h,c
 22389  0033B8  C006  FFDF         	movff	??_hxSetupPacket2,indf2
 22390  0033BC  2A40               	incf	_hx_outDataIndex,f,c
 22391  0033BE  0012               	return		;funcret
 22392  0033C0                     __end_of_hxSetupPacket2:
 22393                           	opt stack 0
 22394                           tosu	equ	0xFFF
 22395                           tosh	equ	0xFFE
 22396                           tosl	equ	0xFFD
 22397                           pclatu	equ	0xFFB
 22398                           pclath	equ	0xFFA
 22399                           tblptru	equ	0xFF8
 22400                           tblptrh	equ	0xFF7
 22401                           tblptrl	equ	0xFF6
 22402                           tablat	equ	0xFF5
 22403                           prodh	equ	0xFF4
 22404                           prodl	equ	0xFF3
 22405                           intcon	equ	0xFF2
 22406                           postinc0	equ	0xFEE
 22407                           fsr0h	equ	0xFEA
 22408                           fsr0l	equ	0xFE9
 22409                           wreg	equ	0xFE8
 22410                           indf1	equ	0xFE7
 22411                           postinc1	equ	0xFE6
 22412                           postdec1	equ	0xFE5
 22413                           plusw1	equ	0xFE3
 22414                           fsr1h	equ	0xFE2
 22415                           fsr1l	equ	0xFE1
 22416                           indf2	equ	0xFDF
 22417                           postinc2	equ	0xFDE
 22418                           postdec2	equ	0xFDD
 22419                           plusw2	equ	0xFDB
 22420                           fsr2h	equ	0xFDA
 22421                           fsr2l	equ	0xFD9
 22422                           status	equ	0xFD8
 22423                           
 22424 ;; *************** function _hxSetupPacket1 *****************
 22425 ;; Defined at:
 22426 ;;		line 207 in file "HX_CommInterface.c"
 22427 ;; Parameters:    Size  Location     Type
 22428 ;;  pc_cmd          1    wreg     unsigned char 
 22429 ;;  data            1    5[COMRAM] unsigned char 
 22430 ;; Auto vars:     Size  Location     Type
 22431 ;;  pc_cmd          1    7[COMRAM] unsigned char 
 22432 ;; Return value:  Size  Location     Type
 22433 ;;                  1    wreg      void 
 22434 ;; Registers used:
 22435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22436 ;; Tracked objects:
 22437 ;;		On entry : 0/0
 22438 ;;		On exit  : 0/0
 22439 ;;		Unchanged: 0/0
 22440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22441 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22442 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22443 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22444 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22445 ;;Total ram usage:        3 bytes
 22446 ;; Hardware stack levels used:    1
 22447 ;; Hardware stack levels required when called:    2
 22448 ;; This function calls:
 22449 ;;		_hxCalcChecksum
 22450 ;;		i2_hxFlushOutputBuffer
 22451 ;; This function is called by:
 22452 ;;		_hxCmdFilter
 22453 ;;		_hxHandleTmr0
 22454 ;; This function uses a non-reentrant model
 22455 ;;
 22456                           
 22457                           	psect	text112
 22458  0037B0                     __ptext112:
 22459                           	opt stack 0
 22460  0037B0                     _hxSetupPacket1:
 22461                           	opt stack 17
 22462                           
 22463                           ;incstack = 0
 22464                           ;hxSetupPacket1@pc_cmd stored from wreg
 22465  0037B0  6E08               	movwf	hxSetupPacket1@pc_cmd,c
 22466                           
 22467                           ;HX_CommInterface.c: 209: hxFlushOutputBuffer();
 22468  0037B2  ECF9  F01F         	call	i2_hxFlushOutputBuffer	;wreg free
 22469                           
 22470                           ;HX_CommInterface.c: 210: hx_outData[0] = pc_cmd;
 22471  0037B6  C008  FB80         	movff	hxSetupPacket1@pc_cmd,_hx_outData
 22472                           
 22473                           ;HX_CommInterface.c: 211: hx_outData[1] = 2;
 22474  0037BA  0E02               	movlw	2
 22475  0037BC  010B               	movlb	11	; () banked
 22476  0037BE  6F81               	movwf	(_hx_outData+1)& (0+255),b
 22477                           
 22478                           ; BSR set to: 11
 22479                           ;HX_CommInterface.c: 212: hx_outData[hx_outDataIndex++] = data;
 22480  0037C0  5040               	movf	_hx_outDataIndex,w,c
 22481  0037C2  0D01               	mullw	1
 22482  0037C4  0E80               	movlw	low _hx_outData
 22483  0037C6  24F3               	addwf	prodl,w,c
 22484  0037C8  6ED9               	movwf	fsr2l,c
 22485  0037CA  0E0B               	movlw	high _hx_outData
 22486  0037CC  20F4               	addwfc	prodh,w,c
 22487  0037CE  6EDA               	movwf	fsr2h,c
 22488  0037D0  C006  FFDF         	movff	hxSetupPacket1@data,indf2
 22489                           
 22490                           ; BSR set to: 11
 22491  0037D4  2A40               	incf	_hx_outDataIndex,f,c
 22492                           
 22493                           ; BSR set to: 11
 22494                           ;HX_CommInterface.c: 213: hx_outData[hx_outDataIndex++] = hxCalcChecksum(hx_outData, hx_
      +                          outDataIndex);
 22495  0037D6  0E80               	movlw	low _hx_outData
 22496  0037D8  6E01               	movwf	hxCalcChecksum@data,c
 22497  0037DA  0E0B               	movlw	high _hx_outData
 22498  0037DC  6E02               	movwf	hxCalcChecksum@data+1,c
 22499  0037DE  C040  F003         	movff	_hx_outDataIndex,hxCalcChecksum@size
 22500  0037E2  ECB6  F01E         	call	_hxCalcChecksum	;wreg free
 22501  0037E6  6E07               	movwf	??_hxSetupPacket1& (0+255),c
 22502  0037E8  5040               	movf	_hx_outDataIndex,w,c
 22503  0037EA  0D01               	mullw	1
 22504  0037EC  0E80               	movlw	low _hx_outData
 22505  0037EE  24F3               	addwf	prodl,w,c
 22506  0037F0  6ED9               	movwf	fsr2l,c
 22507  0037F2  0E0B               	movlw	high _hx_outData
 22508  0037F4  20F4               	addwfc	prodh,w,c
 22509  0037F6  6EDA               	movwf	fsr2h,c
 22510  0037F8  C007  FFDF         	movff	??_hxSetupPacket1,indf2
 22511  0037FC  2A40               	incf	_hx_outDataIndex,f,c
 22512  0037FE  0012               	return		;funcret
 22513  003800                     __end_of_hxSetupPacket1:
 22514                           	opt stack 0
 22515                           tosu	equ	0xFFF
 22516                           tosh	equ	0xFFE
 22517                           tosl	equ	0xFFD
 22518                           pclatu	equ	0xFFB
 22519                           pclath	equ	0xFFA
 22520                           tblptru	equ	0xFF8
 22521                           tblptrh	equ	0xFF7
 22522                           tblptrl	equ	0xFF6
 22523                           tablat	equ	0xFF5
 22524                           prodh	equ	0xFF4
 22525                           prodl	equ	0xFF3
 22526                           intcon	equ	0xFF2
 22527                           postinc0	equ	0xFEE
 22528                           fsr0h	equ	0xFEA
 22529                           fsr0l	equ	0xFE9
 22530                           wreg	equ	0xFE8
 22531                           indf1	equ	0xFE7
 22532                           postinc1	equ	0xFE6
 22533                           postdec1	equ	0xFE5
 22534                           plusw1	equ	0xFE3
 22535                           fsr1h	equ	0xFE2
 22536                           fsr1l	equ	0xFE1
 22537                           indf2	equ	0xFDF
 22538                           postinc2	equ	0xFDE
 22539                           postdec2	equ	0xFDD
 22540                           plusw2	equ	0xFDB
 22541                           fsr2h	equ	0xFDA
 22542                           fsr2l	equ	0xFD9
 22543                           status	equ	0xFD8
 22544                           
 22545 ;; *************** function i2_hxFlushOutputBuffer *****************
 22546 ;; Defined at:
 22547 ;;		line 283 in file "HX_CommInterface.c"
 22548 ;; Parameters:    Size  Location     Type
 22549 ;;		None
 22550 ;; Auto vars:     Size  Location     Type
 22551 ;;		None
 22552 ;; Return value:  Size  Location     Type
 22553 ;;                  1    wreg      void 
 22554 ;; Registers used:
 22555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22556 ;; Tracked objects:
 22557 ;;		On entry : 0/0
 22558 ;;		On exit  : 0/0
 22559 ;;		Unchanged: 0/0
 22560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22565 ;;Total ram usage:        0 bytes
 22566 ;; Hardware stack levels used:    1
 22567 ;; Hardware stack levels required when called:    1
 22568 ;; This function calls:
 22569 ;;		i2_hxClearArray
 22570 ;; This function is called by:
 22571 ;;		_hxCmdFilter
 22572 ;;		_hxSetupPacket1
 22573 ;;		_hxHandleTmr0
 22574 ;; This function uses a non-reentrant model
 22575 ;;
 22576                           
 22577                           	psect	text113
 22578  003FF2                     __ptext113:
 22579                           	opt stack 0
 22580  003FF2                     i2_hxFlushOutputBuffer:
 22581                           	opt stack 18
 22582                           
 22583                           ;HX_CommInterface.c: 285: hxClearArray(hx_outData, 64);
 22584                           
 22585                           ;incstack = 0
 22586  003FF2  0E80               	movlw	low _hx_outData
 22587  003FF4  6E01               	movwf	i2hxClearArray@arr,c
 22588  003FF6  0E0B               	movlw	high _hx_outData
 22589  003FF8  6E02               	movwf	i2hxClearArray@arr+1,c
 22590  003FFA  0E40               	movlw	64
 22591  003FFC  6E03               	movwf	i2hxClearArray@size,c
 22592  003FFE  EC33  F01F         	call	i2_hxClearArray	;wreg free
 22593                           
 22594                           ;HX_CommInterface.c: 286: hx_outDataIndex = 2;
 22595  004002  0E02               	movlw	2
 22596  004004  6E40               	movwf	_hx_outDataIndex,c
 22597  004006  0012               	return		;funcret
 22598  004008                     __end_ofi2_hxFlushOutputBuffer:
 22599                           	opt stack 0
 22600                           tosu	equ	0xFFF
 22601                           tosh	equ	0xFFE
 22602                           tosl	equ	0xFFD
 22603                           pclatu	equ	0xFFB
 22604                           pclath	equ	0xFFA
 22605                           tblptru	equ	0xFF8
 22606                           tblptrh	equ	0xFF7
 22607                           tblptrl	equ	0xFF6
 22608                           tablat	equ	0xFF5
 22609                           prodh	equ	0xFF4
 22610                           prodl	equ	0xFF3
 22611                           intcon	equ	0xFF2
 22612                           postinc0	equ	0xFEE
 22613                           fsr0h	equ	0xFEA
 22614                           fsr0l	equ	0xFE9
 22615                           wreg	equ	0xFE8
 22616                           indf1	equ	0xFE7
 22617                           postinc1	equ	0xFE6
 22618                           postdec1	equ	0xFE5
 22619                           plusw1	equ	0xFE3
 22620                           fsr1h	equ	0xFE2
 22621                           fsr1l	equ	0xFE1
 22622                           indf2	equ	0xFDF
 22623                           postinc2	equ	0xFDE
 22624                           postdec2	equ	0xFDD
 22625                           plusw2	equ	0xFDB
 22626                           fsr2h	equ	0xFDA
 22627                           fsr2l	equ	0xFD9
 22628                           status	equ	0xFD8
 22629                           
 22630 ;; *************** function i2_hxClearArray *****************
 22631 ;; Defined at:
 22632 ;;		line 306 in file "HX_CommInterface.c"
 22633 ;; Parameters:    Size  Location     Type
 22634 ;;  arr             2    0[COMRAM] PTR unsigned char 
 22635 ;;		 -> hx_outData(64), hx_mainData(61), hx_inData(64), 
 22636 ;;  size            1    2[COMRAM] unsigned char 
 22637 ;; Auto vars:     Size  Location     Type
 22638 ;;  hxClearArray    1    3[COMRAM] unsigned char 
 22639 ;; Return value:  Size  Location     Type
 22640 ;;                  1    wreg      void 
 22641 ;; Registers used:
 22642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22643 ;; Tracked objects:
 22644 ;;		On entry : 0/0
 22645 ;;		On exit  : 0/0
 22646 ;;		Unchanged: 0/0
 22647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22648 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22649 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22651 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22652 ;;Total ram usage:        4 bytes
 22653 ;; Hardware stack levels used:    1
 22654 ;; This function calls:
 22655 ;;		Nothing
 22656 ;; This function is called by:
 22657 ;;		i2_hxFlushInputBuffer
 22658 ;;		i2_hxFlushOutputBuffer
 22659 ;;		i2_hxFlushMainDataBuffer
 22660 ;; This function uses a non-reentrant model
 22661 ;;
 22662                           
 22663                           	psect	text114
 22664  003E66                     __ptext114:
 22665                           	opt stack 0
 22666  003E66                     i2_hxClearArray:
 22667                           	opt stack 18
 22668                           
 22669                           ;HX_CommInterface.c: 308: for(uint8_t i = 0; i < size; i++)
 22670                           
 22671                           ;incstack = 0
 22672  003E66  0E00               	movlw	0
 22673  003E68  6E04               	movwf	i2hxClearArray@i,c
 22674  003E6A  D00B               	goto	i2l225
 22675  003E6C                     
 22676                           ;HX_CommInterface.c: 309: {
 22677                           ;HX_CommInterface.c: 310: arr[i] = 0;
 22678  003E6C  5004               	movf	i2hxClearArray@i,w,c
 22679  003E6E  0D01               	mullw	1
 22680  003E70  50F3               	movf	prodl,w,c
 22681  003E72  2401               	addwf	i2hxClearArray@arr,w,c
 22682  003E74  6ED9               	movwf	fsr2l,c
 22683  003E76  50F4               	movf	prodh,w,c
 22684  003E78  2002               	addwfc	i2hxClearArray@arr+1,w,c
 22685  003E7A  6EDA               	movwf	fsr2h,c
 22686  003E7C  0E00               	movlw	0
 22687  003E7E  6EDF               	movwf	indf2,c
 22688  003E80  2A04               	incf	i2hxClearArray@i,f,c
 22689  003E82                     i2l225:
 22690  003E82  5003               	movf	i2hxClearArray@size,w,c
 22691  003E84  5C04               	subwf	i2hxClearArray@i,w,c
 22692  003E86  B0D8               	btfsc	status,0,c
 22693  003E88  0012               	return	
 22694  003E8A  D7F0               	goto	i2l226
 22695  003E8C                     __end_ofi2_hxClearArray:
 22696                           	opt stack 0
 22697                           tosu	equ	0xFFF
 22698                           tosh	equ	0xFFE
 22699                           tosl	equ	0xFFD
 22700                           pclatu	equ	0xFFB
 22701                           pclath	equ	0xFFA
 22702                           tblptru	equ	0xFF8
 22703                           tblptrh	equ	0xFF7
 22704                           tblptrl	equ	0xFF6
 22705                           tablat	equ	0xFF5
 22706                           prodh	equ	0xFF4
 22707                           prodl	equ	0xFF3
 22708                           intcon	equ	0xFF2
 22709                           postinc0	equ	0xFEE
 22710                           fsr0h	equ	0xFEA
 22711                           fsr0l	equ	0xFE9
 22712                           wreg	equ	0xFE8
 22713                           indf1	equ	0xFE7
 22714                           postinc1	equ	0xFE6
 22715                           postdec1	equ	0xFE5
 22716                           plusw1	equ	0xFE3
 22717                           fsr1h	equ	0xFE2
 22718                           fsr1l	equ	0xFE1
 22719                           indf2	equ	0xFDF
 22720                           postinc2	equ	0xFDE
 22721                           postdec2	equ	0xFDD
 22722                           plusw2	equ	0xFDB
 22723                           fsr2h	equ	0xFDA
 22724                           fsr2l	equ	0xFD9
 22725                           status	equ	0xFD8
 22726                           
 22727 ;; *************** function _hxCalcChecksum *****************
 22728 ;; Defined at:
 22729 ;;		line 295 in file "HX_CommInterface.c"
 22730 ;; Parameters:    Size  Location     Type
 22731 ;;  data            2    0[COMRAM] PTR unsigned char 
 22732 ;;		 -> hx_outData(64), 
 22733 ;;  size            1    2[COMRAM] unsigned char 
 22734 ;; Auto vars:     Size  Location     Type
 22735 ;;  i               1    3[COMRAM] unsigned char 
 22736 ;;  temp_checksu    1    4[COMRAM] unsigned char 
 22737 ;; Return value:  Size  Location     Type
 22738 ;;                  1    wreg      unsigned char 
 22739 ;; Registers used:
 22740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22741 ;; Tracked objects:
 22742 ;;		On entry : 0/0
 22743 ;;		On exit  : 0/0
 22744 ;;		Unchanged: 0/0
 22745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22746 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22747 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22749 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22750 ;;Total ram usage:        5 bytes
 22751 ;; Hardware stack levels used:    1
 22752 ;; This function calls:
 22753 ;;		Nothing
 22754 ;; This function is called by:
 22755 ;;		_hxSetupPacket1
 22756 ;;		_hxSetupPacket2
 22757 ;; This function uses a non-reentrant model
 22758 ;;
 22759                           
 22760                           	psect	text115
 22761  003D6C                     __ptext115:
 22762                           	opt stack 0
 22763  003D6C                     _hxCalcChecksum:
 22764                           	opt stack 18
 22765                           
 22766                           ;HX_CommInterface.c: 297: uint8_t temp_checksum = 0;
 22767                           
 22768                           ;incstack = 0
 22769  003D6C  0E00               	movlw	0
 22770  003D6E  6E05               	movwf	hxCalcChecksum@temp_checksum,c
 22771                           
 22772                           ;HX_CommInterface.c: 298: for(uint8_t i = 0; i < size; i++)
 22773  003D70  0E00               	movlw	0
 22774  003D72  6E04               	movwf	hxCalcChecksum@i,c
 22775  003D74  D00B               	goto	i2l219
 22776  003D76                     
 22777                           ;HX_CommInterface.c: 299: {
 22778                           ;HX_CommInterface.c: 300: temp_checksum += data[i];
 22779  003D76  5004               	movf	hxCalcChecksum@i,w,c
 22780  003D78  0D01               	mullw	1
 22781  003D7A  50F3               	movf	prodl,w,c
 22782  003D7C  2401               	addwf	hxCalcChecksum@data,w,c
 22783  003D7E  6ED9               	movwf	fsr2l,c
 22784  003D80  50F4               	movf	prodh,w,c
 22785  003D82  2002               	addwfc	hxCalcChecksum@data+1,w,c
 22786  003D84  6EDA               	movwf	fsr2h,c
 22787  003D86  50DF               	movf	indf2,w,c
 22788  003D88  2605               	addwf	hxCalcChecksum@temp_checksum,f,c
 22789  003D8A  2A04               	incf	hxCalcChecksum@i,f,c
 22790  003D8C                     i2l219:
 22791  003D8C  5003               	movf	hxCalcChecksum@size,w,c
 22792  003D8E  5C04               	subwf	hxCalcChecksum@i,w,c
 22793  003D90  A0D8               	btfss	status,0,c
 22794  003D92  D7F1               	goto	i2l220
 22795                           
 22796                           ;HX_CommInterface.c: 301: }
 22797                           ;HX_CommInterface.c: 302: temp_checksum = (~temp_checksum) + 1;
 22798  003D94  6C05               	negf	hxCalcChecksum@temp_checksum,c
 22799                           
 22800                           ;HX_CommInterface.c: 303: return temp_checksum;
 22801  003D96  5005               	movf	hxCalcChecksum@temp_checksum,w,c
 22802  003D98  0012               	return	
 22803  003D9A                     __end_of_hxCalcChecksum:
 22804                           	opt stack 0
 22805  0000                     tosu	equ	0xFFF
 22806                           tosh	equ	0xFFE
 22807                           tosl	equ	0xFFD
 22808                           pclatu	equ	0xFFB
 22809                           pclath	equ	0xFFA
 22810                           tblptru	equ	0xFF8
 22811                           tblptrh	equ	0xFF7
 22812                           tblptrl	equ	0xFF6
 22813                           tablat	equ	0xFF5
 22814                           prodh	equ	0xFF4
 22815                           prodl	equ	0xFF3
 22816                           intcon	equ	0xFF2
 22817                           postinc0	equ	0xFEE
 22818                           fsr0h	equ	0xFEA
 22819                           fsr0l	equ	0xFE9
 22820                           wreg	equ	0xFE8
 22821                           indf1	equ	0xFE7
 22822                           postinc1	equ	0xFE6
 22823                           postdec1	equ	0xFE5
 22824                           plusw1	equ	0xFE3
 22825                           fsr1h	equ	0xFE2
 22826                           fsr1l	equ	0xFE1
 22827                           indf2	equ	0xFDF
 22828                           postinc2	equ	0xFDE
 22829                           postdec2	equ	0xFDD
 22830                           plusw2	equ	0xFDB
 22831                           fsr2h	equ	0xFDA
 22832                           fsr2l	equ	0xFD9
 22833                           status	equ	0xFD8
 22834                           tosu	equ	0xFFF
 22835                           tosh	equ	0xFFE
 22836                           tosl	equ	0xFFD
 22837                           pclatu	equ	0xFFB
 22838                           pclath	equ	0xFFA
 22839                           tblptru	equ	0xFF8
 22840                           tblptrh	equ	0xFF7
 22841                           tblptrl	equ	0xFF6
 22842                           tablat	equ	0xFF5
 22843                           prodh	equ	0xFF4
 22844                           prodl	equ	0xFF3
 22845                           intcon	equ	0xFF2
 22846                           postinc0	equ	0xFEE
 22847                           fsr0h	equ	0xFEA
 22848                           fsr0l	equ	0xFE9
 22849                           wreg	equ	0xFE8
 22850                           indf1	equ	0xFE7
 22851                           postinc1	equ	0xFE6
 22852                           postdec1	equ	0xFE5
 22853                           plusw1	equ	0xFE3
 22854                           fsr1h	equ	0xFE2
 22855                           fsr1l	equ	0xFE1
 22856                           indf2	equ	0xFDF
 22857                           postinc2	equ	0xFDE
 22858                           postdec2	equ	0xFDD
 22859                           plusw2	equ	0xFDB
 22860                           fsr2h	equ	0xFDA
 22861                           fsr2l	equ	0xFD9
 22862                           status	equ	0xFD8
 22863                           
 22864                           	psect	text116
 22865  000000                     __ptext116:
 22866                           	opt stack 0
 22867                           tosu	equ	0xFFF
 22868                           tosh	equ	0xFFE
 22869                           tosl	equ	0xFFD
 22870                           pclatu	equ	0xFFB
 22871                           pclath	equ	0xFFA
 22872                           tblptru	equ	0xFF8
 22873                           tblptrh	equ	0xFF7
 22874                           tblptrl	equ	0xFF6
 22875                           tablat	equ	0xFF5
 22876                           prodh	equ	0xFF4
 22877                           prodl	equ	0xFF3
 22878                           intcon	equ	0xFF2
 22879                           postinc0	equ	0xFEE
 22880                           fsr0h	equ	0xFEA
 22881                           fsr0l	equ	0xFE9
 22882                           wreg	equ	0xFE8
 22883                           indf1	equ	0xFE7
 22884                           postinc1	equ	0xFE6
 22885                           postdec1	equ	0xFE5
 22886                           plusw1	equ	0xFE3
 22887                           fsr1h	equ	0xFE2
 22888                           fsr1l	equ	0xFE1
 22889                           indf2	equ	0xFDF
 22890                           postinc2	equ	0xFDE
 22891                           postdec2	equ	0xFDD
 22892                           plusw2	equ	0xFDB
 22893                           fsr2h	equ	0xFDA
 22894                           fsr2l	equ	0xFD9
 22895                           status	equ	0xFD8
 22896                           
 22897                           	psect	rparam
 22898  0000                     tosu	equ	0xFFF
 22899                           tosh	equ	0xFFE
 22900                           tosl	equ	0xFFD
 22901                           pclatu	equ	0xFFB
 22902                           pclath	equ	0xFFA
 22903                           tblptru	equ	0xFF8
 22904                           tblptrh	equ	0xFF7
 22905                           tblptrl	equ	0xFF6
 22906                           tablat	equ	0xFF5
 22907                           prodh	equ	0xFF4
 22908                           prodl	equ	0xFF3
 22909                           intcon	equ	0xFF2
 22910                           postinc0	equ	0xFEE
 22911                           fsr0h	equ	0xFEA
 22912                           fsr0l	equ	0xFE9
 22913                           wreg	equ	0xFE8
 22914                           indf1	equ	0xFE7
 22915                           postinc1	equ	0xFE6
 22916                           postdec1	equ	0xFE5
 22917                           plusw1	equ	0xFE3
 22918                           fsr1h	equ	0xFE2
 22919                           fsr1l	equ	0xFE1
 22920                           indf2	equ	0xFDF
 22921                           postinc2	equ	0xFDE
 22922                           postdec2	equ	0xFDD
 22923                           plusw2	equ	0xFDB
 22924                           fsr2h	equ	0xFDA
 22925                           fsr2l	equ	0xFD9
 22926                           status	equ	0xFD8
 22927                           
 22928                           	psect	temp
 22929  000047                     btemp:
 22930                           	opt stack 0
 22931  000047                     	ds	1
 22932  0000                     int$flags	set	btemp
 22933  0000                     wtemp6	set	btemp+1
 22934                           tosu	equ	0xFFF
 22935                           tosh	equ	0xFFE
 22936                           tosl	equ	0xFFD
 22937                           pclatu	equ	0xFFB
 22938                           pclath	equ	0xFFA
 22939                           tblptru	equ	0xFF8
 22940                           tblptrh	equ	0xFF7
 22941                           tblptrl	equ	0xFF6
 22942                           tablat	equ	0xFF5
 22943                           prodh	equ	0xFF4
 22944                           prodl	equ	0xFF3
 22945                           intcon	equ	0xFF2
 22946                           postinc0	equ	0xFEE
 22947                           fsr0h	equ	0xFEA
 22948                           fsr0l	equ	0xFE9
 22949                           wreg	equ	0xFE8
 22950                           indf1	equ	0xFE7
 22951                           postinc1	equ	0xFE6
 22952                           postdec1	equ	0xFE5
 22953                           plusw1	equ	0xFE3
 22954                           fsr1h	equ	0xFE2
 22955                           fsr1l	equ	0xFE1
 22956                           indf2	equ	0xFDF
 22957                           postinc2	equ	0xFDE
 22958                           postdec2	equ	0xFDD
 22959                           plusw2	equ	0xFDB
 22960                           fsr2h	equ	0xFDA
 22961                           fsr2l	equ	0xFD9
 22962                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        5
    BSS         471
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      70
    BANK0           160    121     121
    BANK1           256    248     248
    BANK2           256    219     256
    BANK3           256    213     255
    BANK4           256    213     255
    BANK5           256    213     253
    BANK6           256    213     247
    BANK7           256    213     213
    BANK8           256    213     213
    BANK9           256    213     213
    BANK10          256     71      71
    BANK11          256      0     253
    BANK12          256    256     256
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    streamI2C@trBlock.pbuffer	PTR unsigned char  size(2) Largest target is 0
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    i2c1_tr_queue.pTrFlag	PTR enum E11632 size(2) Largest target is 0
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    run_I2C$3586	PTR PTR struct TxRxPacket size(2) Largest target is 4
		 -> run_I2C@stream(BANK2[4]), 

    ASLB_debug2@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_cnfg1@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_cnfg0@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_ADC@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_CommonGate@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_CFCVVaricap@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_RDResistor@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_PierceOscillator@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_ColpittsOscillator@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_VaricapBiasSteering@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_ExternalReferenceVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_OscillatorRegulatorVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_MuxOpenCircuit@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_ZTCReferenceCurrent@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_DigitalRegulatorVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_CurrentLimitDACVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_TempSetDACVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_VaricapDACVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_DACReferenceVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_MuxReadingVDD@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_InternalTempSensor@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_HeaterFBSignals@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_ADCReferenceVoltage@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_CTHERM@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_AnalogMuxReadingSetup@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_HeaterFunctionality@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_ContinuityESD@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    write_ASLBoron_cstm_cnfg@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    write_ASLBoron_cstm_cnfg@cnfg_arr	PTR unsigned char  size(2) Largest target is 256
		 -> run_ASLBoron@cnfg_arr(BANK12[256]), 

    streamSW@pktArr	PTR PTR struct TxRxPacket size(2) Largest target is 48
		 -> checkAndSendLatchData@stream(BANK0[48]), ASLB_debug1@stream(BANK0[8]), ASLB_AnalogMuxReadingSetup@stream(BANK2[4]), ASLB_HeaterFunctionality@stream(BANK2[4]), 

    memcpy@d1	PTR void  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    memcpy@s1	PTR const void  size(2) Largest target is 71
		 -> ramReadbackPkt.data(COMRAM[64]), cmdReadbackPkt.data(COMRAM[64]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 71
		 -> ramReadbackPkt.data(COMRAM[64]), cmdReadbackPkt.data(COMRAM[64]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(3) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    I2C1_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), hx_mainData(BANK11[61]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    I2C1_MasterReadTRBBuild@ptrb	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E11632 size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E11632 size(2) Largest target is 1
		 -> streamI2C@status(BANK1[1]), readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), 

    I2C1_MasterRead@pflag	PTR enum E11632 size(2) Largest target is 1
		 -> readI2C@status(BANK0[1]), 

    I2C1_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    F11745.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    I2C1_MasterWrite@pflag	PTR enum E11632 size(2) Largest target is 1
		 -> writeI2C@status(BANK0[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(2) Largest target is 10
		 -> ASLB_debug2@zeros(BANK0[10]), 

    F11740.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 71
		 -> NULL(NULL[0]), run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), 
		 -> checkAndSendLatchData@clock_select_pkt(BANK10[71]), checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), 
		 -> checkAndSendLatchData@adc_mux_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), 
		 -> checkAndSendLatchData@cmos_pkt(BANK4[71]), checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), 
		 -> checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), 
		 -> checkAndSendLatchData@oven_pkt(BANK3[71]), checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), 
		 -> checkAndSendLatchData@osc2_pkt(BANK2[71]), checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@osc0_pkt(BANK1[71]), findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), 
		 -> ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 
		 -> streamI2C@status(BANK1[1]), readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), NULL(NULL[0]), streamI2C@trBlock(BANK1[160]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E11632 size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    S423$pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    p_i2c1_current.pbuffer	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    S2017$pTrFlag	PTR enum E11632 size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    p_i2c1_current.pTrFlag	PTR enum E11632 size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug2@zeros(BANK0[10]), ASLB_debug1@ramReadbackPkt(BANK1[71]), 
		 -> ASLB_debug1@ramRdPkt(BANK2[71]), ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), streamI2C@status(BANK1[1]), 
		 -> readI2C@status(BANK0[1]), writeI2C@status(BANK0[1]), hx_mainData(BANK11[61]), 

    S2017$ptrb_list	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 192
		 -> I2C1_MasterRead@trBlock(BANK3[5]), I2C1_MasterWrite@trBlock(BANK3[5]), streamI2C@trBlock(BANK1[160]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK3[5]), NULL(NULL[0]), 

    S2028$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK3[5]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK3[5]), 

    S2028$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK3[5]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK3[5]), 

    run_I2C@hx_inData	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    run_I2C@stream.status	PTR enum E11632 size(2) Largest target is 0

    run_I2C@stream	PTR struct TxRxPacket[2] size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    rxPkt.status	PTR enum E11632 size(2) Largest target is 0

    txPkt.status	PTR enum E11632 size(2) Largest target is 0

    filterLatchPacketResponses@rx_index	PTR unsigned char  size(2) Largest target is 1
		 -> ASLB_SheetResistance@rx_index(BANK0[1]), 

    filterLatchPacketResponses@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    filterLatchPacketResponses@readbackPkts.status	PTR enum E11632 size(2) Largest target is 0

    filterLatchPacketResponses@readbackPkts	PTR PTR struct TxRxPacket size(2) Largest target is 24
		 -> checkAndSendLatchData@readbackPkts(BANK0[24]), 

    checkAndSendLatchData@rx_index	PTR unsigned char  size(2) Largest target is 1
		 -> ASLB_SheetResistance@rx_index(BANK0[1]), 

    checkAndSendLatchData@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    readback_clock_select_pkt.status	PTR enum E11632 size(2) Largest target is 0

    clock_select_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_ocxo_divisor_pkt.status	PTR enum E11632 size(2) Largest target is 0

    ocxo_divisor_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_adc_mux_pkt.status	PTR enum E11632 size(2) Largest target is 0

    adc_mux_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_adc_pkt.status	PTR enum E11632 size(2) Largest target is 0

    adc_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_cmos_pkt.status	PTR enum E11632 size(2) Largest target is 0

    cmos_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_bias_pkt.status	PTR enum E11632 size(2) Largest target is 0

    bias_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_varactor_dac_pkt.status	PTR enum E11632 size(2) Largest target is 0

    varactor_dac_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_heat_dac_pkt.status	PTR enum E11632 size(2) Largest target is 0

    heat_dac_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_oven_pkt.status	PTR enum E11632 size(2) Largest target is 0

    oven_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_analog_pkt.status	PTR enum E11632 size(2) Largest target is 0

    analog_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_osc2_pkt.status	PTR enum E11632 size(2) Largest target is 0

    osc2_pkt.status	PTR enum E11632 size(2) Largest target is 0

    readback_osc1_pkt.status	PTR enum E11632 size(2) Largest target is 0

    osc1_pkt.status	PTR enum E11632 size(2) Largest target is 0

    checkAndSendLatchData@readbackPkts.status	PTR enum E11632 size(2) Largest target is 0

    checkAndSendLatchData@readbackPkts	PTR struct TxRxPacket[12] size(2) Largest target is 71
		 -> checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@readback_adc_pkt(BANK8[71]), 
		 -> checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), 
		 -> checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), 
		 -> checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), 

    readback_osc0_pkt.status	PTR enum E11632 size(2) Largest target is 0

    checkAndSendLatchData@stream.status	PTR enum E11632 size(2) Largest target is 0

    checkAndSendLatchData@stream	PTR struct TxRxPacket[24] size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    osc0_pkt.status	PTR enum E11632 size(2) Largest target is 0

    setupLrgWrPkt@pkt.status	PTR enum E11632 size(2) Largest target is 0

    setupCmdReadbackPkt@pkt.status	PTR enum E11632 size(2) Largest target is 0

    setupCmdReadbackPkt@pkt	PTR struct TxRxPacket size(2) Largest target is 71
		 -> checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@readback_adc_pkt(BANK8[71]), 
		 -> checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), 
		 -> checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), 
		 -> checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), ASLB_VaricapBiasSteering@cmdReadbackPkt(BANK0[71]), ASLB_ExternalReferenceVoltage@cmdReadbackPkt(BANK0[71]), ASLB_OscillatorRegulatorVoltage@cmdReadbackPkt(BANK0[71]), 
		 -> ASLB_MuxOpenCircuit@cmdReadbackPkt(BANK0[71]), ASLB_ZTCReferenceCurrent@cmdReadbackPkt(BANK0[71]), ASLB_DigitalRegulatorVoltage@cmdReadbackPkt(BANK0[71]), ASLB_CurrentLimitDACVoltage@cmdReadbackPkt(BANK0[71]), 
		 -> ASLB_TempSetDACVoltage@cmdReadbackPkt(BANK0[71]), ASLB_VaricapDACVoltage@cmdReadbackPkt(BANK0[71]), ASLB_DACReferenceVoltage@cmdReadbackPkt(BANK0[71]), ASLB_MuxReadingVDD@cmdReadbackPkt(BANK0[71]), 
		 -> ASLB_InternalTempSensor@cmdReadbackPkt(BANK0[71]), ASLB_HeaterFBSignals@cmdReadbackPkt(BANK0[71]), ASLB_ADCReferenceVoltage@cmdReadbackPkt(BANK0[71]), ASLB_CTHERM@cmdReadbackPkt(BANK0[71]), 
		 -> ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    setupLatchPkt@pkt.status	PTR enum E11632 size(2) Largest target is 0

    setupLatchPkt@pkt	PTR struct TxRxPacket size(2) Largest target is 71
		 -> checkAndSendLatchData@clock_select_pkt(BANK10[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@cmos_pkt(BANK4[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@oven_pkt(BANK3[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@osc0_pkt(BANK1[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@heatDacWrPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), 

    findMaxI2CSpeed@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    findMaxI2CSpeed@stream.status	PTR enum E11632 size(2) Largest target is 0

    findMaxI2CSpeed@stream	PTR struct TxRxPacket[2] size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    ramWrPkt.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_debug3@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    sp__memcpy	PTR void  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_debug1@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    ASLB_debug1@stream.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_debug1@stream	PTR struct TxRxPacket[4] size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    ramWrPkt.status	PTR enum E11632 size(2) Largest target is 0

    ramReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    ramRdPkt.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_debug0@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_AnalogMuxReadingSetup@stream.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_AnalogMuxReadingSetup@stream	PTR struct TxRxPacket[2] size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    ovenWrPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_HeaterFunctionality@stream.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_HeaterFunctionality@stream	PTR struct TxRxPacket[2] size(2) Largest target is 71
		 -> run_I2C@rxPkt(BANK2[71]), run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@readback_clock_select_pkt(BANK9[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), 
		 -> checkAndSendLatchData@readback_ocxo_divisor_pkt(BANK9[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@readback_adc_mux_pkt(BANK9[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@readback_adc_pkt(BANK8[71]), checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@readback_cmos_pkt(BANK8[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), 
		 -> checkAndSendLatchData@readback_bias_pkt(BANK8[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@readback_varactor_dac_pkt(BANK7[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_heat_dac_pkt(BANK7[71]), checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@readback_oven_pkt(BANK7[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@readback_analog_pkt(BANK6[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@readback_osc2_pkt(BANK6[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@readback_osc1_pkt(BANK6[71]), checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@readback_osc0_pkt(BANK5[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), 
		 -> findMaxI2CSpeed@cmdReadbackPkt(BANK2[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramReadbackPkt(BANK1[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@cmdReadbackPkt(BANK0[71]), ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@cmdReadbackPkt(BANK2[71]), 
		 -> ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@cmdReadbackPkt(BANK2[71]), 

    heatDacWrPkt.status	PTR enum E11632 size(2) Largest target is 0

    ovenWrPkt.status	PTR enum E11632 size(2) Largest target is 0

    cmdReadbackPkt.status	PTR enum E11632 size(2) Largest target is 0

    ASLB_SheetResistance@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    write_ASLBoron_debug@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    write_ASLBoron_cnfg@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    write_ASLBoron_test@run_rpt	PTR unsigned char  size(2) Largest target is 2
		 -> run_ASLBoron@rpt_run(BANK1[2]), 

    write_ASLBoron_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    run_ASLBoron@hx_inData	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxOddParityCalc@buff	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonCheckBusy_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    hxSPPCarbonCheckBusy_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonProgram_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    hxSPPCarbonProgram_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonWriteReg_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonReadReg_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    hxSPPCarbonReadReg_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonRead_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    hxSPPCarbonRead_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonWrite_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    hxSPPCarbonWrite_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    hxSPPCarbonWriteAndVerity_test@rxBuffer	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    hxSPPCarbonWriteAndVerity_test@txBuffer	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    run_SPPCarbon_test@hx_inData	PTR unsigned char  size(2) Largest target is 64
		 -> hx_inData(BANK11[64]), 

    calcChecksum@data	PTR unsigned char  size(2) Largest target is 71
		 -> run_I2C@txPkt(BANK2[71]), checkAndSendLatchData@clock_select_pkt(BANK10[71]), checkAndSendLatchData@ocxo_divisor_pkt(BANK5[71]), checkAndSendLatchData@adc_mux_pkt(BANK5[71]), 
		 -> checkAndSendLatchData@adc_pkt(BANK4[71]), checkAndSendLatchData@cmos_pkt(BANK4[71]), checkAndSendLatchData@bias_pkt(BANK4[71]), checkAndSendLatchData@varactor_dac_pkt(BANK3[71]), 
		 -> checkAndSendLatchData@heat_dac_pkt(BANK3[71]), checkAndSendLatchData@oven_pkt(BANK3[71]), checkAndSendLatchData@analog_pkt(BANK2[71]), checkAndSendLatchData@osc2_pkt(BANK2[71]), 
		 -> checkAndSendLatchData@osc1_pkt(BANK2[71]), checkAndSendLatchData@osc0_pkt(BANK1[71]), findMaxI2CSpeed@ramWrPkt(BANK2[71]), ASLB_debug1@ramRdPkt(BANK2[71]), 
		 -> ASLB_debug1@ramWrPkt(BANK2[71]), ASLB_AnalogMuxReadingSetup@ovenWrPkt(BANK2[71]), ASLB_HeaterFunctionality@heatDacWrPkt(BANK2[71]), ASLB_HeaterFunctionality@ovenWrPkt(BANK2[71]), 
		 -> hx_inData(BANK11[64]), 

    S405TxRxPacket$status	PTR enum E11632 size(2) Largest target is 0

    streamI2C@pktArr.status	PTR enum E11632 size(2) Largest target is 0

    streamI2C@pktArr	PTR PTR struct TxRxPacket size(2) Largest target is 48
		 -> run_I2C@stream(BANK2[4]), checkAndSendLatchData@stream(BANK0[48]), findMaxI2CSpeed@stream(BANK2[4]), ASLB_debug1@stream(BANK0[8]), 
		 -> ASLB_AnalogMuxReadingSetup@stream(BANK2[4]), ASLB_HeaterFunctionality@stream(BANK2[4]), 

    streamBoronComm@pktArr	PTR PTR struct TxRxPacket size(2) Largest target is 48
		 -> checkAndSendLatchData@stream(BANK0[48]), ASLB_debug1@stream(BANK0[8]), ASLB_AnalogMuxReadingSetup@stream(BANK2[4]), ASLB_HeaterFunctionality@stream(BANK2[4]), 

    readI2C@rxData	PTR unsigned char  size(2) Largest target is 61
		 -> hx_mainData(BANK11[61]), 

    writeI2C@txData	PTR unsigned char  size(2) Largest target is 10
		 -> ASLB_debug2@zeros(BANK0[10]), 

    hxClearArray@arr	PTR unsigned char  size(2) Largest target is 64
		 -> hx_outData(BANK11[64]), hx_mainData(BANK11[61]), hx_inData(BANK11[64]), 

    hxCalcChecksum@data	PTR unsigned char  size(2) Largest target is 64
		 -> hx_outData(BANK11[64]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_DefaultInterruptHandler->_hxHandleTmr0
    _hxHandleTmr0->_hxSetupPacket1
    _I2C1_ISR->_I2C1_Stop
    _EUSART1_Receive_ISR->_hxISRHandle
    _hxISRHandle->_hxCmdFilter
    i2_hxStopTimer->i2_TMR0_Write16bitTimer
    _hxCmdFilter->_hxSetupPacket1
    _hxCmdFilter->_hxSetupPacket2
    i2_hxFlushMainDataBuffer->i2_hxClearArray
    i2_hxFlushInputBuffer->i2_hxClearArray
    _hxStartTimer->i2_TMR0_Write16bitTimer
    _hxSetupPacket2->_hxCalcChecksum
    _hxSetupPacket1->_hxCalcChecksum
    i2_hxFlushOutputBuffer->i2_hxClearArray

Critical Paths under _main in BANK0

    _main->_run_ASLBoron
    _run_SPPCarbon_test->_hxSPPCarbonWriteAndVerity_test
    _hxSPPCarbonWrite_test->_hxSPPCarbonWriteReg_test
    _hxSPPCarbonWriteAndVerity_test->_hxSPPCarbonReadReg_test
    _hxSPPCarbonWriteReg_test->_hxOddParityCalc
    _hxSPPCarbonRead_test->_hxSPPCarbonReadReg_test
    _hxSPPCarbonReadReg_test->_hxOddParityCalc
    _hxSPPCarbonProgram_test->_hxOddParityCalc
    _hxSPPCarbonCheckBusy_test->_hxOddParityCalc
    _run_I2C->_readI2C
    _run_I2C->_writeI2C
    _readI2C->_I2C1_MasterRead
    _I2C1_MasterRead->_I2C1_MasterReadTRBBuild
    _run_ASLBoron->_write_ASLBoron_test
    _write_ASLBoron_test->_ASLB_SheetResistance
    _ASLB_ZTCReferenceCurrent->_setupCmdReadbackPkt
    _ASLB_VaricapDACVoltage->_setupCmdReadbackPkt
    _ASLB_VaricapBiasSteering->_setupCmdReadbackPkt
    _ASLB_TempSetDACVoltage->_setTempCtrlDAC
    _ASLB_TempSetDACVoltage->_setupCmdReadbackPkt
    _ASLB_SheetResistance->_checkAndSendLatchData
    _checkAndSendLatchData->_streamBoronComm
    _ASLB_OscillatorRegulatorVoltage->_setupCmdReadbackPkt
    _ASLB_MuxReadingVDD->_setupCmdReadbackPkt
    _ASLB_MuxOpenCircuit->_setupCmdReadbackPkt
    _ASLB_InternalTempSensor->_setupCmdReadbackPkt
    _ASLB_HeaterFunctionality->_streamBoronComm
    _ASLB_HeaterFBSignals->_setupCmdReadbackPkt
    _ASLB_ExternalReferenceVoltage->_setupCmdReadbackPkt
    _ASLB_DigitalRegulatorVoltage->_setupCmdReadbackPkt
    _ASLB_DACReferenceVoltage->_setupCmdReadbackPkt
    _ASLB_CurrentLimitDACVoltage->_setCurrLimitDAC
    _ASLB_CTHERM->_setupCmdReadbackPkt
    _ASLB_AnalogMuxReadingSetup->_streamBoronComm
    _setupLatchPkt->_calcChecksum
    _ASLB_ADCReferenceVoltage->_setupCmdReadbackPkt
    _write_ASLBoron_debug->_ASLB_debug1
    _findMaxI2CSpeed->_calcBaudRate
    _calcBaudRate->___aldiv
    _ASLB_debug3->_adjustI2CBaudRate
    _ASLB_debug2->_writeI2C
    _writeI2C->_I2C1_MasterWrite
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    _ASLB_debug1->_streamBoronComm
    _streamBoronComm->_streamI2C
    _streamI2C->_I2C1_MasterReadTRBBuild
    _streamI2C->_I2C1_MasterWriteTRBBuild
    _write_ASLBoron_cnfg->_ASLB_cnfg0
    _write_ASLBoron_cnfg->_ASLB_cnfg1
    _hxStopTimer->_TMR0_Write16bitTimer
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _hxFlushOutputBuffer->_hxClearArray
    _hxFlushMainDataBuffer->_hxClearArray
    _hxFlushInputBuffer->_hxClearArray

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_run_ASLBoron
    _run_I2C->_streamI2C
    _ASLB_SheetResistance->_checkAndSendLatchData
    _write_ASLBoron_debug->_ASLB_debug1
    _findMaxI2CSpeed->_streamI2C
    _streamBoronComm->_streamI2C

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _write_ASLBoron_test->_ASLB_HeaterFunctionality
    _ASLB_SheetResistance->_checkAndSendLatchData
    _write_ASLBoron_debug->_findMaxI2CSpeed

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    _ASLB_SheetResistance->_checkAndSendLatchData

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    _main->_run_ASLBoron

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  166665
                      _HX_Initialize
                  _SYSTEM_Initialize
                     _hxHandleTxUART
                       _run_ASLBoron
                            _run_I2C
                 _run_SPPCarbon_test
 ---------------------------------------------------------------------------------
 (1) _run_SPPCarbon_test                                   7     4      3   20095
                                             36 BANK0      7     4      3
          _hxSPPCarbonCheckBusy_test
            _hxSPPCarbonProgram_test
               _hxSPPCarbonRead_test
     _hxSPPCarbonWriteAndVerity_test
           _hxSPPCarbonWriteReg_test
              _hxSPPCarbonWrite_test
 ---------------------------------------------------------------------------------
 (2) _hxSPPCarbonWrite_test                                6     2      4    2203
                                             16 BANK0      6     2      4
           _hxSPPCarbonWriteReg_test
 ---------------------------------------------------------------------------------
 (2) _hxSPPCarbonWriteAndVerity_test                      10     6      4    5808
                                             26 BANK0     10     6      4
            _hxSPPCarbonReadReg_test
           _hxSPPCarbonWriteReg_test
 ---------------------------------------------------------------------------------
 (3) _hxSPPCarbonWriteReg_test                             9     7      2    1896
                                              7 BANK0      9     7      2
                    _hxOddParityCalc
 ---------------------------------------------------------------------------------
 (2) _hxSPPCarbonRead_test                                 7     2      5    4031
                                             26 BANK0      7     2      5
            _hxSPPCarbonReadReg_test
 ---------------------------------------------------------------------------------
 (3) _hxSPPCarbonReadReg_test                             19    14      5    2762
                                              7 BANK0     19    14      5
                    _hxOddParityCalc
 ---------------------------------------------------------------------------------
 (2) _hxSPPCarbonProgram_test                             10     6      4    1803
                                              7 BANK0     10     6      4
                    _hxOddParityCalc
 ---------------------------------------------------------------------------------
 (2) _hxSPPCarbonCheckBusy_test                           20    15      5    2666
                                              7 BANK0     20    15      5
                    _hxOddParityCalc
 ---------------------------------------------------------------------------------
 (4) _hxOddParityCalc                                      7     4      3    1060
                                              0 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (1) _run_I2C                                            165   162      3   14706
                                             24 BANK0      4     1      3
                                              0 BANK2    161   161      0
                       _calcChecksum
                            _readI2C
                          _streamI2C
                           _writeI2C
 ---------------------------------------------------------------------------------
 (2) _readI2C                                              8     3      5    2741
                                             16 BANK0      8     3      5
                    _I2C1_MasterRead
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterRead                                      7     0      7    2178
                                              9 BANK0      7     0      7
            _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (1) _run_ASLBoron                                       277   274      3  128692
                                            115 BANK0      6     3      3
                                            233 BANK1     15    15      0
                                              0 BANK12   256   256      0
                       _calcChecksum
                _write_ASLBoron_cnfg
           _write_ASLBoron_cstm_cnfg
               _write_ASLBoron_debug
                _write_ASLBoron_test
 ---------------------------------------------------------------------------------
 (2) _write_ASLBoron_test                                 12     8      4  101278
                                            103 BANK0     12     8      4
                           _ASLB_ADC
           _ASLB_ADCReferenceVoltage
         _ASLB_AnalogMuxReadingSetup
                   _ASLB_CFCVVaricap
                        _ASLB_CTHERM
            _ASLB_ColpittsOscillator
                    _ASLB_CommonGate
                 _ASLB_ContinuityESD
        _ASLB_CurrentLimitDACVoltage
           _ASLB_DACReferenceVoltage
       _ASLB_DigitalRegulatorVoltage
      _ASLB_ExternalReferenceVoltage
               _ASLB_HeaterFBSignals
           _ASLB_HeaterFunctionality
            _ASLB_InternalTempSensor
                _ASLB_MuxOpenCircuit
                 _ASLB_MuxReadingVDD
    _ASLB_OscillatorRegulatorVoltage
              _ASLB_PierceOscillator
                    _ASLB_RDResistor
               _ASLB_SheetResistance
             _ASLB_TempSetDACVoltage
           _ASLB_VaricapBiasSteering
             _ASLB_VaricapDACVoltage
           _ASLB_ZTCReferenceCurrent
 ---------------------------------------------------------------------------------
 (3) _ASLB_ZTCReferenceCurrent                            74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_VaricapDACVoltage                              74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_VaricapBiasSteering                            74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_TempSetDACVoltage                              76    74      2    3186
                                              2 BANK0     76    74      2
                     _setTempCtrlDAC
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (4) _setTempCtrlDAC                                       2     0      2     152
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_SheetResistance                                 3     1      2   23547
                                            100 BANK0      3     1      2
              _checkAndSendLatchData
 ---------------------------------------------------------------------------------
 (4) _checkAndSendLatchData                             1928  1924      4   23346
                                             18 BANK0     82    78      4
                                            162 BANK1     71    71      0
                                              0 BANK2    213   213      0
                                              0 BANK3    213   213      0
                                              0 BANK4    213   213      0
                                              0 BANK5    213   213      0
                                              0 BANK6    213   213      0
                                              0 BANK7    213   213      0
                                              0 BANK8    213   213      0
                                              0 BANK9    213   213      0
                                              0 BANK10    71    71      0
         _filterLatchPacketResponses
                _setupCmdReadbackPkt
                      _setupLatchPkt
                    _streamBoronComm
 ---------------------------------------------------------------------------------
 (5) _filterLatchPacketResponses                          13     6      7    1125
                                              0 BANK0     13     6      7
 ---------------------------------------------------------------------------------
 (3) _ASLB_RDResistor                                      3     1      2      93
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_PierceOscillator                                3     1      2      93
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_OscillatorRegulatorVoltage                     74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_MuxReadingVDD                                  74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_MuxOpenCircuit                                 74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_InternalTempSensor                             74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_HeaterFunctionality                           231   229      2   15341
                                             18 BANK0      2     0      2
                                              0 BANK2    219   219      0
                _setupCmdReadbackPkt
                      _setupLatchPkt
                    _streamBoronComm
 ---------------------------------------------------------------------------------
 (3) _ASLB_HeaterFBSignals                                74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_ExternalReferenceVoltage                       74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_DigitalRegulatorVoltage                        74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_DACReferenceVoltage                            74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_CurrentLimitDACVoltage                         76    74      2    3217
                                              8 BANK0     76    74      2
                    _setCurrLimitDAC
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (4) _setCurrLimitDAC                                      8     6      2     183
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_ContinuityESD                                   2     0      2      90
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_CommonGate                                      3     1      2      93
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_ColpittsOscillator                              3     1      2      93
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_CTHERM                                         74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (3) _ASLB_CFCVVaricap                                     3     1      2      93
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_AnalogMuxReadingSetup                         150   148      2   15256
                                             18 BANK0      2     0      2
                                              0 BANK2    148   148      0
                _setupCmdReadbackPkt
                      _setupLatchPkt
                    _streamBoronComm
 ---------------------------------------------------------------------------------
 (5) _setupLatchPkt                                        7     2      5    6544
                                              5 BANK0      7     2      5
                       _calcChecksum
 ---------------------------------------------------------------------------------
 (3) _ASLB_ADCReferenceVoltage                            74    72      2    2935
                                              2 BANK0     74    72      2
                _setupCmdReadbackPkt
 ---------------------------------------------------------------------------------
 (4) _setupCmdReadbackPkt                                  2     0      2    2793
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_ADC                                             3     1      2      93
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _write_ASLBoron_debug                                 4     1      3   23159
                                            104 BANK0      4     1      3
                        _ASLB_debug0
                        _ASLB_debug1
                        _ASLB_debug2
                        _ASLB_debug3
                    _cycleBoronPower
                    _findMaxI2CSpeed
                     _resetLATCHData
                       _resetSFRData
                         _setCommI2C
                  _setCommSingleWire
 ---------------------------------------------------------------------------------
 (3) _setCommSingleWire                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _setCommI2C                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetSFRData                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _resetLATCHData                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _findMaxI2CSpeed                                    155   153      2    8589
                                             21 BANK0      2     0      2
                                              0 BANK2    153   153      0
                  _adjustI2CBaudRate
                       _calcBaudRate
                       _calcChecksum
                          _streamI2C
 ---------------------------------------------------------------------------------
 (4) _calcBaudRate                                         7     5      2     690
                                             14 BANK0      7     5      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             14     6      8     625
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) _cycleBoronPower                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ASLB_debug3                                          4     2      2     539
                                              1 BANK0      4     2      2
                  _adjustI2CBaudRate
 ---------------------------------------------------------------------------------
 (4) _adjustI2CBaudRate                                    1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ASLB_debug2                                         15    13      2    3137
                                             24 BANK0     14    12      2
                           _writeI2C
 ---------------------------------------------------------------------------------
 (2) _writeI2C                                             8     3      5    2986
                                             16 BANK0      8     3      5
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterWrite                                     7     0      7    2147
                                              9 BANK0      7     0      7
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (3) _ASLB_debug1                                        299   297      2    9998
                                             18 BANK0     86    84      2
                                            162 BANK1     71    71      0
                                              0 BANK2    142   142      0
                       _calcChecksum
                             _memcpy
                    _streamBoronComm
 ---------------------------------------------------------------------------------
 (5) _streamBoronComm                                      4     1      3    5460
                                             14 BANK0      4     1      3
                          _streamI2C
                           _streamSW
 ---------------------------------------------------------------------------------
 (6) _streamSW                                             3     0      3     180
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _streamI2C                                          167   164      3    4405
                                              9 BANK0      5     2      3
                                              0 BANK1    162   162      0
            _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterWriteTRBBuild                             9     2      7     906
                                              0 BANK0      9     2      7
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterTRBInsert                                 6     2      4     726
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _I2C1_MasterReadTRBBuild                              9     2      7     937
                                              0 BANK0      9     2      7
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              11     5      6     748
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (2) _calcChecksum                                         5     2      3    1821
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _ASLB_debug0                                          3     1      2     189
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _write_ASLBoron_cstm_cnfg                             6     0      6     270
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _write_ASLBoron_cnfg                                  3     1      2     456
                                              2 BANK0      3     1      2
                         _ASLB_cnfg0
                         _ASLB_cnfg1
 ---------------------------------------------------------------------------------
 (3) _ASLB_cnfg1                                           2     0      2      90
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _ASLB_cnfg0                                           2     0      2      90
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _hxHandleTxUART                                       5     5      0    1007
                                              4 BANK0      5     5      0
                      _EUSART1_Write
                _hxFlushOutputBuffer
                        _hxStopTimer
 ---------------------------------------------------------------------------------
 (2) _hxStopTimer                                          0     0      0     207
                     _TMR0_StopTimer
               _TMR0_Write16bitTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_Write16bitTimer                                 2     0      2     207
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Write                                        1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     155
                 _EUSART1_Initialize
                    _I2C1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0     121
                                              3 BANK0      2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             3     0      3     121
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HX_Initialize                                        0     0      0    2010
                 _hxFlushInputBuffer
              _hxFlushMainDataBuffer
                _hxFlushOutputBuffer
 ---------------------------------------------------------------------------------
 (2) _hxFlushOutputBuffer                                  0     0      0     670
                       _hxClearArray
 ---------------------------------------------------------------------------------
 (2) _hxFlushMainDataBuffer                                0     0      0     670
                       _hxClearArray
 ---------------------------------------------------------------------------------
 (2) _hxFlushInputBuffer                                   0     0      0     670
                       _hxClearArray
 ---------------------------------------------------------------------------------
 (3) _hxClearArray                                         4     1      3     670
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0    6032
                                             17 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
               _I2C1_BusCollisionISR
                           _I2C1_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0    2007
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (10) _TMR0_DefaultInterruptHandler                        0     0      0    2007
                       _hxHandleTmr0
 ---------------------------------------------------------------------------------
 (11) _hxHandleTmr0                                        2     2      0    2007
                                              8 COMRAM     2     2      0
                     _hxSetupPacket1
               i2_hxFlushInputBuffer
              i2_hxFlushOutputBuffer
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_ISR                                             2     2      0      31
                                              3 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (10) _I2C1_Stop                                           3     3      0      31
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) _I2C1_FunctionComplete                               0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0    3994
                        _hxISRHandle
 ---------------------------------------------------------------------------------
 (10) _hxISRHandle                                         8     8      0    3994
                                              9 COMRAM     8     8      0
                        _hxCmdFilter
                       _hxStartTimer
               i2_hxFlushInputBuffer
                      i2_hxStopTimer
 ---------------------------------------------------------------------------------
 (11) i2_hxStopTimer                                       0     0      0      96
                   i2_TMR0_StopTimer
             i2_TMR0_Write16bitTimer
 ---------------------------------------------------------------------------------
 (12) i2_TMR0_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _hxCmdFilter                                         1     1      0    3130
                                              8 COMRAM     1     1      0
                     _hxSetupPacket1
                     _hxSetupPacket2
                       _hxStartTimer
               i2_hxFlushInputBuffer
            i2_hxFlushMainDataBuffer
              i2_hxFlushOutputBuffer
 ---------------------------------------------------------------------------------
 (12) i2_hxFlushMainDataBuffer                             0     0      0     246
                     i2_hxClearArray
 ---------------------------------------------------------------------------------
 (12) i2_hxFlushInputBuffer                                0     0      0     246
                     i2_hxClearArray
 ---------------------------------------------------------------------------------
 (11) _hxStartTimer                                        2     0      2     346
                                              2 COMRAM     2     0      2
                    _TMR0_StartTimer
             i2_TMR0_Write16bitTimer
 ---------------------------------------------------------------------------------
 (12) i2_TMR0_Write16bitTimer                              2     0      2      96
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (12) _TMR0_StartTimer                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _hxSetupPacket2                                      3     3      0     509
                                              5 COMRAM     3     3      0
                     _hxCalcChecksum
 ---------------------------------------------------------------------------------
 (12) _hxSetupPacket1                                      3     2      1    1491
                                              5 COMRAM     3     2      1
                     _hxCalcChecksum
              i2_hxFlushOutputBuffer
 ---------------------------------------------------------------------------------
 (12) i2_hxFlushOutputBuffer                               0     0      0     246
                     i2_hxClearArray
 ---------------------------------------------------------------------------------
 (13) i2_hxClearArray                                      4     1      3     246
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (13) _hxCalcChecksum                                      5     2      3     441
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _HX_Initialize
     _hxFlushInputBuffer
       _hxClearArray
     _hxFlushMainDataBuffer
       _hxClearArray
     _hxFlushOutputBuffer
       _hxClearArray
   _SYSTEM_Initialize
     _EUSART1_Initialize
     _I2C1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
   _hxHandleTxUART
     _EUSART1_Write
     _hxFlushOutputBuffer
       _hxClearArray
     _hxStopTimer
       _TMR0_StopTimer
       _TMR0_Write16bitTimer
   _run_ASLBoron
     _calcChecksum
     _write_ASLBoron_cnfg
       _ASLB_cnfg0
       _ASLB_cnfg1
     _write_ASLBoron_cstm_cnfg
     _write_ASLBoron_debug
       _ASLB_debug0
       _ASLB_debug1
         _calcChecksum
         _memcpy
         _streamBoronComm
           _streamI2C
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
           _streamSW
       _ASLB_debug2
         _writeI2C
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
       _ASLB_debug3
         _adjustI2CBaudRate
       _cycleBoronPower
       _findMaxI2CSpeed
         _adjustI2CBaudRate
         _calcBaudRate
           ___aldiv
         _calcChecksum
         _streamI2C
           _I2C1_MasterReadTRBBuild
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
       _resetLATCHData
       _resetSFRData
       _setCommI2C
       _setCommSingleWire
     _write_ASLBoron_test
       _ASLB_ADC
       _ASLB_ADCReferenceVoltage
         _setupCmdReadbackPkt
       _ASLB_AnalogMuxReadingSetup
         _setupCmdReadbackPkt
         _setupLatchPkt
           _calcChecksum
         _streamBoronComm
           _streamI2C
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
           _streamSW
       _ASLB_CFCVVaricap
       _ASLB_CTHERM
         _setupCmdReadbackPkt
       _ASLB_ColpittsOscillator
       _ASLB_CommonGate
       _ASLB_ContinuityESD
       _ASLB_CurrentLimitDACVoltage
         _setCurrLimitDAC
         _setupCmdReadbackPkt
       _ASLB_DACReferenceVoltage
         _setupCmdReadbackPkt
       _ASLB_DigitalRegulatorVoltage
         _setupCmdReadbackPkt
       _ASLB_ExternalReferenceVoltage
         _setupCmdReadbackPkt
       _ASLB_HeaterFBSignals
         _setupCmdReadbackPkt
       _ASLB_HeaterFunctionality
         _setupCmdReadbackPkt
         _setupLatchPkt
           _calcChecksum
         _streamBoronComm
           _streamI2C
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
           _streamSW
       _ASLB_InternalTempSensor
         _setupCmdReadbackPkt
       _ASLB_MuxOpenCircuit
         _setupCmdReadbackPkt
       _ASLB_MuxReadingVDD
         _setupCmdReadbackPkt
       _ASLB_OscillatorRegulatorVoltage
         _setupCmdReadbackPkt
       _ASLB_PierceOscillator
       _ASLB_RDResistor
       _ASLB_SheetResistance
         _checkAndSendLatchData
           _filterLatchPacketResponses
           _setupCmdReadbackPkt
           _setupLatchPkt
             _calcChecksum
           _streamBoronComm
             _streamI2C
               _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
             _streamSW
       _ASLB_TempSetDACVoltage
         _setTempCtrlDAC
         _setupCmdReadbackPkt
       _ASLB_VaricapBiasSteering
         _setupCmdReadbackPkt
       _ASLB_VaricapDACVoltage
         _setupCmdReadbackPkt
       _ASLB_ZTCReferenceCurrent
         _setupCmdReadbackPkt
   _run_I2C
     _calcChecksum
     _readI2C
       _I2C1_MasterRead
         _I2C1_MasterReadTRBBuild
         _I2C1_MasterTRBInsert
     _streamI2C
       _I2C1_MasterReadTRBBuild
       _I2C1_MasterTRBInsert
       _I2C1_MasterWriteTRBBuild
     _writeI2C
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
   _run_SPPCarbon_test
     _hxSPPCarbonCheckBusy_test
       _hxOddParityCalc
     _hxSPPCarbonProgram_test
       _hxOddParityCalc
     _hxSPPCarbonRead_test
       _hxSPPCarbonReadReg_test
         _hxOddParityCalc
     _hxSPPCarbonWriteAndVerity_test
       _hxSPPCarbonReadReg_test
         _hxOddParityCalc
       _hxSPPCarbonWriteReg_test
         _hxOddParityCalc
     _hxSPPCarbonWriteReg_test
       _hxOddParityCalc
     _hxSPPCarbonWrite_test
       _hxSPPCarbonWriteReg_test
         _hxOddParityCalc

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _hxISRHandle
       _hxCmdFilter
         _hxSetupPacket1
           _hxCalcChecksum
           i2_hxFlushOutputBuffer
             i2_hxClearArray
         _hxSetupPacket2
           _hxCalcChecksum
         _hxStartTimer
           _TMR0_StartTimer
           i2_TMR0_Write16bitTimer
         i2_hxFlushInputBuffer
           i2_hxClearArray
         i2_hxFlushMainDataBuffer
           i2_hxClearArray
         i2_hxFlushOutputBuffer
           i2_hxClearArray
       _hxStartTimer
         _TMR0_StartTimer
         i2_TMR0_Write16bitTimer
       i2_hxFlushInputBuffer
         i2_hxClearArray
       i2_hxStopTimer
         i2_TMR0_StopTimer
         i2_TMR0_Write16bitTimer
   _EUSART1_Transmit_ISR
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
       _hxHandleTmr0
         _hxSetupPacket1
           _hxCalcChecksum
           i2_hxFlushOutputBuffer
             i2_hxClearArray
         i2_hxFlushInputBuffer
           i2_hxClearArray
         i2_hxFlushOutputBuffer
           i2_hxClearArray

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E87      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100    100     100      30      100.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0      FD      28       98.8%
BITBANK10          100      0       0      25        0.0%
BANK10             100     47      47      26       27.7%
BITBANK9           100      0       0      23        0.0%
BANK9              100     D5      D5      24       83.2%
BITBANK8           100      0       0      21        0.0%
BANK8              100     D5      D5      22       83.2%
BITBANK7           100      0       0      19        0.0%
BANK7              100     D5      D5      20       83.2%
BITBANK6           100      0       0      17        0.0%
BANK6              100     D5      F7      18       96.5%
BITBANK5           100      0       0      15        0.0%
BANK5              100     D5      FD      16       98.8%
BITBANK4           100      0       0      13        0.0%
BANK4              100     D5      FF      14       99.6%
BITBANK3           100      0       0      11        0.0%
BANK3              100     D5      FF      12       99.6%
BITBANK2           100      0       0       9        0.0%
BANK2              100     DB     100      10      100.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100     F8      F8       8       96.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     79      79       5       75.6%
BITBANK14           88      0       0      33        0.0%
BANK14              88      0       0      34        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      46       1       74.5%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     B6C       6        0.0%
DATA                 0      0     B6C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri May 04 10:45:50 2018

                            hxCalcChecksum@size 0003                                 _BORON_COMM_TYPE 0030  
                      _eusart1TxBufferRemaining 03FE                                _SFR_ADC_DIV_DATA 02EE  
               __size_of_ASLB_TempSetDACVoltage 0064                         findMaxI2CSpeed@rxBuffer 0075  
         checkAndSendLatchData@clock_select_pkt 0A00                                     __CFG_CP$OFF 000000  
                 checkAndSendLatchData@cmos_pkt 0447          checkAndSendLatchData@readback_cmos_pkt 0847  
                           ?_run_SPPCarbon_test 0084                                ?_streamBoronComm 006E  
                     ASLB_debug1@ramReadbackPkt 01A2          hxSPPCarbonCheckBusy_test@readbackTimer 006F  
                 checkAndSendLatchData@osc0_pkt 01A2                   checkAndSendLatchData@osc1_pkt 0200  
        checkAndSendLatchData@readback_osc0_pkt 0500                   checkAndSendLatchData@osc2_pkt 0247  
        checkAndSendLatchData@readback_osc1_pkt 0600          checkAndSendLatchData@readback_osc2_pkt 0647  
                       __size_of_resetLATCHData 00DC                                ??i2_hxClearArray 0004  
                                   __CFG_LVP$ON 000000                                             l225 3E5C  
                       findMaxI2CSpeed@rx_index 0251                                             l226 3E46  
                                           l250 359C                                             l252 35AA  
                                           l260 3824                                             l253 35AE  
                                           l246 3568                                             l280 1F6A  
                                           l248 3588                                             l600 2CB8  
                                           l265 3842                                             l601 2CE6  
                                           l258 3802                                             l283 1F7C  
                                           l188 35E4                                             l700 114A  
                                           l620 19FA                                             l189 35CC  
                                           l293 3D2E                                             l285 1F94  
                                           l277 1F6E                                             l269 3CFA  
                                           l621 1A2A                                             l613 199E  
                                           l605 3AC4                                             l294 3D18  
                                           l278 1E28                                             l710 1200  
                                           l702 1174                                             l630 1BAC  
                                           l279 1EDE                                             l631 1AC8  
                                           l623 1A54                                             l615 19C8  
                                           l712 1216                                             l704 118A  
                                           l632 1AD8                                             l289 1FA0  
                                           l625 1A6A                                             l617 19DE  
                                           l609 3882                                             l722 12E2  
                                           l706 122E                                             l650 1B84  
                                           l642 1B52                                             l723 1308  
                                           l715 1248                                             l707 11A6  
                                           l651 1B8A                                             l635 1B16  
                                           l619 1A82                                             l571 16FC  
                                           l708 11D6                                             l636 1B2C  
                                           l628 1A9C                                             l717 13E4  
                                           l733 1372                                             l661 2612  
                                           l581 182C                                             l573 1738  
                                           l726 132A                                             l718 1294  
                                           l654 1BC0                                             l646 1B64  
                                           l582 1820                                             l719 12A4  
                                           l639 1B3E                                             l671 26B4  
                                           l663 2628                                             l591 1930  
                                           l575 176C                                             l744 36AC  
                                           l592 1954                                             l745 367C  
                                           l737 1392                                             l729 134E  
                                           l681 231E                                             l665 26CC  
                                           l585 1868                                             l577 17A8  
                                           l569 16C8                                             l746 369C  
                                           l738 13B0                                             l674 26E6  
                                           l666 2644                                             l691 23C0  
                                           l683 2334                                             l667 2674  
                                           l659 25E8                                             l587 18A8  
                                           l579 17E4                                             l596 2C5E  
                                           l685 23D8                                             l669 269E  
                                           l589 18F0                                             l694 23F2  
                                           l686 2350                                             l598 2CB2  
                                           l687 2380                                             l679 22F4  
                                           l599 2CE8                                             l696 242E  
                                           l689 23AA                                             _GIE 007F97  
                                  __CFG_CPD$OFF 000000                          ??_hxSPPCarbonRead_test 007F  
                  __size_of_hxFlushOutputBuffer 0018                                  ??_hxClearArray 0063  
                                           prod 000FF3                                             tosl 000FFD  
                                           wreg 000FE8                   checkAndSendLatchData@rxBuffer 0072  
                        setupLatchPkt@latch_num 0069                     run_SPPCarbon_test@hx_inData 0084  
                       __size_of_setTempCtrlDAC 0028                   findMaxI2CSpeed@cmdReadbackPkt 020A  
         write_ASLBoron_cstm_cnfg@cnfg_arr_size 0062                          ??i2_hxFlushInputBuffer 0005  
                 checkAndSendLatchData@oven_pkt 0300                                ?_ASLB_CommonGate 0060  
        checkAndSendLatchData@readback_oven_pkt 0700                                _SFR_ADC_MUX_DATA 02ED  
                                  __CFG_ZCD$OFF 000000                                __end_of_I2C1_ISR 1E18  
                                          l1100 2874                                            l1021 1456  
                                          l1110 2944                                            l1102 287A  
                                          l1111 2964                                            l1103 289A  
                                          l1031 152A                                            l1104 28BA  
                                          l1024 150C                                            l1105 28DA  
                                          l1033 1566                                            l1025 14B4  
                                          l1106 28FC                                            l1042 169A  
                                          l1107 290E                                            l1051 10E4  
                                          l1043 1604                                            l1035 1570  
                                          l1108 2920                                            l1060 0E44  
                                          l1052 0E00                                            l1028 14EA  
                                          l1109 2932                                            l1053 10BA  
                                          l1061 0E58                                            l1045 1628  
                                          l1037 15B2                                            l1029 14BA  
                                          l1206 2284                                            l1230 255C  
                                          l1070 0F0C                                            l1062 0E6C  
                                          l1046 1644                                            l1055 1018  
                                          l1071 0F20                                            l1063 0E80  
                                          l1047 1674                                            l1039 15BC  
                                          l1216 3524                                            l1080 0FD4  
                                          l1072 0F34                                            l1064 0E94  
                                          l1056 0E0A                                            l1048 1694  
                                          l1233 259A                                            l1057 10B4  
                                          l1081 0FE8                                            l1073 0F48  
                                          l1065 0EA8                                            l1082 1006  
                                          l1074 0F5C                                            l1066 0EBC  
                                          l1058 0E1C                                            l1091 3450  
                                          l1243 3EC2                                            l1227 24B6  
                                          l1251 3134                                            l1155 33EC  
                                          l1075 0F70                                            l1067 0ED0  
                                          l1059 0E30                                            l1092 3470  
                                          l1076 0F84                                            l1068 0EE4  
                                          l1501 305A                                            l1149 34BC  
                                          l1077 0F98                                            l1069 0EF8  
                                          l1502 3046                                            l1158 3428  
                                          l1270 0246                                            l1078 0FAC  
                                          l1350 0B1E                                            l1271 02EC  
                                          l1247 3DFC                                            l1079 0FC0  
                                          l1088 3482                                            l1504 3066  
                                          l2160 2C02                                            l1280 08BA  
                                          l1272 0392                                            l1344 0B9C  
                                          l1089 3430                                            l2161 2C10  
                                          l2153 2B88                                            l1281 0960  
                                          l1273 0438                                            l2162 2C26  
                                          l2154 2BA0                                            l1282 0980  
                                          l1274 04DE                                            l1362 0CB6  
                                          l1354 0BDC                                            l2082 3092  
                                          l1099 2976                                            l1275 0584  
                                          l1363 0C86                                            l1355 0C1E  
                                          l1347 0ADA                                            l2083 311C  
                                          l2156 2BCE                                            l1276 062A  
                                          l1372 0D7E                                            l1356 0C10  
                                          l1348 0B54                                            l2084 30E6  
                                          l2092 30BE                                            l2157 2BC2  
                                          l1277 06D0                                            l1269 01A0  
                                          l1349 0AE0                                            l2093 30D2  
                                          l1278 0776                                            l1374 0DB6  
                                          l1366 0D62                                            l1358 0CC8  
                                          l2086 3118                                            l1287 2850  
                                          l1279 0818                                            l1367 0CFE  
                                          l1359 0C64                            ??_run_SPPCarbon_test 0087  
                                          l1288 2720                                            l1376 0DEA  
                                          l1368 0D50                                            l1289 284C  
                                          l1369 0D20                                            l2089 30AA  
                                          l1740 39A2                                            l2525 38C8  
                                          l2526 38A6                                            l1496 3752  
                                          l1489 37A2                                            l1738 3980  
                                          l1739 39A6                   run_SPPCarbon_test@returnValue 0088  
                 checkAndSendLatchData@rx_index 0074                                            l9523 3046  
                                          l9529 3066                                            l9741 3694  
                                          _LATA 000F83                                            _LATB 000F84  
                                          _LATC 000F85                                            _LATD 000F86  
                                          _LATE 000F87                                            u7030 3130  
                                          u8010 133C                                            u7130 263E  
                                          u8020 133E                                            u7045 3142  
                                          u8110 13B4                                            u7230 19F4  
                                          u7055 3182                                            u8210 2E84  
                                          u6610 1FA6                                            u8130 13EC  
                                          u8050 1360                                            u7170 26CA  
                                          u8060 1362                                            u7420 1B8E  
                                          u7270 1A80                                            u8240 35FE  
                                          u6560 3076                                            u7600 259E  
                                          u6720 2782                                            u7440 1BB4  
                                          u9017 25D6                                            u9107 2686  
                                          u9027 25E2                                            u7541 3AE6  
                                          u9117 26AE                                            u9037 25EE  
                                          u8430 14A8                                            u9207 19B0  
                                          u9127 26BA                                            u9047 25FA  
                               hxISRHandle@data 0011                                            u8440 14AE  
                                          u9217 19D8                                            u9137 26E0  
                                          u9057 2622                                            u6770 2BD2  
                                          u7730 234A                                            u9307 1AA2  
                                          u9227 19E4                                            u9147 26EC  
                                          u9067 262E                                            u6860 36AA  
                                          u9317 1AAE                                            u9237 1A18  
                                          u9157 26F8                                            u9077 2662  
                                ??_hxHandleTmr0 0009                                            u9407 232E  
                                          u9327 1ABA                                            u9247 1A24  
                                          u9167 2704                                            u9087 266E  
                                          u7840 11A0                                            u9417 233A  
                                          u9337 1ADE                                            u9257 1A30  
                                          u9177 198C                                            u9097 267A  
                                          u7930 12F6                                            u7770 23D6  
                                          u9507 2404                                            u9427 236E  
                                          u9347 1AEA                                            u9267 1A3C  
                                          u9187 1998                                            u7940 12F8  
                                          u9517 2410                                            u9437 237A  
                                          u9357 1AF6                                            u9277 1A64  
                                          u9197 19A4                                            u8590 0C56  
                                          u9607 11DC                                            u9527 1138  
                                          u9447 2386                                            u9367 22E2  
                                          u9287 1A70                                            u7880 122C  
                                          u9617 11E8                                            u9537 1144  
                                          u9457 2392                                            u9377 22EE  
                                          u9297 1A96                                            u7970 1318  
                                          u9707 12C2                                            u9627 1210  
                                          u9547 1150                                            u9467 23BA  
                                          u9387 22FA                                            u7980 131A  
                                          u9717 3F58                                            u9637 121C  
                                          u9557 115C                                            u9477 23C6  
                                          u9397 2306                                            u9647 1242  
                                          u9567 1184                                            u9487 23EC  
                                          u9657 124E                                            u9577 1190  
                                          u9497 23F8                                            u9667 125A  
                                          u9587 11C4                                            u9677 1266  
                                          u9597 11D0                                            u9687 12AA  
                                          u9697 12B6                                            _WPUA 000F10  
                                          _WPUB 000F18                                            _WPUC 000F20  
                                          _WPUD 000F25                   hxSPPCarbonWrite_test@rxBuffer 0072  
                                          _WPUE 000F2D                 __end_of_I2C1_MasterReadTRBBuild 3710  
                                 _EUSART1_Write 3968                                   __CFG_FCMEN$ON 000000  
                 hxSPPCarbonWrite_test@txBuffer 0070                       hxSPPCarbonWriteReg_test@i 006D  
                     hxSPPCarbonWriteReg_test@j 006C                                            _main 3082  
                               _TMR0_StartTimer 40DE                                 ??_HX_Initialize 0064  
                                          fsr0h 000FEA                                            fsr1h 000FE2  
                                          fsr2h 000FDA                                            fsr0l 000FE9  
                                          indf1 000FE7                                            indf2 000FDF  
                                          fsr1l 000FE1                                            fsr2l 000FD9  
                                          _tsld 06D5                          ??_I2C1_MasterTRBInsert 0064  
                                          btemp 0047                      hxSPPCarbonWrite_test@numTX 0074  
                 ?_ASLB_DigitalRegulatorVoltage 0062                           i2_hxFlushOutputBuffer 3FF2  
                                          prodh 000FF4                                            prodl 000FF3  
                                          start 00E8                         setupLatchPkt@latch_data 0067  
                    ?_hxSPPCarbonCheckBusy_test 0067                       hxSPPCarbonRead_test@numRX 007A  
                     hxSPPCarbonRead_test@numTX 007F                                 _findMaxI2CSpeed 2434  
                         __size_of_calcBaudRate 0058                                 ??_setupLatchPkt 006A  
                                 __CFG_CSWEN$ON 000000                write_ASLBoron_cstm_cnfg@cnfg_arr 0060  
                              __end_of_ASLB_ADC 40B8                                    ___param_bank 000000  
                         __size_of_calcChecksum 0030                  I2C1_MasterWriteTRBBuild@length 0064  
                                 __CFG_SCANE$ON 000000                            run_I2C@calc_checksum 0207  
                  write_ASLBoron_debug@rxBuffer 00C9                         __end_of_TMR0_Initialize 39EA  
                        _SFR_OTP_ST_TIMING_DATA 03E6                                      _i2c1_state 002F  
                ??_TMR0_DefaultInterruptHandler 000B                       ??_hxSPPCarbonProgram_test 006B  
                           __size_of_ASLB_cnfg0 0002                             __size_of_ASLB_cnfg1 0002  
                                  ?_hxStopTimer 0001                  __size_of_OSCILLATOR_Initialize 0018  
                     I2C1_MasterTRBInsert@count 0065                   __end_of_OSCILLATOR_Initialize 3F7E  
                                         l10313 1A4C                                           l10075 38A6  
                                         l11035 116C                                           l11133 129C  
                                         l10149 260A                                           l11081 11F8  
                                         l10267 19C0                                           l10195 2696  
                                         l11351 0FFA                                           l10359 1AD0  
                     I2C1_MasterTRBInsert@pflag 0062                                           l10573 33DC  
                                         l10557 34B0                                           l10825 396C  
                                         l10761 24AE                                           l10913 2316  
                                         l10959 23A2                                 __end_of___aldiv 2C38  
                                         ?_main 0001                               __end_of_I2C1_Stop 3A28  
                                 __CFG_WDTE$OFF 000000                    write_ASLBoron_debug@run_cnfg 00C8  
                                __CFG_DEBUG$OFF 000000                                           i2l220 3D76  
                                         i2l140 2AC8                                           i2l141 2ABA  
                                         i2l150 2B4C                                           i2l151 2B62  
                                         i2l144 2ADC                                           i2l225 3E82  
                                         i2l161 1FE2                                           i2l226 3E6C  
                                         i2l170 20A0                                           i2l162 1FEE  
                                         i2l146 2B3C                                           i2l219 3D8C  
                                         i2l163 1FF6                                           i2l155 1FC0  
                                         i2l147 2B1A                                           i2l172 20AC  
                                         i2l164 2006                                           i2l181 3388  
                                         i2l157 20F2                                           i2l165 2016  
                                         i2l182 3360                                           i2l174 211E  
                                         i2l158 20B8                                           i2l166 2056  
                                         i2l175 2130                                           i2l167 208C  
                                         i2l159 1FD6                                           i2l168 2064  
                                         i2l198 3A40                    write_ASLBoron_debug@run_test 00CB  
                            _ASLB_MuxReadingVDD 3D9A                                           _OSCEN 000EDC  
                                         _TMR0H 000FD4                                           _TMR0L 000FD3  
                                         _PORTA 000F8D                                           _TRISA 000F88  
                                         _TRISB 000F89                                           _TRISC 000F8A  
                                         _TRISD 000F8B                                           _TRISE 000F8C  
        ASLB_VaricapBiasSteering@cmdReadbackPkt 0065                write_ASLBoron_cstm_cnfg@rxBuffer 0064  
             __size_of_TMR0_SetInterruptHandler 000E                    __end_of_I2C1_BusCollisionISR 40EC  
                                 __CFG_WRT0$OFF 000000                                   __CFG_WRT1$OFF 000000  
                                 __CFG_WRT2$OFF 000000                       ?_TMR0_SetInterruptHandler 0060  
                                 __CFG_WRT3$OFF 000000                               ??_I2C1_MasterRead 0070  
                                 __CFG_WRT4$OFF 000000                                   __CFG_WRT5$OFF 000000  
                                 __CFG_WRT6$OFF 000000                                   __CFG_WRT7$OFF 000000  
                          _EUSART1_Transmit_ISR 3CAA                                  __CFG_EBTR0$OFF 000000  
                                __CFG_EBTR1$OFF 000000                                  __CFG_EBTR2$OFF 000000  
                                __CFG_EBTR3$OFF 000000                               ??_I2C1_Initialize 0060  
                                __CFG_EBTR4$OFF 000000                                  __CFG_EBTR5$OFF 000000  
                                __CFG_EBTR6$OFF 000000                                __end_of_TMR0_ISR 3D6C  
                                __CFG_EBTR7$OFF 000000                    ?_ASLB_CurrentLimitDACVoltage 0068  
                                 __CFG_WRTB$OFF 000000                                   __CFG_WRTC$OFF 000000  
                                 __CFG_WRTD$OFF 000000                      __end_of_ASLB_ContinuityESD 40E4  
                               __end_of_readI2C 384C                                  __CFG_EBTRB$OFF 000000  
                        _ASLB_TempSetDACVoltage 3494               __size_of_ASLB_VaricapBiasSteering 0014  
                     ?_ASLB_VaricapBiasSteering 0062                             ?_ASLB_MuxReadingVDD 0062  
                            __CFG_MCLRE$EXTMCLR 000000                          run_SPPCarbon_test@size 0086  
                           _SFR_OTP_MRR_HI_DATA 02E8                                  ?_EUSART1_Write 0001  
          hxSPPCarbonReadReg_test@oddParityCalc 0070                      ??_ASLB_DACReferenceVoltage 0064  
                              ?_hxOddParityCalc 0060                                           pclath 000FFA  
                                         tablat 000FF5                                    _calcBaudRate 3614  
                               __end_of_run_I2C 0DF0                     checkAndSendLatchData@stream 0079  
                        ?_checkAndSendLatchData 0072                                           plusw1 000FE3  
                                         plusw2 000FDB                                ASLB_debug2@zeros 007A  
                           _SFR_OTP_MRR_LO_DATA 02E9                        ?_hxSPPCarbonReadReg_test 0067  
                       _ASLB_InternalTempSensor 3BA8                                           status 000FD8  
                                  _calcChecksum 3D0C                                           wtemp6 0048  
               I2C1_MasterWriteTRBBuild@address 0065                            __size_of_hxISRHandle 00D6  
                          __size_of_ASLB_CTHERM 0028                                 __initialization 3254  
                         I2C1_MasterWrite@pdata 0069                           I2C1_MasterWrite@pflag 006E  
                    __end_of_EUSART1_Initialize 3A9E                                    __end_of_main 3122  
                          ??_ASLB_MuxReadingVDD 0064                                 writeI2C@timeOut 0075  
                        hxISRHandle@rxHxCmdFlag 0033                   hxSPPCarbonWriteReg_test@j_916 006E  
                   ?_INTERRUPT_InterruptManager 0001                         ASLB_CommonGate@rxBuffer 0060  
                                 ?_hxStartTimer 0003                            _SFR_SW_BIT_DATA_DATA 03DD  
                                   _i2c1_object 02DB                                          ??_main 00D9  
                   write_ASLBoron_cnfg@rxBuffer 0062                   hxSPPCarbonWriteReg_test@numTX 0069  
                    __end_of_hxFlushInputBuffer 3EE6                                   __activetblptr 000003  
                    ??_ASLB_HeaterFunctionality 0074                        ??_ASLB_VaricapDACVoltage 0064  
                        hxISRHandle@rxHxPktFlag 0031   ASLB_OscillatorRegulatorVoltage@cmdReadbackPkt 0065  
    ASLB_DigitalRegulatorVoltage@cmdReadbackPkt 0065                         ASLB_CommonGate@rx_index 0062  
      hxSPPCarbonReadReg_test@readbackCommState 0078                            __size_of_ASLB_debug0 0022  
                          __size_of_ASLB_debug1 0180                            __size_of_ASLB_debug2 0036  
                          __size_of_ASLB_debug3 0060                           ?_EUSART1_Transmit_ISR 0001  
                       __size_of_hxSetupPacket1 0050                         __size_of_hxSetupPacket2 006C  
        ASLB_DACReferenceVoltage@cmdReadbackPkt 0065          ASLB_ADCReferenceVoltage@cmdReadbackPkt 0065  
                           ASLB_CTHERM@rxBuffer 0062                     write_ASLBoron_cnfg@run_cnfg 0064  
                         _SFR_SW_100US_LOW_DATA 03E5                         __end_of_TMR0_StartTimer 40E2  
                   _SFR_OTP_DIV_100US_HIGH_DATA 03EA                                setupLatchPkt@pkt 0065  
                     __size_ofi2_TMR0_StopTimer 0004                   ??_ASLB_CurrentLimitDACVoltage 006A  
                                        _ANSELA 000F11                                          _ANSELB 000F19  
                                        _ANSELC 000F21                                          _ANSELD 000F26  
                                        _ANSELE 000F2E                                          _T0CON0 000FD5  
                                        _T0CON1 000FD6                         ??_hxSPPCarbonWrite_test 0074  
                           ASLB_CTHERM@rx_index 0064                               ASLB_debug2@F12373 04F5  
                                        _RC1REG 000F99                                          _RB1PPS 000EF0  
                                        _RC1PPS 000EF8                                          _RC1STA 000F9D  
                                        _RC2PPS 000EF9                 __end_of_hxSPPCarbonProgram_test 2434  
                                        _ODCONA 000F0F                                          _ODCONB 000F17  
                                        _ODCONC 000F1F                                          _ODCOND 000F24  
                                        _ODCONE 000F2C                                          i2l1440 1C5C  
                                __CFG_WDTCCS$SC 000000                                          i2l1442 1C64  
                                        i2l1451 1CD8                                          i2l1443 1C6C  
                                        i2l1436 1DD2                                          i2l1460 1D38  
                                        i2l1444 1C7C                                          i2l1453 1D12  
                                        i2l1437 1C00                                          i2l1470 1D92  
                                        i2l1462 1D5C                                          i2l1446 1C94  
                                        i2l1471 1DB4                                          i2l1463 1D54  
                                        i2l1439 1C4C                                          i2l1472 1DBA  
                                        i2l1448 1C9A                                          i2l1473 1DBE  
                                        i2l1457 1D20                                          i2l1449 1CAA  
                                        i2l1466 1D70                                          i2l1483 3A22  
                                        i2l1475 1DC6                                          i2l1467 1D82  
                                        i2l1459 1D26                                          i2l1469 1D8A  
                                        i2l1750 405C                                          i2l1478 3FC0  
                                        i2l1590 0080                                          i2l1744 3CD6  
                                        i2l1592 0090                                          i2l1745 3CD2  
                                        i2l1594 009C                                          i2l1586 0060  
                                        i2l1588 0070                         __end_of_findMaxI2CSpeed 25A6  
                          __size_of_hxCmdFilter 018C                hxSPPCarbonWriteReg_test@tempByte 006F  
                                        _OSCFRQ 000EDE                                ??_hxHandleTxUART 0064  
              hxSPPCarbonWriteReg_test@txBuffer 0067                                          _NVMDAT 000F80  
                                        _TX1REG 000F9A                                          _TX1STA 000F9E  
                        ?i2_hxFlushOutputBuffer 0001                    __end_of_ASLB_HeaterFBSignals 3922  
                             ?_I2C1_MasterWrite 0069          ASLB_ZTCReferenceCurrent@cmdReadbackPkt 0065  
                                __CFG_PWRTE$OFF 000000                    __end_of_TMR0_Write16bitTimer 407E  
                          __end_of_hxClearArray 3E66                                  __CFG_XINST$OFF 000000  
                  checkAndSendLatchData@adc_pkt 048E                              ??_I2C1_MasterWrite 0070  
              ASLB_AnalogMuxReadingSetup@stream 0202                                  _p_i2c1_current 0024  
                                     ??___aldiv 0068                  ??_ASLB_DigitalRegulatorVoltage 0064  
                                __CFG_STVREN$ON 000000                __end_of_ASLB_ZTCReferenceCurrent 3B40  
                            hxSetupPacket1@data 0006                                  ??_hxStartTimer 0005  
                              _hxHandleTmr0$364 0009                        __end_of_ASLB_CFCVVaricap 40B0  
                    ??_I2C1_MasterWriteTRBBuild 0067                    checkAndSendLatchData@noError 00C1  
                                        _memcpy 3894                                ?_TMR0_Initialize 0001  
                                     ?_I2C1_ISR 0001                                          clear_0 328C  
                                        clear_1 3298                                          clear_2 32A4  
                                        clear_3 32B0                                          clear_4 32BC  
                                        clear_5 32C8                                          clear_6 32D4  
                          __end_of_hxHandleTmr0 3A64                                  _resetLATCHData 29B8  
                               _setCurrLimitDAC 3122                __end_of_ASLB_ADCReferenceVoltage 3DEE  
                i2TMR0_Write16bitTimer@timerVal 0001                         ?i2_TMR0_Write16bitTimer 0001  
                           run_ASLBoron@rpt_run 01ED                         _SFR_SW_BIT_DATA_ST_DATA 03DC  
                   filterLatchPacketResponses@i 006A                __size_of_I2C1_MasterReadTRBBuild 0052  
                                     ??_readI2C 0075                        _write_ASLBoron_cstm_cnfg 40E4  
                               _cycleBoronPower 3F4E                                    __pdataCOMRAM 0046  
                __size_of_ASLB_PierceOscillator 0008                   __end_of_ASLB_PierceOscillator 4098  
                           _ASLB_MuxOpenCircuit 3B74                                  _setTempCtrlDAC 3DEE  
                             ASLB_debug1@stream 0076                   __size_of_write_ASLBoron_debug 014A  
                                        tblptrh 000FF7                                          tblptrl 000FF6  
                                        tblptru 000FF8                                       ??_run_I2C 007B  
                               ??_EUSART1_Write 0060                  __size_of_hxFlushMainDataBuffer 0018  
                             _SFR_OCXO_DIV_DATA 02F0        TMR0_SetInterruptHandler@InterruptHandler 0060  
                                     ?_ASLB_ADC 0060                   __end_of_hxFlushMainDataBuffer 3FAE  
                 I2C1_MasterWriteTRBBuild@pdata 0062                                __end_of_streamSW 40D2  
                                  ??_ASLB_cnfg0 0062                       ??_ASLB_InternalTempSensor 0064  
                                  ??_ASLB_cnfg1 0062             checkAndSendLatchData@latchSendCount 00C3  
                              __end_of_writeI2C 35B8      checkAndSendLatchData@readback_heat_dac_pkt 0747  
                 __size_of_INTERRUPT_Initialize 0004                    ??_filterLatchPacketResponses 0067  
                               _eusart1TxBuffer 0B00         filterLatchPacketResponses@possibleError 006C  
       hxSPPCarbonWriteAndVerity_test@tempValue 0083                               _SYSTEM_Initialize 3F1A  
                               hxCalcChecksum@i 0004                                      __accesstop 0060  
                       __end_of__initialization 32DA                     __end_of_setupCmdReadbackPkt 3C78  
                  ASLB_HeaterFBSignals@rxBuffer 0062                              ?_SYSTEM_Initialize 0001  
                         findMaxI2CSpeed@stream 0202                               _hx_rxOverflowFlag 02FF  
                                 ___rparam_used 000001                             _hxFlushOutputBuffer 3F7E  
                          ?_ASLB_MuxOpenCircuit 0062                                  _i2c1_trb_count 002E  
                                __pcstackBANK10 0A00                                  __pcstackBANK12 0C00  
                            _LATCH_ADC_MUX_DATA 06F3                     __end_of_write_ASLBoron_cnfg 3494  
         __end_of_ASLB_ExternalReferenceVoltage 3F1A          __size_of_ASLB_ExternalReferenceVoltage 001A  
                 _ASLB_ExternalReferenceVoltage 3F00                    ASLB_HeaterFBSignals@rx_index 0064  
                   __end_of_write_ASLBoron_test 1108                           _I2C1_FunctionComplete 3FAE  
                          _I2C1_BusCollisionISR 40EA                           hxOddParityCalc@parity 0065  
                              readI2C@slaveAddr 0073                                  __pcstackCOMRAM 0001  
          __size_of_ASLB_CurrentLimitDACVoltage 006A              ASLB_HeaterFBSignals@cmdReadbackPkt 0065  
                               streamI2C@pktArr 0069                          I2C1_MasterWrite@length 006B  
                                  __pidataBANK5 40CA                             ??_SYSTEM_Initialize 0065  
                                     ?_TMR0_ISR 0001                          __end_of_resetLATCHData 2A94  
                               streamI2C@status 01A0                                  streamSW@pktArr 0060  
                             _setCommSingleWire 40B8                        __size_of_ASLB_RDResistor 0008  
                __end_ofi2_TMR0_Write16bitTimer 4088                                      ??_I2C1_ISR 0004  
               filterLatchPacketResponses@count 0066                              ?_setCommSingleWire 0001  
                            __end_of_ASLB_cnfg0 40EA                              __end_of_ASLB_cnfg1 40E8  
                I2C1_MasterReadTRBBuild@address 0065                        ?i2_hxFlushMainDataBuffer 0001  
                        _SFR_SW_100US_HIGH_DATA 03E4                   __size_of_ASLB_SheetResistance 0094  
        __end_of_hxSPPCarbonWriteAndVerity_test 2D02         __size_of_hxSPPCarbonWriteAndVerity_test 00CA  
                _hxSPPCarbonWriteAndVerity_test 2C38                          __end_of_setTempCtrlDAC 3E16  
                        ??_EUSART1_Transmit_ISR 0001                            __size_of_hxStopTimer 0014  
                          ?_hxFlushOutputBuffer 0001             __size_of_filterLatchPacketResponses 015E  
               __size_of_ASLB_VaricapDACVoltage 0034        ASLB_AnalogMuxReadingSetup@cmdReadbackPkt 0206  
                   __end_of_EUSART1_Receive_ISR 4064                                _SFR_CLK_SEL_DATA 02EF  
                           ??_setCommSingleWire 0060                                 hxHandleTxUART@i 0067  
                      _hxSPPCarbonWriteReg_test 25A6                  ASLB_VaricapDACVoltage@rxBuffer 0062  
                              ?_TMR0_StartTimer 0001                                      ??_ASLB_ADC 0062  
                     __end_of_SYSTEM_Initialize 3F34                 hxSPPCarbonCheckBusy_test@bitVal 0077  
                      ?_ASLB_ColpittsOscillator 0060                                   _eusart1RxHead 03D9  
                                 _eusart1TxHead 002B                                   _eusart1RxTail 03D8  
                                    __pbssBANK2 02DB                                      __pbssBANK3 03D5  
                                    __pbssBANK4 04D5                                      __pbssBANK5 05D5  
                                    __pbssBANK6 06D5                                   _eusart1TxTail 002A  
                       _LATCH_CLOCK_SELECT_DATA 05D5                                ?_findMaxI2CSpeed 0075  
                ASLB_VaricapDACVoltage@rx_index 0064                      _SFR_OTP_DIV_100US_LOW_DATA 03E9  
                                    __pnvCOMRAM 0043                 hxSPPCarbonReadReg_test@rxBuffer 006A  
                        __size_ofi2_hxStopTimer 0012                 hxSPPCarbonReadReg_test@tempByte 0079  
               hxSPPCarbonReadReg_test@txBuffer 0068                           ??_ASLB_MuxOpenCircuit 0064  
               hxSPPCarbonReadReg_test@portAVal 006C                     ??_hxSPPCarbonCheckBusy_test 006C  
                   write_ASLBoron_test@rxBuffer 00C9                      ASLB_MuxReadingVDD@rxBuffer 0062  
                         ?_I2C1_BusCollisionISR 0001                                  _SSP1DATPPSbits 000EB8  
                            i2hxClearArray@size 0003               ASLB_MuxOpenCircuit@cmdReadbackPkt 0065  
                       __end_of_setCurrLimitDAC 31C0                       __end_of_setCommSingleWire 40BE  
              __end_of_TMR0_SetInterruptHandler 4072                         __size_of_TMR0_StopTimer 0004  
                                    ??_TMR0_ISR 000B                                 __CFG_PPS1WAY$ON 000000  
                       __end_of_cycleBoronPower 3F66                                 _I2C1_MasterRead 3710  
                               ?_resetLATCHData 0001                               _run_ASLBoron$1381 01E9  
                             _run_ASLBoron$1382 01EB                      ASLB_MuxReadingVDD@rx_index 0064  
                               _I2C1_Initialize 3C78                         __size_of_hxCalcChecksum 002E  
                   write_ASLBoron_test@run_test 00CE                __end_of_ASLB_VaricapBiasSteering 401C  
                                       ?_memcpy 0060                                   ?_resetSFRData 0001  
                               run_I2C@debugArr 0200                                  _SSP1CLKPPSbits 000EB7  
                               run_I2C@checksum 0206                        _ASLB_ZTCReferenceCurrent 3B0C  
                         ??_hxFlushOutputBuffer 0064                                 ?_setTempCtrlDAC 0060  
                          _ASLB_HeaterFBSignals 38DC                                         i2l11971 1C4C  
                       ?_ASLB_TempSetDACVoltage 0062                                  _hxSetupPacket1 37B0  
                                _hxSetupPacket2 3354                                         _SP1BRGH 000F9C  
                                       _SP1BRGL 000F9B                   __size_of_hxSPPCarbonRead_test 0048  
                                       _OSCCON1 000ED8                                         _OSCCON3 000EDA  
                      _ASLB_ADCReferenceVoltage 3DC4                                       _I2C1_Stop 39EA  
                          _TMR0_Write16bitTimer 4072                                         _NVMADRH 000F7F  
                                       _NVMADRL 000F7E                                         _OSCTUNE 000EDD  
                                       _NVMCON2 000F82                        __size_of_streamBoronComm 0030  
                                       _SSP1ADD 000F93                                         _PPSLOCK 000EA0  
                                       _SSP1BUF 000F92                         ??_checkAndSendLatchData 0076  
              ASLB_ADCReferenceVoltage@rxBuffer 0062                                i2_TMR0_StopTimer 40DA  
                                    _boronRxPkt 04D5                                      _boronTxPkt 04E5  
                  hxSPPCarbonProgram_test@j_925 006F                     __size_of_run_SPPCarbon_test 02A0  
                    write_ASLBoron_test@run_rpt 00C7                              __size_of_streamI2C 0192  
                 __size_ofi2_hxFlushInputBuffer 001A                            __end_of_hxStartTimer 4054  
                         __size_of_hxClearArray 0028                   I2C1_MasterTRBInsert@ptrb_list 0060  
       ASLB_AnalogMuxReadingSetup@stream_status 0201                    hxSPPCarbonProgram_test@numTX 006B  
                            hxISRHandle@pktSize 0032                ASLB_ADCReferenceVoltage@rx_index 0064  
                        _ASLB_VaricapDACVoltage 3B40                        __size_of_ASLB_CommonGate 0008  
                          run_ASLBoron@checksum 01EF                                    writeI2C@size 0072  
              hxSPPCarbonWrite_test@returnValue 0075                           __end_of_HX_Initialize 3FDC  
                        ?_I2C1_FunctionComplete 0001                              _ASLB_ContinuityESD 40E2  
                                       __Hparam 0000                   __size_of_I2C1_MasterTRBInsert 00A4  
                          run_ASLBoron@cnfg_arr 0C00                            run_ASLBoron@cnfg_cnt 01F4  
                          run_ASLBoron@cnfg_run 01F2                                         __Lparam 0000  
                               run_I2C@rx_index 0210                  streamBoronComm@boron_comm_type 0071  
                    __CFG_RSTOSC$HFINTOSC_64MHZ 000000                              _p_i2c1_trb_current 0026  
                         __size_of_hxHandleTmr0 003C                           __end_of_setupLatchPkt 2F34  
                                       ___aldiv 2B6A                                   readI2C@rxData 0070  
               __end_ofi2_hxFlushMainDataBuffer 3FF2                        setTempCtrlDAC@value12bit 0060  
                             run_I2C@data_index 0211                             ?_ASLB_ContinuityESD 0060  
                                ??_resetSFRData 0060                                   readI2C@status 0077  
              __size_of_hxSPPCarbonReadReg_test 0270                  ?_ASLB_ExternalReferenceVoltage 0062  
                              findMaxI2CSpeed@i 0209                                       ?_streamSW 0060  
                                       __pcinit 3254                                 _LATCH_BIAS_DATA 05E1  
                               __size_of_memcpy 0048                                 i2hxClearArray@i 0004  
                                     ?_writeI2C 0070                                         __ramtop 0F00  
                       _I2C1_MasterReadTRBBuild 36BE                            run_ASLBoron@mode_run 01F5  
                                       __ptext0 3082                                         __ptext1 16B8  
                                       __ptext2 3A9E                                         __ptext3 2C38  
                                       __ptext4 25A6                                         __ptext5 384C  
                                       __ptext6 1958                                         __ptext7 22B6  
                                       __ptext8 1108                                         __ptext9 366C  
                __end_of_ASLB_TempSetDACVoltage 34F8                          __end_of_hxSetupPacket1 3800  
                        __end_of_hxSetupPacket2 33C0                                   i2_hxStopTimer 4030  
          hxSPPCarbonReadReg_test@readbackTimer 006E            ASLB_TempSetDACVoltage@cmdReadbackPkt 0065  
                         ?_ASLB_HeaterFBSignals 0062                                         _readI2C 3800  
                         _OSCILLATOR_Initialize 3F66                       _hxSPPCarbonCheckBusy_test 1108  
                  I2C1_MasterReadTRBBuild@pdata 0062                            I2C1_MasterRead@pdata 0069  
                          I2C1_MasterRead@pflag 006E                                      _hx_outData 0B80  
                             ??_ASLB_RDResistor 0062                 __end_of_ASLB_ColpittsOscillator 40A8  
                              ___aldiv@dividend 0060                           ?_TMR0_Write16bitTimer 0060  
                            _EUSART1_Initialize 3A64                        ??_PIN_MANAGER_Initialize 0060  
                                  _hxClearArray 3E3E                                      ?_I2C1_Stop 0001  
                                       _run_I2C 09F4                            run_ASLBoron@test_run 01F1  
                                    _setCommI2C 40BE              __end_of_filterLatchPacketResponses 286E  
                    _filterLatchPacketResponses 2710                      __size_of_SYSTEM_Initialize 001A  
                          I2C1_ISR@pi2c_buf_ptr 03D5                         ??i2_hxFlushOutputBuffer 0005  
             hxSPPCarbonCheckBusy_test@rxBuffer 006A                                 _LATCH_CMOS_DATA 05DD  
                          ??_ASLB_ContinuityESD 0062                            end_of_initialization 32DA  
             hxSPPCarbonCheckBusy_test@tempByte 007A                         __size_ofi2_hxClearArray 0026  
             hxSPPCarbonCheckBusy_test@txBuffer 0068                             ?_EUSART1_Initialize 0001  
                            _hxFlushInputBuffer 3ECA               hxSPPCarbonCheckBusy_test@portAVal 0078  
                            ASLB_debug1@ramData 0074                   hxISRHandle@currentByteCounter 0035  
                       ASLB_RDResistor@rxBuffer 0060                                   ?_run_ASLBoron 00D3  
                                       memcpy@d 0067                                         memcpy@n 0064  
                                       memcpy@s 0069                  __size_of_hxSPPCarbonWrite_test 0038  
                                calcBaudRate@bd 0072                   __end_of_hxSPPCarbonWrite_test 3AD6  
                                  _hxHandleTmr0 3A28                                   ??_hxISRHandle 000A  
           hxSPPCarbonWriteReg_test@tempHxState 006A                                   ??_ASLB_CTHERM 0064  
                              _hx_rxFullPktFlag 0039              filterLatchPacketResponses@rxBuffer 0060  
                  ??_ASLB_AnalogMuxReadingSetup 0074                         __end_of_I2C1_MasterRead 3760  
               ASLB_InternalTempSensor@rxBuffer 0062                          ??_I2C1_BusCollisionISR 0001  
   ASLB_ExternalReferenceVoltage@cmdReadbackPkt 0065                         __end_of_I2C1_Initialize 3CAA  
                                   run_I2C@mode 020F                                     run_I2C@size 007A  
                       ASLB_RDResistor@rx_index 0062                             ?_hxFlushInputBuffer 0001  
                      __size_of_hxOddParityCalc 0052                      __size_of_setCommSingleWire 0006  
                              ?_setCurrLimitDAC 0060                        ?_hxSPPCarbonProgram_test 0067  
              ASLB_DACReferenceVoltage@rxBuffer 0062                      ??_write_ASLBoron_cstm_cnfg 0066  
                              ___aldiv@quotient 006A              filterLatchPacketResponses@rx_index 0062  
                                       postdec1 000FE5                                         postdec2 000FDD  
               ASLB_InternalTempSensor@rx_index 0064                                         postinc0 000FEE  
                                       postinc1 000FE6                                         postinc2 000FDE  
                   __size_of_ASLB_MuxReadingVDD 002A                                 _LATCH_OSC0_DATA 05F9  
                               _LATCH_OSC1_DATA 05F5                                 _LATCH_OSC2_DATA 05F1  
                              ?_cycleBoronPower 0001               __size_of_ASLB_DACReferenceVoltage 0034  
                     ?_ASLB_DACReferenceVoltage 0062                            ??_EUSART1_Initialize 0060  
                             __end_of_streamI2C 1FAA                           __CFG_WDTCPS$WDTCPS_31 000000  
                                    ??_streamSW 0063                               ?_ASLB_CFCVVaricap 0060  
                                    ??_writeI2C 0075                ASLB_DACReferenceVoltage@rx_index 0064  
                                ?i2_hxStopTimer 0001                                   ??_ASLB_debug0 0062  
                                 ??_ASLB_debug1 0074                                   ??_ASLB_debug2 007A  
                                 ??_ASLB_debug3 0063                        _TMR0_SetInterruptHandler 4064  
                                     _PORTAbits 000F8D                                       _PORTBbits 000F8E  
                      _SFR_OTP_WR_ADDR_LOW_DATA 02E6                                 ?_hxSetupPacket1 0006  
                               ?_hxSetupPacket2 0001         ASLB_OscillatorRegulatorVoltage@rxBuffer 0062  
                     __size_of_I2C1_MasterWrite 0050                              ??_ASLB_CFCVVaricap 0062  
     checkAndSendLatchData@readback_adc_mux_pkt 0900                               __size_of_I2C1_ISR 0250  
        filterLatchPacketResponses@readbackPkts 0064                       ASLB_debug1@cmdReadbackPkt 0081  
                      _ASLB_VaricapBiasSteering 4008                            ??_hxFlushInputBuffer 0064  
              ASLB_ZTCReferenceCurrent@rxBuffer 0062                          findMaxI2CSpeed@ramData 0206  
                               _LATCH_OVEN_DATA 02E2         ASLB_OscillatorRegulatorVoltage@rx_index 0064  
                             _SFR_ASIC_REV_DATA 02EC                                   ??_hxCmdFilter 0009  
           __size_of_ASLB_AnalogMuxReadingSetup 0070                 ASLB_ColpittsOscillator@rxBuffer 0060  
                           EUSART1_Write@txData 0060                ASLB_ZTCReferenceCurrent@rx_index 0064  
                              __CFG_FEXTOSC$OFF 000000               I2C1_ISR@i2c_10bit_address_restart 002C  
                                ??_run_ASLBoron 00D6                       _SFR_OTP_WR_ADDR_HIGH_DATA 02E7  
                  TMR0_Write16bitTimer@timerVal 0060                               __size_of_ASLB_ADC 0008  
               ASLB_ColpittsOscillator@rx_index 0062                              ASLB_cnfg0@rxBuffer 0060  
                             ??_streamBoronComm 0071               __size_of_ASLB_HeaterFunctionality 00CA  
                     ?_ASLB_HeaterFunctionality 0072                                 hxSetupPacket2@i 0008  
                 hxSPPCarbonReadReg_test@bitVal 0076                                run_ASLBoron@size 00D5  
                  __end_of_write_ASLBoron_debug 29B8                              ASLB_cnfg1@rxBuffer 0060  
                       I2C1_MasterWrite@address 006C                            _timer0ReloadVal16bit 0043  
                                _TMR0_StopTimer 40D2                 hxSPPCarbonRead_test@returnValue 0080  
                           __end_of_hxISRHandle 2B6A                                streamI2C@trBlock 0100  
checkAndSendLatchData@readback_varactor_dac_pkt 078E                             __end_of_ASLB_CTHERM 3E3E  
                     ??_I2C1_MasterReadTRBBuild 0067                    __end_of_INTERRUPT_Initialize 40DA  
         ASLB_ExternalReferenceVoltage@rxBuffer 0062                               ??_ASLB_CommonGate 0062  
                              streamI2C@pktSize 006B                            _SFR_OTP_WR_DATA_DATA 03EB  
                                _hxCalcChecksum 3D6C                         I2C1_MasterWrite@trBlock 03F1  
                                 __pidataCOMRAM 40EC                ASLB_VaricapBiasSteering@rxBuffer 0062  
                               _SFR_ANALOG_DATA 02F7                          ??_ASLB_HeaterFBSignals 0064  
                    ??_hxSPPCarbonWriteReg_test 0069                               __size_of_TMR0_ISR 0030  
                      I2C1_Stop@completion_code 0003                             adjustI2CBaudRate@bd 0060  
                                __end_of_memcpy 38DC                          ?_OSCILLATOR_Initialize 0001  
                               streamSW@pktSize 0062           ASLB_ExternalReferenceVoltage@rx_index 0064  
                      hxSPPCarbonReadReg_test@i 0072                        hxSPPCarbonReadReg_test@j 0071  
                             writeI2C@slaveAddr 0073                          ??_TMR0_Write16bitTimer 0062  
                  ASLB_SheetResistance@rxBuffer 00C4                ASLB_VaricapBiasSteering@rx_index 0064  
                           start_initialization 3254             __end_of_ASLB_CurrentLimitDACVoltage 342A  
                   _ASLB_CurrentLimitDACVoltage 33C0                          run_ASLBoron@data_index 01F6  
                                   ??_I2C1_Stop 0001                           __size_of_hxStartTimer 0012  
                      __size_of_TMR0_Initialize 003E                 __size_of_PIN_MANAGER_Initialize 00BC  
                                writeI2C@txData 0070                             __end_of_ASLB_debug0 3EAE  
                                   ?_setCommI2C 0001                             __end_of_ASLB_debug1 22B6  
                           __end_of_ASLB_debug2 3B0C                             __end_of_ASLB_debug3 3558  
                         _ASLB_PierceOscillator 4090                                  writeI2C@status 0077  
                  ASLB_SheetResistance@rx_index 00C6             ASLB_AnalogMuxReadingSetup@ovenWrPkt 024D  
                          _SFR_SW_STOP_DET_DATA 03DB               __size_of_I2C1_MasterWriteTRBBuild 0046  
                      ASLB_CFCVVaricap@rxBuffer 0060                       ?_I2C1_MasterWriteTRBBuild 0060  
                                _hx_inDataIndex 003E                           __end_of_EUSART1_Write 39AC  
                          __end_of_resetSFRData 2FDE                __size_ofi2_hxFlushMainDataBuffer 0016  
                         _hxFlushMainDataBuffer 3F96                    __end_of_ASLB_SheetResistance 3254  
                           _SFR_SW_DET_BIT_DATA 03DE                                 _eeprom_currAddr 0028  
        ASLB_HeaterFunctionality@cmdReadbackPkt 024D                             __end_of_hxCmdFilter 2136  
                      ASLB_CFCVVaricap@rx_index 0062                          __end_of_TMR0_StopTimer 40D6  
                              ?_I2C1_MasterRead 0069                                ??_resetLATCHData 0060  
                              ?_I2C1_Initialize 0001                                __CFG_LPBOREN$OFF 000000  
                        __end_of_hxCalcChecksum 3D9A                      ??_ASLB_ZTCReferenceCurrent 0064  
                              hxOddParityCalc@i 0063                                hxOddParityCalc@j 0064  
                           _SFR_SW_BIT_INT_DATA 03E1                __size_of_ASLB_ColpittsOscillator 0008  
                  __size_of_setupCmdReadbackPkt 0034             hxSPPCarbonWriteAndVerity_test@numTX 0081  
                      __end_ofi2_TMR0_StopTimer 40DE                         _hxSPPCarbonReadReg_test 1958  
                       __size_of_hxHandleTxUART 005C                               calcBaudRate@bRate 0073  
                              ??_setTempCtrlDAC 0062                                 ??i2_hxStopTimer 0003  
                                   __pdataBANK5 05F9                            hxStartTimer@timerVal 0003  
                    ??_ASLB_ADCReferenceVoltage 0064                   ASLB_PierceOscillator@rxBuffer 0060  
          hxSPPCarbonProgram_test@oddParityCalc 006C                                        ??_memcpy 0066  
                                 ??_hxStopTimer 0062                                    _hxStartTimer 4042  
                  __size_of_write_ASLBoron_cnfg 006A                               ??_hxOddParityCalc 0063  
                ASLB_TempSetDACVoltage@rxBuffer 0062                      hxSPPCarbonCheckBusy_test@i 0073  
                    hxSPPCarbonCheckBusy_test@j 0072                 hxSPPCarbonProgram_test@rxBuffer 0069  
                  __size_of_write_ASLBoron_test 0318                            findMaxI2CSpeed@bRate 0207  
        hxSPPCarbonWriteAndVerity_test@rxBuffer 007C                 hxSPPCarbonProgram_test@tempByte 0070  
                  I2C1_MasterWriteTRBBuild@ptrb 0060                                  _eusart1RxCount 03D7  
               hxSPPCarbonProgram_test@txBuffer 0067                                     __pbssBANK11 0B00  
        hxSPPCarbonWriteAndVerity_test@txBuffer 007A                   ASLB_PierceOscillator@rx_index 0062  
                                   __pbssCOMRAM 0024                        ?_ASLB_InternalTempSensor 0062  
                ASLB_TempSetDACVoltage@rx_index 0064                   __size_of_EUSART1_Transmit_ISR 0032  
                                 __pcstackBANK0 0060                                   __pcstackBANK1 0100  
                                 __pcstackBANK2 0200                                   __pcstackBANK3 0300  
                                 __pcstackBANK4 0400                                   __pcstackBANK5 0500  
                                 __pcstackBANK6 0600                                   __pcstackBANK7 0700  
                                 __pcstackBANK8 0800                                   __pcstackBANK9 0900  
                       _SFR_SW_STOP_DET_ST_DATA 03DA                                   _i2c1_tr_queue 03F6  
                                 _SFR_BIAS_DATA 02F3                                  i2_hxClearArray 3E66  
                   __end_of_ASLB_MuxOpenCircuit 3BA8                  __size_of_checkAndSendLatchData 0908  
                                 ?_calcBaudRate 006E                         ?_ASLB_VaricapDACVoltage 0062  
                 __end_of_checkAndSendLatchData 09F4              __size_of_hxSPPCarbonCheckBusy_test 02EE  
                hxSPPCarbonCheckBusy_test@i_940 0075                  hxSPPCarbonCheckBusy_test@j_941 0076  
                hxSPPCarbonCheckBusy_test@j_939 0074               checkAndSendLatchData@heat_dac_pkt 0347  
                       ??_I2C1_FunctionComplete 0001                    __size_of_EUSART1_Receive_ISR 0010  
                                 ?_calcChecksum 0060              __end_of_ASLB_AnalogMuxReadingSetup 3354  
                    _ASLB_AnalogMuxReadingSetup 32E4                                   _SFR_HEAT_DATA 02F5  
                                   _hxISRHandle 2A94                           _TMR0_InterruptHandler 03FB  
                hxSPPCarbonCheckBusy_test@numRX 0067                  hxSPPCarbonCheckBusy_test@numTX 006E  
         ASLB_InternalTempSensor@cmdReadbackPkt 0065                                       __pnvBANK3 03FB  
                                   _ASLB_CTHERM 3E16                               _adjustI2CBaudRate 3EAE  
checkAndSendLatchData@readback_ocxo_divisor_pkt 0947                        __size_of_TMR0_StartTimer 0004  
                  __end_of_hxSPPCarbonRead_test 3894                               _LATCH_ANALOG_DATA 05ED  
                               ?_TMR0_StopTimer 0001           checkAndSendLatchData@varactor_dac_pkt 038E  
                        _PIN_MANAGER_Initialize 2DCC                               i2hxClearArray@arr 0001  
              __end_of_write_ASLBoron_cstm_cnfg 40E6                              ?_adjustI2CBaudRate 0001  
                               ?_hxCalcChecksum 0001                        __size_of_findMaxI2CSpeed 0172  
                                     __pintcode 0008                       calcChecksum@temp_checksum 0064  
                            _SFR_SW_ST_DET_DATA 03E3                                        ?___aldiv 0060  
                                     __ptext100 3CAA                                       __ptext101 4054  
                                     __ptext110 40DE                                       __ptext102 2A94  
                                     __ptext111 3354                                       __ptext103 4030  
                                     __ptext112 37B0                                       __ptext104 40DA  
                                     __ptext113 3FF2                                       __ptext105 1FAA  
                                     __ptext114 3E66                                       __ptext106 3FDC  
                                     __ptext115 3D6C                                       __ptext107 3F34  
                                     __ptext116 0000                                       __ptext108 4042  
                                     __ptext109 407E                                 _ASLB_RDResistor 4088  
                           __size_of_setCommI2C 0006                     __end_of_hxFlushOutputBuffer 3F96  
                  __end_ofi2_hxFlushInputBuffer 3F4E                         _LATCH_VARACTOR_DAC_DATA 05E5  
                                      _I2C1_ISR 1BC8                               _SFR_CMOS_OUT_DATA 02F1  
                          __end_of_run_ASLBoron 16B8                             ??_adjustI2CBaudRate 0060  
       __end_of_ASLB_OscillatorRegulatorVoltage 3F00        __size_of_ASLB_OscillatorRegulatorVoltage 001A  
             ??_ASLB_OscillatorRegulatorVoltage 0064                ?_ASLB_OscillatorRegulatorVoltage 0062  
               _ASLB_OscillatorRegulatorVoltage 3EE6                    ??_INTERRUPT_InterruptManager 0012  
                                   _ASLB_debug0 3E8C                                     _ASLB_debug1 2136  
                                   _ASLB_debug2 3AD6                                     _ASLB_debug3 34F8  
                              _I2C1_MasterWrite 3760                        ASLB_debug1@stream_status 0075  
                                      ?_readI2C 0070                                        _BAUD1CON 000F9F  
                             __size_of_streamSW 0004                          setupCmdReadbackPkt@pkt 0060  
                  __end_of_I2C1_MasterTRBInsert 3082                               __size_of_writeI2C 0060  
                                 _SFR_OSC0_DATA 02FA                                   _SFR_OSC1_DATA 02F9  
                                 _SFR_OSC2_DATA 02F8                          ?_ASLB_PierceOscillator 0060  
                           __end_of_hxStopTimer 4030                            _write_ASLBoron_debug 286E  
                        I2C1_MasterRead@address 006C                          __end_ofi2_hxClearArray 3E8C  
                                      ?_run_I2C 0078                                  _LATCH_ADC_DATA 05D9  
                    __end_of_run_SPPCarbon_test 1958                    run_SPPCarbon_test@numRxBytes 0089  
                                     _hx_inData 0B40                                     _hxCmdFilter 1FAA  
                __end_of_ASLB_VaricapDACVoltage 3B74                                        _ASLB_ADC 40B0  
                  run_SPPCarbon_test@numTxBytes 008A                                _hx_mainDataIndex 003F  
               ??_ASLB_ExternalReferenceVoltage 0064                     ?_filterLatchPacketResponses 0060  
                                ??_calcBaudRate 0070          hxSPPCarbonCheckBusy_test@oddParityCalc 0071  
                        ?_hxFlushMainDataBuffer 0001                            _INTERRUPT_Initialize 40D6  
                                     _hx_pktCmd 003B                                  ??_calcChecksum 0063  
                __size_ofi2_hxFlushOutputBuffer 0016                     I2C1_MasterReadTRBBuild@ptrb 0060  
                 __end_ofi2_hxFlushOutputBuffer 4008                                 ___aldiv@divisor 0064  
                        I2C1_MasterRead@trBlock 03EC                       __end_of_adjustI2CBaudRate 3ECA  
                             ??_TMR0_Initialize 0063                __end_of_ASLB_DACReferenceVoltage 3C44  
                               ___aldiv@counter 0068                                        _LATAbits 000F83  
                                      _LATBbits 000F84                                   _SFR_OVEN_DATA 02F6  
                            _SFR_SW_WR_BIT_DATA 03E2               __end_of_hxSPPCarbonCheckBusy_test 13F6  
                    _SFR_OTP_DIV_400US_LOW_DATA 03E7                                        _PIE0bits 000EC2  
                                      _PIE3bits 000EC5                             __CFG_BORV$VBOR_2P45 000000  
         hxSPPCarbonWriteReg_test@oddParityCalc 006B                        ??i2_TMR0_Write16bitTimer 0003  
           __size_of_INTERRUPT_InterruptManager 00E0                       ??_hxSPPCarbonReadReg_test 006C  
                    ??_TMR0_SetInterruptHandler 0063                                        _PIR0bits 000ECA  
                                      _PIR3bits 000ECD                                        _PIR7bits 000ED1  
                                      i2u582_48 3D58           ASLB_HeaterFunctionality@stream_status 0201  
                                  _hx_startMain 0038                              _SFR_SW_WR_BYT_DATA 03E0  
                              ??_hxSetupPacket1 0007                                ??_hxSetupPacket2 0006  
                                      _SSP1CON1 000F96                                        _SSP1CON3 000F98  
                                      _TMR0_ISR 3D3C                      ??_ASLB_VaricapBiasSteering 0064  
                                      _SSP1STAT 000F95                 hxSPPCarbonWriteAndVerity_test@i 0082  
                   hxCalcChecksum@temp_checksum 0005                                 _hx_outDataIndex 0040  
              __end_of_hxSPPCarbonWriteReg_test 2710                                   calcChecksum@i 0063  
               __end_of_ASLB_InternalTempSensor 3BDC                                run_I2C@hx_inData 0078  
            checkAndSendLatchData@stream_status 0078                            _ASLB_SheetResistance 31C0  
                                     _streamI2C 1E18                           ?_write_ASLBoron_debug 00C8  
              __size_of_hxSPPCarbonProgram_test 017E                __end_of_ASLB_HeaterFunctionality 2DCC  
                               _streamBoronComm 3CDC                          __size_of_HX_Initialize 0016  
                               ?i2_hxClearArray 0001                           __size_of_resetSFRData 00AA  
                      hxISRHandle@rxPktSizeFlag 0034                        setCurrLimitDAC@value7bit 0060  
                  ASLB_CurrentLimitDACVoltage@i 00B2                                       copy_data0 3268  
                         ?_INTERRUPT_Initialize 0001                         i2_hxFlushMainDataBuffer 3FDC  
                        __size_of_setupLatchPkt 00AC                       __size_of_ASLB_CFCVVaricap 0008  
                              run_I2C@slaveAddr 0202                     __size_of_ASLB_ContinuityESD 0002  
            ASLB_AnalogMuxReadingSetup@rxBuffer 0072           checkAndSendLatchData@ocxo_divisor_pkt 058E  
          ASLB_HeaterFunctionality@heatDacWrPkt 0206                            ASLB_debug1@ramAddrHi 007E  
                               _hx_txPacketFlag 0046                            ASLB_debug1@ramAddrLo 007F  
                               _ASLB_CommonGate 4098                         __end_of_ASLB_RDResistor 4090  
                         _hxSPPCarbonWrite_test 3A9E              ASLB_AnalogMuxReadingSetup@rx_index 0200  
     hxSPPCarbonWriteAndVerity_test@returnValue 0080                     ASLB_MuxOpenCircuit@rxBuffer 0062  
                                      __Hrparam 0000                      __end_of_ASLB_MuxReadingVDD 3DC4  
                       _ASLB_ColpittsOscillator 40A0                                       memcpy@tmp 0066  
                 __size_of_I2C1_BusCollisionISR 0002                                        __Lrparam 0000  
                            __CFG_BOREN$SBORDIS 000000                          I2C1_ISR@i2c_bytes_left 002D  
                                _hxHandleTxUART 35B8                         ??_OSCILLATOR_Initialize 0060  
                   ASLB_MuxOpenCircuit@rx_index 0064                               ??_TMR0_StartTimer 0001  
                              __size_of___aldiv 00CE                     __size_of_EUSART1_Initialize 003A  
                                readI2C@numOfRx 0072                             hxOddParityCalc@buff 0060  
                                   _hxStopTimer 401C                                    _resetSFRData 2F34  
                           hxOddParityCalc@temp 0066                             hxOddParityCalc@size 0062  
                                readI2C@timeOut 0075                __end_of_I2C1_MasterWriteTRBBuild 3968  
                         ?_ASLB_SheetResistance 00C4                               ??_findMaxI2CSpeed 0077  
                                    streamI2C@i 01A1                                     _hx_debugVar 0037  
                      __size_of_setCurrLimitDAC 009E                                     _hx_checksum 003D  
                                 run_I2C@i_2001 0204                                   run_I2C@i_2002 0205  
                                    ?_streamI2C 0069                                __size_of_readI2C 004C  
                                    _T0CON0bits 000FD5             ASLB_CurrentLimitDACVoltage@rxBuffer 0068  
                         run_ASLBoron@hx_inData 00D3                 __end_of_hxSPPCarbonReadReg_test 1BC8  
                      __size_of_cycleBoronPower 0018                     __size_of_hxFlushInputBuffer 001C  
                          _hxSPPCarbonRead_test 384C               __size_of_write_ASLBoron_cstm_cnfg 0002  
                                   _hx_mainData 0BC0                                    ??_setCommI2C 0060  
                        streamBoronComm@pktSize 0070                             I2C1_ISR@i2c_address 0041  
                     ?_write_ASLBoron_cstm_cnfg 0060                                        __ptext10 09F4  
                                      __ptext11 3800                                        __ptext20 31C0  
                                      __ptext12 3710                                        __ptext21 00EC  
                                      __ptext13 13F6                                        __ptext30 38DC  
                                      __ptext22 2710                                        __ptext14 0DF0  
                                      __ptext31 3F00                                        __ptext23 4088  
                                      __ptext15 3B0C                                        __ptext40 40A8  
                                      __ptext32 3BDC                                        __ptext24 4090  
                                      __ptext16 3B40                                        __ptext41 32E4  
                                      __ptext33 3C10                                        __ptext25 3EE6  
                                      __ptext17 4008                                        __ptext50 29B8  
                                      __ptext42 2E88                                        __ptext34 33C0  
                                      __ptext26 3D9A                                        __ptext18 3494  
                                      __ptext51 2434                                        __ptext43 3DC4  
                                      __ptext35 3122                                        __ptext27 3B74  
                                      __ptext19 3DEE                                        __ptext60 2136  
                                      __ptext52 3614                                        __ptext44 3C44  
                                      __ptext36 40E2                                        __ptext28 3BA8  
                                      __ptext61 3CDC                                        __ptext53 2B6A  
                                      __ptext45 40B0                                        __ptext37 4098  
                                      __ptext29 2D02                                        __ptext70 40E4  
                                      __ptext62 40CE                                        __ptext54 3F4E  
                                      __ptext46 286E                                        __ptext38 40A0  
                                      __ptext71 342A                                        __ptext63 1E18  
                                      __ptext55 34F8                                        __ptext47 40B8  
                                      __ptext39 3E16                                        __ptext80 39AC  
                                      __ptext72 40E6                                        __ptext64 3922  
                                      __ptext56 3EAE                                        __ptext48 40BE  
                                      __ptext81 4064                                        __ptext73 40E8  
                                      __ptext65 2FDE                                        __ptext57 3AD6  
                                      __ptext49 2F34                                        __ptext90 3ECA  
                                      __ptext82 2DCC                                        __ptext74 35B8  
                                      __ptext66 36BE                                        __ptext58 3558  
                                      __ptext91 3E3E                                        __ptext83 3F66  
                                      __ptext75 401C                                        __ptext67 3894  
                                      __ptext59 3760                                        __ptext84 40D6  
                                      __ptext76 4072                                        __ptext68 3D0C  
                                      __ptext93 3D3C                                        __ptext85 3C78  
                                      __ptext77 40D2                                        __ptext69 3E8C  
                                      __ptext94 40C4                                        __ptext86 3A64  
                                      __ptext78 3968                                        __ptext95 3A28  
                                      __ptext87 3FC6                                        __ptext79 3F1A  
                                      __ptext96 1BC8                                        __ptext88 3F7E  
                                      __ptext97 39EA                                        __ptext89 3F96  
                                      __ptext98 3FAE                                        __ptext99 40EA  
                           _setupCmdReadbackPkt 3C44                                    _SSP1CON1bits 000F96  
                                  _SSP1CON2bits 000F97                                __size_of_run_I2C 03FC  
                          hxSetupPacket1@pc_cmd 0008             ASLB_CurrentLimitDACVoltage@rx_index 006A  
                          hxSetupPacket2@pc_cmd 0007                                      _ASLB_cnfg0 40E8  
                                    _ASLB_cnfg1 40E6                            i2_hxFlushInputBuffer 3F34  
                           _write_ASLBoron_cnfg 342A                      __size_of_adjustI2CBaudRate 001C  
                                  _SFR_EXT_DATA 02F2                                   run_I2C@stream 0208  
                ASLB_HeaterFunctionality@stream 0202                             _write_ASLBoron_test 0DF0  
                                      _hx_abort 0036                                        _hx_pcCmd 003C  
                                 __size_of_main 00A0                   I2C1_MasterReadTRBBuild@length 0064  
                         I2C1_MasterRead@length 006B                                     _hx_pktState 003A  
                                      _hx_state 0045            __end_of_TMR0_DefaultInterruptHandler 40CA  
         __size_of_TMR0_DefaultInterruptHandler 0006                    _TMR0_DefaultInterruptHandler 40C4  
                          __CFG_WDTCWS$WDTCWS_7 000000                                 _hxOddParityCalc 366C  
                                  _SFR_VAR_DATA 02F4                            _I2C1_MasterTRBInsert 2FDE  
                        __end_of_hxHandleTxUART 3614                                   _HX_Initialize 3FC6  
                                    _RC1STAbits 000F9D                        _ASLB_DACReferenceVoltage 3C10  
               __size_ofi2_TMR0_Write16bitTimer 000A                    hxSPPCarbonRead_test@rxBuffer 007D  
                         __size_of_run_ASLBoron 02C2                            ?_setupCmdReadbackPkt 0060  
                  hxSPPCarbonRead_test@txBuffer 007B                        ??_ASLB_TempSetDACVoltage 0064  
                                      int$flags 0047                             _SFR_SW_BYT_INT_DATA 03DF  
                                 _setupLatchPkt 2E88                               ?i2_TMR0_StopTimer 0001  
                          ASLB_debug2@wr_status 0085                              __end_of_setCommI2C 40C4  
            __end_of_INTERRUPT_InterruptManager 00E8                      _INTERRUPT_InterruptManager 0008  
                          __end_of_calcBaudRate 366C                                        _streamSW 40CE  
                       __end_of_streamBoronComm 3D0C                            ?_write_ASLBoron_cnfg 0062  
                     ASLB_CTHERM@cmdReadbackPkt 0065                                        _writeI2C 3558  
                          ?_write_ASLBoron_test 00C7       ASLB_CurrentLimitDACVoltage@cmdReadbackPkt 006B  
                           _EUSART1_Receive_ISR 4054                            __end_of_calcChecksum 3D3C  
                              _SFR_OTP_MPP_DATA 02EA                              ??i2_TMR0_StopTimer 0001  
checkAndSendLatchData@readback_clock_select_pkt 098E                     PIN_MANAGER_Initialize@state 0060  
                           ASLB_debug3@dataByte 0063                   __size_of_ASLB_HeaterFBSignals 0046  
                        ??_write_ASLBoron_debug 00CB                                      _INTCONbits 000FF2  
                         ?_hxSPPCarbonRead_test 007A                             ASLB_debug1@ramRdPkt 0200  
                                   _NVMCON1bits 000F81                checkAndSendLatchData@adc_mux_pkt 0547  
                                      memcpy@d1 0060                                        memcpy@s1 0062  
                     ??i2_hxFlushMainDataBuffer 0005                   __size_of_TMR0_Write16bitTimer 000C  
                           ASLB_debug1@ramWrPkt 0247                             ASLB_debug0@rxBuffer 0060  
          ASLB_DigitalRegulatorVoltage@rxBuffer 0062                          ??_INTERRUPT_Initialize 0060  
                       __end_of_ASLB_CommonGate 40A0                             ASLB_debug1@rxBuffer 0072  
                         ?i2_hxFlushInputBuffer 0001                       run_ASLBoron@calc_checksum 01F0  
          ASLB_VaricapDACVoltage@cmdReadbackPkt 0065                        _ASLB_HeaterFunctionality 2D02  
                                      intlevel2 0000                                ??_TMR0_StopTimer 0060  
                           ASLB_debug0@rx_index 0062               __size_of_hxSPPCarbonWriteReg_test 016A  
          ASLB_DigitalRegulatorVoltage@rx_index 0064                             _LATCH_HEAT_DAC_DATA 05E9  
                     ?_hxSPPCarbonWriteReg_test 0067                                     _SFR_P0_DATA 02FC  
                          ?_EUSART1_Receive_ISR 0001                                     _SFR_P1_DATA 02FB  
                         streamBoronComm@pktArr 006E                             ASLB_debug2@rxBuffer 0078  
                                  _run_ASLBoron 13F6                         ?_PIN_MANAGER_Initialize 0001  
                              ??_hxCalcChecksum 0004                                    ?_hxISRHandle 0001  
                        ?_hxSPPCarbonWrite_test 0070                     ?_ASLB_AnalogMuxReadingSetup 0072  
                      __end_of_I2C1_MasterWrite 37B0                             ASLB_debug1@rx_index 0080  
                     ??_ASLB_ColpittsOscillator 0062                               __CFG_CLKOUTEN$OFF 000000  
                __size_of_I2C1_FunctionComplete 0018                                    run_I2C@numRx 020C  
                                  run_I2C@numTx 020E                                    ?_ASLB_CTHERM 0062  
                                  run_I2C@rxPkt 0213                __size_of_ASLB_InternalTempSensor 0034  
                                  run_I2C@txPkt 025A                   __end_of_I2C1_FunctionComplete 3FC6  
             checkAndSendLatchData@readbackPkts 00A9                                     _PPSLOCKbits 000EA0  
                              ?_ASLB_RDResistor 0060                             ASLB_debug3@rxBuffer 0061  
                         ?_I2C1_MasterTRBInsert 0060                    __end_of_EUSART1_Transmit_ISR 3CDC  
                      ?_I2C1_MasterReadTRBBuild 0060                                  ?_HX_Initialize 0001  
              ASLB_MuxReadingVDD@cmdReadbackPkt 0065                             ASLB_debug2@rx_index 0084  
                               ?_hxHandleTxUART 0001                                        run_I2C@i 020D  
                 ?_TMR0_DefaultInterruptHandler 0001                           ??_setupCmdReadbackPkt 0062  
                                ?_setupLatchPkt 0065                             ASLB_debug3@rx_index 0064  
                                 run_ASLBoron@i 01F3      hxSPPCarbonCheckBusy_test@readbackCommState 0079  
                               _SFR_OTP_MR_DATA 02EB                         _LATCH_OCXO_DIVISOR_DATA 06EF  
                         ??_write_ASLBoron_cnfg 0064                          ??_ASLB_SheetResistance 00C6  
                      __size_of_I2C1_MasterRead 0050              hxSPPCarbonReadReg_test@tempHxState 0077  
                         ??_write_ASLBoron_test 00CB          checkAndSendLatchData@readbackSendCount 00C2  
                      __size_of_I2C1_Initialize 0032                           __end_ofi2_hxStopTimer 4042  
                        __size_of_EUSART1_Write 0044                                    ?_ASLB_debug0 0060  
                                  ?_ASLB_debug1 0072                                    ?_ASLB_debug2 0078  
                                  ?_ASLB_debug3 0061                         ??_ASLB_PierceOscillator 0062  
                                    _RX1PPSbits 000EB5                        hxSPPCarbonProgram_test@i 006E  
                      hxSPPCarbonProgram_test@j 006D                                    hxCmdFilter@i 0009  
                       _hxSPPCarbonProgram_test 22B6                                     ??_streamI2C 006C  
                               _TMR0_Initialize 39AC                    hxSPPCarbonReadReg_test@i_906 0074  
                  hxSPPCarbonReadReg_test@j_905 0073                    hxSPPCarbonReadReg_test@j_907 0075  
                        i2_TMR0_Write16bitTimer 407E                                   ?_hxClearArray 0060  
                      _I2C1_MasterWriteTRBBuild 3922                         ??_hxFlushMainDataBuffer 0064  
             __size_of_ASLB_ZTCReferenceCurrent 0034                                    ___aldiv@sign 0069  
                               _boronRxPktIndex 02FD                       ?_ASLB_ZTCReferenceCurrent 0062  
                                  ?_hxCmdFilter 0001                    hxSPPCarbonReadReg_test@numRX 0067  
                  hxSPPCarbonReadReg_test@numTX 006D                               ??_setCurrLimitDAC 0062  
             ASLB_HeaterFunctionality@ovenWrPkt 0294               __size_of_ASLB_ADCReferenceVoltage 002A  
                                   ?_ASLB_cnfg0 0060                                     ?_ASLB_cnfg1 0060  
                       __end_of_hxOddParityCalc 36BE                                _ASLB_CFCVVaricap 40A8  
                          write_ASLBoron_test@i 00CF                            write_ASLBoron_test@j 00D1  
                     ?_ASLB_ADCReferenceVoltage 0062                         ASLB_TempSetDACVoltage@i 00AC  
                         ??_EUSART1_Receive_ISR 0012                ASLB_HeaterFunctionality@rxBuffer 0072  
                __end_of_PIN_MANAGER_Initialize 2E88                               ??_cycleBoronPower 0060  
                              calcChecksum@data 0060                                hxClearArray@size 0062  
                               _boronTxPktIndex 02FE                                calcChecksum@size 0062  
                                 ?_hxHandleTmr0 0001                                ASLB_ADC@rxBuffer 0060  
                   _SFR_OTP_DIV_400US_HIGH_DATA 03E8            __end_of_ASLB_DigitalRegulatorVoltage 3C10  
         __size_of_ASLB_DigitalRegulatorVoltage 0034                    _ASLB_DigitalRegulatorVoltage 3BDC  
                      findMaxI2CSpeed@ramAddrHi 0200                              __size_of_I2C1_Stop 003E  
                      findMaxI2CSpeed@ramAddrLo 0201                      ASLB_ContinuityESD@rxBuffer 0060  
                         _checkAndSendLatchData 00EC                                 hxClearArray@arr 0060  
              ASLB_HeaterFunctionality@rx_index 0200                ??_hxSPPCarbonWriteAndVerity_test 007E  
               ?_hxSPPCarbonWriteAndVerity_test 007A           checkAndSendLatchData@readback_adc_pkt 088E  
                            _run_SPPCarbon_test 16B8                 checkAndSendLatchData@analog_pkt 028E  
                  __size_of_ASLB_MuxOpenCircuit 0034                   checkAndSendLatchData@bias_pkt 0400  
                              ASLB_ADC@rx_index 0062        checkAndSendLatchData@readback_analog_pkt 068E  
        checkAndSendLatchData@readback_bias_pkt 0800                                   hxClearArray@i 0063  
                       findMaxI2CSpeed@ramWrPkt 0252                              hxCalcChecksum@data 0001  
